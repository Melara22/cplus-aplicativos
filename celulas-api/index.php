<?php

use PHPMailer\PHPMailer\PHPMailer;              
use PHPMailer\PHPMailer\Exception;

use Slim\Http\Request;
use Slim\Http\Response;
use Slim\Http\UploadedFile;

date_default_timezone_set('America/El_Salvador');

require 'vendor/autoload.php';

require 'tcpdf_include.php';

include 'config.php';

$app = new Slim\App(["settings" => $config]);

//Handle Dependencies

$container = $app->getContainer();

$container['db'] = function ($c) { 
   try{
       $db = $c['settings']['db'];
       $options  = array(
          PDO::ATTR_ERRMODE             => PDO::ERRMODE_EXCEPTION,
          PDO::ATTR_DEFAULT_FETCH_MODE  => PDO::FETCH_ASSOC,
       );

       $pdo = new PDO("mysql:host=" . $db['servername'] . ";dbname=" . $db['dbname'], $db['username'], $db['password'],$options);
       $pdo->exec("set names utf8");
       return $pdo;
   }

   catch(\Exception $ex){
       return $ex->getMessage();
   }

};

// $container = $app->getContainer();
$container['upload_directory'] = __DIR__ . '/uploads/user';

$app->options('/{routes:.+}', function ($request, $response, $args) {
    return $response;
});

$app->add(function ($req, $res, $next) {
    $response = $next($req, $res);
    return $response
            ->withHeader('Access-Control-Allow-Origin', '*')
            ->withHeader('Access-Control-Allow-Headers', '*')
            ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
});

// Global variables
$app->host = 'http://celulas.netlify.com';
$app->user_directory = "../uploads-celulas-api/user/";
$app->user_url = "http://toolboxsv.com/dev/uploads-celulas-api/user";

/**************** REGISTER ****************/

$app->post('/send-code', function ($request,$response) {

  try{
   
    $con = $this->db;
    $email = $request->getParam('email');
    $news = $request->getParam('newsletter');

    $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);

    if(empty($email)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: email",
                "status"=>500)));

    } else if (!preg_match("/^[0-1]+$/i", $news)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: newsletter",
                "status"=>500)));
    }

    if ($valid_email) {

      $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE email = :email", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':email' => $email);
      $pre->execute($values);
      $result = $pre->fetch();

      if(empty($result)){

        // $token = openssl_random_pseudo_bytes(30);
        $token = password_hash(microtime(), PASSWORD_BCRYPT);
        $token = substr($token, 7, strlen($token));
        $token = preg_replace("#[^a-z0-9._]#i", "", $token);

        $code = bin2hex(openssl_random_pseudo_bytes(3));

        $final_d = date("Y-m-d H:i:s");  

        $date_g = date("Y-m-d");

        try {

          $mail = new PHPMailer;
          //Enable SMTP debugging. 
          // $mail->SMTPDebug = 3;                               
          //Set PHPMailer to use SMTP.
          $mail->isSMTP();            
          //Set SMTP host name                          
          $mail->Host = "smtp.mailtrap.io";
          //Set this to true if SMTP host requires authentication to send email
          $mail->SMTPAuth = true;                          
          //Provide username and password     
          // $mail->Username = "e20bc8a6bb2312";                 
          // $mail->Password = "a7de74c09e9439";
          $mail->Username = "1c2d44422b38c1";                 
          $mail->Password = "a0d4af94adb609";                           
          //If SMTP requires TLS encryption then set it
          $mail->SMTPSecure = "tls";                           
          //Set TCP port to connect to 
          $mail->Port = 25;                                   

          $mail->CharSet = "UTF-8";
          $mail->From = "dtobar@celulas.com";
          $mail->FromName = "CÃ©lulas";

          $mail->addAddress($email);

          $mail->isHTML(true);

          $mail->Subject = "Signup Registration";
          $mail->Body = "<p>Your token: <strong>$token </strong></p><p>Your code: <strong>$code</strong></p>";
          $mail->AltBody = "Signup Registration";

          // $mail->send();

          if(!$mail->send()) {

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"Message could not be sent.",
                      "Mailer Error:"=>$mail->ErrorInfo,
                      "status"=>422)));
          } else {

              $exe = rand(10000, 99999);

              $pre2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`, `status` , `newsletter`, `review_terms`, `remember_me`, `is_complete`, `created_at`, `updated_at`) VALUES (NULL, NULL, '$token', NULL, NULL, :email, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'1', :exe, '$code', '', '0' , :news , '', '', '0', '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values2 = array(
                ':email' => $email,
                ':news' => $news,
                ':exe' => $exe
                );

              $result2 = $pre2->execute($values2);
              $id = $con->lastInsertId();

              if($result2){
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => array('message' => 'We send a confirmation code to your email', 'id' => $id, 'token' => $token, 'verify_code' => $code )));
              }else{   
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
              }

          }

        } catch (phpmailerException $ex) {
          return $response->withJson(array('error' => array(
                       "message"=> $ex->errorMessage(),
                       "status"=>422)),422);
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Email already exists",
                  "status"=>422)));
      } 

    } else {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"You must enter a valid email address",
                "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/confirm-code', function ($request,$response) {

  try{
   
    $con = $this->db;
    $token = $request->getParam('token');
    $code = $request->getParam('verify_code');

    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: token",
                "status"=>500)));

    } else if(empty($code)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: verify_code",
                "status"=>500)));
    }

      $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE token = :token AND verify_code = :code", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':token' => $token, ':code' => $code);
      $pre->execute($values);
      $result = $pre->fetch();

      if($result){

        $verify = $result['verified_account'];
        $user_id = $result['id'];

        if (!$verify) {


          $pre2 = $con->prepare("UPDATE user SET verified_account = '1'
                           WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':user_id' => $user_id
            );

          $result2 = $pre2->execute($values2);

          if($result2){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Your confirmation code is correct'));
          }else{       
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"The account has already been verified",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Verify that the parameters are correct",
                    "status"=>422)));
      }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/profile-info', function (Request $request, Response $response) {

  try{
   
    $con = $this->db;
    $token = $request->getParam('token');
    $first_name = $request->getParam('first_name');
    $last_name = $request->getParam('last_name');
    $password = $request->getParam('password');
    $picture = $request->getParam('profile_picture');

    $uploadedFiles = $request->getUploadedFiles();

    
    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: token",
                "status"=>500)));

    } else if(empty($first_name)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: first_name",
                "status"=>500)));
    } else if(empty($last_name)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: last_name",
                "status"=>500)));
    } else if(empty($password)){
         return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "message"=>"Missing parameter: password",
                   "status"=>500)));
    }

    $directory = $this->get('upload_directory');


    $pre = $con->prepare("SELECT *
                                 FROM user
                                 WHERE token = :token", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':token' => $token);
    $pre->execute($values);
    $result = $pre->fetch();

    if($result){

        $valid_pass = preg_match("/^.*(?=.{6,}).*$/", $password);
        $user_id = $result['id'];

        $date_g = date("Y-m-d");

        if ($valid_pass) {
          $pre2 = $con->prepare("UPDATE user SET first_name = :first_name,
                                 last_name = :last_name,
                                 password = :password,
                                 verified_account = '1',
                                 status = '1',
                                 member_since = :date_g
                                 WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':first_name' => $first_name,
            ':last_name' => $last_name,
            ':password' => md5($password),
            ':user_id' => $user_id,
            ':date_g' => $date_g
            );

          $result2 = $pre2->execute($values2);


          // if ($uploadedFiles['image']) {
          if ($uploadedFiles) {

            // handle single input with single file upload
            $uploadedFile = $uploadedFiles['image'];

            if ($uploadedFile->getError() === UPLOAD_ERR_OK) {

              $user_dir = "../uploads-celulas-api/user/";
              $filename = moveUploadedFile($user_dir, $uploadedFile);

              $url_p = "http://toolboxsv.com/dev/uploads-celulas-api/user";

              $url_final = $url_p . DIRECTORY_SEPARATOR . $filename;


              $pre3 = $con->prepare("UPDATE user SET profile_picture = :profile
                                     WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values3 = array(
                ':profile' => $url_final,
                ':user_id' => $user_id
                );

              $result3 = $pre3->execute($values3);


            }else{

              return $response->withStatus(422)
                              ->withHeader('Access-Control-Allow-Origin', '*')
                              ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
                              ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Verify the size of your profile image",
                                  "status"=>422)));
            }

          }


          $pre_5 = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :user_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $val_5 = array(':user_id' => $user_id);
          $pre_5->execute($val_5);
          $result_5 = $pre_5->fetch();

          /*if a leader, send cell data*/
          if ($result_5['rol'] == '5') {

            $pre_cell = $con->prepare("SELECT *
                                     FROM groups_cells
                                     WHERE leader = :user_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $val_cell = array(':user_id' => $user_id, ':church_id' => $result_5['church_id']);
            $pre_cell->execute($val_cell);
            $result_cell = $pre_cell->fetch();

            $parent_cell = $result_cell['parent_id'];

            $parent_code = null;

            if ($parent_cell != null) {
              $pre_cell2 = $con->prepare("SELECT *
                                       FROM groups_cells
                                       WHERE id = :parent_cell AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_cell2 = array(':parent_cell' => $parent_cell, ':church_id' => $result_5['church_id']);
              $pre_cell2->execute($val_cell2);
              $result_cell2 = $pre_cell2->fetch();

              $parent_code = $result_cell2['cell_code'];
            }

          }

          if ($result2) {

            $final_res = array('message' => 'Your profile information has been saved successfully',
                               'user_id' => $result_5['id'],
                               'first_name' => $result_5['first_name'],
                               'last_name' => $result_5['last_name'],
                               'profile_picture' => $result_5['profile_picture'],
                               'role' => $result_5['rol'],
                               'church_id' => $result_5['church_id']);

            if ($result_5['rol'] == '5') {

              if ($result_cell) {

                $final_res = array('message' => 'Your profile information has been saved successfully',
                                   'user_id' => $result_5['id'],
                                   'first_name' => $result_5['first_name'],
                                   'last_name' => $result_5['last_name'],
                                   'profile_picture' => $result_5['profile_picture'],
                                   'role' => $result_5['rol'],
                                   'church_id' => $result_5['church_id'],
                                   'cell_id' => $result_cell['id'],
                                   'cell_code' => $result_cell['cell_code'],
                                   'sector_code' => $result_cell['sector_code'],
                                   'zone_code' => $result_cell['zone_code'],
                                   'district_code' => $result_cell['district_code'],
                                   'parent_cell' => $result_cell['parent_id'],
                                   'parent_code' => $parent_code);
              }
              
            }

            return $response->withStatus(200)
                    ->withHeader('Access-Control-Allow-Origin', '*')
                    ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
                                ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => $final_res));
          }else{       
              return $response->withStatus(422)
                      ->withHeader('Access-Control-Allow-Origin', '*')
                      ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
                                  ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Access-Control-Allow-Origin', '*')
                  ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
                              ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Password must contain 6 characters",
                      "status"=>422)));
        }

    }else{
      return $response->withStatus(422)
              ->withHeader('Access-Control-Allow-Origin', '*')
              ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
                          ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS')
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User does not exist",
                  "status"=>422)));
    }


 }catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


function moveUploadedFile($directory, UploadedFile $uploadedFile)
{
    $extension = pathinfo($uploadedFile->getClientFilename(), PATHINFO_EXTENSION);
    $basename = bin2hex(random_bytes(8)); // see http://php.net/manual/en/function.random-bytes.php
    $filename = sprintf('%s.%0.8s', $basename, $extension);

    // $uploadedFile->moveTo($directory . DIRECTORY_SEPARATOR . $filename);
    $uploadedFile->moveTo($directory . DIRECTORY_SEPARATOR . $filename);

    return $filename;
}



$app->post('/church-info', function ($request,$response) {

  try{
   
    $con = $this->db;
    $token = $request->getParam('token');
    $church_name = $request->getParam('church_name');
    $country = $request->getParam('country');
    $state = $request->getParam('state');
    $city = $request->getParam('city');
    $address = $request->getParam('address');
    $latitude = $request->getParam('latitude');
    $longitude = $request->getParam('longitude');
    $phone = $request->getParam('phone');
    // $profile_picture = $request->getParam('profile_picture');

    $uploadedFiles = $request->getUploadedFiles();

    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: token",
                "status"=>500)));

    } else if(empty($church_name)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_name",
                "status"=>500)));
    } else if(empty($country)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: country",
                "status"=>500)));
    } else if(empty($state)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: state",
                "status"=>500)));
    } else if(empty($city)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: city",
                "status"=>500)));
    } else if(empty($address)){
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"Missing parameter: address",
                      "status"=>500)));
    } else if(empty($phone)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: phone",
                "status"=>500)));
    } else if(empty($latitude)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: latitude",
                "status"=>500)));
    } else if(empty($longitude)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: longitude",
                "status"=>500)));
    } else if(empty($longitude)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: longitude",
                "status"=>500)));
    }


      $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE token = :token AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':token' => $token);
      $pre->execute($values);
      $result = $pre->fetch();

      if($result){

          $user_id = $result['id'];

          $pre_c = $con->prepare("SELECT *
                                   FROM churches
                                   WHERE name = :church_name", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $val_c = array(':church_name' => $church_name);
          $pre_c->execute($val_c);
          $result_c = $pre_c->fetch();

          if (empty($result_c)) {

            $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
            $final_d = date("Y-m-d H:i:s"); 

            if ($valid_phone) {


              if ($uploadedFiles['image']) {

                // handle single input with single file upload
                $uploadedFile = $uploadedFiles['image'];

                if ($uploadedFile->getError() === UPLOAD_ERR_OK) {

                  $user_dir = "../uploads-celulas-api/church/";
                  $filename = moveUploadedChurch($user_dir, $uploadedFile);

                  $url_p = "http://toolboxsv.com/dev/uploads-celulas-api/church";

                  $url_final = $url_p . DIRECTORY_SEPARATOR . $filename;

                  $pre2 = $con->prepare("INSERT INTO
                                   churches(`name`,`country`,`state`,`city`,`address`,`latitude`,`longitude`,`phone`,`profile_picture`,`structure`,`label_structure`,`subdomain`,`has_district`,`has_sector`,`has_zone`,`created_at`,`updated_at`) 
                                   VALUES (:church_name,:country,:state,:city,:address,'$latitude','$longitude',:phone,:profile_picture,'','','','','','','$final_d','$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':church_name' => $church_name,
                    ':country' => $country,
                    ':state' => $state,
                    ':city' => $city,
                    ':address' => $address,
                    ':phone' => $phone,
                    ':profile_picture' => $url_final
                    );

                  $result2 = $pre2->execute($values2);

                }else{

                    return $response->withStatus(422)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('error' => array(
                                        "message"=>"Verify the size of your profile image",
                                        "status"=>422)));
                }
                
              }else{

                $pre_e = $con->prepare("INSERT INTO
                                 churches(`name`,`country`,`state`,`city`,`address`,`latitude`,`longitude`,`phone`,`profile_picture`,`structure`,`label_structure`,`subdomain`,`has_district`,`has_sector`,`has_zone`,`created_at`,`updated_at`) 
                                 VALUES (:church_name,:country,:state,:city,:address,'$latitude','$longitude',:phone,NULL,'','','','','','','$final_d','$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_e = array(
                  ':church_name' => $church_name,
                  ':country' => $country,
                  ':state' => $state,
                  ':city' => $city,
                  ':address' => $address,
                  ':phone' => $phone
                  );

                $result_e = $pre_e->execute($values_e);

              }

              $id = $con->lastInsertId();


              $pre3 = $con->prepare("UPDATE user SET church_id = :church_id
                                         WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values3 = array(
                ':church_id' => $id,
                ':user_id' => $user_id
              );

              $result3 = $pre3->execute($values3);


              /*add church_notifications*/

              $pre4 = $con->prepare("INSERT INTO
                               church_notifications(`church_id`,`church_email`,`church_push`,`members_email`,`members_push`,`statistics_email`,`statistics_push`,`news_email`,`news_push`,`language`,`created_at`,`updated_at`) 
                               VALUES (:church_id,'','','','','','','','','','$final_d','$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values4 = array(
                ':church_id' => $id
              );

              $result4 = $pre4->execute($values4);


              $pre_5 = $con->prepare("SELECT *
                                       FROM churches
                                       WHERE id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_5 = array(':church_id' => $id);
              $pre_5->execute($val_5);
              $result_5 = $pre_5->fetch();

              if($result4){

                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => array('message' => 'Your church information has been saved successfully', 'church_id' => $id,'church_name' => $result_5['name'],'country' => $result_5['country'],'state' => $result_5['state'],'city' => $result_5['city'],'address' => $result_5['address'],'latitude' => $result_5['latitude'],'longitude' => $result_5['longitude'],'phone' => $result_5['phone'],'profile_picture' => $result_5['profile_picture'])));
              }else{       
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
              }
            }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Invalid phone number",
                          "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"This church name is already used",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Verify your token and that your account is verified",
                    "status"=>422)));
      }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/update-church-info', function ($request,$response) {

  try{
   
    $con = $this->db;
    $token = $request->getParam('token');
    $church_id = $request->getParam('church_id');
    $church_name = $request->getParam('church_name');
    $country = $request->getParam('country');
    $state = $request->getParam('state');
    $city = $request->getParam('city');
    $address = $request->getParam('address');
    $latitude = $request->getParam('latitude');
    $longitude = $request->getParam('longitude');
    $phone = $request->getParam('phone');
    // $profile_picture = $request->getParam('profile_picture');

    $uploadedFiles = $request->getUploadedFiles();

    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: token",
                "status"=>500)));

    } else if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "status"=>500)));

    }else if(empty($church_name)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_name",
                "status"=>500)));
    } else if(empty($country)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: country",
                "status"=>500)));
    } else if(empty($state)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: state",
                "status"=>500)));
    } else if(empty($city)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(

                "message"=>"Missing parameter: city",
                "status"=>500)));
    } else if(empty($address)){
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"Missing parameter: address",
                      "status"=>500)));
    } else if(empty($phone)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: phone",
                "status"=>500)));
    } else if(empty($latitude)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: latitude",
                "status"=>500)));
    } else if(empty($longitude)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: longitude",
                "status"=>500)));
    } else if(empty($longitude)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: longitude",
                "status"=>500)));
    }

      
      $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE token = :token AND church_id = :church_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':token' => $token,':church_id' => $church_id);
      $pre->execute($values);
      $result = $pre->fetch();

      if($result){

          $pre_church = $con->prepare("SELECT *
                                   FROM churches
                                   WHERE id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $val_church = array(':church_id' => $church_id);
          $pre_church->execute($val_church);
          $result_church = $pre_church->fetch();

          if ($result_church) {

            $user_id = $result['id'];

            $pre_c = $con->prepare("SELECT * FROM churches WHERE id != (SELECT id FROM churches WHERE name = :church_name) AND id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $val_c = array(':church_name' => $church_name,':church_id' => $church_id);
            $pre_c->execute($val_c);
            $result_c = $pre_c->fetch();

            if (empty($result_c)) {

              $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
              $final_d = date("Y-m-d H:i:s"); 

              if ($valid_phone) {

                $pre2 = $con->prepare("UPDATE churches SET name = :church_name,
                                       country = :country,
                                       state = :state,
                                       city = :city,
                                       address = :address,
                                       latitude = $latitude,
                                       longitude = $longitude,
                                       phone = :phone
                                       WHERE id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':church_name' => $church_name,
                  ':church_id' => $church_id,
                  ':country' => $country,
                  ':state' => $state,
                  ':city' => $city,
                  ':address' => $address,
                  ':phone' => $phone
                  );

                $result2 = $pre2->execute($values2);


                if ($uploadedFiles['image']) {

                  // handle single input with single file upload
                  $uploadedFile = $uploadedFiles['image'];

                  if ($uploadedFile->getError() === UPLOAD_ERR_OK) {

                    $user_dir = "../uploads-celulas-api/church/";
                    $filename = moveUploadedChurch($user_dir, $uploadedFile);

                    $url_p = "http://toolboxsv.com/dev/uploads-celulas-api/church";

                    $url_final = $url_p . DIRECTORY_SEPARATOR . $filename;


                    $pre2_e = $con->prepare("UPDATE profile_picture = :profile_picture
                                           WHERE id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_e = array(
                      ':church_id' => $church_id,
                      ':profile_picture' => $url_final
                      );

                    $result_e = $pre2_e->execute($values_e);

                  }else{

                      return $response->withStatus(422)
                                      ->withHeader('Content-Type', 'application/json')
                                      ->withJson(array('error' => array(
                                          "message"=>"Verify the size of your profile image",
                                          "status"=>422)));
                  }
                  

                }


                $pre_5 = $con->prepare("SELECT *
                                         FROM churches
                                         WHERE id = :church_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_5 = array(':church_id' => $church_id);
                $pre_5->execute($val_5);
                $result_5 = $pre_5->fetch();

                if($result2){

                    return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => array('message' => 'Your church information has been saved successfully', 'church_id' => $church_id,'church_name' => $result_5['name'],'country' => $result_5['country'],'state' => $result_5['state'],'city' => $result_5['city'],'address' => $result_5['address'],'latitude' => $result_5['latitude'],'longitude' => $result_5['longitude'],'phone' => $result_5['phone'],'profile_picture' => $result_5['profile_picture'])));
                }else{       
                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                              "message"=>"There was a problem, verify your parameters",
                              "status"=>422)));
                }
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Invalid phone number",
                            "status"=>422)));
              }

            }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"This church name is already used",
                          "status"=>422)));
            }

          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"This church does not exist",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User does not exist",
                    "status"=>422)));
      }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/church-settings', function ($request,$response) {

  try{
   
    $con = $this->db;
    $token = $request->getParam('token');
    $church_id = $request->getParam('church_id');
    $rol = $request->getParam('rol');
    $cell_structure = $request->getParam('cell_structure');
    $label_structure = $request->getParam('label_structure');
    $has_district = $request->getParam('has_district');
    $has_sector = $request->getParam('has_sector');
    $has_zone = $request->getParam('has_zone');
    $subdomain = $request->getParam('subdomain');
    // $profile_picture = $request->getParam('profile_picture');

    $uploadedFiles = $request->getUploadedFiles();

    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: token",
                "status"=>500)));

    } else if(empty($rol)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: rol",
                "status"=>500)));
    } else if(empty($cell_structure)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: cell_structure",
                "status"=>500)));
    } else if(empty($label_structure)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: label_structure",
                "status"=>500)));
    } else if(empty($subdomain)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: subdomain",
                "status"=>500)));
    } else if(!preg_match("/^[0-1]+$/i", $has_district)){
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"Missing parameter: has_district",
                      "status"=>500)));
    } else if(!preg_match("/^[0-1]+$/i", $has_sector)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: has_sector",
                "status"=>500)));
    } else if(!preg_match("/^[0-1]+$/i", $has_zone)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: has_zone",
                "status"=>500)));
    } else if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "status"=>500)));
    }

      
    

      $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE token = :token AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':token' => $token);
      $pre->execute($values);
      $result = $pre->fetch();

      if($result){

            $user_id = $result['id'];
            $valid_subdomain = preg_match("/^[A-Za-z0-9-]+$/", $subdomain); // revisar validacion

            $final_d = date("Y-m-d H:i:s");

          if ($valid_subdomain) {

            $pre_church = $con->prepare("SELECT *
                                     FROM churches
                                     WHERE id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $val_church = array(':church_id' => $church_id);
            $pre_church->execute($val_church);
            $result_church = $pre_church->fetch();

            if ($result_church) {

              $pre_c = $con->prepare("SELECT *
                                       FROM churches WHERE id != (SELECT id FROM churches WHERE subdomain = :subdomain) AND id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_c = array(':subdomain' => $subdomain,':church_id' => $church_id);
              $pre_c->execute($val_c);
              $result_c = $pre_c->fetch();

              if (empty($result_c)) {

                $pre2 = $con->prepare("UPDATE churches SET structure = :structure,
                                       label_structure = :label_structure,
                                       subdomain = :subdomain,
                                       has_district = :has_district,
                                       has_sector = :has_sector,
                                       has_zone = :has_zone
                                       WHERE id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':structure' => $cell_structure,
                  ':label_structure' => $label_structure,
                  ':subdomain' => $subdomain,
                  ':has_district' => $has_district,
                  ':has_sector' => $has_sector,
                  ':has_zone' => $has_zone,
                  ':church_id' => $church_id
                  );

                $result2 = $pre2->execute($values2);


                if ($uploadedFiles['image']) {

                  // handle single input with single file upload
                  $uploadedFile = $uploadedFiles['image'];

                  if ($uploadedFile->getError() === UPLOAD_ERR_OK) {

                    $user_dir = "../uploads-celulas-api/church/";
                    $filename = moveUploadedChurch($user_dir, $uploadedFile);

                    $url_p = "http://toolboxsv.com/dev/uploads-celulas-api/church";

                    $url_final = $url_p . DIRECTORY_SEPARATOR . $filename;

                    $pre_e = $con->prepare("UPDATE churches SET profile_picture = :profile_picture
                                           WHERE id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_e = array(
                      ':profile_picture' => $url_final,
                      ':church_id' => $church_id
                      );

                    $result_e = $pre_e->execute($values_e);

                  }else{
                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"Verify the size of your profile image",
                                "status"=>422)));
                  }

                }


                $pre3 = $con->prepare("UPDATE user SET rol = :rol
                                       WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values3 = array(
                  ':rol' => $rol,
                  ':user_id' => $user_id
                  );

                $result3 = $pre3->execute($values3);


                $pre_5 = $con->prepare("SELECT *
                                         FROM churches
                                         WHERE id = :church_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_5 = array(':church_id' => $church_id);
                $pre_5->execute($val_5);
                $result_5 = $pre_5->fetch();


                if($result2){
                    return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => array('message' => 'Your church settings has been saved successfully', 'church_id' => $result_5['id'],'user_role' => $rol,'structure' => $result_5['structure'],'label_structure' => $result_5['label_structure'],'subdomain' => $result_5['subdomain'],'has_district' => $result_5['has_district'],'has_sector' => $result_5['has_sector'],'has_zone' => $result_5['has_zone'],'profile_picture' => $result_5['profile_picture'])));
                }else{
                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                              "message"=>"There was a problem, verify your parameters",
                              "status"=>422)));
                }
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Subdomain already used",
                            "status"=>422)));
              }

            }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"This church does not exist",
                          "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Subdomain only contain letters, numbers, and dashes",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User does not exist",
                    "status"=>422)));
      }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/church-goals', function ($request,$response) {

  try{
   
    $con = $this->db;
    $goals = $request->getParam('goals');

    // echo $goals[0]['percentage'];
    $err_goal = 0;
    $err_frequency = 0;
    $err_per = 0;
    $err_value = 0;
    $err_church = 0;
    $total = 0;

    for($i = 0; $i < count($goals); $i++) {

      $total += $goals[$i]['percentage'];

      if(empty($goals[$i]['goal'])){
        $err_goal += 1;
      }else if(empty($goals[$i]['frequency'])){
        $err_frequency += 1;
      }else if(is_float($goals[$i]['percentage'])){
        $err_per += 1;
      }else if(!preg_match("/^[0-9]+$/i", $goals[$i]['value'])){
        $err_value += 1;
      }else if(empty($goals[$i]['church_id'])){
        $err_church += 1;
      }

    }

    if($err_goal > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: goal",
                "status"=>500)));

    } else if($err_frequency > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: frequency",
                "status"=>500)));

    } else if($err_per > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: percentage",
                "status"=>500)));

    } else if($err_value > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: value",
                "status"=>500)));

    } else if($err_church > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "status"=>500)));

    }else if($total != '1'){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Total percentage is not equal to 100%",
                "status"=>422)));
    }else{

      $pre2 = $con->prepare("DELETE FROM church_goals WHERE `church_id` = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values2 = array(
        ':church_id' => $goals[1]['church_id']
        );

      $result2 = $pre2->execute($values2);

      $final_d = date("Y-m-d H:i:s"); 
      for($j = 0; $j < count($goals); $j++) {

        $pre3 = $con->prepare("INSERT INTO church_goals (`church_id`, `goal`, `frequency`, `percentage`, `value`,`created_at`, `updated_at`) VALUES (:church_id, :goal,:frequency, :percentage, :value,'$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values3 = array(
          ':church_id' => $goals[$j]['church_id'],
          ':goal' => $goals[$j]['goal'],
          ':frequency' => $goals[$j]['frequency'],
          ':percentage' => $goals[$j]['percentage'],
          ':value' => $goals[$j]['value']
          );

        $result3 = $pre3->execute($values3);

      }

      $final_c = $goals[1]['church_id'];

      $sql = "SELECT goal,frequency,percentage,value,church_id FROM church_goals WHERE church_id = $final_c";
      $result4 = null;

      foreach ($con->query($sql) as $row) {
        $result4[] = $row;
      }

      if($result3){
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Your church goals has been saved successfully', 'goals' => $result4)));
      }else{   
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"There was a problem, verify your parameters",
                    "status"=>422)));
      }

    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/add-admin', function ($request,$response) {

  try{
   
    $con = $this->db;
    $admin = $request->getParam('admin');

    // echo $goals[0]['percentage'];
    $err_name = 0;
    $err_email = 0;
    $err_owner = 0;
    $err_church = 0;
    $err_sel_email = 0;

    for($i = 0; $i < count($admin); $i++) {

      $pre = $con->prepare("SELECT *
                            FROM user
                            WHERE email = :email", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values  = array(':email' => $admin[$i]['email']);
      $pre->execute($values);
      $result = $pre->fetch();

      if(empty($admin[$i]['name'])){
        $err_name += 1;
        $err_id = $i;
        $arr[] = $err_id;
      }else if(!preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $admin[$i]['email'])){
        $err_email += 1;
        $err_id1 = $i;
        $arr1[] = $err_id1;
      }else if(!preg_match("/^[0-1]+$/i", $admin[$i]['owner'])){
        $err_owner += 1;
        $err_id2 = $i;
        $arr2[] = $err_id2;
      }else if(empty($admin[$i]['church_id'])){
        $err_church += 1;
        $err_id3 = $i;
        $arr3[] = $err_id3;
      }else if($result){
        $err_sel_email += 1;
        $err_id4 = $i;
        $arr4[] = $err_id4;
      }

    }

    if($err_name > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: name",
                "err_id"=>$arr,
                "status"=>500)));

    } else if($err_email > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: email",
                "err_id"=>$arr1,
                "status"=>500)));

    } else if($err_owner > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: owner",
                "err_id"=>$arr2,
                "status"=>500)));

    } else if($err_church > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "err_id"=>$arr3,
                "status"=>500)));

    }else if($err_sel_email > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Email already exists",
                "err_id"=>$arr4,
                "status"=>500)));

    } else{

      $err_send_mail = 0;
      $err_mail_f = null;

      $final_d = date("Y-m-d H:i:s");
      $date_g = date("Y-m-d");

      for($j = 0; $j < count($admin); $j++) {

        $token_d = password_hash(microtime(), PASSWORD_BCRYPT);
        $token_d = substr($token_d, 7, strlen($token_d));
        $token_d = preg_replace("#[^a-z0-9._]#i", "", $token_d);

        $code_d = bin2hex(openssl_random_pseudo_bytes(3));

        if ($admin[$j]['owner'] == '1') {
          $role = '6';
        }else if ($admin[$j]['owner'] == '0') {
          $role = '7';
        }else{
          $role = null;
        }

        // $pass = bin2hex(openssl_random_pseudo_bytes(3));
        $final_email = $admin[$j]['email'];

        $mail = new PHPMailer;
        //Enable SMTP debugging. 
        // $mail->SMTPDebug = 3;                               
        //Set PHPMailer to use SMTP.
        $mail->isSMTP();            
        //Set SMTP host name                          
        $mail->Host = "smtp.mailtrap.io";
        //Set this to true if SMTP host requires authentication to send email
        $mail->SMTPAuth = true;                          
        //Provide username and password    
        $mail->Username = "1c2d44422b38c1";                 
        $mail->Password = "a0d4af94adb609";                          
        //If SMTP requires TLS encryption then set it
        $mail->SMTPSecure = "tls";                           
        //Set TCP port to connect to 
        $mail->Port = 25;                                   

        $mail->CharSet = "UTF-8";
        $mail->From = "dtobar@celulas.com";
        $mail->FromName = "CÃ©lulas";

        $mail->addAddress($admin[$j]['email']);

        $mail->isHTML(true);

        $mail->Subject = "Invitation administrators";
        $mail->Body = "<p>You have been invited to be part of C+ iRest as Administrator.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d</a></p>";
        $mail->AltBody = "Invitation administrators";

        // $mail->send();

        if(!$mail->send()) {

          $err_send_mail += 1;

          $err_mail_f[] = $final_email;

        } else {

          /*exelerate_id*/
          $exe = rand(10000, 99999);

          // $pre3 = $con->prepare("INSERT INTO user (`church_id`, `first_name`,`last_name`, `email`,`token`, `phone`, `city`, `password`,`profile_picture`, `owner`,`role`, `state`,`created_at`, `updated_at`) VALUES (:church_id, :name,NULL,:email,'$token_d', NULL, NULL, NULL, NULL, :owner,:role, '1','$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre3 = $con->prepare("INSERT INTO user (`church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`, `status` , `newsletter`, `review_terms`, `remember_me`, `is_complete`, `created_at`, `updated_at`) VALUES (:church_id, '$token_d', :name, NULL, :email, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,:role,'$exe', '$code_d', '0', '0' , '0' , '', '','0', '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values3 = array(
            ':church_id' => $admin[$j]['church_id'],
            ':name' => $admin[$j]['name'],
            ':email' => $admin[$j]['email'],
            ':role' => $role
            );

          $result3 = $pre3->execute($values3);

        }

      }

      if($err_send_mail > 0){
          
        return $response->withStatus(422)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "emails"=>$err_mail_f,
                          "status"=>422)));
      }else{  

      return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => 'The invitation to the respective emails has been sent'));
      }

    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/review-terms', function ($request,$response) {

  try{
   
    $con = $this->db;
    $user_id = $request->getParam('user_id');
    $review_terms = $request->getParam('review_terms');

    if(empty($user_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: user_id",
                "status"=>500)));

    } else if(!preg_match("/^[0-1]+$/i", $review_terms)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: review_terms",
                "status"=>500)));
    }

    $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':user_id' => $user_id);
      $pre->execute($values);
      $result = $pre->fetch();

      if($result){

          $pre2 = $con->prepare("UPDATE user SET review_terms = :review_terms
                                     WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':review_terms' => $review_terms,
            ':user_id' => $user_id
          );

              $result2 = $pre2->execute($values2);

              if($result2){
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => array('message' => 'Review terms has been saved successfully')));
              }else{
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
              }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Verify that the parameters are correct",
                    "status"=>422)));
      }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*** validations ***/

$app->get('/get-countries', function ($request,$response) {

  try{
   
    $list = array('Afghanistan','Albania','Algeria','Andorra','Angola','Antigua and Barbuda','Argentina','Armenia','Australia','Austria','Azerbaijan','Bahamas','Bahrain','Bangladesh','Barbados','Belarus','Belgium','Belize','Benin','Bhutan','Bolivia','Bosnia and Herzegovina','Botswana','Brazil','Brunei','Bulgaria','Burkina Faso','Burundi','Cabo Verde','Cambodia','Cameroon','Canada','Central African Republic','Chad','Chile','China','Colombia','Comoros','Democratic Republic of the Congo','Costa Rica','Croatia','Cuba','Cyprus','Czech Republic','Denmark','Djibouti','Dominica','Dominican Republic','Ecuador','Egypt','El Salvador','Equatorial Guinea','Eritrea','Estonia','Ethiopia','Fiji','Finland','France','Gabon','Gambia','Georgia','Germany','Ghana','Greece','Grenada','Guatemala','Guinea','Guinea -Bissau','Guyana','Haiti','Honduras','Hungary','Iceland','India','Indonesia','Iran','Iraq','Ireland','Israel','Italy','Jamaica','Japan','Jordan','Kazakhstan','Kenya','Kiribati','Kosovo','Kuwait','Kyrgyzstan','Laos','Latvia','Lebanon','Lesotho','Liberia','Libya','Liechtenstein','Lithuania','Luxembourg','Macedonia','Madagascar','Malawi','Malaysia','Maldives','Mali','Malta','Marshall Islands','Mauritania','Mauritius','Mexico','Micronesia','Moldova','Monaco','Mongolia','Montenegro','Morocco','Mozambique','Myanmar','Namibia','Nauru','Nepal','Netherlands','New Zealand','Nicaragua','Niger','Nigeria','North Korea','Norway','Oman','Pakistan','Palau','Palestine','Panama','Papua New Guinea','Paraguay','Peru','Philippines','Poland','Portugal','Qatar','Romania','Russia','Rwanda','Saint Kitts and Nevis','Saint Lucia','Saint Vincent and the Grenadines','Samoa','San Marino','Sao Tome and Principe','Saudi Arabia','Senegal','Serbia','Seychelles','Sierra Leone','Singapore','Slovakia','Slovenia','Solomon Islands','Somalia','South Africa','South Korea','South Sudan','Spain','Sri Lanka','Sudan','Suriname','Sweden','Switzerland','Syria','Taiwan','Tajikistan','Tanzania','Thailand','Togo','Tonga','Trinidad and Tobago','Tunisia','Turkey','Turkmenistan','Tuvalu','Uganda','Ukraine','United Arab Emirates','United Kingdom','United States of America','Uruguay','Uzbekistan','Vanuatu','Venezuela','Vietnam','Yemen','Zambia','Zimbabwe');

    return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => $list));

  }
  catch(\Exception $ex){
     return $response->withJson(array('error' => array(
                  "message"=> $ex->getMessage(),
                  "status"=>422)),422);
  }

});


$app->post('/church-name-validation', function ($request,$response) {

  try{
   
    $con = $this->db;
    $church_name = $request->getParam('church_name');

    if(empty($church_name)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_name",
                "status"=>500)));

    }


    $pre_c = $con->prepare("SELECT * FROM churches WHERE name = :church_name", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_c = array(':church_name' => $church_name);
    $pre_c->execute($val_c);
    $result_c = $pre_c->fetch();

    if (empty($result_c)) {

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Church name verified',"valid"=>'true')));


    }else{
      return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => array(
                        "message"=>"This church name is already used",
                        "valid"=>'false')));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/subdomain-validation', function ($request,$response) {

  try{
   
    $con = $this->db;
    $subdomain = $request->getParam('subdomain');

    if(empty($subdomain)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: subdomain",
                "status"=>500)));

    }

    $valid_subdomain = preg_match("/^[A-Za-z0-9-]+$/", $subdomain);

    if ($valid_subdomain) {

      $pre_c = $con->prepare("SELECT *
                               FROM churches
                               WHERE subdomain = :subdomain", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $val_c = array(':subdomain' => $subdomain);
      $pre_c->execute($val_c);
      $result_c = $pre_c->fetch();

      if (empty($result_c)) {

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => array('message' => 'Subdomain verified',"valid"=>'true')));

      }else{
        return $response->withStatus(200)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('response' => array(
                    "message"=>"Subdomain already used",
                    "valid"=>'false')));
      }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Subdomain only contain letters, numbers, and dashes",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/church-address-validation', function ($request,$response) {

  try{
   
    $con = $this->db;
    $address = $request->getParam('address');

    if(empty($address)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: address",
                "status"=>500)));

    }

    $final_ad = urlencode($address);

    $url = "https://maps.googleapis.com/maps/api/geocode/json?address=$final_ad&key=AIzaSyAxWXdqymJ9GseI1yf7-SefcJkO3sUPs-o";
    
    $ch = curl_init();
    
    curl_setopt($ch,CURLOPT_URL, $url);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    
    $result = curl_exec($ch);

    curl_close($ch);

    $data = json_decode($result);

    if($data->status == "OK"){

        $lat = $data->results[0]->geometry->location->lat;
        $lng = $data->results[0]->geometry->location->lng;

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => array('message' => 'Address verified', 'lat' => $lat, 'lng' => $lng)));

    }else{
      
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Verify your address",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/**************** LOGIN ****************/
$app->post('/validate-subdomain', function ($request,$response) {

  try{
   
    $con = $this->db;
    $subdomain = $request->getParam('subdomain');

    if(empty($subdomain)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: subdomain",
                "status"=>500)));
    }

    $pre = $con->prepare("SELECT *
                             FROM churches
                             WHERE subdomain = :subdomain", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':subdomain' => $subdomain);
      $pre->execute($values);
      $result = $pre->fetch();

      if($result){ 
        return $response->withStatus(200)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('response' => array('message' => 'Subdomain exists', "valid"=>'true','church_id' => $result['id'],'name' => $result['name'],'profile_picture' => $result['profile_picture'])));

      }else{
        return $response->withStatus(200)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('response' => array(
                    "message"=>"Subdomain does not exist",
                    "valid"=>'false')));
      }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/login', function ($request,$response) {

  try{

     $con = $this->db; 
     $email = $request->getParam('email');
     $password = md5($request->getParam('password'));

     if(empty($email)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: email",
                 "status"=>500)));
     }  else if(empty($password)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"required",
                  "message"=>"ParÃ¡metro faltante: password",
                  "status"=>500)));
    }

    // verify if email exist
    $pre_em = $con->prepare("SELECT *
                             FROM user
                             WHERE email = :email",
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_em = array(':email' => $email);
    $pre_em->execute($values_em);
    $result_em = $pre_em->fetch();

    if (!$result_em) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"wrong_mail",
                  "message"=>"Â¡Ups! el correo es incorrecto.",
                  "status"=>422)));
    }

    $church_id = $result_em['church_id'];

    // check if password is correct
    $pre_pass = $con->prepare("SELECT *
                             FROM user
                             WHERE email = :email
                             AND password = :password", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_pass = array(':email' => $email, ':password' => $password);
    $pre_pass->execute($values_pass);
    $result_pass = $pre_pass->fetch();

    if (!$result_pass) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"wrong_password",
                  "message"=>"Â¡Ups! la contraseÃ±a es incorrecta.",
                  "status"=>422)));
    }

    // check if account is active
    $sql = "SELECT *
            FROM `user`
            WHERE `email` = :email
            AND `password` = :password AND church_id = :church_id AND status ='1' AND verified_account = '1'";
    $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(
      ':email' => $email,
      ':password' => $password,
      ':church_id' => $church_id
      );
    
    $result = $pre->execute($values);
    $result = $pre->fetch();

    if(!$result){
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "type"=>"inactive_account",
                          "message"=>"Â¡Ups! Su cuenta no se encuentra activa.",
                          "status"=>422)));
    }

    $user_i = $result['id'];

    // Roles
    $user_rol = null;
    $final_gro = null;

    if ($result['rol'] == '1') {
      $user_rol = 'Senior Pastor';
    } else if ($result['rol'] == '2') {
      $user_rol = 'District Pastor';

      // Select group id and codes
      $sql_gro = "SELECT district_code, id as district_id FROM groups_districts WHERE district_pastor = :user_id AND church_id = :church_id";
      $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gro = array(
        ':user_id' => $user_i,
        ':church_id' => $church_id
        );
      
      $result_gro = $pre_gro->execute($values_gro);
      $result_gro = $pre_gro->fetch();

      // verify if the user does not have a group assigned
      if (!$result_gro) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"not_assigned",
                    "message"=>"Â¡Ups! lo siento, no puedes acceder. Parece que ya no estÃ¡s asignado a ningÃºn Distrito.",
                    "status"=>422)));
      }

      $final_gro = array(
        'district_code' => $result_gro['district_code'],
        'parent_id' => $result_gro['district_id']
      );

    } else if ($result['rol'] == '3') {
      $user_rol = 'Zone Pastor';

      // Select group id and codes
      $sql_gro = "SELECT zone_code, district_code, id as zone_id, district_id FROM `groups_zones` WHERE `zone_pastor` = :user_id AND church_id = :church_id";
      $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gro = array(
        ':user_id' => $user_i,
        ':church_id' => $church_id
        );
      
      $result_gro = $pre_gro->execute($values_gro);
      $result_gro = $pre_gro->fetch();

      // verify if the user does not have a group assigned
      if (!$result_gro) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"not_assigned",
                    "message"=>"Â¡Ups! lo siento, no puedes acceder. Parece que ya no estÃ¡s asignado a ninguna Zona.",
                    "status"=>422)));
      }

      $final_gro = array(
        'parent_id' => $result_gro['zone_id'],
        'zone_code' => $result_gro['zone_code'],
        'district_id' => $result_gro['district_id'],
        'district_code' => $result_gro['district_code']
      );

    } else if ($result['rol'] == '4') {
      $user_rol = 'Supervisor';

      // Select group id and codes
      $sql_gro = "SELECT sector_code, zone_code, district_code, id as sector_id, zone_id, (SELECT district_id from groups_zones WHERE groups_zones.id = groups_sectors.zone_id AND groups_zones.church_id = :church_id) as district_id FROM `groups_sectors` WHERE `supervisor` = :user_id AND church_id = :church_id";
      $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gro = array(
        ':user_id' => $user_i,
        ':church_id' => $church_id
        );
      
      $result_gro = $pre_gro->execute($values_gro);
      $result_gro = $pre_gro->fetch();

      // verify if the user does not have a group assigned
      if (!$result_gro) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"not_assigned",
                    "message"=>"Â¡Ups! lo siento, no puedes acceder. Parece que ya no estÃ¡s asignado a ningÃºn Sector.",
                    "status"=>422)));
      }

      $final_gro = array(
        'parent_id' => $result_gro['sector_id'],
        'sector_code' => $result_gro['sector_code'],
        'zone_id' => $result_gro['zone_id'],
        'zone_code' => $result_gro['zone_code'],
        'district_id' => $result_gro['district_id'],
        'district_code' => $result_gro['district_code']
      );

    } else if ($result['rol'] == '5') {
      $user_rol = 'Leader';

      // Select group id and codes
      $sql_gro = "SELECT cell_code, sector_code, zone_code, district_code, id as cell_id, sector_id, (SELECT zone_id from groups_sectors WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.church_id = :church_id) as zone_id, (SELECT district_id from groups_zones WHERE groups_zones.id = zone_id AND groups_zones.church_id = :church_id) as district_id FROM `groups_cells` WHERE `leader` = :user_id AND church_id = :church_id";
      $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gro = array(
        ':user_id' => $user_i,
        ':church_id' => $church_id
        );
      
      $result_gro = $pre_gro->execute($values_gro);
      $result_gro = $pre_gro->fetch();

      // verify if the user does not have a group assigned
      if (!$result_gro) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"not_assigned",
                    "message"=>"Â¡Ups! lo siento, no puedes acceder. Parece que ya no estÃ¡s asignado a ninguna CÃ©lula.",
                    "status"=>422)));
      }

      $final_gro = array(
        'parent_id' => $result_gro['cell_id'],
        'cell_code' => $result_gro['cell_code'],
        'sector_id' => $result_gro['sector_id'],
        'sector_code' => $result_gro['sector_code'],
        'zone_id' => $result_gro['zone_id'],
        'zone_code' => $result_gro['zone_code'],
        'district_id' => $result_gro['district_id'],
        'district_code' => $result_gro['district_code']
      );

    } else if ($result['rol'] == '6') {
      $user_rol = 'Administrator';
    } else if ($result['rol'] == '7') {
      $user_rol = 'Owner';
    }
    

    $church_info = "SELECT name AS church_name
            FROM churches
            WHERE id = :church_id";
    $pre_church  = $con->prepare($church_info, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_church = array(
      ':church_id' => $church_id
      );
    
    $result_church = $pre_church->execute($values_church);
    $result_church = $pre_church->fetch();

    /*steps*/
    $sql_steps = "SELECT step_id,name,step_date
            FROM user_steps
            WHERE user_id = $user_i";

    $steps = null;

    foreach ($con->query($sql_steps) as $row) {
      $steps[] = $row;
    }

    // obtain settings and notifications for user
    $pre_sett = $con->prepare("SELECT reports_mail, reports_mobile,members_mail,members_mobile,
                              news_mail, news_mobile
                                 FROM user_settings
                                 WHERE user_id = :user_i", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_sett = array(':user_i' => $user_i);
    $pre_sett->execute($values_sett);
    $result_sett = $pre_sett->fetch();

    if (!$result_sett) {
      $result_sett = null;
    }

    return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'User exists', 'user_id' => $result['id'],'church_id' => $result['church_id'], 'first_name' => $result['first_name'], 'last_name' => $result['last_name'], 'email' => $result['email'],'phone' => $result['phone'],'address' => $result['address'],'city' => $result['city'],"gender" => $result['gender'],"birth_date" => $result['birth_date'],"marital_status" => $result['marital_status'],"married_since" => $result['married_since'],"guest_since" => $result['guest_since'],"member_since" => $result['member_since'],'profile_picture' => $result['profile_picture'],'role' => $result['rol'],"user_role" => $user_rol,"is_complete" => $result['is_complete'], 'type_user' => 'member-group',"church_name" => $result_church['church_name'],"group" => $final_gro,"steps" => $steps, "notifications" => $result_sett)));
        

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/remember-me', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $remember_me = $request->getParam('remember_me');

   if(!preg_match("/^[0-1]+$/i", $remember_me)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: remember_me",
               "status"=>500)));
   } else if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("UPDATE user SET remember_me = :remember_me
                           WHERE id = :user_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':user_id' => $user_id, ':remember_me' => $remember_me);
    $result = $pre->execute($values);

    if($result){
        return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Saved successfully'));
    }else{
        return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/forgot-password', function ($request,$response) use ($app) {

  try{
   $con = $this->db;
   $user_email = $request->getParam('user_email');

   if(empty($user_email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_email",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE email = :user_email", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_email' => $user_email);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {
    
    $user_id = $result_i['id'];
    $name = $result_i['first_name'];

    $subject = "Cambio de contraseÃ±a";

    $bodyMail = "
    <html>
    <head>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet'>
    <style>
      body{
        font-family: 'Open Sans', sans-serif;
      }
      .invite{
        background-color: rgb(78, 206, 61);
        color: #fff;
        padding: 10px;
        border-radius: 5px;
        text-decoration: none;
        font-size: 14px;
      }
      .parag{
        text-align: center;
      }
      .part{
        margin-bottom: 40px;
      }
      .final{
        margin-top: 30px;
      }
    </style>
    </head>
    <body>
    <p>Hola, $name</p>
    <p class='part'>Has indicado que olvidaste tu contraseÃ±a. Si es asÃ­, haz clic aquÃ­ para crear una nueva:</p>
    <p class='parag'><a class='invite' href='$app->host/?type=new_password&email=$user_email' target='_blank'>Reiniciar contraseÃ±a</a></p>
    <p class='final'>Si no querÃ­as restablecer tu contraseÃ±a, puedes ignorar este correo.<br>La contraseÃ±a no se cambiarÃ¡.</p>
    <p>Con amor,<br>C+ Team.</p>
    </body></html>";

    if(sendEmail($bodyMail,$user_email,$subject)){
      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => array('message' => 'Â¡El correo fue enviado!', 'email' => $user_email)));
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"invitation_not_sent",
                "message"=>"La invitaciÃ³n no pudo ser enviada, vuelva a intentarlo nuevamente",
                "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"wrong_mail",
                "message"=>"Â¡Ups! el correo es incorrecto.",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/****************** GENERAL SETTINGS ************************/

$app->post('/settings/get', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("SELECT *
                             FROM church_notifications
                             WHERE church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':church_id' => $church_id);
    $pre->execute($values);
    $result = $pre->fetch();


    $sql = "SELECT goal,frequency,percentage,value
            FROM church_goals
            WHERE church_id = $church_id";

    $goals = null;

    foreach ($con->query($sql) as $row) {
      $goals[] = $row;
    }

    $jsonObject = array(
      "church_name" => $result_i['name'],
      "subdomain" => $result_i['subdomain'],
      "cell_structure" => $result_i['structure'],
      "label_structure" => $result_i['label_structure'],
      "has_districts" => $result_i['has_district'],
      "has_zones" => $result_i['has_zone'],
      "has_sectors" => $result_i['has_sector'],
      "notifications" => array(
        "church_email" => $result['church_email'],
        "church_push" => $result['church_push'],
        "members_email" => $result['members_email'],
        "members_push" => $result['members_push'],
        "statistics_email" => $result['statistics_email'],
        "statistics_push" => $result['statistics_push'],
        "news_email" => $result['news_email'],
        "news_push" => $result['news_push'],
        "language" => $result['language']
      ),
      "goals" => $goals
    );

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $jsonObject));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/settings/general', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');
   $church_email = $request->getParam('church_email');
   $church_push = $request->getParam('church_push');
   $members_email = $request->getParam('members_email');
   $members_push = $request->getParam('members_push');
   $statistics_email = $request->getParam('statistics_email');
   $statistics_push = $request->getParam('statistics_push');
   $news_email = $request->getParam('news_email');
   $news_push = $request->getParam('news_push');
   $language = $request->getParam('language');

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $church_email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_email",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $church_push)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_push",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $members_email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: members_email",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $members_push)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: members_push",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $statistics_email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: statistics_email",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $statistics_push)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: statistics_push",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $news_email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: news_email",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $news_push)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: news_push",
               "status"=>500)));
   } else if(empty($language)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: language",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("UPDATE church_notifications SET church_email = :church_email,
                           church_push = :church_push,
                           members_email = :members_email,
                           members_push = :members_push,
                           statistics_email = :statistics_email,
                           statistics_push = :statistics_push,
                           news_email = :news_email,
                           news_push = :news_push,
                           language = :language
                           WHERE church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(
      ':church_id' => $church_id, 
      ':church_email' => $church_email,
      ':church_push' => $church_push,
      ':members_email' => $members_email,
      ':members_push' => $members_push,
      ':statistics_email' => $statistics_email,
      ':statistics_push' => $statistics_push,
      ':news_email' => $news_email,
      ':news_push' => $news_push,
      ':language' => $language);

    $result = $pre->execute($values);

    if($result){
      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Your general settings has been saved successfully'));
    }else{   
        return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/settings/church', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');
   $church_name = $request->getParam('church_name');
   $subdomain = $request->getParam('subdomain');
   $cell_structure = $request->getParam('cell_structure');
   $label_structure = $request->getParam('label_structure');
   $has_districts = $request->getParam('has_districts');
   $has_zones = $request->getParam('has_zones');
   $has_sectors = $request->getParam('has_sectors');

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($church_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_name",
               "status"=>500)));
   } else if(empty($subdomain)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: subdomain",
               "status"=>500)));
   } else if(empty($cell_structure)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_structure",
               "status"=>500)));
   } else if(empty($label_structure)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: label_structure",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $has_districts)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: has_districts",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $has_zones)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: has_zones",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $has_sectors)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: has_sectors",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("UPDATE churches SET name = :church_name,
                           subdomain = :subdomain,
                           structure = :cell_structure,
                           label_structure = :label_structure,
                           has_district = :has_districts,
                           has_zone = :has_zones,
                           has_sector = :has_sectors
                           WHERE id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(
      ':church_id' => $church_id, 
      ':church_name' => $church_name,
      ':subdomain' => $subdomain,
      ':cell_structure' => $cell_structure,
      ':label_structure' => $label_structure,
      ':has_districts' => $has_districts,
      ':has_zones' => $has_zones,
      ':has_sectors' => $has_sectors);

    $result = $pre->execute($values);

    if($result){
      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Your church settings has been saved successfully'));
    }else{   
        return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/settings/goals', function ($request,$response) {

  try{
   
    $con = $this->db;
    $goals = $request->getParam('goals');

    // echo $goals[0]['percentage'];
    $err_goal = 0;
    $err_frequency = 0;
    $err_per = 0;
    $err_value = 0;
    $err_church = 0;
    $total = 0;

    for($i = 0; $i < count($goals); $i++) {

      $total += $goals[$i]['percentage'];

      if(empty($goals[$i]['goal'])){
        $err_goal += 1;
      }else if(empty($goals[$i]['frequency'])){
        $err_frequency += 1;
      }else if(is_float($goals[$i]['percentage'])){
        $err_per += 1;
      }else if(!preg_match("/^[0-9]+$/i", $goals[$i]['value'])){
        $err_value += 1;
      }else if(empty($goals[$i]['church_id'])){
        $err_church += 1;
      }

    }

    if($err_goal > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: goal",
                "status"=>500)));

    } else if($err_frequency > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: frequency",
                "status"=>500)));

    } else if($err_per > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: percentage",
                "status"=>500)));

    } else if($err_value > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: value",
                "status"=>500)));

    } else if($err_church > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "status"=>500)));

    }else if($total != '1'){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Total percentage is not equal to 100%",
                "status"=>422)));
    }else{

      for($j = 0; $j < count($goals); $j++) {

        $pre3 = $con->prepare("UPDATE church_goals SET frequency = :frequency,
                           percentage = :percentage,
                           value = :value
                           WHERE church_id = :church_id AND goal = :goal", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values3 = array(
          ':church_id' => $goals[$j]['church_id'],
          ':goal' => $goals[$j]['goal'],
          ':frequency' => $goals[$j]['frequency'],
          ':percentage' => $goals[$j]['percentage'],
          ':value' => $goals[$j]['value']
          );

        $result3 = $pre3->execute($values3);

      }

      if($result3){
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Your goals settings has been saved successfully'));
      }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"There was a problem, verify your parameters",
                    "status"=>422)));
      }

    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/***************** CHURCH PROFILE ********************/

$app->post('/church/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }


  $pre_u = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id and rol = :role_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_u = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_u->execute($values_u);
  $result_u = $pre_u->fetch();

  if ($result_u) {

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('n');
    $month_t = date('m');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];

    /*General filters*/
    $filter_p = '';
    $filter_crowd = '';
    $filter_totalc = '';
    $filter_totals = '';
    $filter_totalz = '';
    $filter_le = '';
    $filter_graphc = '';
    $filter_graph_top = '';
    
    $pre_i = $con->prepare("SELECT *
                             FROM churches
                             WHERE id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':church_id' => $church_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      $pre_val = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id and rol = :role_id AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_val = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
      $pre_val->execute($values_val);
      $result_val = $pre_val->fetch();

      if ($result_val) {
        
        /*general*/
        $pre = $con->prepare("SELECT churches.name, churches.state, churches.city, churches.address, churches.latitude, churches.longitude, churches.phone, churches.profile_picture AS church_picture, user.id, CONCAT(user.first_name, ' ', user.last_name) AS full_name, user.profile_picture AS user_picture, user.church_id FROM churches INNER JOIN user ON churches.id = user.church_id WHERE user.rol = 1 AND churches.id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':church_id' => $church_id);
        $pre->execute($values);
        $result = $pre->fetch();

        /*count cells*/
        $pre2 = $con->prepare("SELECT count(id) AS count FROM groups_cells WHERE church_id = :church_id AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values2 = array(':church_id' => $result['church_id']);
        $pre2->execute($values2);
        $result2 = $pre2->fetch();

        // count sectors
        $pre3 = $con->prepare("SELECT count(id) AS count FROM groups_sectors WHERE church_id = :church_id AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values3 = array(':church_id' => $result['church_id']);
        $pre3->execute($values3);
        $result3 = $pre3->fetch();

        // count zones
        $pre4 = $con->prepare("SELECT count(id) AS count FROM groups_zones WHERE church_id = :church_id AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values4 = array(':church_id' => $result['church_id']);
        $pre4->execute($values4);
        $result4 = $pre4->fetch();

        // count districts
        $pre5 = $con->prepare("SELECT count(id) AS count FROM groups_districts WHERE church_id = :church_id AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values5 = array(':church_id' => $result['church_id']);
        $pre5->execute($values5);
        $result5 = $pre5->fetch();

        /*team*/
        $sql = "SELECT id, CONCAT(user.first_name, ' ', user.last_name) AS name,first_name, last_name, profile_picture,rol AS role FROM user WHERE church_id = $church_id AND (rol != '6' AND rol != '7') AND status = 1 AND verified_account = 1 ORDER BY rol ASC";
        
        $team = null;

        foreach ($con->query($sql) as $row) {
          $team[] = $row;
        }

        /*Admins*/

        // $sql2 = "SELECT id, CONCAT(first_name, ' ', last_name) AS name,first_name,last_name,email, profile_picture,owner AS role_id,role,phone FROM administrators WHERE church_id = $church_id AND state = 1 ORDER BY owner ASC";
        
        // $admins = null;

        // foreach ($con->query($sql2) as $row2) {
        //   $admins[] = $row2;
        // }

        $sql2 = "SELECT id, CONCAT(user.first_name, ' ', user.last_name) AS name, first_name, last_name, email, phone, profile_picture,rol AS role_id, (CASE WHEN rol = 6 THEN 'Administrator' WHEN rol = 7 THEN 'Owner' ELSE 'null' END) as role FROM user WHERE church_id = $church_id AND (rol = '6' OR rol = '7') AND status = 1 AND verified_account = 1 ORDER BY rol DESC";
        
        $admins = null;

        foreach ($con->query($sql2) as $row2) {
          $admins[] = $row2;
        }


        /*********** CHURCH CROWTH ***********/

        /************** Overall Growth Actual *****************/

        // obtain overall multiply global

        $period_filter3 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";
        $initial_date = '';
        $final_date = '';
        $is_mobile = '';
        $period_i = '';
        $period_f = '';

        $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top,$period_filter3);

        $total_gen = $overall_mult['total_gen'];
        $w_percentage = $overall_mult['w_percentage'];
        $goal_f = $overall_mult['goal_f'];
        $overall_multiply = $overall_mult['overall_multiply'];


        // obtain cell_attendance global

        $overall_att = cellGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

        $period_filter5 = $overall_att['period_filter5'];
        $w_percentagekd = $overall_att['w_percentagekd'];
        $w_percentagead = $overall_att['w_percentagead'];
        $goal_f2 = $overall_att['goal_f2'];
        $goal_f3 = $overall_att['goal_f3'];
        $overall_attend = $overall_att['overall_attend'];


        // obtain church_attendance global
        $overall_ch = churchGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

        $w_percentagech = $overall_ch['w_percentagech'];
        $goal_f4 = $overall_ch['goal_f4'];
        $overall_church = $overall_ch['overall_church'];


        // obtain salvation global
        $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$total_gen);

        $w_percentagesv = $overall_pr['w_percentagesv'];
        $w_percentagebp = $overall_pr['w_percentagebp'];
        $w_per_sch = $overall_pr['w_per_sch'];
        $goal_f5 = $overall_pr['goal_f5'];
        $goal_f6 = $overall_pr['goal_f6'];
        $goal_f7 = $overall_pr['goal_f7'];
        // FINAL OVERALL PERFOMANCE
        $overall_perfomance = $overall_pr['overall_perfomance'];


        /*** OVERALL CHURCH GLOBAL ***/
        $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;



        /*********************************** OVERALL PAST ******************************************/

        $sub_i = '';
        $sub_p = '';

        // obtain overall multiply global

        $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

        $period_filter6 = $overall_mult2['period_filter6'];
        $period_filter_n = $overall_mult2['period_filter_n'];
        $overall_multiply2 = $overall_mult2['overall_multiply2'];
        $past_i = $overall_mult2['past_i'];
        $past_f = $overall_mult2['past_f'];


        // obtain cell_attendance global
        $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

        $period_filter7 = $overall_att2['period_filter7'];
        $period_filter_n2 = $overall_att2['period_filter_n2'];
        $overall_attend2 = $overall_att2['overall_attend2'];


        // obtain church_attendance global
        $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


        // obtain salvation global
        $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


        /*** OVERALL CHURCH GLOBAL ***/
        $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


        /**** OBTAIN PERCENTAGE FINAL (OVERALL GROWTH) *****/
        if ($overall_growth == 0 && $overall_growth_past == 0) {
          $percentage_overall = 0;
        } else if ($overall_growth_past == 0) {
          // $percentage_overall = ($overall_growth - $overall_growth_past) * 100;
          $percentage_overall = 100;
        } else{
          $percentage_overall = ($overall_growth - $overall_growth_past) * 100 / $overall_growth_past;
        }


        // Church Goals Per Cell Group

        // multiply goals
        if ($overall_mult['frequency_cell'] == '1') {
          $feq_mult = "Yearly";
          $sql_feq = "AND created_at LIKE '%$year%'";
        }else if ($overall_mult['frequency_cell'] == '2') {
          $feq_mult = "Monthly";
          $sql_feq = "AND created_at LIKE '%$month_t%'";
        }else{
          $feq_mult = "Quarterly";
          $sql_feq = "AND created_at BETWEEN '$initial_quarter' AND '$final_quarter'";
        }

        // total actual
        $pre_acc = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id AND parent_id IS NOT NULL $sql_feq", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_acc = array(':church_id' => $church_id);
        $pre_acc->execute($values_acc);
        $result_acc = $pre_acc->fetch();

        $total_acc = $result_acc['total_cells'];
        if ($total_acc == null) {
          $total_acc = '0';
        }

        // percentage actual
        if ($overall_mult['value_multi'] != '0') {
          $percenc = ($total_acc - $overall_mult['value_multi']) * 100 / $overall_mult['value_multi'];
        }else{
          $percenc = "100";
        }
        

        $multiply_goals = array(
          "value" => $overall_mult['value_cell'],
          "frequency" => $feq_mult,
          "percentage" => (string)$overall_mult['percentage_cell'],
          "final_value" => (string)$overall_mult['value_multi'], //final value multiplied by all cells
          "actual" => $total_acc, // total actual cells
          "final_percentage" => (string)$percenc // percentage final (current and past cells)
        );


        // Adulst Attendance
        if ($overall_att['frequency_adults'] == '1') {
          $feq_adu = "Yearly";
          $sql_fe_ac = "AND reports.created_at LIKE '%$year%'";
        }else if ($overall_att['frequency_adults'] == '2') {
          $feq_adu = "Monthly";
          $sql_fe_ac = "AND reports.created_at LIKE '%$month_t%'";
        }else{
          $feq_adu = "Quarterly";
          $sql_fe_ac = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        }

        // total actual
        $pre_aca = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND groups_cells.church_id = :church_id $sql_fe_ac", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_aca = array(':church_id' => $church_id);
        $pre_aca->execute($values_aca);
        $result_aca = $pre_aca->fetch();

        $total_aca = $result_aca['total_adults'];
        if ($total_aca == null) {
          $total_aca = '0';
        }

        // percentage actual
        if ($overall_att['value_multi1'] != '0') {
          $percenca = ($total_aca - $overall_att['value_multi1']) * 100 / $overall_att['value_multi1'];
        }else{
          $percenca = "100";
        }

        $multiply_adu = array(
          "value" => $overall_att['value_adults'],
          "frequency" => $feq_adu,
          "percentage" => (string)$overall_att['percentage_adults'],
          "final_value" => (string)$overall_att['value_multi1'],
          "actual" => $total_aca,
          "final_percentage" => (string)$percenca
        );


        // Kids Attendance
        if ($overall_att['frequency_kid'] == '1') {
          $feq_kid = "Yearly";
          $sql_kd = "AND reports.created_at LIKE '%$year%'";
        }else if ($overall_att['frequency_kid'] == '2') {
          $feq_kid = "Monthly";
          $sql_kd = "AND reports.created_at LIKE '%$month_t%'";
        }else{
          $feq_kid = "Quarterly";
          $sql_kd = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        }

        // total actual
        $pre_aca = $con->prepare("SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND groups_cells.church_id = :church_id $sql_kd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_aca = array(':church_id' => $church_id);
        $pre_aca->execute($values_aca);
        $result_aca = $pre_aca->fetch();

        $total_aca = $result_aca['total_kids'];
        if ($total_aca == null) {
          $total_aca = '0';
        }

        // percentage actual
        if ($overall_att['value_multi2'] != '0') {
          $percenca = ($total_aca - $overall_att['value_multi2']) * 100 / $overall_att['value_multi2'];
        }else{
          $percenca = "100";
        }

        $multiply_kids = array(
          "value" => $overall_att['value_kid'],
          "frequency" => $feq_kid,
          "percentage" => (string)$overall_att['percentage_kid'],
          "final_value" => (string)$overall_att['value_multi2'],
          "actual" => $total_aca,
          "final_percentage" => (string)$percenca
        );

        // Church Attendance
        if ($overall_ch['frequency_church'] == '1') {
          $feq_ch = "Yearly";
          $sql_ch = "AND reports.created_at LIKE '%$year%'";
        }else if ($overall_ch['frequency_church'] == '2') {
          $feq_ch = "Monthly";
          $sql_ch = "AND reports.created_at LIKE '%$month_t%'";
        }else{
          $feq_ch = "Quarterly";
          $sql_ch = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        }

        // total actual
        $pre_aca = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND groups_cells.church_id = :church_id $sql_ch", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_aca = array(':church_id' => $church_id);
        $pre_aca->execute($values_aca);
        $result_aca = $pre_aca->fetch();

        $total_aca = $result_aca['total_doctrine'];
        if ($total_aca == null) {
          $total_aca = '0';
        }

        // percentage actual
        if ($overall_ch['value_multi'] != '0') {
          $percenca = ($total_aca - $overall_ch['value_multi']) * 100 / $overall_ch['value_multi'];
        }else{
          $percenca = "100";
        }

        $multiply_church = array(
          "value" => $overall_ch['value_church'],
          "frequency" => $feq_ch,
          "percentage" => (string)$overall_ch['percentage_church'],
          "final_value" => (string)$overall_ch['value_multi'],
          "actual" => $total_aca,
          "final_percentage" => (string)$percenca
        );


        // Salvation
        if ($overall_pr['frequency_salvation'] == '1') {
          $feq_sv = "Yearly";
          $sql_sav = "AND reports.created_at LIKE '%$year%'";
        }else if ($overall_pr['frequency_salvation'] == '2') {
          $feq_sv = "Monthly";
          $sql_sav = "AND reports.created_at LIKE '%$month_t%'";
        }else{
          $feq_sv = "Quarterly";
          $sql_sav = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        }

        // total actual
        $pre_aca = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND groups_cells.church_id = :church_id $sql_sav", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_aca = array(':church_id' => $church_id);
        $pre_aca->execute($values_aca);
        $result_aca = $pre_aca->fetch();

        $total_aca = $result_aca['total_salvation'];

        if ($total_aca == null) {
          $total_aca = '0';
        }

        // percentage actual
        if ($overall_pr['value_multi'] != '0') {
          $percenca = ($total_aca - $overall_pr['value_multi']) * 100 / $overall_pr['value_multi'];
        }else{
          $percenca = "100";
        }

        $multiply_sv = array(
          "value" => $overall_pr['value_salvation'],
          "frequency" => $feq_sv,
          "percentage" => (string)$overall_pr['percentage_salvation'],
          "final_value" => (string)$overall_pr['value_multi'],
          "actual" => $total_aca,
          "final_percentage" => (string)$percenca
        );


        // Baptized
        if ($overall_pr['frequency_baptized'] == '1') {
          $feq_bp = "Yearly";
          $sql_bap = "AND reports.created_at LIKE '%$year%'";
        }else if ($overall_pr['frequency_baptized'] == '2') {
          $feq_bp = "Monthly";
          $sql_bap = "AND reports.created_at LIKE '%$month_t%'";
        }else{
          $feq_bp = "Quarterly";
          $sql_bap = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        }

        // total actual
        $pre_aca = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND groups_cells.church_id = :church_id $sql_bap", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_aca = array(':church_id' => $church_id);
        $pre_aca->execute($values_aca);
        $result_aca = $pre_aca->fetch();

        $total_aca = $result_aca['total_baptized'];
        if ($total_aca == null) {
          $total_aca = '0';
        }

        // percentage actual
        if ($overall_pr['value_multi2'] != '0') {
          $percenca = ($total_aca - $overall_pr['value_multi2']) * 100 / $overall_pr['value_multi2'];
        }else{
          $percenca = "100";
        }

        $multiply_bp = array(
          "value" => $overall_pr['value_baptized'],
          "frequency" => $feq_bp,
          "percentage" => (string)$overall_pr['percentage_baptized'],
          "final_value" => (string)$overall_pr['value_multi2'],
          "actual" => $total_aca,
          "final_percentage" => (string)$percenca
        );


        // Visits
        if ($overall_pr['frequency_visit'] == '1') {
          $feq_visit = "Yearly";
          $sql_vis = "AND reports.created_at LIKE '%$year%'";
        }else if ($overall_pr['frequency_visit'] == '2') {
          $feq_visit = "Monthly";
          $sql_vis = "AND reports.created_at LIKE '%$month_t%'";
        }else{
          $feq_visit = "Quarterly";
          $sql_vis = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        }

        // total actual
        $pre_aca = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND groups_cells.church_id = :church_id $sql_vis", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_aca = array(':church_id' => $church_id);
        $pre_aca->execute($values_aca);
        $result_aca = $pre_aca->fetch();

        $total_aca = $result_aca['total_schedule_visits'];
        if ($total_aca == null) {
          $total_aca = '0';
        }

        // percentage actual
        if ($overall_pr['value_multi3'] != '0') {
          $percenca = ($total_aca - $overall_pr['value_multi3']) * 100 / $overall_pr['value_multi3'];
        }else{
          $percenca = "100";
        }

        $multiply_visit = array(
          "value" => $overall_pr['value_visit'],
          "frequency" => $feq_visit,
          "percentage" => (string)$overall_pr['percentage_visit'],
          "final_value" => (string)$overall_pr['value_multi3'],
          "actual" => $total_aca,
          "final_percentage" => (string)$percenca
        );


        $jsonObject = array(
          "church_name" => $result['name'],
          "senior_pastor_id" => $result['id'],
          "senior_pastor" => $result['full_name'],
          "user_picture" => $result['user_picture'],
          "state" => $result['state'],
          "city" => $result['city'],
          "address" => $result['address'],
          "latitude" => (float)$result['latitude'],
          "longitude" => (float)$result['longitude'],
          "phone_number" => $result['phone'],
          "church_picture" => $result['church_picture'],
          "total_cells" => $result2['count'],
          "total_sectors" => $result3['count'],
          "total_zones" => $result4['count'],
          "total_districts" => $result5['count'],
          "team" => $team,
          "administrators" => $admins,
          "points_quarter" => (string)$overall_growth,
          "percentage_quarter" => (string)round($percentage_overall),
          "multiply_goals" => $multiply_goals,
          "adults_goals" => $multiply_adu,
          "kids_goals" => $multiply_kids,
          "church_goals" => $multiply_church,
          "salvations_goals" => $multiply_sv,
          "baptized_goals" => $multiply_bp,
          "visits_goals" => $multiply_visit
        );

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $jsonObject));

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User isn't associated with this church",
                    "status"=>422)));

      }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Church does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/church/get', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("SELECT churches.name, churches.state, churches.city, churches.address, churches.latitude, churches.longitude, churches.phone, churches.profile_picture AS church_picture,(SELECT user.id from user where churches.id = user.church_id AND user.rol = 1) AS user_id, (SELECT user.first_name from user where churches.id = user.id AND user.rol = 1) AS first_name, (SELECT user.last_name from user where churches.id = user.church_id AND user.rol = 1) AS last_name, (SELECT user.profile_picture from user where churches.id = user.church_id AND user.rol = 1) AS user_picture FROM churches WHERE churches.id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':church_id' => $church_id);
    $pre->execute($values);
    $result = $pre->fetch();

    $jsonObject = array(
      "church_name" => $result['name'],
      "senior_pastor_id" => $result['user_id'],
      "first_name" => $result['first_name'],
      "last_name" => $result['last_name'],
      "user_picture" => $result['user_picture'],
      "state" => $result['state'],
      "city" => $result['city'],
      "address" => $result['address'],
      "latitude" => (float)$result['latitude'],
      "longitude" => (float)$result['longitude'],
      "phone_number" => $result['phone'],
      "church_picture" => $result['church_picture']
    );

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $jsonObject));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/church/edit', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');
   $church_name = $request->getParam('church_name');
   $senior_pastor_id = $request->getParam('senior_pastor_id');
   $state = $request->getParam('state');
   $city = $request->getParam('city');
   $address = $request->getParam('address');
   $latitude = $request->getParam('latitude');
   $longitude = $request->getParam('longitude');
   $phone_number = $request->getParam('phone_number');
   $profile_picture = $request->getParam('profile_picture');
   $password = $request->getParam('password');

   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone_number);

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($church_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_name",
               "status"=>500)));
   } else if(empty($senior_pastor_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: senior_pastor_id",
               "status"=>500)));
   } else if(empty($state)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: state",
               "status"=>500)));
   } else if(empty($city)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: city",
               "status"=>500)));
   } else if(empty($address)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: address",
               "status"=>500)));
   } else if(empty($phone_number)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: phone_number",
               "status"=>500)));
   } else if (!$valid_phone) {
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: Invalid phone number",
               "status"=>500)));
   } else if(empty($latitude)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: latitude",
               "status"=>500)));
   } else if(empty($longitude)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: longitude",
               "status"=>500)));
   } else if(empty($profile_picture)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: profile_picture",
               "status"=>500)));
   }



  $pre_i = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre_u = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :senior_pastor_id AND church_id = :church_id AND status = '1' AND verified_account = '1' AND rol = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_u = array(':senior_pastor_id' => $senior_pastor_id, ':church_id' => $church_id);
    $pre_u->execute($values_u);
    $result_u = $pre_u->fetch();

    if ($result_u) {

      $pre = $con->prepare("SELECT *
                               FROM user
                               WHERE church_id = :church_id AND rol = '1' AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':church_id' => $church_id);
      $pre->execute($values);
      $result = $pre->fetch();

      $current_pastor = $result['id'];
      $pastor_pass = $result['password'];

      $final_pass = md5($password);

      if ($senior_pastor_id != $current_pastor) {

        if($password){
          if ($pastor_pass == $final_pass) {

            /*update church info*/
            $pre2 = $con->prepare("UPDATE churches SET name = :church_name,
                                   state = :state,
                                   city = :city,
                                   address = :address,
                                   latitude = $latitude,
                                   longitude = $longitude,
                                   phone= :phone_number,
                                   profile_picture= :profile_picture
                                   WHERE id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values2 = array(
              ':church_id' => $church_id, 
              ':church_name' => $church_name,
              ':state' => $state,
              ':city' => $city,
              ':address' => $address,
              ':profile_picture' => $profile_picture,
              ':phone_number' => $phone_number);

            $result2 = $pre2->execute($values2);


            /*update current pastor to admin*/
            $pre3 = $con->prepare("UPDATE user SET rol = '6', status = '1'
                                   WHERE id = :current_pastor", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values3 = array(
              ':current_pastor' => $current_pastor);

            $result3 = $pre3->execute($values3);

            /*update new pastor*/
            $pre4 = $con->prepare("UPDATE user SET rol = '1', status = '1'
                                   WHERE id = :senior_pastor_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values4 = array(
              ':senior_pastor_id' => $senior_pastor_id);

            $result4 = $pre4->execute($values4);

            if($result4){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Your church profile and transfer has been saved successfully'));
            }else{   
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"There was a problem, verify your parameters",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Incorrect password'));
          }
        }else{
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Missing parameter: password",
                    "status"=>500)));
        }
        

      }else{
        /*update church info*/
        $pre5 = $con->prepare("UPDATE churches SET name = :church_name,
                               state = :state,
                               city = :city,
                               address = :address,
                               latitude = $latitude,
                               longitude = $longitude,
                               phone= :phone_number,
                               profile_picture= :profile_picture
                               WHERE id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values5 = array(
          ':church_id' => $church_id, 
          ':church_name' => $church_name,
          ':state' => $state,
          ':city' => $city,
          ':address' => $address,
          ':profile_picture' => $profile_picture,
          ':phone_number' => $phone_number);

        $result5 = $pre5->execute($values5);

        if($result5){
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Your church profile has been saved successfully'));
        }else{   
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"There was a problem, verify your parameters",
                                "status"=>422)));
        }


      }


    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User does not exist in this church",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/***************** USERS PROFILES (LIST ADMINS AND OWNERS) ********************/

$app->post('/users/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE church_id = :final_church AND rol = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':final_church' => $final_church);
    $pre->execute($values);
    $result = $pre->fetch();

      if ($result) {
        $final_id = $result['id'];
        $final_first_name = $result['first_name'];
        $final_last_name = $result['last_name'];
        $final_email = $result['email'];
        $final_phone = $result['phone'];
        $rol = $result['rol'];
        $profile_picture = $result['profile_picture'];
        $final_rol = 'Senior Pastor';
        $type_user = 'member-group';


        $senior = array(
          "user_id" => $final_id,
          "full_name" => $final_first_name . ' ' . $final_last_name,
          "email" => $final_email,
          "role" => $final_rol,
          "phone" => $final_phone,
          "profile_picture" => $profile_picture,
          "type_user" => $type_user
        );

      
        $admins[] = $senior;
      }


      $sql = "SELECT id AS user_id, CONCAT(first_name, ' ', last_name) AS full_name, email, (CASE WHEN rol = 6 THEN 'Administrator' WHEN rol = 7 THEN 'Owner' ELSE 'null' END) as role,phone,profile_picture FROM user WHERE church_id = '$final_church' AND (rol = 6 OR rol = 7)  AND status = 1 AND verified_account = 1 ORDER BY rol DESC";
      

      foreach ($con->query($sql) as $row) {
        $admins[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $admins));

    

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/users/mobile-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $pre = $con->prepare("SELECT *
                             FROM user
                             WHERE church_id = :final_church AND rol = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':final_church' => $final_church);
    $pre->execute($values);
    $result = $pre->fetch();

      if ($result) {
        $final_id = $result['id'];
        $final_first_name = $result['first_name'];
        $final_last_name = $result['last_name'];
        $final_email = $result['email'];
        $final_phone = $result['phone'];
        $rol = $result['rol'];
        $profile_picture = $result['profile_picture'];
        $final_rol = 'Senior Pastor';
        $type_user = 'member-group';

        $senior = array(
          "user_id" => $final_id,
          "full_name" => $final_first_name . ' ' . $final_last_name,
          "email" => $final_email,
          "role" => $final_rol,
          "phone" => $final_phone,
          "profile_picture" => $profile_picture,
          "type_user" => $type_user
        );
      }


      // $sql = "SELECT id AS user_id, first_name,last_name, email,role,phone,profile_picture,IF(owner=0 or owner = 1, 'admin', null) AS type_user FROM administrators WHERE church_id = '$final_church'";

      $sql = "SELECT id AS user_id, CONCAT(first_name, ' ', last_name) AS full_name, email, (CASE WHEN rol = 6 THEN 'Administrator' WHEN rol = 7 THEN 'Owner' ELSE 'null' END) as role,phone,profile_picture FROM user WHERE church_id = '$final_church' AND (rol = 6 OR rol = 7)  AND status = 1 AND verified_account = 1 ORDER BY rol DESC";
      
      $admins = null;
      foreach ($con->query($sql) as $row) {
        $admins[] = $row;
      }


      $sql2 = "SELECT groups_districts.id AS district_id, groups_districts.district_code, CONCAT(user.first_name, ' ', user.last_name) AS district_pastor, user.profile_picture FROM groups_districts,user WHERE groups_districts.district_pastor = user.id AND groups_districts.church_id = '$final_church' AND groups_districts.active =1;";
      
      $district = null;

      foreach ($con->query($sql2) as $row2) {
        $district[] = $row2;
      }

      $final_j = array(
        "senior_pastor" => $senior,
        "administrators" => $admins,
        "district_pastors" => $district
      );

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_j));

    

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/users/edit-password', function ($request,$response) {

  try{
   
    $con = $this->db;
    $user_id = $request->getParam('user_id');
    $role_id = $request->getParam('role_id');
    $type_user = $request->getParam('type_user');
    $current_password = $request->getParam('current_password');
    $password = $request->getParam('password');

    $valid_pass = preg_match("/^.*(?=.{6,}).*$/", $password);

    if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
     } else if(!preg_match("/^[0-9]+$/i", $role_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: role_id",
                 "status"=>500)));
     } else if(empty($type_user)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: type_user",
                 "status"=>500)));
     } else if(empty($password)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: password",
                  "status"=>500)));
    } else if(!$valid_pass){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Password must contain 6 characters",
                  "status"=>422)));
    }


    if ($type_user == 'member-group') {

      if(empty($current_password)){
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"Missing parameter: current_password",
                      "status"=>500)));
      }

      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if ($result_s) {

        $final_current= md5($current_password);

        $pre_p = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :user_id AND password = :final_current", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_p = array(':user_id' => $user_id, ':final_current' => $final_current);
        $pre_p->execute($values_p);
        $result_p = $pre_p->fetch();

        if ($result_p) {
          
          /*update pass*/
          $pre = $con->prepare("UPDATE user SET password = :password
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':user_id' => $user_id, 
            ':password' => md5($password));

          $result = $pre->execute($values);

          if($result){
            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Your password has been updated successfully'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Current password is incorrect",
                      "status"=>422)));
        }
 
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }
  
    else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"type_user does not exist",
                  "status"=>422)));

    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/users/edit-steps', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $guest_since = $request->getParam('guest_since');
   $member_since = $request->getParam('member_since');
   $steps = $request->getParam('steps');

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
   $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } else if(!$valid_guest){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid guest_since",
                 "status"=>500)));

   }else if(!$valid_member){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid member_since",
                 "status"=>500)));
    }

    $err_name = 0;
    $err_date = 0;
    $err_id = 0;
    $err_stepid = 0;

    for($i = 0; $i < count($steps); $i++) {

    $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$steps[$i]['step_date']);

    $pre_step = $con->prepare("SELECT *
                             FROM steps
                             WHERE step_id = :step_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_step = array(':step_id' => $steps[$i]['step_id']);
    $pre_step->execute($values_step);
    $result_step = $pre_step->fetch();

      if(empty($steps[$i]['name'])){
        $err_name += 1;
        $err_id = $i;
        $arr[] = $err_id;
      } else if(empty($steps[$i]['step_id'])){
        $err_id += 1;
        $err_id1 = $i;
        $arr1[] = $err_id1;
      }else if(!$valid_date){
        $err_date += 1;
        $err_id2 = $i;
        $arr2[] = $err_id2;
      } else if(empty($result_step)){
        $err_stepid += 1;
        $err_id3 = $i;
        $arr3[] = $err_id3;
      }

    }

    if($err_name > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: name",
                "err_id"=>$arr,
                "status"=>500)));

    } else if($err_id > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step_id",
                "err_id"=>$arr1,
                "status"=>500)));

    } else if($err_date > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step_date",
                "err_id"=>$arr2,
                "status"=>500)));

    } else if($err_stepid > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Step does not exists",
                "err_id"=>$arr3,
                "status"=>500)));

    }


    if ($type_user == 'member-group') {

      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if ($result_s) {

        $pre = $con->prepare("UPDATE user SET guest_since = :guest_since,
                               member_since = :member_since
                               WHERE id = :user_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(
          ':user_id' => $user_id, 
          ':guest_since' => $guest_since,
          ':member_since' => $member_since);

        $result = $pre->execute($values);

        /*STEPS*/

        $pre2 = $con->prepare("DELETE FROM user_steps WHERE `user_id` = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values2 = array(
          ':user_id' => $user_id
          );

        $result2 = $pre2->execute($values2);


        $final_d = date("Y-m-d H:i:s"); 
        for($j = 0; $j < count($steps); $j++) {

          $pre3 = $con->prepare("INSERT INTO user_steps (`user_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:user_id, :name,:step_date,:step_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values3 = array(
            ':user_id' => $user_id,
            ':name' => $steps[$j]['name'],
            ':step_date' => $steps[$j]['step_date'],
            ':step_id' => $steps[$j]['step_id']
            );

          $result3 = $pre3->execute($values3);

        }

        if($result3){
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Your steps has been saved successfully'));
        }else{
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"There was a problem, verify your parameters",
                                "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"type_user does not exist",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/****************************GROUPS**************************/

/********** DISTRICTS *************/

$app->post('/districts/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');
   $active = $request->getParam('active');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];


    if ($active == '0' || $active == '1') {
      $sql = "SELECT groups_districts.id AS district_id, groups_districts.district_code AS district_code, groups_districts.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_districts.district_pastor) AS district_pastor, (SELECT user.profile_picture from user WHERE user.id = groups_districts.district_pastor) AS profile_picture, (SELECT count(id) from groups_zones WHERE district_id = groups_districts.id AND groups_zones.active = 1) AS zones, (SELECT count(groups_sectors.id) from groups_sectors,groups_zones WHERE groups_zones.district_id = groups_districts.id AND groups_sectors.zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_zones,groups_sectors,groups_cells WHERE groups_zones.district_id = groups_districts.id AND groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) as cells, (SELECT count(members_cells.cell_id) from groups_zones,groups_sectors,groups_cells, members_cells WHERE groups_zones.district_id = groups_districts.id AND groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members 
        FROM groups_districts
        WHERE groups_districts.church_id = $final_church AND groups_districts.active = $active";
      

      foreach ($con->query($sql) as $row) {
        $districts[] = $row;
      }


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $districts));

    }else{
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                                "message"=>"filter does not exist",
                                "status"=>422)));
    }



  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/districts/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $district_id = $request->getParam('district_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   }

   // type user (member-group or admin)
   if ($type_user == "member-group") {
      
    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if ($result_user) {

       $pre_i = $con->prepare("SELECT *
                                FROM groups_districts
                                WHERE id = :district_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_i = array(':district_id' => $district_id);
       $pre_i->execute($values_i);
       $result_i = $pre_i->fetch();

       if ($result_i) {

         $final_church = $result_i['church_id'];

         $pre = $con->prepare("SELECT groups_districts.id AS district_id, groups_districts.district_code, (SELECT id from user WHERE user.id = groups_districts.district_pastor) AS district_pastor_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_districts.district_pastor) AS district_pastor, (SELECT profile_picture from user WHERE user.id = groups_districts.district_pastor) AS district_pastor_picture, (SELECT address from user WHERE user.id = groups_districts.district_pastor) AS address, groups_districts.parent_id  FROM groups_districts WHERE groups_districts.church_id = :final_church AND groups_districts.id = :district_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(':final_church' => $final_church, ':district_id' => $district_id);
          $pre->execute($values);
          $result = $pre->fetch();

         /*Total members*/
         $pre2 = $con->prepare("SELECT SUM((SELECT count(members_cells.id) from members_cells WHERE church_id = :church_id AND cell_id = groups_cells.id AND role !='1' AND active = '1')) as members_count FROM groups_zones,groups_sectors, groups_cells WHERE groups_zones.id = groups_sectors.zone_id AND groups_sectors.id = groups_cells.sector_id AND groups_zones.district_id = :district_id AND groups_zones.active = 1 AND groups_zones.church_id = :church_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id AND groups_cells.church_id = :church_id AND groups_cells.active = 1",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values2 = array(':church_id' => $final_church, ':district_id' => $district_id);
         $pre2->execute($values2);
         $result2 = $pre2->fetch();

         /*Total cell groups*/
         $pre3 = $con->prepare("SELECT SUM((SELECT count(groups_cells.id) from groups_cells WHERE church_id = :church_id AND sector_id = groups_sectors.id AND active = '1')) as cells_count FROM groups_zones, groups_sectors WHERE groups_zones.id = groups_sectors.zone_id AND groups_zones.district_id = :district_id AND groups_zones.active = 1 AND groups_zones.church_id = :church_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values3 = array(':church_id' => $final_church, ':district_id' => $district_id);
         $pre3->execute($values3);
         $result3 = $pre3->fetch();

         /*Total sectors*/
         $pre_sec = $con->prepare("SELECT count(groups_sectors.id) as sectors_count FROM groups_zones, groups_sectors WHERE groups_zones.id = groups_sectors.zone_id AND groups_zones.district_id = :district_id AND groups_zones.active = 1 AND groups_zones.church_id = :church_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_sec = array(':church_id' => $final_church, ':district_id' => $district_id);
         $pre_sec->execute($values_sec);
         $result_sec = $pre_sec->fetch();

         /*Total zones*/
         $pre_zone = $con->prepare("SELECT count(groups_zones.id) as zones_count FROM groups_zones WHERE groups_zones.district_id = :district_id AND groups_zones.active = 1 AND groups_zones.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_zone = array(':church_id' => $final_church, ':district_id' => $district_id);
         $pre_zone->execute($values_zone);
         $result_zone = $pre_zone->fetch();

         /*List cell groups*/
         $sql_cell = "SELECT groups_cells.id as cell_id, groups_cells.cell_code, groups_cells.sector_code, groups_cells.zone_code, groups_cells.district_code, groups_cells.city, groups_cells.address, (SELECT CONCAT(user.first_name, ' ', user.last_name) AS name from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as leader, (SELECT profile_picture from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as profile_picture FROM groups_zones, groups_sectors, groups_cells WHERE groups_zones.id = groups_sectors.zone_id AND groups_sectors.id = groups_cells.sector_id AND groups_zones.district_id = $district_id AND groups_zones.active = 1 AND groups_zones.church_id = $final_church AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND groups_cells.church_id = $final_church AND groups_cells.active = 1";
         
         $list_cell = null;

         foreach ($con->query($sql_cell) as $row_cell) {
           $list_cell[] = $row_cell;
         }

         /*New sectors last week*/
         $sql_new = "SELECT id as zone_id, zone_code FROM groups_zones WHERE groups_zones.district_id = $district_id AND groups_zones.active = 1 AND groups_zones.church_id = $final_church AND DATEDIFF(CURRENT_DATE, start_date) <= 7";
         
         $new_cell = null;

         foreach ($con->query($sql_new) as $row2) {
           $new_cell[] = $row2;
         }

         /*District Team*/

         // District Pastor
         $pre4 = $con->prepare("SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, user.profile_picture, user.rol AS role FROM groups_districts INNER JOIN user ON groups_districts.district_pastor = user.id WHERE groups_districts.id = :district_id AND groups_districts.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values4 = array(':church_id' => $final_church, ':district_id' => $district_id);
         $pre4->execute($values4);
         $result4 = $pre4->fetch();

         $district_pastor = array("name" => $result4['name'],
                   "profile_picture" => $result4['profile_picture'],
                   "role" => $result4['role'],
                   "member_role" => 'District Pastor');

         $cell_team = null;

         $cell_team[] = $district_pastor;

         // Zone Pastors
         $sql_le = "SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, profile_picture, rol as role, IF(rol = '3', 'Zone Pastor', null) as member_role FROM groups_zones, user WHERE user.id = groups_zones.zone_pastor AND groups_zones.district_id = $district_id AND groups_zones.active = 1 AND groups_zones.church_id = $final_church AND user.church_id = $final_church";
         

         foreach ($con->query($sql_le) as $row_le) {
           $cell_team[] = $row_le;
         }

         /*CHURCH TEAM*/

         /*Obtain senior pastor*/
         $pre_se = $con->prepare("SELECT CONCAT(first_name, ' ', last_name) AS name, profile_picture, rol as role FROM user WHERE user.church_id = :church_id AND user.rol = 1",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_se = array(':church_id' => $final_church);
         $pre_se->execute($values_se);
         $result_se = $pre_se->fetch();

         $senior_pastor = array("name" => $result_se['name'],
                            "profile_picture" => $result_se['profile_picture'],
                            "role" => $result_se['role'],
                            "member_role" => "Senior Pastor");

         $team = null;
         $team[] = $senior_pastor;
        

         $res = array("district_id" => $result['district_id'],
                      "district_code" => $result['district_code'],
                      "district_pastor_id" => $result['district_pastor_id'],
                      "district_pastor" => $result['district_pastor'],
                      "district_pastor_picture" => $result['district_pastor_picture'],
                      "address" => $result['address'],
                      "parent_id" => $result['parent_id'],
                      "members_count" => $result2['members_count'],
                      "cells_count" => $result3['cells_count'],
                      "sectors_count" => $result_sec['sectors_count'],
                      "zones_count" => $result_zone['zones_count'],
                      "list_cells" => $list_cell,
                      "new_cells" => $new_cell,
                      "cell_team" => $cell_team,
                      "church_team" => $team
              );

         return $response->withStatus(200)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('response' => $res));

       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"District does not exist",
                     "status"=>422)));
       }


     }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
     }

     // type user (member-group or admin)
   }
   
   else{

    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Type user does not exist",
                "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/districts/edit', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $district_id = $request->getParam('district_id');
   $district_code = $request->getParam('district_code');
   $parent_district = $request->getParam('parent_district');
   $district_pastor = $request->getParam('district_pastor');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

   // verify if the logged in user exists
   $pre_user = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
   $pre_user->execute($values_user);
   $result_user = $pre_user->fetch();

   if ($result_user) {

    // verify if role exists
    if ($role_id == 1 || $role_id == 6 || $role_id ==7) {

      $first_name = $result_user['first_name'];
      $last_name = $result_user['last_name'];

      $final_church = $result_user['church_id'];

      // verify if district exists
      $pre_i = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :district_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_i = array(':district_id' => $district_id);
      $pre_i->execute($values_i);
      $result_i = $pre_i->fetch();

      if ($result_i) {

        $actual_pastor = $result_i['district_pastor'];
        $actual_code = $result_i['district_code'];

        // verify if code exists
        $pre_co = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE district_code = :district_code AND id != :district_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_co = array(':district_code' => $district_code, ':district_id' => $district_id, ':church_id' => $church_id);
        $pre_co->execute($values_co);
        $result_co = $pre_co->fetch();

        if ($result_co) {
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"District code already exists",
                      "status"=>422)));
        }else{

          $final_d = date("Y-m-d H:i:s");

          // verify if parent is null
          if ($parent_district == "null" || $parent_district == null) {
            // verify if pastor is null
            if ($district_pastor == "null" || $district_pastor == null) {

              $pre_dis3 = $con->prepare("UPDATE groups_districts SET district_code = :district_code, parent_id = NULL, district_pastor = NULL, is_complete = 0 WHERE id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis3 = array(
                ':district_code' => $district_code,
                ':district_id' => $district_id,
                ':church_id' => $church_id
                );

              $result_dis3 = $pre_dis3->execute($values_dis3);

              /*if district_pastor is verified*/
              $pre_ve = $con->prepare("SELECT *
                                    FROM user
                                    WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
              $pre_ve->execute($values_ve);
              $result_ve = $pre_ve->fetch();

              if ($result_ve) {
                /*update actual pastor*/
                $pre_ac = $con->prepare("UPDATE user_groups SET district_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ac = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result_ac = $pre_ac->execute($values_ac);

                $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result_us = $pre_us->execute($values_us);

                /*delete user not verified*/
              }else{

                $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result2 = $pre2->execute($values2);

              }


              // update district_code in other group tables

              $pre_upco = $con->prepare("UPDATE groups_zones SET district_code = :district_code WHERE district_id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upco = array(
                ':district_code' => $district_code,
                ':district_id' => $district_id,
                ':church_id' => $church_id
              );

              $result_upco = $pre_upco->execute($values_upco);


              $pre_upco2 = $con->prepare("UPDATE groups_sectors SET district_code = :district_code WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upco2 = array(
                ':district_code' => $district_code,
                ':district_id' => $district_id,
                ':church_id' => $church_id
              );

              $result_upco2 = $pre_upco2->execute($values_upco2);

              $pre_upco3 = $con->prepare("UPDATE groups_cells SET district_code = :district_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upco3 = array(
                ':district_code' => $district_code,
                ':district_id' => $district_id,
                ':church_id' => $church_id
              );

              $result_upco3 = $pre_upco3->execute($values_upco3);


              if ($result_dis3) {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (District)*/
                  $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the district D" . $district_code;
                  $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del distrito D" . $district_code;

                }else{

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (District)*/
                  $en_mess2 = $first_name . " " . $last_name . " edited profile of the district D" . $district_code;
                  $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del distrito D" . $district_code;
                }

                $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead2 = array(
                    ':es_mess2' => $es_mess2,
                    ':en_mess2' => $en_mess2,
                    ':district_id' => $district_id,
                    ':final_d' => $final_d);

                $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'District has been successfully edited'));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }else{

              // verify if district_pastor exists
              $pre_di = $con->prepare("SELECT *
                                       FROM user
                                       WHERE id = :district_pastor AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di = array(':district_pastor' => $district_pastor, ':church_id' => $church_id);
              $pre_di->execute($values_di);
              $result_di = $pre_di->fetch();

              if ($result_di) {

                $verify = $result_di['verified_account'];

                /*activate user if verified_acc 1*/
                if ($verify == '1') {
                  $pre_upd = $con->prepare("UPDATE user SET status = 1 WHERE id = :district_pastor AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upd = array(
                    ':district_pastor' => $district_pastor,
                    ':church_id' => $church_id
                    );

                  $result_upd = $pre_upd->execute($values_upd);
                }

                $pre_dis = $con->prepare("UPDATE groups_districts SET district_code = :district_code, parent_id = NULL, district_pastor = :district_pastor, is_complete = 1, active = 1 WHERE id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id,
                  ':district_pastor' => $district_pastor
                  );

                $result_dis = $pre_dis->execute($values_dis);

                /*if district_pastor is verified*/
                $pre_ve = $con->prepare("SELECT *
                                      FROM user
                                      WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                $pre_ve->execute($values_ve);
                $result_ve = $pre_ve->fetch();

                if ($result_ve) {

                  /*update actual pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET district_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_us = $pre_us->execute($values_us);

                  /*delete user not verified*/
                }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

                }

                /*update new pastor*/
                $pre_ac = $con->prepare("UPDATE user_groups SET district_id = :district_id WHERE user_id = :district_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ac = array(
                  ':district_pastor' => $district_pastor,
                  ':district_id' => $district_id
                  );

                $result_ac = $pre_ac->execute($values_ac);

                $pre_us2 = $con->prepare("UPDATE user SET is_complete = 1 WHERE id = :district_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us2 = array(
                  ':district_pastor' => $district_pastor
                  );

                $result_us2 = $pre_us2->execute($values_us2);


                // update district_code in other group tables

                $pre_upco = $con->prepare("UPDATE groups_zones SET district_code = :district_code WHERE district_id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                );

                $result_upco = $pre_upco->execute($values_upco);


                $pre_upco2 = $con->prepare("UPDATE groups_sectors SET district_code = :district_code WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco2 = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                );

                $result_upco2 = $pre_upco2->execute($values_upco2);

                $pre_upco3 = $con->prepare("UPDATE groups_cells SET district_code = :district_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco3 = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                );

                $result_upco3 = $pre_upco3->execute($values_upco3);
                

                if ($result_dis) {

                  /*************** ACTIVITIES ***********************/

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (District)*/
                    $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the district D" . $district_code;
                    $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del distrito D" . $district_code;

                  }else{

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (District)*/
                    $en_mess2 = $first_name . " " . $last_name . " edited profile of the district D" . $district_code;
                    $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del distrito D" . $district_code;
                  }

                  /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (District)*/
                  $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead2 = array(
                      ':es_mess2' => $es_mess2,
                      ':en_mess2' => $en_mess2,
                      ':district_id' => $district_id,
                      ':final_d' => $final_d);

                  $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                  
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => 'District has been successfully edited'));
                }else{

                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
                }

                
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District pastor does not exist",
                            "status"=>422)));
              }

            } // end else pastor

          }else{

            // verify if pastor is null
            if ($district_pastor == "null" || $district_pastor == null) {

              // verify if parent_district exists
              $pre_di2 = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :parent_district AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di2 = array(':parent_district' => $parent_district, ':church_id' => $church_id);
              $pre_di2->execute($values_di2);
              $result_di2 = $pre_di2->fetch();

              if ($result_di2) {
              
                $pre_dis3 = $con->prepare("UPDATE groups_districts SET district_code = :district_code, parent_id = :parent_district, district_pastor = NULL, is_complete = 0 WHERE id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis3 = array(
                  ':district_code' => $district_code,
                  ':parent_district' => $parent_district,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                  );

                $result_dis3 = $pre_dis3->execute($values_dis3);

                /*if district_pastor is verified*/
                $pre_ve = $con->prepare("SELECT *
                                      FROM user
                                      WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                $pre_ve->execute($values_ve);
                $result_ve = $pre_ve->fetch();

                if ($result_ve) {

                  /*update actual pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET district_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_us = $pre_us->execute($values_us);

                }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

                }


                // update district_code in other group tables

                $pre_upco = $con->prepare("UPDATE groups_zones SET district_code = :district_code WHERE district_id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                );

                $result_upco = $pre_upco->execute($values_upco);


                $pre_upco2 = $con->prepare("UPDATE groups_sectors SET district_code = :district_code WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco2 = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                );

                $result_upco2 = $pre_upco2->execute($values_upco2);

                $pre_upco3 = $con->prepare("UPDATE groups_cells SET district_code = :district_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco3 = array(
                  ':district_code' => $district_code,
                  ':district_id' => $district_id,
                  ':church_id' => $church_id
                );

                $result_upco3 = $pre_upco3->execute($values_upco3);

                if ($result_dis3) {

                  /*************** ACTIVITIES ***********************/

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (District)*/
                    $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the district D" . $district_code;
                    $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del distrito D" . $district_code;

                  }else{
                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (District)*/
                    $en_mess2 = $first_name . " " . $last_name . " edited profile of the district D" . $district_code;
                    $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del distrito D" . $district_code;
                  }

                  $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead2 = array(
                      ':es_mess2' => $es_mess2,
                      ':en_mess2' => $en_mess2,
                      ':district_id' => $district_id,
                      ':final_d' => $final_d);

                  $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                  
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => 'District has been successfully edited'));
                }else{

                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
                }

              }else{
                return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Parent District does not exist",
                          "status"=>422)));
              }

              /*if parent_district and district_pastor != null*/
            }else{
              
              // verify if district_pastor exists
              $pre_di = $con->prepare("SELECT *
                                       FROM user
                                       WHERE id = :district_pastor AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di = array(':district_pastor' => $district_pastor, ':church_id' => $church_id);
              $pre_di->execute($values_di);
              $result_di = $pre_di->fetch();

              if ($result_di) {

                $verify = $result_di['verified_account'];

                // verify if parent_district exists
                $pre_di2 = $con->prepare("SELECT *
                                         FROM groups_districts
                                         WHERE id = :parent_district AND church_id = :church_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_di2 = array(':parent_district' => $parent_district, ':church_id' => $church_id);
                $pre_di2->execute($values_di2);
                $result_di2 = $pre_di2->fetch();

                if ($result_di2) {

                  /*activate user if verified_acc 1*/
                  if ($verify == '1') {
                    $pre_upd = $con->prepare("UPDATE user SET status = 1 WHERE id = :district_pastor AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_upd = array(
                      ':district_pastor' => $district_pastor,
                      ':church_id' => $church_id
                      );

                    $result_upd = $pre_upd->execute($values_upd);
                  }

                  $pre_dis = $con->prepare("UPDATE groups_districts SET district_code = :district_code, parent_id = :parent_district, district_pastor = :district_pastor, is_complete = 1, active = 1 WHERE id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis = array(
                    ':district_code' => $district_code,
                    ':parent_district' => $parent_district,
                    ':district_id' => $district_id,
                    ':church_id' => $church_id,
                    ':district_pastor' => $district_pastor
                    );

                  $result_dis = $pre_dis->execute($values_dis);


                  /*if district_pastor is verified*/
                  $pre_ve = $con->prepare("SELECT *
                                        FROM user
                                        WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                        array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                  $pre_ve->execute($values_ve);
                  $result_ve = $pre_ve->fetch();

                  if ($result_ve) {

                    /*update actual pastor*/
                    $pre_ac = $con->prepare("UPDATE user_groups SET district_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_ac = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result_ac = $pre_ac->execute($values_ac);

                    $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_us = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result_us = $pre_us->execute($values_us);

                  }else{

                    $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values2 = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result2 = $pre2->execute($values2);

                  }

                  /*update new pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET district_id = :district_id WHERE user_id = :district_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':district_pastor' => $district_pastor,
                    ':district_id' => $district_id
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us2 = $con->prepare("UPDATE user SET is_complete = 1 WHERE id = :district_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us2 = array(
                    ':district_pastor' => $district_pastor
                    );

                  $result_us2 = $pre_us2->execute($values_us2);


                  // update district_code in other group tables

                  $pre_upco = $con->prepare("UPDATE groups_zones SET district_code = :district_code WHERE district_id = :district_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upco = array(
                    ':district_code' => $district_code,
                    ':district_id' => $district_id,
                    ':church_id' => $church_id
                  );

                  $result_upco = $pre_upco->execute($values_upco);


                  $pre_upco2 = $con->prepare("UPDATE groups_sectors SET district_code = :district_code WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upco2 = array(
                    ':district_code' => $district_code,
                    ':district_id' => $district_id,
                    ':church_id' => $church_id
                  );

                  $result_upco2 = $pre_upco2->execute($values_upco2);

                  $pre_upco3 = $con->prepare("UPDATE groups_cells SET district_code = :district_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upco3 = array(
                    ':district_code' => $district_code,
                    ':district_id' => $district_id,
                    ':church_id' => $church_id
                  );

                  $result_upco3 = $pre_upco3->execute($values_upco3);

                  if ($result_dis) {

                    /*************** ACTIVITIES ***********************/

                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*ACTIVITY GROUPS*/

                      /*Activity Profile updates (District)*/
                      $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the district D" . $district_code;
                      $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del distrito D" . $district_code;

                    }else{

                      /*ACTIVITY GROUPS*/

                      /*Activity Profile updates (District)*/
                      $en_mess2 = $first_name . " " . $last_name . " edited profile of the district D" . $district_code;
                      $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del distrito D" . $district_code;
                    }

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (District)*/
                    $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead2 = array(
                        ':es_mess2' => $es_mess2,
                        ':en_mess2' => $en_mess2,
                        ':district_id' => $district_id,
                        ':final_d' => $final_d);

                    $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                    
                    return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'District has been successfully edited'));
                  }else{

                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                              "message"=>"There was a problem, verify your parameters",
                              "status"=>422)));
                  }

                }else{
                  return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Parent District does not exist",
                            "status"=>422)));
                }
                
                
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District pastor does not exist",
                            "status"=>422)));
              }

            } /*end else parent_district and district_pastor != null*/

          } // end else parent is null

        } // end else code exists

      }else{
        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"District does not exist",
                  "status"=>422)));
      }
       
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"You do'nt have permission to edit this group",
                  "status"=>422)));
    }

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "message"=>"User with this role does not exist",
                 "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/districts/invitation', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $district_id = $request->getParam('district_id');
   $email_pastor = $request->getParam('email_pastor');

   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email_pastor);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($email_pastor)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: email_pastor",
               "status"=>500)));
   }else if(!$valid_email){

    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "message"=>"You must enter a valid email address",
              "status"=>422)));
   }

   // type user (member-group or admin)
   if ($type_user == "member-group") {
    
    if ($role_id == '1') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $email_principal_user = $result_user['email'];

          $pre_dis = $con->prepare("SELECT district_pastor
                                   FROM groups_districts
                                   WHERE id = :district_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dis = array(':district_id' => $district_id);
          $pre_dis->execute($values_dis);
          $result_dis = $pre_dis->fetch();

          /*verify district pastor exist*/
          if ($result_dis['district_pastor'] == null) {
            
            $token_d = password_hash(microtime(), PASSWORD_BCRYPT);
            $token_d = substr($token_d, 7, strlen($token_d));
            $token_d = preg_replace("#[^a-z0-9._]#i", "", $token_d);

            $code_d = bin2hex(openssl_random_pseudo_bytes(3));

            $date_d = date("Y-m-d H:i:s"); 

            $date_g = date("Y-m-d"); 

            $mail = new PHPMailer;
            //Enable SMTP debugging. 
            // $mail->SMTPDebug = 3;                               
            //Set PHPMailer to use SMTP.
            $mail->isSMTP();            
            //Set SMTP host name                          
            $mail->Host = "smtp.mailtrap.io";
            //Set this to true if SMTP host requires authentication to send email
            $mail->SMTPAuth = true;                          
            //Provide username and password     
            $mail->Username = "1c2d44422b38c1";                 
            $mail->Password = "a0d4af94adb609";                           
            //If SMTP requires TLS encryption then set it
            $mail->SMTPSecure = "tls";                           
            //Set TCP port to connect to 
            $mail->Port = 25;                                   

            $mail->CharSet = "UTF-8";
            $mail->From = $email_principal_user;
            $mail->FromName = "CÃ©lulas";

            $mail->addAddress($email_pastor);

            $mail->isHTML(true);

            $mail->Subject = "Invitation District Pastor";
            $mail->Body = "<p>You have been invited to be part of C+ iRest as a district pastor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d</a></p>";
            $mail->AltBody = "Invitation District Pastor";

            // $mail->send();

            if(!$mail->send()) {

              return $response->withStatus(422)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Message could not be sent.",
                         "Mailer Error:"=>$mail->ErrorInfo,
                         "status"=>422)));
            } else {

               $church_d = $result_user['church_id'];

               /*exelerate_id*/
               $exe = rand(10000, 99999);

               $pre_dis2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `is_complete`,`created_at`, `updated_at`) VALUES (NULL, :church_d, '$token_d', NULL, NULL, :email_pastor, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'2','$exe', '$code_d', '0' ,'0', '0' , '0', '0', '0', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

               $values_dis2 = array(
                 ':email_pastor' => $email_pastor,
                 ':church_d' => $church_d
                 );

               $result_dis2 = $pre_dis2->execute($values_dis2);
               $id_d = $con->lastInsertId();

               /*Update*/

               $pre_dis3 = $con->prepare("UPDATE groups_districts SET district_pastor = :id_d, active = '1', is_complete = '1' WHERE id = :district_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

               $values_dis3 = array(
                 ':district_id' => $district_id,
                 ':id_d' => $id_d
                 );

               $result_dis3 = $pre_dis3->execute($values_dis3);


               if ($result_dis3) {
                 
                 return $response->withStatus(200)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('response' => 'Invitations sent successfully'));
               }else{

                 return $response->withStatus(422)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"There was a problem, verify your parameters",
                           "status"=>422)));
               }

            } /*end else*/

          } else{
            
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"This District already has a District Pastor",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    

   }
   else{

    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Type user does not exist",
                "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/districts/activate', function ($request,$response) {

  try{
   $con = $this->db;
   $district_id = $request->getParam('district_id');
   $church_id = $request->getParam('church_id');
   $active = $request->getParam('active');

   if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i",$active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }

    $pre_i = $con->prepare("SELECT *
                             FROM groups_districts
                             WHERE id = :district_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':district_id' => $district_id, ':church_id' => $church_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      if ($active == '0') {

        /*inactivate district and district_pastor*/
        
        $pre = $con->prepare("UPDATE groups_districts SET active = '0'
                             WHERE id = :district_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':district_id' => $district_id);
        $result = $pre->execute($values);

        $pre_dpastor = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT district_pastor FROM groups_districts WHERE id = :district_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dpastor = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_dpastor = $pre_dpastor->execute($values_dpastor);

        /*inactivate zones and zones_pastor*/

        $pre_zone = $con->prepare("UPDATE groups_zones SET active = '0'
                             WHERE district_id = :district_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_zone = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_zone = $pre_zone->execute($values_zone);

        $pre_zpastor = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT zone_pastor FROM groups_zones WHERE district_id = :district_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_zpastor = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_zpastor = $pre_zpastor->execute($values_zpastor);

        /*inactivate sectors and supervisors*/

        $pre_sector = $con->prepare("UPDATE groups_sectors SET active = '0' WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_sector = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_sector = $pre_sector->execute($values_sector);

        $pre_super = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT supervisor FROM groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_super = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_super = $pre_super->execute($values_super);

        /*inactivate cells and leaders*/

        $pre_cell = $con->prepare("UPDATE groups_cells SET active = '0' WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cell = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_cell = $pre_cell->execute($values_cell);

        $pre_lead = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT leader FROM groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_lead = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_lead = $pre_lead->execute($values_lead);

        /*inactivate members associated with cells*/

        $pre_member = $con->prepare("UPDATE members_cells SET active = '0' WHERE cell_id IN (SELECT id from groups_cells where sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_member = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_member = $pre_member->execute($values_member);

        if($result){
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'District and associated groups has been inactivated successfully')));
        }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }

      } else if ($active == '1'){

        /*activate district and district_pastor*/
        
        $pre = $con->prepare("UPDATE groups_districts SET active = '1'
                             WHERE id = :district_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':district_id' => $district_id);
        $result = $pre->execute($values);

        $pre_dpastor = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT district_pastor FROM groups_districts WHERE id = :district_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dpastor = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_dpastor = $pre_dpastor->execute($values_dpastor);

        /*activate zones and zones_pastor*/

        $pre_zone = $con->prepare("UPDATE groups_zones SET active = '1'
                             WHERE district_id = :district_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_zone = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_zone = $pre_zone->execute($values_zone);

        $pre_zpastor = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT zone_pastor FROM groups_zones WHERE district_id = :district_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_zpastor = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_zpastor = $pre_zpastor->execute($values_zpastor);

        /*activate sectors and supervisors*/

        $pre_sector = $con->prepare("UPDATE groups_sectors SET active = '1' WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_sector = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_sector = $pre_sector->execute($values_sector);

        $pre_super = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT supervisor FROM groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_super = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_super = $pre_super->execute($values_super);

        /*activate cells and leaders*/

        $pre_cell = $con->prepare("UPDATE groups_cells SET active = '1' WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cell = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_cell = $pre_cell->execute($values_cell);

        $pre_lead = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT leader FROM groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_lead = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_lead = $pre_lead->execute($values_lead);

        /*activate members associated with cells*/

        $pre_member = $con->prepare("UPDATE members_cells SET active = '1' WHERE cell_id IN (SELECT id from groups_cells where sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where district_id = :district_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_member = array(':district_id' => $district_id, ':church_id' => $church_id);
        $result_member = $pre_member->execute($values_member);

        if($result){
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'District and associated groups has been activated successfully')));
        }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"filter does not exist",
                    "status"=>422)));

      }


    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"District does not exist",
                  "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

 /*group children*/
$app->post('/districts/zones-groups-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $district_id = $request->getParam('district_id');
   $active = $request->getParam('active');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   }
   // else if(!preg_match("/^[0-1]+$/i", $active)){
   //   return $response->withStatus(500)
   //           ->withHeader('Content-Type', 'application/json')
   //           ->withJson(array('error' => array(
   //             "message"=>"Missing parameter: active",
   //             "status"=>500)));
   // }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("SELECT *
                             FROM groups_districts
                             WHERE id = :district_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':district_id' => $district_id);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {

      $final_church = $result['church_id'];

      if ($active || $active == '0') {
        
        if ($active == '0') {
          
          $sql = "SELECT groups_zones.id,groups_zones.zone_code,groups_zones.district_code, groups_zones.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.district_id = $district_id AND groups_zones.church_id = $final_church AND groups_zones.active = 0";
          
          foreach ($con->query($sql) as $row) {
            $zones[] = $row;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $zones));

        }else if ($active == '1') {

          $sql2 = "SELECT groups_zones.id,groups_zones.zone_code,groups_zones.district_code,groups_zones.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.district_id = $district_id AND groups_zones.church_id = $final_church AND groups_zones.active = 1";
          

          foreach ($con->query($sql2) as $row2) {
            $zones2[] = $row2;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $zones2));
        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"filter does not exist",
                      "status"=>422)));
        }

        /*if empty active*/
      }else{

        $sql = "SELECT groups_zones.id,groups_zones.zone_code,groups_zones.district_code, groups_zones.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.district_id = $district_id AND groups_zones.church_id = $final_church";
        
        foreach ($con->query($sql) as $row) {
          $zones[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $zones));

      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"District does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*report children*/
$app->post('/districts/reports-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $district_id = $request->getParam('district_id');
   $district_code = $request->getParam('district_code');
   $initial_date_range = $request->getParam('initial_date_range');
   $end_date_range = $request->getParam('end_date_range');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $pre = $con->prepare("SELECT *
                             FROM groups_districts
                             WHERE id = :district_id AND district_code = :district_code", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':district_id' => $district_id, ':district_code' => $district_code);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {

      $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date_range);
      $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date_range);

      if ($initial_date_range || $end_date_range) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        } else if($initial_date_range > $end_date_range){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Final date must be greater than initial date",
                    "status"=>500)));
        }else if(empty($initial_date_range) || empty($end_date_range)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        }


        $sql = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code, reports.cell_id, reports.creation_date, CONCAT(user.first_name, ' ', user.last_name) AS leader FROM reports, groups_cells,user WHERE reports.cell_id = groups_cells.id AND groups_cells.leader = user.id AND reports.district_code = $district_code AND groups_cells.church_id = $final_church AND reports.creation_date BETWEEN '$initial_date_range' AND '$end_date_range' ORDER BY reports.creation_date DESC";
          

        foreach ($con->query($sql) as $row) {
          $reports[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $reports));


      } else{

        $sql2 = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, CONCAT(user.first_name, ' ', user.last_name) AS leader FROM reports, groups_cells,user WHERE reports.cell_id = groups_cells.id AND groups_cells.leader = user.id AND reports.district_code = $district_code AND groups_cells.church_id = $final_church";
          

        foreach ($con->query($sql2) as $row2) {
          $reports2[] = $row2;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $reports2));

      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"District does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/************* Transfers ***********************/

/*Transfer zone*/
$app->post('/districts/transfer-zone', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $zone_id = $request->getParam('zone_id');
   $district_id = $request->getParam('district_id');
   // $zone_code = $request->getParam('zone_code');
   $district_code = $request->getParam('district_code');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   }else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    
    if ($role_id == '2') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $first_name = $result_user['first_name'];
          $last_name = $result_user['last_name'];

          $final_church = $result_user['church_id'];

          $pre_zone = $con->prepare("SELECT *
                                   FROM groups_zones
                                   WHERE id = :zone_id AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_zone = array(':zone_id' => $zone_id, ':final_church' => $final_church);
          $pre_zone->execute($values_zone);
          $result_zone = $pre_zone->fetch();

          /*verify zone exist*/
          if ($result_zone) {

              $zone_code = $result_zone['zone_code'];

              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :district_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':district_id' => $district_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              if ($result_dis) {
                
                $sql_code = "SELECT zone_code FROM groups_zones WHERE district_id = $district_id";

                $final_code = null;
                
                foreach ($con->query($sql_code) as $row_code) {
                  $final_code[] = $row_code;
                }

                $err_code = 0;

                /*verify if zone_code exist*/
                for($i = 0; $i < count($final_code); $i++) {

                  if($final_code[$i]['zone_code'] == $zone_code){
                    $err_code += 1;
                  }

                }

                // if zone_code exist, new code is assigned
                if ($err_code > 0) {

                  $pre_max = $con->prepare("SELECT max(zone_code) as max_code
                                           FROM groups_zones
                                           WHERE district_id = :district_id", 
                                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_max = array(':district_id' => $district_id);
                  $pre_max->execute($values_max);
                  $result_max = $pre_max->fetch();

                  $new_code = $result_max['max_code']+1;
                  
                  /*Update zone with new district*/

                  $pre_dis3 = $con->prepare("UPDATE groups_zones SET district_code = :district_code, district_id = :district_id, zone_code = :new_code WHERE id = :zone_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis3 = array(
                     ':district_id' => $district_id,
                     ':district_code' => $district_code,
                     ':new_code' => $new_code,
                     ':zone_id' => $zone_id,
                  );

                  $result_dis3 = $pre_dis3->execute($values_dis3);

                  /*Update zone_code in sector table*/
                  $pre_dis4 = $con->prepare("UPDATE groups_sectors SET zone_code = :new_code, district_code = :district_code WHERE zone_id = :zone_id AND church_id = :final_church", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis4 = array(
                  	 ':district_code' => $district_code,
                     ':new_code' => $new_code,
                     ':zone_id' => $zone_id,
                     ':final_church' => $final_church
                  );

                  $result_dis4 = $pre_dis4->execute($values_dis4);

                  /*Update zone_code in cell table*/
                  $pre_dis5 = $con->prepare("UPDATE groups_cells set zone_code = :new_code, district_code = :district_code WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :zone_id) AND church_id = :final_church", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis5 = array(
                  	 ':district_code' => $district_code,
                     ':new_code' => $new_code,
                     ':zone_id' => $zone_id,
                     ':final_church' => $final_church
                  );

                  $result_dis5 = $pre_dis5->execute($values_dis5);


                  if ($result_dis5) {

                    $date_u = date("Y-m-d H:i:s");

                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity Zoneâs transfer confirmation (District Pastor)*/
                      $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la zona Z" . $zone_code . " a D" . $district_code;

                      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_actm = array(
                          ':es_message' => $es_message, 
                          ':en_message' => $en_message, 
                          ':id_m' => $impersonate_id,
                          ':date_u' => $date_u);

                      $result_actm = $pre_actm->execute($values_actm);

                      /*ACTIVITY GROUPS*/

                      /*Activity Zoneâs transfer confirmation (District)*/
                      $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la zona Z" . $zone_code . " a D" . $district_code;

                    }else{

                      /*Activity Zoneâs transfer confirmation (District Pastor)*/
                      $en_message = $first_name . " " . $last_name . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message = $first_name . " " . $last_name . " transfiriÃ³ la zona Z" . $zone_code . " a D" . $district_code;

                      /*ACTIVITY GROUPS*/

                      /*Activity Zoneâs transfer confirmation (District)*/
                      $en_message2 = $first_name . " " . $last_name . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ la zona Z" . $zone_code . " a D" . $district_code;
                    }

                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message, 
                        ':en_message' => $en_message, 
                        ':id_m' => $user_id,
                        ':date_u' => $date_u);

                    $result_act = $pre_act->execute($values_act);


                    /*ACTIVITY GROUPS*/

                    /*Activity Zoneâs transfer confirmation (District)*/
                    $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act2 = array(
                        ':es_message2' => $es_message2, 
                        ':en_message2' => $en_message2, 
                        ':district_id' => $district_id,
                        ':date_u' => $date_u);

                    $result_act2 = $pre_act2->execute($values_act2);
                     
                    return $response->withStatus(200)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('response' => 'Zone has been transferred successfully'));
                  }else{

                    return $response->withStatus(422)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"There was a problem, verify your parameters",
                               "status"=>422)));
                  }

                }else{

                  /*Update zone with new district*/

                  $pre_dis3 = $con->prepare("UPDATE groups_zones SET district_code = :district_code, district_id = :district_id, zone_code = :zone_code WHERE id = :zone_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis3 = array(
                     ':district_id' => $district_id,
                     ':district_code' => $district_code,
                     ':zone_code' => $zone_code,
                     ':zone_id' => $zone_id,
                  );

                  $result_dis3 = $pre_dis3->execute($values_dis3);


                  /*Update zone_code in sector table*/
                  $pre_dis4 = $con->prepare("UPDATE groups_sectors SET zone_code = :zone_code, district_code = :district_code WHERE zone_id = :zone_id AND church_id = :final_church", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis4 = array(
                  	 ':district_code' => $district_code,
                     ':zone_code' => $zone_code,
                     ':zone_id' => $zone_id,
                     ':final_church' => $final_church
                  );

                  $result_dis4 = $pre_dis4->execute($values_dis4);

                  /*Update zone_code in cell table*/
                  $pre_dis5 = $con->prepare("UPDATE groups_cells set zone_code = :zone_code, district_code = :district_code WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :zone_id) AND church_id = :final_church", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis5 = array(
                  	 ':district_code' => $district_code,
                     ':zone_code' => $zone_code,
                     ':zone_id' => $zone_id,
                     ':final_church' => $final_church
                  );

                  $result_dis5 = $pre_dis5->execute($values_dis5);


                  if ($result_dis5) {

                    $date_u = date("Y-m-d H:i:s");


                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity Zoneâs transfer confirmation (District Pastor)*/
                      $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la zona Z" . $zone_code . " al D" . $district_code;

                      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_actm = array(
                          ':es_message' => $es_message, 
                          ':en_message' => $en_message, 
                          ':id_m' => $impersonate_id,
                          ':date_u' => $date_u);

                      $result_actm = $pre_actm->execute($values_actm);

                      /*Activity Zoneâs transfer confirmation (District)*/
                      $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la zona Z" . $zone_code . " a D" . $district_code;
                      
                    }else{
                      /*Activity Zoneâs transfer confirmation (District Pastor)*/
                      $en_message = $first_name . " " . $last_name . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message = $first_name . " " . $last_name . " transfiriÃ³ la zona Z" . $zone_code . " al D" . $district_code;

                      /*Activity Zoneâs transfer confirmation (District)*/
                      $en_message2 = $first_name . " " . $last_name . " transferred zone Z" . $zone_code . " to D" . $district_code;
                      $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ la zona Z" . $zone_code . " a D" . $district_code;
                    }

                    /*Activity Zoneâs transfer confirmation (District Pastor)*/
                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message, 
                        ':en_message' => $en_message, 
                        ':id_m' => $user_id,
                        ':date_u' => $date_u);

                    $result_act = $pre_act->execute($values_act);


                    /*ACTIVITY GROUPS*/

                    /*Activity Zoneâs transfer confirmation (District)*/
                    $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act2 = array(
                        ':es_message2' => $es_message2, 
                        ':en_message2' => $en_message2, 
                        ':district_id' => $district_id,
                        ':date_u' => $date_u);

                    $result_act2 = $pre_act2->execute($values_act2);

                     
                    return $response->withStatus(200)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('response' => 'Zone has been transferred successfully'));
                  }else{

                    return $response->withStatus(422)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"There was a problem, verify your parameters",
                               "status"=>422)));
                  }

                } /*end else err_code*/

              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District does not exist",
                            "status"=>422)));

              }

          } else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Zone does not exist",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*Trasnfer zone pastor*/
$app->post('/districts/transfer-zone-pastor', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $zone_pastor_id = $request->getParam('zone_pastor_id');
   $district_id = $request->getParam('district_id');
   // $district_code = $request->getParam('district_code');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($zone_pastor_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_pastor_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   }


   /*Impersonate*/
    if ($impersonate) {
     
      if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
      }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
      } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
      }

     $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "message"=>"Impersonated user with this role does not exist",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

    }

    
    if ($role_id == '2') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $final_church = $result_user['church_id'];

          $first_name = $result_user['first_name'];
          $last_name = $result_user['last_name'];

          $pre_lead = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :zone_pastor_id AND rol = 3 AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_lead = array(':zone_pastor_id' => $zone_pastor_id, ':final_church' => $final_church);
          $pre_lead->execute($values_lead);
          $result_lead = $pre_lead->fetch();

          /*verify zone_pastor exist*/
          if ($result_lead) {

              $first_name_l = $result_lead['first_name'];
              $last_name_l = $result_lead['last_name'];

              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :district_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':district_id' => $district_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              /*verify district exist*/
              if ($result_dis) {

                $final_d = $result_dis['district_code'];

                $pre_id = $con->prepare("SELECT *
                                         FROM groups_zones
                                         WHERE zone_pastor = :zone_pastor_id AND church_id = :final_church", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_id = array(':zone_pastor_id' => $zone_pastor_id, ':final_church' => $final_church);
                $pre_id->execute($values_id);
                $result_id = $pre_id->fetch();

                /*verify if zone is associated with zone_pastor*/
                if ($result_id) {

                  $zone_id = $result_id['id'];
                  
                  /*Update zone associated*/

                  $pre_zone = $con->prepare("UPDATE groups_zones SET zone_pastor = NULL, is_complete = 0 WHERE id = :zone_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_zone = array(
                     ':zone_id' => $zone_id
                  );

                  $result_zone = $pre_zone->execute($values_zone);

                }

                /*Update user_groups*/
                $pre_gr = $con->prepare("UPDATE user_groups SET zone_id = NULL, district_id = :district_id WHERE user_id = :zone_pastor_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_gr = array(
                   ':zone_pastor_id' => $zone_pastor_id,
                   ':district_id' => $district_id
                );

                $result_gr = $pre_gr->execute($values_gr);

                $pre_us = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :zone_pastor_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                   ':zone_pastor_id' => $zone_pastor_id
                );

                $result_us = $pre_us->execute($values_us);

                if ($result_gr) {

                  $date_u = date("Y-m-d H:i:s");

                  /*************** ACTIVITIES ***********************/

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*Activity Zone pastorâs transfer confirmation (District Pastor)*/
                    $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred zone pastor " . $first_name_l . " " . $last_name_l . " to D" . $final_d;
                    $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el pastor de zona " . $first_name_l . " " . $last_name_l . " a D" . $final_d;

                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message,
                        ':en_message' => $en_message, 
                        ':id_m' => $impersonate_id,
                        ':date_u' => $date_u);

                    $result_act = $pre_act->execute($values_act);

                    /*ACTIVITY GROUP*/

                    /*Activity Zone pastorâs transfer confirmation (District)*/
                    $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred zone pastor " . $first_name_l . " " . $last_name_l . " to D" . $final_d;
                    $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el pastor de zona " . $first_name_l . " " . $last_name_l . " a D" . $final_d;

                  }else{

                    /*Activity Zone pastorâs transfer confirmation (District Pastor)*/
                    $en_message = $first_name . " " . $last_name . " transferred zone pastor " . $first_name_l . " " . $last_name_l . " to D" . $final_d;
                    $es_message = $first_name . " " . $last_name . " transfiriÃ³ el pastor de zona " . $first_name_l . " " . $last_name_l . " a D" . $final_d;

                    /*ACTIVITY GROUP*/

                    /*Activity Zone pastorâs transfer confirmation (District)*/
                    $en_message2 = $first_name . " " . $last_name . " transferred zone pastor " . $first_name_l . " " . $last_name_l . " to D" . $final_d;
                    $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ el pastor de zona " . $first_name_l . " " . $last_name_l . " a D" . $final_d;

                  }

                  /*Activity Zone pastorâs transfer confirmation (District Pastor)*/
                  $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $user_id,
                      ':date_u' => $date_u);

                  $result_act = $pre_act->execute($values_act);


                  /*ACTIVITY GROUP*/

                  /*Activity Zone pastorâs transfer confirmation (District)*/
                  $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act2 = array(
                      ':es_message2' => $es_message2,
                      ':en_message2' => $en_message2, 
                      ':district_id' => $district_id,
                      ':date_u' => $date_u); 

                  $result_act2 = $pre_act2->execute($values_act2);
                   
                  return $response->withStatus(200)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('response' => 'Zone Pastor has been transferred successfully'));
                }else{

                  return $response->withStatus(422)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('error' => array(
                             "message"=>"There was a problem, verify your parameters",
                             "status"=>422)));
                }
                

              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District does not exist",
                            "status"=>422)));

              }

          } else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Zone Pastor does not exist",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/********** CELLS **************/

$app->post('/cells/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');
   $active = $request->getParam('active');
   $district_code = $request->getParam('district_code');
   $zone_code = $request->getParam('zone_code');
   $sector_code = $request->getParam('sector_code');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $filter_val = '';

    /*validate filter logged*/
    if ($rol_id != '1' || $rol_id != '6' || $rol_id != '7') {

      /*obtain group id of the user logued*/
      $pre_gr = $con->prepare("SELECT *
                               FROM user_groups
                               WHERE user_id = :user_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gr = array(':user_id' => $user_id);
      $pre_gr->execute($values_gr);
      $result_gr = $pre_gr->fetch();

      if ($rol_id == '2') {
          
        $district_id = $result_gr['district_id'];

        $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church')";

      } else if ($rol_id == '3') {
          
        $zone_id = $result_gr['zone_id'];

        $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$zone_id' AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church')";

      } else if ($rol_id == '4') {
          
        $sector_id = $result_gr['sector_id'];

        $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id = '$sector_id' AND active = 1 AND church_id = '$final_church')";

      }

    }

    if ($active == '0' || $active == '1') {

      /*filter district, sector and zone*/
      if($district_code && $sector_code && $zone_code){

        $sectors_pri = null;
        $sql_pri = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.district_code = $district_code AND groups_cells.sector_code = $sector_code AND groups_cells.zone_code = $zone_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

        foreach ($con->query($sql_pri) as $row_pri) {
          $sectors_pri[] = $row_pri;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_pri));

        /*filter district and sector*/
      } else if($district_code && $sector_code){

        $sectors_dc = null;
        $sql_dc = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.district_code = $district_code AND groups_cells.sector_code = $sector_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

        foreach ($con->query($sql_dc) as $row_dc) {
          $sectors_dc[] = $row_dc;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_dc));

        /*filter zone and sector*/
      } else if($zone_code && $sector_code){

        $sectors_zs = null;
        $sql_zs = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.zone_code = $zone_code AND groups_cells.sector_code = $sector_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

        foreach ($con->query($sql_zs) as $row_zs) {
          $sectors_zs[] = $row_zs;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_zs));

        /*filter zone and district*/
      } else if($zone_code && $district_code){

        $sectors_t = null;
        $sql_t = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.zone_code = $zone_code AND groups_cells.district_code = $district_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

        foreach ($con->query($sql_t) as $row_t) {
          $sectors_t[] = $row_t;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_t));

        /*filter district*/
      }else if($district_code){

        $sectors_di = null;
        $sql_di = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.district_code = $district_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";
        

        foreach ($con->query($sql_di) as $row_di) {
          $sectors_di[] = $row_di;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_di));

       /*filter zone*/
      }else if($zone_code){

        $sectors_zo = null;

        $sql_zo = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.zone_code = $zone_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";
        

        foreach ($con->query($sql_zo) as $row_zo) {
          $sectors_zo[] = $row_zo;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_zo));

        /*filter sector*/
      } else if($sector_code){
        $sectors_se = null;

        $sql_se = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.sector_code = $sector_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";
        

        foreach ($con->query($sql_se) as $row_se) {
          $sectors_se[] = $row_se;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_se));

        
      }
      else{

        $cells = null;

        $sql = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";
        

        foreach ($con->query($sql) as $row) {
          $cells[] = $row;
        }


        return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $cells));

      }


    }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"filter does not exist",
                    "status"=>422)));
    }



  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/activate', function ($request,$response) {

  try{
   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');
   $active = $request->getParam('active');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
    } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i",$active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    // verify if the logged in user exists
    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if ($result_user) {

      // verify if role exists
      if ($role_id == 4) {

        $first_name = $result_user['first_name'];
        $last_name =  $result_user['last_name'];
 
        $pre_i = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :cell_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_i = array(':cell_id' => $cell_id, ':church_id' => $church_id);
        $pre_i->execute($values_i);
        $result_i = $pre_i->fetch();

        if ($result_i) {

          /*Obtain sector_id for statistics*/
          $sector_f = $result_i['sector_id'];

          $final_c = $result_i['cell_code'];

          if ($active == '0') {

            /*inactivate cell and leader*/

            $pre = $con->prepare("UPDATE groups_cells SET active = '0' WHERE id = :cell_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(':cell_id' => $cell_id);
            $result = $pre->execute($values);


            $pre_zpastor = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT leader FROM groups_cells WHERE id = :cell_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zpastor = array(':cell_id' => $cell_id, ':church_id' => $church_id);
            $result_zpastor = $pre_zpastor->execute($values_zpastor);


            /*inactivate members associated with cells*/

            $pre_member = $con->prepare("UPDATE members_cells SET active = '0' WHERE cell_id IN (SELECT id from groups_cells where id = :cell_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_member = array(':cell_id' => $cell_id, ':church_id' => $church_id);
            $result_member = $pre_member->execute($values_member);


            if($result){

                $date_u = date("Y-m-d H:i:s");


                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Inactivated a Cell group (Supervisor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated cell group C" . $final_c;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ la cÃ©lula C" . $final_c;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(

                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':date_u' => $date_u);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Inactivated Cell Group confirmation (Sector)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated cell group C" . $final_c;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ la cÃ©lula C" . $final_c;


                }else{

                  /*Activity Inactivated a Cell group (Supervisor)*/
                  $en_message = $first_name . " " . $last_name . " inactivated cell group C" . $final_c;
                  $es_message = $first_name . " " . $last_name . " inactivÃ³ la cÃ©lula C" . $final_c;

                  /*ACTIVITY GROUPS*/

                  /*Activity Inactivated Cell Group confirmation (Sector)*/
                  $en_message2 = $first_name . " " . $last_name . " inactivated cell group C" . $final_c;
                  $es_message2 = $first_name . " " . $last_name . " inactivÃ³ la cÃ©lula C" . $final_c;
                }

                /*Activity Inactivated a Cell group (Supervisor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Cell Group confirmation (Sector)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_f,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2, 
                    ':sector_f' => $sector_f,
                    ':date_u' => $date_u);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Cell and associated groups has been inactivated successfully')));
            }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
            }


          } else if ($active == '1') {

            /*activate cell and leader*/

            $pre = $con->prepare("UPDATE groups_cells SET active = '1' WHERE id = :cell_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(':cell_id' => $cell_id);
            $result = $pre->execute($values);


            $pre_zpastor = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT leader FROM groups_cells WHERE id = :cell_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zpastor = array(':cell_id' => $cell_id, ':church_id' => $church_id);
            $result_zpastor = $pre_zpastor->execute($values_zpastor);


            /*activate members associated with cells*/

            $pre_member = $con->prepare("UPDATE members_cells SET active = '1' WHERE cell_id IN (SELECT id from groups_cells where id = :cell_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_member = array(':cell_id' => $cell_id, ':church_id' => $church_id);
            $result_member = $pre_member->execute($values_member);

            if($result){

                $date_u = date("Y-m-d H:i:s");


                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity impersonate Activated a Cell Group (Supervisor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated cell group C" . $final_c;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ la cÃ©lula C" . $final_c;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':date_u' => $date_u);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Activated Cell Group confirmation (Sector)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated cell group C" . $final_c;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ la cÃ©lula C" . $final_c;

                }else{

                  /*Activity Activated a Cell Group (Supervisor)*/
                  $en_message = $first_name . " " . $last_name . " activated cell group C" . $final_c;
                  $es_message = $first_name . " " . $last_name . " activÃ³ la cÃ©lula C" . $final_c;

                  /*ACTIVITY GROUPS*/

                  /*Activity Activated Cell Group confirmation (Sector)*/
                  $en_message2 = $first_name . " " . $last_name . " activated cell group C" . $final_c;
                  $es_message2 = $first_name . " " . $last_name . " activÃ³ la cÃ©lula C" . $final_c;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/

                /*Activity Activated Cell Group confirmation (Sector)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_f,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2, 
                    ':sector_f' => $sector_f,
                    ':date_u' => $date_u);

                $result_act2 = $pre_act2->execute($values_act2);


                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Cell and associated groups has been activated successfully')));
            }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"filter does not exist",
                        "status"=>422)));

          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell does not exist",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"You do'nt have permission to perform this action",
                    "status"=>422)));
      }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User with this role does not exist",
                  "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

 /*group children*/
$app->post('/cells/members-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');
   $cell_id = $request->getParam('cell_id');
   $active = $request->getParam('active');
   $filter_members = $request->getParam('filter_members');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $filter_members)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: filter_members",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':cell_id' => $cell_id);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {

      if ($filter_members == '0') {
        
        $sql = "SELECT id, CONCAT(first_name, ' ', last_name) AS name, email, phone, profile_picture, role, (CASE WHEN role = 1 THEN 'Guest' ELSE 'null' END) as member_role, active, is_complete FROM members_cells WHERE cell_id = $cell_id AND active = $active AND role = 1";
        

        foreach ($con->query($sql) as $row) {
          $members[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $members));

      }else if ($filter_members == '1') {

        $sql2 = "SELECT id, CONCAT(first_name, ' ', last_name) AS name, email, phone, profile_picture, role, (CASE WHEN role = 2 THEN 'Member' WHEN role = 3 THEN 'Host' WHEN role = 4 THEN 'Assistent' WHEN role = 5 THEN 'Secretary' ELSE 'null' END) as member_role, active, is_complete FROM members_cells WHERE cell_id = $cell_id AND active = $active AND role != 1";
        

        foreach ($con->query($sql2) as $row2) {
          $members2[] = $row2;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $members2));
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"filter_members does not exist",
                    "status"=>422)));
      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Cell does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*report children*/
$app->post('/cells/reports-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $initial_date_range = $request->getParam('initial_date_range');
   $end_date_range = $request->getParam('end_date_range');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

		$valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date_range);
		$valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date_range);

		if ($initial_date_range || $end_date_range) {

		  if (!$valid_initial_date || !$valid_end_date) {
		    return $response->withStatus(500)
		            ->withHeader('Content-Type', 'application/json')
		            ->withJson(array('error' => array(
		              "message"=>"You must enter a valid initial date and end date",
		              "status"=>500)));
		  } else if($initial_date_range > $end_date_range){
		    return $response->withStatus(500)
		            ->withHeader('Content-Type', 'application/json')
		            ->withJson(array('error' => array(
		              "message"=>"Final date must be greater than initial date",
		              "status"=>500)));
		  }else if(empty($initial_date_range) || empty($end_date_range)){
		    return $response->withStatus(500)
		            ->withHeader('Content-Type', 'application/json')
		            ->withJson(array('error' => array(
		              "message"=>"You must enter a valid initial date and end date",
		              "status"=>500)));
		  }


		  $sql = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = groups_cells.leader) AS leader FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = $final_church AND reports.creation_date BETWEEN '$initial_date_range' AND '$end_date_range' ORDER BY reports.creation_date DESC";
		    

		  foreach ($con->query($sql) as $row) {
		    $reports[] = $row;
		  }

		  return $response->withStatus(200)
		                    ->withHeader('Content-Type', 'application/json')
		                    ->withJson(array('response' => $reports));



		} else{

		  $sql2 = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = groups_cells.leader) AS leader FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = $final_church ORDER BY reports.creation_date DESC";
		    

		  foreach ($con->query($sql2) as $row2) {
		    $reports2[] = $row2;
		  }

		  return $response->withStatus(200)
		                    ->withHeader('Content-Type', 'application/json')
		                    ->withJson(array('response' => $reports2));

		}


	/*else user is not senior pastor*/
	}else{

		if(empty($cell_id)){
    	     return $response->withStatus(500)
    	             ->withHeader('Content-Type', 'application/json')
    	             ->withJson(array('error' => array(
    	               "message"=>"Missing parameter: cell_id",
    	               "status"=>500)));
    	}

	    $pre = $con->prepare("SELECT *
	                             FROM groups_cells
	                             WHERE id = :cell_id", 
	                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

	    $values = array(':cell_id' => $cell_id);
	    $pre->execute($values);
	    $result = $pre->fetch();


	    if ($result) {

	      $district_c = $result['district_code'];
	      $zone_c = $result['zone_code'];
	      $sector_c = $result['sector_code'];
	      $cell_c = $result['cell_code'];

	      $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date_range);
	      $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date_range);

	      if ($initial_date_range || $end_date_range) {

	        if (!$valid_initial_date || !$valid_end_date) {
	          return $response->withStatus(500)
	                  ->withHeader('Content-Type', 'application/json')
	                  ->withJson(array('error' => array(
	                    "message"=>"You must enter a valid initial date and end date",
	                    "status"=>500)));
	        } else if($initial_date_range > $end_date_range){
	          return $response->withStatus(500)
	                  ->withHeader('Content-Type', 'application/json')
	                  ->withJson(array('error' => array(
	                    "message"=>"Final date must be greater than initial date",
	                    "status"=>500)));
	        }else if(empty($initial_date_range) || empty($end_date_range)){
	          return $response->withStatus(500)
	                  ->withHeader('Content-Type', 'application/json')
	                  ->withJson(array('error' => array(
	                    "message"=>"You must enter a valid initial date and end date",
	                    "status"=>500)));
	        }


	        $sql = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = groups_cells.leader) AS leader FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND reports.cell_id = $cell_id AND groups_cells.church_id = $final_church AND reports.creation_date BETWEEN '$initial_date_range' AND '$end_date_range' ORDER BY reports.creation_date DESC";
	          

	        foreach ($con->query($sql) as $row) {
	          $reports[] = $row;
	        }

	        return $response->withStatus(200)
	                          ->withHeader('Content-Type', 'application/json')
	                          ->withJson(array('response' => $reports));



	      } else{

	        $sql2 = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = groups_cells.leader) AS leader FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND reports.cell_id = $cell_id AND groups_cells.church_id = $final_church ORDER BY reports.creation_date DESC";
	          

	        foreach ($con->query($sql2) as $row2) {
	          $reports2[] = $row2;
	        }

	        return $response->withStatus(200)
	                          ->withHeader('Content-Type', 'application/json')
	                          ->withJson(array('response' => $reports2));

	      }

	      
	    }else{
	      return $response->withStatus(422)
	              ->withHeader('Content-Type', 'application/json')
	              ->withJson(array('error' => array(
	                  "message"=>"Cell does not exist",
	                  "status"=>422)));
	    }

	}
    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



$app->post('/cells/members-profile', function ($request,$response) {

  try{
   $con = $this->db;
   $member_id = $request->getParam('member_id');
   $cell_id = $request->getParam('cell_id');

   if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }

    $pre_i = $con->prepare("SELECT *
                             FROM members_cells
                             WHERE id = :member_id AND cell_id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':member_id' => $member_id, ':cell_id' => $cell_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      $pre = $con->prepare("SELECT id, CONCAT(first_name, ' ', last_name) AS name, email, phone, profile_picture, address, city, gender, birth_date, role FROM members_cells WHERE id = $member_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':member_id' => $member_id);
      $pre->execute($values);
      $result = $pre->fetch();

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result));

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Member does not exist",
                  "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/members-activate', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');
   $cell_id = $request->getParam('cell_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if ($result_user) {

      $first_name_lead = $result_user['first_name'];
      $last_name_lead = $result_user['last_name'];

      $pre_i = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE id = :member_id AND cell_id = :cell_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_i = array(':member_id' => $member_id, ':cell_id' => $cell_id);
      $pre_i->execute($values_i);
      $result_i = $pre_i->fetch();

      if ($result_i) {

        $final_d = date("Y-m-d H:i:s");

        $first_name = $result_i['first_name'];
        $last_name = $result_i['last_name'];

        $status = $result_i['active'];
        $final_s = !$status;

        $pre = $con->prepare("UPDATE members_cells SET active = :status
                             WHERE id = :member_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':member_id' => $member_id, ':status' => $final_s);
        $result = $pre->execute($values);

        if($result){

            if ($final_s == '0') {

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Inactivated confirmation (Guest/cell Member)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated " . $first_name . " " . $last_name;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ a " . $first_name . " " . $last_name;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

              /*Inactivated cell member/Guest confirmation (Cell Group)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated " . $first_name . " " . $last_name;
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ a " . $first_name . " " . $last_name;

              }else{

                /*Activity Inactivated confirmation (Guest/cell Member)*/
                $en_message = $first_name_lead . " " . $last_name_lead . " inactivated " . $first_name . " " . $last_name;
                $es_message = $first_name_lead . " " . $last_name_lead . " inactivÃ³ a " . $first_name . " " . $last_name;

                /*ACTIVITY GROUPS*/

                /*Inactivated cell member/Guest confirmation (Cell Group)*/
                $en_message2 = $first_name_lead . " " . $last_name_lead . " inactivated " . $first_name . " " . $last_name;
                $es_message2 = $first_name_lead . " " . $last_name_lead . " inactivÃ³ a " . $first_name . " " . $last_name;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $member_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);

              /*ACTIVITY GROUPS*/

              /*Inactivated cell member/Guest confirmation (Cell Group)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2, 
                  ':cell_id' => $cell_id,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => array('message' => 'Has been successfully inactivated')));
            }else{

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Activated confirmation (Guest/cell Member)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated " . $first_name . " " . $last_name;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ a " . $first_name . " " . $last_name;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*Activated cell member/Guest confirmation (Cell Group)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated " . $first_name . " " . $last_name;
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ a " . $first_name . " " . $last_name;

              }else{
                /*Activity Activated confirmation (Guest/cell Member)*/
                $en_message = $first_name_lead . " " . $last_name_lead . " activated " . $first_name . " " . $last_name;
                $es_message = $first_name_lead . " " . $last_name_lead . " activÃ³ a " . $first_name . " " . $last_name;

                /*Activated cell member/Guest confirmation (Cell Group)*/
                $en_message2 = $first_name_lead . " " . $last_name_lead . " activated " . $first_name . " " . $last_name;
                $es_message2 = $first_name_lead . " " . $last_name_lead . " activÃ³ a " . $first_name . " " . $last_name;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $member_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);

              /*Activated cell member/Guest confirmation (Cell Group)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2,
                  ':cell_id' => $cell_id,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => array('message' => 'Has been successfully activated')));

            }

            
        }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Member does not exist",
                    "status"=>422)));
      }


    }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/add-member', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');

   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $exelerate_id = $request->getParam('exelerate_id');

   $steps = $request->getParam('steps');
   $guest_since = $request->getParam('guest_since');
   $member_since = $request->getParam('member_since');


   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
   $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($address)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: address",
               "status"=>500)));
    } else if(empty($city)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: city",
               "status"=>500)));
    } else if(empty($gender)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: gender",
                 "status"=>500)));
    } else if(empty($marital_status)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: marital_status",
                 "status"=>500)));
    } else if(empty($exelerate_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: exelerate_id",
               "status"=>500)));
    } else if(empty($birth_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: birth_date",
               "status"=>500)));
     } else if(empty($steps)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: steps",
               "status"=>500)));
     }else if(!$valid_phone){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid phone",
               "status"=>500)));
    } else if(!$valid_email){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid email address",
               "status"=>500)));
    } else if(!$valid_guest){
      return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                               "message"=>"You must enter a valid guest_since",
                               "status"=>500)));

    }else if(!$valid_member){
        return $response->withStatus(500)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                               "message"=>"You must enter a valid member_since",
                               "status"=>500)));
    } else if(!$valid_birthdate){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid birthdate",
                 "status"=>500)));

    } else if($married_since){

      if(!$valid_married){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid married date",
                 "status"=>500)));
      }

    }


    /*Impersonate*/
    if ($impersonate) {
      
      if ($impersonate != '1') {
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Impersonate is not valid",
                  "status"=>500)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: impersonate_role",
                 "status"=>500)));
     }

     $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
     $pre_imper->execute($values_imper);
     $result_imper = $pre_imper->fetch();

     if (empty($result_imper)) {

      return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                        "message"=>"Impersonated user with this role does not exist",
                        "status"=>422)));
     }


     $name_imper = $result_imper['first_name'];
     $last_name_imper = $result_imper['last_name'];

    }

    $err_name = 0;
    $err_date = 0;
    $err_idp = 0;
    $err_stepid = 0;

    for($i = 0; $i < count($steps); $i++) {

    $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$steps[$i]['step_date']);

    $pre_step = $con->prepare("SELECT *
                             FROM steps
                             WHERE step_id = :step_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_step = array(':step_id' => $steps[$i]['step_id']);
    $pre_step->execute($values_step);
    $result_step = $pre_step->fetch();

      if(empty($steps[$i]['name'])){
        $err_name += 1;
        $err_id = $i;
        $arr[] = $err_id;
      }else if(empty($steps[$i]['step_id'])){
        $err_idp += 1;
        $err_id1 = $i;
        $arr1[] = $err_id1;
      }else if(!$valid_date){
        $err_date += 1;
        $err_id2 = $i;
        $arr2[] = $err_id2;
      } else if(empty($result_step)){
        $err_stepid += 1;
        $err_id3 = $i;
        $arr3[] = $err_id3;
      }

    }

    if($err_name > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step name",
                "err_id"=>$arr,
                "status"=>500)));

    } else if($err_idp > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step_id",
                "err_id"=>$arr1,
                "status"=>500)));

    } else if($err_date > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step_date",
                "err_id"=>$arr2,
                "status"=>500)));

    } else if($err_stepid > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Step does not exists",
                "err_id"=>$arr3,
                "status"=>500)));

    }

    
    if ($role_id == '5') {
      
      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      /*verified user*/
      if ($result_s) {

        $first_name_leader = $result_s['first_name'];
        $last_name_leader = $result_s['last_name'];

        $pre_cell = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :cell_id AND church_id = :church_id AND leader = :user_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cell = array(':cell_id' => $cell_id, ':church_id' => $church_id, ':user_id' => $user_id);
        $pre_cell->execute($values_cell);
        $result_cell = $pre_cell->fetch();

        /*verified cell*/
        if ($result_cell) {

          $final_d = $result_cell['district_code'];
          $final_z = $result_cell['zone_code'];
          $final_s = $result_cell['sector_code'];
          $final_c = $result_cell['cell_code'];
          $sector_idf = $result_cell['sector_id'];

          $pre_em = $con->prepare("SELECT *
                                   FROM members_cells
                                   WHERE email = :email", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_em = array(':email' => $email);
          $pre_em->execute($values_em);
          $result_em = $pre_em->fetch();

          if (empty($result_em)) {

            /*obtain zone id for records*/
            $pre_sec = $con->prepare("SELECT *
                                     FROM groups_sectors  
                                     WHERE id = :sector_idf AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sec = array(':sector_idf' => $sector_idf, ':church_id' => $church_id);
            $pre_sec->execute($values_sec);
            $result_sec = $pre_sec->fetch();

            $zone_idf = $result_sec['zone_id'];

            /*obtain district id for records*/
            $pre_zon = $con->prepare("SELECT *
                                     FROM groups_zones  
                                     WHERE id = :zone_idf AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zon = array(':zone_idf' => $zone_idf, ':church_id' => $church_id);
            $pre_zon->execute($values_zon);
            $result_zon = $pre_zon->fetch();

            $dis_idf = $result_zon['district_id'];


            /*verified profile picture*/
            if($profile_picture){

              /*verified married*/
              if ($marital_status == 'Married') {
                if(empty($married_since)){
                     return $response->withStatus(500)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"Missing parameter: married_since",
                               "status"=>500)));
                }else{
                  if(!$valid_married){
                   return $response->withStatus(500)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('error' => array(
                             "message"=>"You must enter a valid married date",
                             "status"=>500)));
                  }
                }
              }else{
                $married_since = null;
              }


              $final_date = date("Y-m-d H:i:s");

              /*insert member*/
              $pre = $con->prepare("INSERT INTO members_cells (`cell_id`, `church_id`, `first_name`,`last_name`,`email`,`phone`,`profile_picture`,`address`,`city`,`gender`,`birth_date`,`marital_status`,`married_since`,`guest_since`,`exelerate_id`,`member_since`,`role`,`active`,`is_complete`,`created_at`, `updated_at`) VALUES (:cell_id, :church_id,:first_name,:last_name,:email,:phone,:profile_picture,:address,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,:exelerate_id,:member_since,'2','1','1','$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                  ':cell_id' => $cell_id, 
                  ':church_id' => $church_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':phone' => $phone,
                  ':profile_picture' => $profile_picture,
                  ':address' => $address,
                  ':city' => $city,
                  ':gender' => $gender,
                  ':birth_date' => $birth_date,
                  ':marital_status' => $marital_status,
                  ':exelerate_id' => $exelerate_id,
                  ':member_since' => $member_since,
                  ':guest_since' => $guest_since,
                  ':married_since' => $married_since);

              $result = $pre->execute($values);

              $id_m = $con->lastInsertId();


              for($j = 0; $j < count($steps); $j++) {

                $pre3 = $con->prepare("INSERT INTO members_cells_steps (`member_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:member_id, :name,:step_date,:step_id, '$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values3 = array(
                  ':member_id' => $id_m,
                  ':name' => $steps[$j]['name'],
                  ':step_date' => $steps[$j]['step_date'],
                  ':step_id' => $steps[$j]['step_id']
                  );

                $result3 = $pre3->execute($values3);

                /*New step*/
                $step = $steps[$j]['name'];
                $step_id = $steps[$j]['step_id'];

                /*language*/
                if ($step_id == '1') {
                  $es_step = 'SalvaciÃ³n';
                } else if ($step_id == '2') {
                  $es_step = 'Bautismo de agua';
                } else if ($step_id == '3') {
                  $es_step = 'Bautismo de agua';
                } else if ($step_id == '4') {
                  $es_step = 'Servicio';
                } else if ($step_id == '5') {
                  $es_step = 'LÃ­der';
                } else if ($step_id == '6') {
                  $es_step = 'Supervisor';
                } else if ($step_id == '7') {
                  $es_step = 'Pastor de zona';
                } else if ($step_id == '8') {
                  $es_step = 'Pastor de distrito';
                } else if ($step_id == '9') {
                  $es_step = 'Pastor principal';
                }
 
                $en_message = $first_name . " " . $last_name . " completed a new step: " . $step;
                $es_message = $first_name . " " . $last_name . " completÃ³ un nuevo paso: " . $es_step;

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $id_m,
                    ':final_date' => $final_date);

                $result_act = $pre_act->execute($values_act);


                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Cell Memberâs new step (Cell Group)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new step: " . $step . " to " . $first_name . " " . $last_name;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo paso: " . $es_step . " a " . $first_name . " " . $last_name;

                }else{
                  /*ACTIVITY GROUPS*/

                  /*Activity Cell Memberâs new step (Cell Group)*/
                  $en_message2 = $first_name_leader . " " . $last_name_leader . " added a new step: " . $step . " to " . $first_name . " " . $last_name;
                  $es_message2 = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo paso: " . $es_step . " a " . $first_name . " " . $last_name;
                }

                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2, 
                    ':en_message2' => $en_message2, 
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_act2 = $pre_act2->execute($values_act2);

              }

              if($result){

                // Record A Cell member was added (Senior Pastor / Admin)
                $en_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " has a new cell member";

                $es_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " tiene un nuevo miembro";

                $member = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':church_id' => $church_id,
                    ':final_date' => $final_date);

                $result_member = $member->execute($val_member);

                // Record A Cell member was added (District Pastor)
                $member2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member2 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':dis_idf' => $dis_idf,
                    ':final_date' => $final_date);

                $result_member2 = $member2->execute($val_member2);

                // Record A Cell member was added (Zone Pastor)
                $member3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member3 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':zone_idf' => $zone_idf,
                    ':final_date' => $final_date);

                $result_member3 = $member3->execute($val_member3);

                // Record A Cell member was added (Supervisor)
                $member4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member4 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':sector_idf' => $sector_idf,
                    ':final_date' => $final_date);

                $result_member4 = $member4->execute($val_member4);

                // Record A Cell member was added (Leader)
                $member5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member5 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_member5 = $member5->execute($val_member5);


                // Record Cell: A Cell member was added (Senior Pastor / Admin)
                $memberce = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce = $memberce->execute($val_member);

                // Record Cell: A Cell member was added (District Pastor)
                $memberce2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce2 = $memberce2->execute($val_member2);

                // Record Cell: A Cell member was added (Zone Pastor)
                $memberce3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce3 = $memberce3->execute($val_member3);

                // Record Cell: A Cell member was added (Supervisor)
                $memberce4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce4 = $memberce4->execute($val_member4);

                // Record Cell: A Cell member was added (Supervisor)
                $memberce5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce5 = $memberce5->execute($val_member5);


                // Record Church: A Cell member was added (Senior Pastor / Admin)
                $memberch = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch = $memberch->execute($val_member);

                // Record Church: A Cell member was added (District Pastor)
                $memberch2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch2 = $memberch2->execute($val_member2);

                // Record Church: A Cell member was added (Zone Pastor)
                $memberch3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch3 = $memberch3->execute($val_member3);

                // Record Church: A Cell member was added (Supervisor)
                $memberch4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch4 = $memberch4->execute($val_member4);

                // Record Church: A Cell member was added (Supervisor)
                $memberch5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch5 = $memberch5->execute($val_member5);


                // Record Perfomance: A Cell member was added (Senior Pastor / Admin)
                $memberpf = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'4',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberpf = $memberpf->execute($val_member);

                // Record Perfomance: A Cell member was added (District Pastor)
                $memberpf2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'4',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberpf2 = $memberpf2->execute($val_member2);

                // Record Perfomance: A Cell member was added (Zone Pastor)
                $memberpf3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'4',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberpf3 = $memberpf3->execute($val_member3);

                // Record Perfomance: A Cell member was added (Supervisor)
                $memberpf4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberpf4 = $memberpf4->execute($val_member4);

                // Record Perfomance: A Cell member was added (Supervisor)
                $memberpf5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'4',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberpf5 = $memberpf5->execute($val_member5);


                /*************** ACTIVITIES ***********************/

                /*Activity Added to a cell group (Cell Member)*/
                $en_me = $first_name . " " . $last_name . " added to a cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_me= $first_name . " " . $last_name . " agregado a cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_add = array(
                    ':es_me' => $es_me,
                    ':en_me' => $en_me,
                    ':id_m' => $id_m,
                    ':final_date' => $final_date);

                $result_add = $pre_add->execute($values_add);


                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity impersonate Added a new cell member (Leader)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $impersonate_id,
                      ':final_date' => $final_date);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*Activity The leader added a new cell member (Cell Group)*/
                  $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

                }else{

                  /*Activity Added a new cell member (Leader)*/
                  $en_mess = $first_name_leader . " " . $last_name_leader . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

                  /*Activity The leader added a new cell member (Cell Group)*/
                  $en_mess2 = $first_name_leader . " " . $last_name_leader . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess2 = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;
                }

                /*Activity Added a new cell member (Leader)*/
                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_date' => $final_date);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new cell member (Cell Group)*/
                $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead2 = array(
                    ':es_mess2' => $es_mess2,
                    ':en_mess2' => $en_mess2,
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);

                return $response->withStatus(200)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('response' => 'Member has been saved successfully'));
                  
              }else{   
                  return $response->withStatus(422)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('error' => array(
                                        "message"=>"There was a problem, verify your parameters",
                                        "status"=>422)));
              }

            
            /*not profile_picture*/
            }else{

              /*verified married*/
              if ($marital_status == 'Married') {
                if(empty($married_since)){
                     return $response->withStatus(500)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"Missing parameter: married_since",
                               "status"=>500)));
                }else{
                  if(!$valid_married){
                   return $response->withStatus(500)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('error' => array(
                             "message"=>"You must enter a valid married date",
                             "status"=>500)));
                  }
                }
              }else{
                $married_since = null;
              }


              $final_date = date("Y-m-d H:i:s");

              $pre_ex = $con->prepare("SELECT *
                                       FROM members_cells
                                       WHERE exelerate_id = :exelerate_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ex = array(':exelerate_id' => $exelerate_id);
              $pre_ex->execute($values_ex);
              $result_ex = $pre_ex->fetch();

              if ($result_ex) {
                
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Exelerate ID already exists",
                                    "status"=>422)));

              }else{

                /*insert member*/
                $pre4 = $con->prepare("INSERT INTO members_cells (`cell_id`, `church_id`, `first_name`,`last_name`,`email`,`phone`,`profile_picture`,`address`,`city`,`gender`,`birth_date`,`marital_status`,`married_since`,`guest_since`,`exelerate_id`,`member_since`,`role`,`active`,`is_complete`,`created_at`, `updated_at`) VALUES (:cell_id, :church_id,:first_name,:last_name,:email,:phone,:profile_picture,:address,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,:exelerate_id,:member_since,'2','1','0','$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $value4 = array(
                    ':cell_id' => $cell_id, 
                    ':church_id' => $church_id, 
                    ':first_name' => $first_name,
                    ':last_name' => $last_name,
                    ':email' => $email,
                    ':phone' => $phone,
                    ':profile_picture' => $profile_picture,
                    ':address' => $address,
                    ':city' => $city,
                    ':gender' => $gender,
                    ':birth_date' => $birth_date,
                    ':marital_status' => $marital_status,
                    ':exelerate_id' => $exelerate_id,
                    ':member_since' => $member_since,
                    ':guest_since' => $guest_since,
                    ':married_since' => $married_since);

                $result4 = $pre4->execute($value4);

                $id_member = $con->lastInsertId();


                for($j = 0; $j < count($steps); $j++) {

                  $pre5 = $con->prepare("INSERT INTO members_cells_steps (`member_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:member_id, :name,:step_date,:step_id, '$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values5 = array(
                    ':member_id' => $id_member,
                    ':name' => $steps[$j]['name'],
                    ':step_date' => $steps[$j]['step_date'],
                    ':step_id' => $steps[$j]['step_id']
                    );

                  $result5 = $pre5->execute($values5);


                  /*New step*/
                  $step = $steps[$j]['name'];
                  $step_id = $steps[$j]['step_id'];

                  /*language*/
                  if ($step_id == '1') {
                    $es_step = 'SalvaciÃ³n';
                  } else if ($step_id == '2') {
                    $es_step = 'Bautismo de agua';
                  } else if ($step_id == '3') {
                    $es_step = 'Bautismo de agua';
                  } else if ($step_id == '4') {
                    $es_step = 'Servicio';
                  } else if ($step_id == '5') {
                    $es_step = 'LÃ­der';
                  } else if ($step_id == '6') {
                    $es_step = 'Supervisor';
                  } else if ($step_id == '7') {
                    $es_step = 'Pastor de zona';
                  } else if ($step_id == '8') {
                    $es_step = 'Pastor de distrito';
                  } else if ($step_id == '9') {
                    $es_step = 'Pastor principal';
                  }
                  
                  $en_message = $first_name . " " . $last_name . " completed a new step: " . $step;
                  $es_message = $first_name . " " . $last_name . " completÃ³ un nuevo paso: " . $es_step;

                  $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':id_m' => $id_member,
                      ':final_date' => $final_date);

                  $result_act = $pre_act->execute($values_act);


                  /*************** ACTIVITIES ***********************/

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*Activity Cell Memberâs new step (Cell Group)*/
                    $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new step: " . $step . " to " . $first_name . " " . $last_name;
                    $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo paso: " . $es_step . " a " . $first_name . " " . $last_name;

                  }else{

                    /*ACTIVITY GROUPS*/

                    /*Activity Cell Memberâs new step (Cell Group)*/
                    $en_message2 = $first_name . " " . $last_name . " added a new step: " . $step . " to " . $first_name . " " . $last_name;
                    $es_message2 = $first_name . " " . $last_name . " agregÃ³ un nuevo paso: " . $es_step . " a " . $first_name . " " . $last_name;
                  }

                  $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act2 = array(
                      ':es_message2' => $es_message2, 
                      ':en_message2' => $en_message2, 
                      ':cell_id' => $cell_id,
                      ':final_date' => $final_date);

                  $result_act2 = $pre_act2->execute($values_act2);

                }

              }

              if($result5){

                // Record A Cell member was added (Senior Pastor / Admin)
                $en_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " has a new cell member";

                $es_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " tiene un nuevo miembro";

                $member = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':church_id' => $church_id,
                    ':final_date' => $final_date);

                $result_member = $member->execute($val_member);

                // Record A Cell member was added (District Pastor)
                $member2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member2 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':dis_idf' => $dis_idf,
                    ':final_date' => $final_date);

                $result_member2 = $member2->execute($val_member2);

                // Record A Cell member was added (Zone Pastor)
                $member3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member3 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':zone_idf' => $zone_idf,
                    ':final_date' => $final_date);

                $result_member3 = $member3->execute($val_member3);

                // Record A Cell member was added (Supervisor)
                $member4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member4 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':sector_idf' => $sector_idf,
                    ':final_date' => $final_date);

                $result_member4 = $member4->execute($val_member4);

                // Record A Cell member was added (Leader)
                $member5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member5 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_member5 = $member5->execute($val_member5);


                /*Activity Added to a cell group (Cell Member)*/
                $en_me = $first_name . " " . $last_name . " added to a cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_me= $first_name . " " . $last_name . " agregado a cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_add = array(
                    ':es_me' => $es_me,
                    ':en_me' => $en_me,
                    ':id_m' => $id_member,
                    ':final_date' => $final_date);

                $result_add = $pre_add->execute($values_add);


                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity impersonate Added a new cell member (Leader)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $impersonate_id,
                      ':final_date' => $final_date);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*** ACTIVITY GROUPS ***/

                  /*Activity The leader added a new cell member (Cell Group)*/
                  $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

                }else{

                  /*Activity Added a new cell member (Leader)*/
                  $en_mess = $first_name_leader . " " . $last_name_leader . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

                  /*** ACTIVITY GROUPS ***/

                  /*Activity The leader added a new cell member (Cell Group)*/
                  $en_mess2 = $first_name_leader . " " . $last_name_leader . " added a new cell member: " . $first_name . " " . $last_name;
                  $es_mess2 = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;
                }

                /*Activity Added a new cell member (Leader)*/
                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_date' => $final_date);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new cell member (Cell Group)*/
                $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead2 = array(
                    ':es_mess2' => $es_mess2,
                    ':en_mess2' => $en_mess2,
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);

                return $response->withStatus(200)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('response' => 'Member has been saved successfully'));
                  
              }else{   
                  return $response->withStatus(422)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('error' => array(
                                        "message"=>"There was a problem, verify your parameters",
                                        "status"=>422)));
              }

            }


          }else{
            return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Email already exists",
                          "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell does not exist",
                      "status"=>422)));
        }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to add members",
                  "status"=>422)));
    }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



$app->post('/cells/add-guest', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');

   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $guest_since = $request->getParam('guest_since');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($address)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: address",
               "status"=>500)));
    } else if(empty($city)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: city",
               "status"=>500)));
    } else if(empty($gender)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: gender",
                 "status"=>500)));
    } else if(empty($marital_status)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: marital_status",
                 "status"=>500)));
    } else if(empty($birth_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: birth_date",
               "status"=>500)));
     } else if(!$valid_phone){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid phone",
               "status"=>500)));
    } else if(!$valid_email){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid email address",
               "status"=>500)));
    } else if(!$valid_guest){
      return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                               "message"=>"You must enter a valid guest_since",
                               "status"=>500)));

    }else if(!$valid_birthdate){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid birthdate",
                 "status"=>500)));

    } else if($married_since){

      if(!$valid_married){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid married date",
                 "status"=>500)));
      }

    }

    /*Impersonate*/
    if ($impersonate) {
      
      if ($impersonate != '1') {
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Impersonate is not valid",
                  "status"=>500)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: impersonate_role",
                 "status"=>500)));
     }

     $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
     $pre_imper->execute($values_imper);
     $result_imper = $pre_imper->fetch();

     if (empty($result_imper)) {

      return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                        "message"=>"Impersonated user with this role does not exist",
                        "status"=>422)));
     }


     $name_imper = $result_imper['first_name'];
     $last_name_imper = $result_imper['last_name'];

    }


    if ($role_id == '5') {
      
      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      /*verified user*/
      if ($result_s) {

        $first_name_leader = $result_s['first_name'];
        $last_name_leader = $result_s['last_name'];

        $pre_cell = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :cell_id AND church_id = :church_id AND leader = :user_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cell = array(':cell_id' => $cell_id, ':church_id' => $church_id, ':user_id' => $user_id);
        $pre_cell->execute($values_cell);
        $result_cell = $pre_cell->fetch();

        /*verified cell*/
        if ($result_cell) {

          $final_d = $result_cell['district_code'];
          $final_z = $result_cell['zone_code'];
          $final_s = $result_cell['sector_code'];
          $final_c = $result_cell['cell_code'];
          $sector_idf = $result_cell['sector_id'];

          $pre_em = $con->prepare("SELECT *
                                   FROM members_cells
                                   WHERE email = :email", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_em = array(':email' => $email);
          $pre_em->execute($values_em);
          $result_em = $pre_em->fetch();

          if (empty($result_em)) {

            /*obtain zone id for records*/
            $pre_sec = $con->prepare("SELECT *
                                     FROM groups_sectors  
                                     WHERE id = :sector_idf AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sec = array(':sector_idf' => $sector_idf, ':church_id' => $church_id);
            $pre_sec->execute($values_sec);
            $result_sec = $pre_sec->fetch();

            $zone_idf = $result_sec['zone_id'];

            /*obtain district id for records*/
            $pre_zon = $con->prepare("SELECT *
                                     FROM groups_zones  
                                     WHERE id = :zone_idf AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zon = array(':zone_idf' => $zone_idf, ':church_id' => $church_id);
            $pre_zon->execute($values_zon);
            $result_zon = $pre_zon->fetch();

            $dis_idf = $result_zon['district_id'];

            /*verified profile picture*/
            if($profile_picture){

              /*verified married*/
              if ($marital_status == 'Married') {
                if(empty($married_since)){
                     return $response->withStatus(500)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"Missing parameter: married_since",
                               "status"=>500)));
                }else{
                  if(!$valid_married){
                   return $response->withStatus(500)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('error' => array(
                             "message"=>"You must enter a valid married date",
                             "status"=>500)));
                  }
                }
              }else{
                $married_since = null;
              }


              $final_date = date("Y-m-d H:i:s");

              /*insert member*/
              $pre = $con->prepare("INSERT INTO members_cells (`cell_id`, `church_id`, `first_name`,`last_name`,`email`,`phone`,`profile_picture`,`address`,`city`,`gender`,`birth_date`,`marital_status`,`married_since`,`guest_since`,`exelerate_id`,`member_since`,`role`,`active`,`is_complete`,`created_at`, `updated_at`) VALUES (:cell_id, :church_id,:first_name,:last_name,:email,:phone,:profile_picture,:address,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,NULL,NULL,'1','1','1','$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                  ':cell_id' => $cell_id, 
                  ':church_id' => $church_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':phone' => $phone,
                  ':profile_picture' => $profile_picture,
                  ':address' => $address,
                  ':city' => $city,
                  ':gender' => $gender,
                  ':birth_date' => $birth_date,
                  ':marital_status' => $marital_status,
                  ':guest_since' => $guest_since,
                  ':married_since' => $married_since);

              $result = $pre->execute($values);

              $id_m = $con->lastInsertId();

              /*Cell Codes*/

              if($result){

                // Record A Guest was added (Senior Pastor / Admin)
                $en_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " has a new guest";

                $es_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " tiene un nuevo invitado";

                $member = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':church_id' => $church_id,
                    ':final_date' => $final_date);

                $result_member = $member->execute($val_member);

                // Record A Guest was added (District Pastor)
                $member2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member2 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':dis_idf' => $dis_idf,
                    ':final_date' => $final_date);

                $result_member2 = $member2->execute($val_member2);

                // Record A Guest was added (Zone Pastor)
                $member3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member3 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':zone_idf' => $zone_idf,
                    ':final_date' => $final_date);

                $result_member3 = $member3->execute($val_member3);

                // Record A Guest was added (Supervisor)
                $member4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member4 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':sector_idf' => $sector_idf,
                    ':final_date' => $final_date);

                $result_member4 = $member4->execute($val_member4);

                // Record A Guest was added (Leader)
                $member5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member5 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_member5 = $member5->execute($val_member5);


                // Record Cell: A Guest was added (Senior Pastor / Admin)
                $memberce = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce = $memberce->execute($val_member);

                // Record Cell: A Guest was added (District Pastor)
                $memberce2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce2 = $memberce2->execute($val_member2);

                // Record Cell: A Guest was added (Zone Pastor)
                $memberce3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce3 = $memberce3->execute($val_member3);

                // Record Cell: A Guest was added (Supervisor)
                $memberce4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce4 = $memberce4->execute($val_member4);

                // Record Cell: A Guest was added (Supervisor)
                $memberce5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'2',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberce5 = $memberce5->execute($val_member5);



                // Record Church: A Guest was added (Senior Pastor / Admin)
                $memberch = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch = $memberch->execute($val_member);

                // Record Church: A Guest was added (District Pastor)
                $memberch2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch2 = $memberch2->execute($val_member2);

                // Record Church: A Guest was added (Zone Pastor)
                $memberch3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch3 = $memberch3->execute($val_member3);

                // Record Church: A Guest was added (Supervisor)
                $memberch4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch4 = $memberch4->execute($val_member4);

                // Record Church: A Guest was added (Supervisor)
                $memberch5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'3',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $result_memberch5 = $memberch5->execute($val_member5);


                /*************** ACTIVITIES ***********************/

                $en_message = $first_name . " " . $last_name . " became a guest";
                $es_message = $first_name . " " . $last_name . " se convirtiÃ³ en un invitado";

                /*Activity Became a guest (Guest)*/ 
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $id_m,
                    ':final_date' => $final_date);

                $result_act = $pre_act->execute($values_act);


                /*Activity Added to a cell group (Guest)*/
                $en_me = $first_name . " " . $last_name . " added to a cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_me= $first_name . " " . $last_name . " agregado a cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_add = array(
                    ':es_me' => $es_me, 
                    ':en_me' => $en_me,
                    ':id_m' => $id_m,
                    ':final_date' => $final_date);

                $result_add = $pre_add->execute($values_add);


                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Added a new guest (Leader)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new guest: " . $first_name . " " . $last_name;
                  $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $impersonate_id,
                    ':final_date' => $final_date);

                $result_actm = $pre_actm->execute($values_actm);

                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new guest (Cell Group)*/
                $en_me2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new guest" . $first_name . " " . $last_name;
                $es_me2= $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo invitado" . $first_name . " " . $last_name;

                }else{

                  /*Activity Added a new guest (Leader)*/
                  $en_mess = $first_name_leader . " " . $last_name_leader . " added a new guest: " . $first_name . " " . $last_name;
                  $es_mess = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

                  /*** ACTIVITY GROUPS ***/

                  /*Activity The leader added a new guest (Cell Group)*/
                  $en_me2 = $first_name_leader . " " . $last_name_leader . " added a new guest" . $first_name . " " . $last_name;
                  $es_me2= $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo invitado" . $first_name . " " . $last_name;
                }

                /*Activity leader added a new guest*/
                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_date' => $final_date);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new guest (Cell Group)*/
                $pre_add2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me2, :en_me2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_add2 = array(
                    ':es_me2' => $es_me2, 
                    ':en_me2' => $en_me2,
                    ':cell_id' => $cell_id,
                    ':final_d' => $final_date);

                $result_add2 = $pre_add2->execute($values_add2);

                return $response->withStatus(200)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('response' => 'Guest has been saved successfully'));
                  
              }else{   
                  return $response->withStatus(422)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('error' => array(
                                        "message"=>"There was a problem, verify your parameters",
                                        "status"=>422)));
              }

            
            /*not profile_picture*/
            }else{

              /*verified married*/
              if ($marital_status == 'Married') {
                if(empty($married_since)){
                     return $response->withStatus(500)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"Missing parameter: married_since",
                               "status"=>500)));
                }else{
                  if(!$valid_married){
                   return $response->withStatus(500)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('error' => array(
                             "message"=>"You must enter a valid married date",
                             "status"=>500)));
                  }
                }
              }else{
                $married_since = null;
              }


              $final_date = date("Y-m-d H:i:s");

              /*insert member*/
              $pre4 = $con->prepare("INSERT INTO members_cells (`cell_id`, `church_id`, `first_name`,`last_name`,`email`,`phone`,`profile_picture`,`address`,`city`,`gender`,`birth_date`,`marital_status`,`married_since`,`guest_since`,`exelerate_id`,`member_since`,`role`,`active`,`is_complete`,`created_at`, `updated_at`) VALUES (:cell_id, :church_id,:first_name,:last_name,:email,:phone,:profile_picture,:address,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,NULL,NULL,'1','1','0','$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $value4 = array(
                  ':cell_id' => $cell_id, 
                  ':church_id' => $church_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':phone' => $phone,
                  ':profile_picture' => $profile_picture,
                  ':address' => $address,
                  ':city' => $city,
                  ':gender' => $gender,
                  ':birth_date' => $birth_date,
                  ':marital_status' => $marital_status,
                  ':guest_since' => $guest_since,
                  ':married_since' => $married_since);

              $result4 = $pre4->execute($value4);

              $id_member = $con->lastInsertId();


              if($result4){

                // Record A Guest was added (Senior Pastor / Admin)
                $en_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " has a new guest";

                $es_member = "D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c . " tiene un nuevo invitado";

                $member = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,NULL,:church_id,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':church_id' => $church_id,
                    ':final_date' => $final_date);

                $result_member = $member->execute($val_member);

                // Record A Guest was added (District Pastor)
                $member2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member2 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':dis_idf' => $dis_idf,
                    ':final_date' => $final_date);

                $result_member2 = $member2->execute($val_member2);

                // Record A Guest was added (Zone Pastor)
                $member3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member3 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':zone_idf' => $zone_idf,
                    ':final_date' => $final_date);

                $result_member3 = $member3->execute($val_member3);

                // Record A Guest was added (Supervisor)
                $member4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member4 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':sector_idf' => $sector_idf,
                    ':final_date' => $final_date);

                $result_member4 = $member4->execute($val_member4);

                // Record A Guest was added (Leader)
                $member5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_member, :en_member,NULL,NULL,NULL,:cell_id,NULL,'1',:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_member5 = array(
                    ':en_member' => $en_member,
                    ':es_member' => $es_member,
                    ':cell_id' => $cell_id,
                    ':final_date' => $final_date);

                $result_member5 = $member5->execute($val_member5);


                /***** ACTIVITIES *****/
                $en_message = $first_name . " " . $last_name . " became a guest";
                $es_message = $first_name . " " . $last_name . " se convirtiÃ³ en un invitado";

                /*Activity Became a guest (Guest)*/ 
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $id_member,
                    ':final_d' => $final_date);

                $result_act = $pre_act->execute($values_act);

                /*Activity Added to a cell group (Guest)*/
                $en_me = $first_name . " " . $last_name . " added to a cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_me= $first_name . " " . $last_name . " agregado a cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_member,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_add = array(
                    ':es_me' => $es_me, 
                    ':en_me' => $en_me,
                    ':id_member' => $id_member,
                    ':final_d' => $final_date);

                $result_add = $pre_add->execute($values_add);


                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Added a new guest (Leader)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new guest: " . $first_name . " " . $last_name;
                  $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $impersonate_id,
                    ':final_date' => $final_date);

                $result_actm = $pre_actm->execute($values_actm);

                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new guest (Cell Group)*/
                $en_me2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new guest" . $first_name . " " . $last_name;
                $es_me2= $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo invitado" . $first_name . " " . $last_name;

                }else{

                  /*Activity Added a new guest (Leader)*/
                  $en_mess = $first_name_leader . " " . $last_name_leader . " added a new guest: " . $first_name . " " . $last_name;
                  $es_mess = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

                  /*** ACTIVITY GROUPS ***/

                  /*Activity The leader added a new guest (Cell Group)*/
                  $en_me2 = $first_name_leader . " " . $last_name_leader . " added a new guest" . $first_name . " " . $last_name;
                  $es_me2= $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo invitado" . $first_name . " " . $last_name;
                }

                /*Activity leader added a new guest*/
                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_date' => $final_date);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new guest (Cell Group)*/
                $pre_add2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me2, :en_me2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_add2 = array(
                    ':es_me2' => $es_me2, 
                    ':en_me2' => $en_me2,
                    ':cell_id' => $cell_id,
                    ':final_d' => $final_date);

                $result_add2 = $pre_add2->execute($values_add2);


                return $response->withStatus(200)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('response' => 'Guest has been saved successfully'));
                  
              }else{   
                  return $response->withStatus(422)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('error' => array(
                                        "message"=>"There was a problem, verify your parameters",
                                        "status"=>422)));
              }

            }


          }else{
            return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Email already exists",
                          "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell does not exist",
                      "status"=>422)));
        }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to add members",
                  "status"=>422)));
    }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*** TIMELINE CELL ***/

$app->post('/cells/timeline-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $initial_date_range = $request->getParam('initial_date_range');
   $end_date_range = $request->getParam('end_date_range');
   $keywords = $request->getParam('keywords');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre1 = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values1 = array(':cell_id' => $cell_id);
    $pre1->execute($values1);
    $result1 = $pre1->fetch();

    if ($result1) {

      $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date_range);
      $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date_range);

      if ($initial_date_range || $end_date_range) {
        
        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        } else if($initial_date_range > $end_date_range){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Final date must be greater than initial date",
                    "status"=>500)));
        }else if(empty($initial_date_range) || empty($end_date_range)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        }else if($keywords){

          $sql3 = "SELECT timeline.id, timeline.comment, timeline.date, CONCAT(user.first_name, ' ', user.last_name) AS user_name, user.profile_picture FROM timeline INNER JOIN user ON timeline.user_id = user.id WHERE timeline.cell_id = $cell_id AND (timeline.date BETWEEN '$initial_date_range' AND '$end_date_range') AND (timeline.comment LIKE '%$keywords%' OR CONCAT(user.first_name, ' ', user.last_name) LIKE '%$keywords%') ORDER BY timeline.date DESC";
          
          foreach ($con->query($sql3) as $row3) {
            $timeline_dk[] = $row3;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_dk));

        }else{

          $sql1 = "SELECT timeline.id, timeline.comment, timeline.date, CONCAT(user.first_name, ' ', user.last_name) AS user_name, user.profile_picture FROM timeline INNER JOIN user ON timeline.user_id = user.id WHERE timeline.cell_id = $cell_id AND timeline.date BETWEEN '$initial_date_range' AND '$end_date_range' ORDER BY timeline.date DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_date[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_date));
        }

      } else if ($keywords) {

        $sql2 = "SELECT timeline.id, timeline.comment, timeline.date, CONCAT(user.first_name, ' ', user.last_name) AS user_name, user.profile_picture FROM timeline INNER JOIN user ON timeline.user_id = user.id WHERE timeline.cell_id = $cell_id AND (timeline.comment LIKE '%$keywords%' OR CONCAT(user.first_name, ' ', user.last_name) LIKE '%$keywords%') ORDER BY timeline.date DESC";
        

        foreach ($con->query($sql2) as $row2) {
          $timeline_key[] = $row2;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $timeline_key));

      } else{

        $sql = "SELECT timeline.id, timeline.comment, timeline.date, CONCAT(user.first_name, ' ', user.last_name) AS user_name, user.profile_picture FROM timeline INNER JOIN user ON timeline.user_id = user.id WHERE timeline.cell_id = $cell_id ORDER BY timeline.date DESC";
        

        foreach ($con->query($sql) as $row) {
          $timeline[] = $row;
        }


        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $timeline));
      }


    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Cell does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/timeline-add', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $comment = $request->getParam('comment');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($comment)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: comment",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre1 = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values1 = array(':cell_id' => $cell_id);
    $pre1->execute($values1);
    $result1 = $pre1->fetch();

    if ($result1) {

      $final_d = date("Y-m-d H:i:s");
      $comment_date = date("Y-m-d");

      $sql = "INSERT INTO timeline (`comment`, `date`,`user_id`,`cell_id`,`created_at`,`updated_at`) VALUES (:comment,'$comment_date',:user_id,:cell_id,'$final_d','$final_d')";
      
      $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      
      $values = array(
             ':comment' => $comment,
             ':user_id' => $user_id,
             ':cell_id' => $cell_id
             );
      
      $result = $pre->execute($values);
      $id = $con->lastInsertId();

      if($result){
          return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => array('message' => 'Comment added', 'id' => $id)));
      }else{   
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"There was a problem, verify your parameters",
                    "status"=>422)));
      }
      

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Cell does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->put('/cells/timeline-edit', function ($request,$response) {

  try{
   $con = $this->db;
   $cell_id = $request->getParam('cell_id');
   $comment_id = $request->getParam('comment_id');
   $comment = $request->getParam('comment');

   if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }else if(empty($comment_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: comment_id",
               "status"=>500)));
   } else if(empty($comment)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: comment",
               "status"=>500)));
   }


    $pre1 = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values1 = array(':cell_id' => $cell_id);
    $pre1->execute($values1);
    $result1 = $pre1->fetch();

    if ($result1) {

      $pre2 = $con->prepare("SELECT *
                               FROM timeline
                               WHERE id = :comment_id AND cell_id = :cell_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values2 = array(':comment_id' => $comment_id, ':cell_id' => $cell_id);
      $pre2->execute($values2);
      $result2 = $pre2->fetch();

      if ($result2) {

        $updated = date("Y-m-d H:i:s");

        $sql = "UPDATE timeline SET comment=:comment,updated_at=:updated WHERE id = :comment_id";
        
        $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        
        $values = array(
               ':comment' => $comment,
               ':comment_id' => $comment_id,
               ':updated' => $updated
               );
        
        $result = $pre->execute($values);

        if($result){
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => 'Comment updated'));
        }else{   
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"comment_id does not exist",
                    "status"=>422)));
      }
      

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Cell does not exist",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->delete('/cells/timeline-delete', function ($request,$response) {

  try{
   $con = $this->db;
   $cell_id = $request->getParam('cell_id');
   $comment_id = $request->getParam('comment_id');

   if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }else if(empty($comment_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: comment_id",
               "status"=>500)));
   }


    $pre1 = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values1 = array(':cell_id' => $cell_id);
    $pre1->execute($values1);
    $result1 = $pre1->fetch();

    if ($result1) {

      $pre2 = $con->prepare("SELECT *
                               FROM timeline
                               WHERE id = :comment_id AND cell_id = :cell_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values2 = array(':comment_id' => $comment_id, ':cell_id' => $cell_id);
      $pre2->execute($values2);
      $result2 = $pre2->fetch();

      if ($result2) {

        $sql = "DELETE FROM timeline WHERE id = :comment_id";
        
        $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        
        $values = array(
               ':comment_id' => $comment_id
               );
        
        $result = $pre->execute($values);

        if($result){
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => 'Comment deleted'));
        }else{   
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"comment_id does not exist",
                    "status"=>422)));
      }
      

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Cell does not exist",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*TRANSFER MEMBER/GUEST*/

$app->post('/cells/transfer-member', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $member_id = $request->getParam('member_id');
   $cell_id = $request->getParam('cell_id');
   // $district_code = $request->getParam('district_code');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    
    if ($role_id == '5') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $first_name_leader = $result_user['first_name'];
          $last_name_leader = $result_user['last_name'];

          $final_church = $result_user['church_id'];

          $pre_lead = $con->prepare("SELECT *
                                   FROM members_cells
                                   WHERE id = :member_id AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_lead = array(':member_id' => $member_id, ':final_church' => $final_church);
          $pre_lead->execute($values_lead);
          $result_lead = $pre_lead->fetch();

          /*verify member exist*/
          if ($result_lead) {

              $role_id = $result_lead['role'];

              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_cells
                                       WHERE id = :cell_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':cell_id' => $cell_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              /*verify cell exist*/
              if ($result_dis) {

                $final_date = date("Y-m-d H:i:s");

                $final_d = $result_dis['district_code'];
                $final_z = $result_dis['zone_code'];
                $final_s = $result_dis['sector_code'];
                $final_c = $result_dis['cell_code'];

                $final_d = date("Y-m-d H:i:s");

                /*Update member group*/
                $pre_gr = $con->prepare("UPDATE members_cells SET cell_id = :cell_id WHERE id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_gr = array(
                   ':member_id' => $member_id,
                   ':cell_id' => $cell_id
                );

                $result_gr = $pre_gr->execute($values_gr);

                if ($result_gr) {

                  if ($role_id != '1') {

                    /*Activity Transfer confirmation (Guest/Cell Member)*/
                    $en_message = $first_name . " " . $last_name . " has been transferred to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                    $es_message = $first_name . " " . $last_name . " ha sido transferido a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message,
                        ':en_message' => $en_message,
                        ':id_m' => $member_id,
                        ':final_date' => $final_date);

                    $result_act = $pre_act->execute($values_act);


                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity Cell Memberâs transfer confirmation (Leader)*/
                      $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " has transferred member " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " ha transferido al miembro " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_actm = array(
                          ':es_mess' => $es_mess,
                          ':en_mess' => $en_mess,
                          ':user_id' => $impersonate_id,
                          ':final_d' => $final_d);

                      $result_actm = $pre_actm->execute($values_actm);

                      /*** ACTIVITY GROUPS ***/

                    /*Activity Cell Memberâs transfer confirmation (Cell Group)*/
                    $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " has transferred member " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                    $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " ha transferido al miembro " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                    }else{

                      /*Activity Cell Memberâs transfer confirmation (Leader)*/
                      $en_mess = $first_name_leader . " " . $last_name_leader . " has transferred member " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess = $first_name_leader . " " . $last_name_leader . " ha transferido al miembro " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                      /*** ACTIVITY GROUPS ***/

                      /*Activity Cell Memberâs transfer confirmation (Cell Group)*/
                      $en_mess2 = $first_name_leader . " " . $last_name_leader . " has transferred member " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess2 = $first_name_leader . " " . $last_name_leader . " ha transferido al miembro " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                    }

                    /*Activity Cell Memberâs transfer confirmation (Leader)*/
                    $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $user_id,
                        ':final_d' => $final_d);

                    $result_act_lead = $pre_act_lead->execute($values_act_lead);


                    /*** ACTIVITY GROUPS ***/

                    /*Activity Cell Memberâs transfer confirmation (Cell Group)*/
                    $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead = array(
                        ':es_mess2' => $es_mess2,
                        ':en_mess2' => $en_mess2,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_act_lead = $pre_act_lead->execute($values_act_lead);

                    return $response->withStatus(200)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('response' => 'Member has been transferred successfully'));

                  }else{

                    /*Transfer confirmation (Guest)*/
                    $en_message = $first_name . " " . $last_name . " has been transferred to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                    $es_message = $first_name . " " . $last_name . " ha sido transferido a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message,
                        ':en_message' => $en_message,
                        ':id_m' => $member_id,
                        ':final_date' => $final_date);

                    $result_act = $pre_act->execute($values_act);


                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity leader Guest transfer confirmation (Leader)*/
                      $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " has transferred guest " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " ha transferido al invitado " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                      $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act_lead = array(
                          ':es_mess' => $es_mess,
                          ':en_mess' => $en_mess,
                          ':user_id' => $impersonate_id,
                          ':final_d' => $final_d);

                      $result_act_lead = $pre_act_lead->execute($values_act_lead);

                      /*** ACTIVITY GROUPS ***/

                      /*Activity Guestâs transfer confirmation (Cell Group)*/
                      $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " has transferred guest " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " ha transferido al invitado " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                    }else{

                      /*Activity leader Guest transfer confirmation (Leader)*/
                      $en_mess = $first_name_leader . " " . $last_name_leader . " has transferred guest " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess = $first_name_leader . " " . $last_name_leader . " ha transferido al invitado " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                      /*** ACTIVITY GROUPS ***/

                      /*Activity Guestâs transfer confirmation (Cell Group)*/
                      $en_mess2 = $first_name_leader . " " . $last_name_leader . " has transferred guest " . $first_name . " " . $last_name . " to the cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                      $es_mess2 = $first_name_leader . " " . $last_name_leader . " ha transferido al invitado " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                    }

                    /*Activity leader Guest transfer confirmation (Leader)*/
                    $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $user_id,
                        ':final_d' => $final_d);

                    $result_act_lead = $pre_act_lead->execute($values_act_lead);


                    /*** ACTIVITY GROUPS ***/

                    /*Activity Guestâs transfer confirmation (Cell Group)*/
                    $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_actm = array(
                        ':es_mess2' => $es_mess2,
                        ':en_mess2' => $en_mess2,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_actm = $pre_actm->execute($values_actm);

                    return $response->withStatus(200)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('response' => 'Guest has been transferred successfully'));

                  }
                   
                  
                }else{

                  return $response->withStatus(422)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('error' => array(
                             "message"=>"There was a problem, verify your parameters",
                             "status"=>422)));
                }
                

              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Cell does not exist",
                            "status"=>422)));

              }

          } else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Member/Guest does not exist in this church",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/********** SECTORS ****************/

$app->post('/sectors/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');
   $active = $request->getParam('active');
   $district_code = $request->getParam('district_code');
   $zone_code = $request->getParam('zone_code');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $filter_val = '';

    /*validate filter logged*/
    if ($rol_id != '1' || $rol_id != '6' || $rol_id != '7') {

      /*obtain group id of the user logued*/
      $pre_gr = $con->prepare("SELECT *
                               FROM user_groups
                               WHERE user_id = :user_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gr = array(':user_id' => $user_id);
      $pre_gr->execute($values_gr);
      $result_gr = $pre_gr->fetch();

      if ($rol_id == '2') {
          
        $district_id = $result_gr['district_id'];

        $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church')";

      } else if ($rol_id == '3') {
          
        $zone_id = $result_gr['zone_id'];

        $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id = '$zone_id' AND active = 1 AND church_id = '$final_church')";

      }

    }

    /*valid active*/
    if ($active == '0' || $active == '1') {

      /*filter zone and district*/
      if($zone_code && $district_code){

        $sectors_t = null;
        $sql_t = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_code = $zone_code AND groups_sectors.district_code = $district_code AND groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";
        

        foreach ($con->query($sql_t) as $row_t) {
          $sectors_t[] = $row_t;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_t));

        /*filter district*/
      }else if($district_code){

        $sectors_di = null;
        $sql_di = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.district_code = $district_code AND groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";
        

        foreach ($con->query($sql_di) as $row_di) {
          $sectors_di[] = $row_di;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_di));

       /*filter zone*/
      }else if($zone_code){

        $sectors_zo = null;
        $sql_zo = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_code = $zone_code AND groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";
        

        foreach ($con->query($sql_zo) as $row_zo) {
          $sectors_zo[] = $row_zo;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors_zo));

        
      }
      else{

        $sectors = null;
        $sql = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";
        

        foreach ($con->query($sql) as $row) {
          $sectors[] = $row;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors));

      }

       /*valid active*/
    }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"filter does not exist",
                    "status"=>422)));
    }/*end valid active*/


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }/*end result_i*/


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/sectors/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $sector_id = $request->getParam('sector_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   }

   // type user (member-group or admin)
   if ($type_user == "member-group") {
      
    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if ($result_user) {

       $pre_i = $con->prepare("SELECT *
                                FROM groups_sectors
                                WHERE id = :sector_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_i = array(':sector_id' => $sector_id);
       $pre_i->execute($values_i);
       $result_i = $pre_i->fetch();

       if ($result_i) {

         $final_church = $result_i['church_id'];

         $pre = $con->prepare("SELECT groups_sectors.id AS sector_id, groups_sectors.sector_code, groups_sectors.zone_code, groups_sectors.district_code,(SELECT id from user WHERE user.id = groups_sectors.supervisor) AS supervisor_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT profile_picture from user WHERE user.id = groups_sectors.supervisor) AS supervisor_picture, (SELECT address from user WHERE user.id = groups_sectors.supervisor) AS address FROM groups_sectors WHERE groups_sectors.church_id = :final_church AND groups_sectors.id = :sector_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values = array(':final_church' => $final_church, ':sector_id' => $sector_id);
         $pre->execute($values);
         $result = $pre->fetch();

         /*Total members*/
         $pre2 = $con->prepare("SELECT SUM((SELECT count(members_cells.id) from members_cells WHERE church_id = :church_id AND cell_id = groups_cells.id AND role !='1' AND active = '1')) as members_count FROM groups_cells WHERE groups_cells.sector_id = :sector_id AND groups_cells.active = 1 AND groups_cells.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values2 = array(':church_id' => $final_church, ':sector_id' => $sector_id);
         $pre2->execute($values2);
         $result2 = $pre2->fetch();

         /*Total cell groups*/
         $pre3 = $con->prepare("SELECT count(id) as cells_count  FROM groups_cells WHERE groups_cells.sector_id = :sector_id AND groups_cells.active = 1 AND groups_cells.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values3 = array(':church_id' => $final_church, ':sector_id' => $sector_id);
         $pre3->execute($values3);
         $result3 = $pre3->fetch();

         /*List cell groups*/
         $sql_cell = "SELECT id as cell_id, cell_code, sector_code, zone_code, district_code, city, address, (SELECT CONCAT(user.first_name, ' ', user.last_name) AS name from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as leader, (SELECT profile_picture from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as profile_picture FROM groups_cells WHERE groups_cells.sector_id = $sector_id AND groups_cells.active = 1 AND groups_cells.church_id = $final_church";
         
         $list_cell = null;

         foreach ($con->query($sql_cell) as $row_cell) {
           $list_cell[] = $row_cell;
         }

         /*New cell groups last week*/
         $sql_new = "SELECT id as cell_id, cell_code FROM groups_cells WHERE groups_cells.sector_id = $sector_id AND groups_cells.active = 1 AND groups_cells.church_id = $final_church AND DATEDIFF(CURRENT_DATE, start_date) <= 7";
         
         $new_cell = null;

         foreach ($con->query($sql_new) as $row2) {
           $new_cell[] = $row2;
         }

         /*Cell Team*/

         // Supervisor
         $pre4 = $con->prepare("SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, user.profile_picture, user.rol AS role FROM groups_sectors INNER JOIN user ON groups_sectors.supervisor = user.id WHERE groups_sectors.id = :sector_id AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values4 = array(':church_id' => $final_church, ':sector_id' => $sector_id);
         $pre4->execute($values4);
         $result4 = $pre4->fetch();

         $supervisor = array("name" => $result4['name'],
                   "profile_picture" => $result4['profile_picture'],
                   "role" => $result4['role'],
                   "member_role" => 'Supervisor');

         $cell_team = null;

         $cell_team[] = $supervisor;

         // Leaders
         $sql_le = "SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, profile_picture, rol as role, IF(rol = '5', 'Leader', null) as member_role FROM groups_cells, user WHERE user.id = groups_cells.leader AND groups_cells.sector_id = $sector_id AND groups_cells.active = 1 AND groups_cells.church_id = $final_church";
         

         foreach ($con->query($sql_le) as $row_le) {
           $cell_team[] = $row_le;
         }

         /*CHURCH TEAM*/

         /*Obtain senior pastor*/
         $pre_se = $con->prepare("SELECT CONCAT(first_name, ' ', last_name) AS name, profile_picture, rol as role FROM user WHERE user.church_id = :church_id AND user.rol = 1",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_se = array(':church_id' => $final_church);
         $pre_se->execute($values_se);
         $result_se = $pre_se->fetch();

         $senior_pastor = array("name" => $result_se['name'],
                            "profile_picture" => $result_se['profile_picture'],
                            "role" => $result_se['role'],
                            "member_role" => "Senior Pastor");

         $team = null;
         $team[] = $senior_pastor;


        /*Obtain district_pastor data*/
        $pre_dis = $con->prepare("SELECT (SELECT district_id from groups_zones WHERE groups_zones.id = groups_sectors.zone_id AND groups_zones.church_id = :church_id) as district_id, (SELECT district_pastor from groups_districts WHERE groups_districts.id = district_id AND groups_districts.church_id = :church_id) as district_pastor, (SELECT CONCAT(first_name, ' ', last_name) AS name from user WHERE user.id = district_pastor AND user.church_id = :church_id) as name, (SELECT user.profile_picture from user WHERE user.id = district_pastor AND user.church_id = :church_id) as profile_picture, (SELECT rol from user WHERE user.id = district_pastor AND user.church_id = :church_id) as role FROM groups_sectors WHERE groups_sectors.id = :sector_id AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':church_id' => $final_church, ':sector_id' => $sector_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $district_pastor = array("name" => $result_dis['name'],
                           "profile_picture" => $result_dis['profile_picture'],
                           "role" => $result_dis['role'],
                           "member_role" => "District Pastor");

        $team[] = $district_pastor;

         /*Obtain zone_pastor data*/
         $pre_zone = $con->prepare("SELECT (SELECT zone_pastor from groups_zones WHERE groups_zones.id = groups_sectors.zone_id AND groups_zones.church_id = :church_id) as zone_pastor, (SELECT CONCAT(first_name, ' ', last_name) AS name from user WHERE user.id = zone_pastor AND user.church_id = :church_id) as name, (SELECT user.profile_picture from user WHERE user.id = zone_pastor AND user.church_id = :church_id) as profile_picture, (SELECT rol from user WHERE user.id = zone_pastor AND user.church_id = :church_id) as role FROM groups_sectors WHERE groups_sectors.id = :sector_id AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_zone = array(':church_id' => $final_church, ':sector_id' => $sector_id);
         $pre_zone->execute($values_zone);
         $result_zone = $pre_zone->fetch();

         $zone_pastor = array("name" => $result_zone['name'],
                        "profile_picture" => $result_zone['profile_picture'],
                        "role" => $result_zone['role'],
                        "member_role" => "Zone Pastor");

         $team[] = $zone_pastor;
        

         $res = array("sector_id" => $result['sector_id'],
                    "sector_code" => $result['sector_code'],
                    "zone_code" => $result['zone_code'],
                    "district_code" => $result['district_code'],
                    "supervisor_id" => $result['supervisor_id'],
                    "supervisor" => $result['supervisor'],
                    "supervisor_picture" => $result['supervisor_picture'],
                    "address" => $result['address'],
                    "cells_count" => $result3['cells_count'],
                    "members_count" => $result2['members_count'],
                    "list_cells" => $list_cell,
                    "new_cells" => $new_cell,
                    "cell_team" => $cell_team,
                    "church_team" => $team
              );

         return $response->withStatus(200)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('response' => $res));

       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"Sector does not exist",
                     "status"=>422)));
       }


     }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
     }

   } else{

    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Type user does not exist",
                "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/sectors/edit', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $sector_id = $request->getParam('sector_id');
   $sector_code = $request->getParam('sector_code');
   $parent_sector = $request->getParam('parent_sector');
   $supervisor = $request->getParam('supervisor');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   } else if(empty($sector_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_code",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

   // verify if the logged in user exists
   $pre_user = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
   $pre_user->execute($values_user);
   $result_user = $pre_user->fetch();

   if ($result_user) {

    // verify if role exists
    if ($role_id == 3) {

      $first_name = $result_user['first_name'];
      $last_name = $result_user['last_name'];

      $final_church = $result_user['church_id'];

      // verify if zone exists
      $pre_i = $con->prepare("SELECT *
                               FROM groups_sectors
                               WHERE id = :sector_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_i = array(':sector_id' => $sector_id);
      $pre_i->execute($values_i);
      $result_i = $pre_i->fetch();

      if ($result_i) {

        $actual_pastor = $result_i['supervisor'];

        // verify if code exists
        $pre_co = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE sector_code = :sector_code AND id != :sector_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_co = array(':sector_code' => $sector_code, ':sector_id' => $sector_id, ':church_id' => $church_id);
        $pre_co->execute($values_co);
        $result_co = $pre_co->fetch();

        if ($result_co) {
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Sector code already exists",
                      "status"=>422)));
        }else{

          $final_d = date("Y-m-d H:i:s");

          // verify if parent is null
          if ($parent_zone == "null" || $parent_zone == null) {
            // verify if pastor is null
            if ($zone_pastor == "null" || $zone_pastor == null) {

              $pre_dis3 = $con->prepare("UPDATE groups_sectors SET sector_code = :sector_code, parent_id = NULL, supervisor = NULL, is_complete = 0 WHERE id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis3 = array(
                ':sector_code' => $sector_code,
                ':sector_id' => $sector_id,
                ':church_id' => $church_id
                );

              $result_dis3 = $pre_dis3->execute($values_dis3);

              /*if supervisor is verified*/
              $pre_ve = $con->prepare("SELECT *
                                    FROM user
                                    WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
              $pre_ve->execute($values_ve);
              $result_ve = $pre_ve->fetch();

              if ($result_ve) {

                /*update actual pastor*/
                $pre_ac = $con->prepare("UPDATE user_groups SET sector_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ac = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result_ac = $pre_ac->execute($values_ac);

                $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result_us = $pre_us->execute($values_us);

              }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

              }


              // update sector_code in other group tables

              $pre_upco = $con->prepare("UPDATE groups_cells SET sector_code = :sector_code WHERE sector_id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upco = array(
                ':sector_code' => $sector_code,
                ':sector_id' => $sector_id,
                ':church_id' => $church_id
              );

              $result_upco = $pre_upco->execute($values_upco);

              if ($result_dis3) {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of sector S" . $sector_code;
                  $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm =  $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Sector)*/
                  $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the sector S" . $sector_code;
                  $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                }else{
                  /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                  $en_mess = $first_name . " " . $last_name . " edited profile of sector S" . $sector_code;
                  $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Sector)*/
                  $en_mess2 = $first_name . " " . $last_name . " edited profile of the sector S" . $sector_code;
                  $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;
                }

                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_d' => $final_d);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*ACTIVITY GROUPS*/

                /*Activity Profile updates (Sector)*/
                $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead2 = array(
                    ':es_mess2' => $es_mess2,
                    ':en_mess2' => $en_mess2,
                    ':sector_id' => $sector_id,
                    ':final_d' => $final_d);

                $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Sector has been successfully edited'));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }

            }else{

              // verify if supervisor exists
              $pre_di = $con->prepare("SELECT *
                                       FROM user
                                       WHERE id = :supervisor AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di = array(':supervisor' => $supervisor, ':church_id' => $church_id);
              $pre_di->execute($values_di);
              $result_di = $pre_di->fetch();

              if ($result_di) {

                $verify = $result_di['verified_account'];

                /*activate user if verified_acc 1*/
                if ($verify == '1') {
                  $pre_upd = $con->prepare("UPDATE user SET status = 1 WHERE id = :supervisor AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upd = array(
                    ':supervisor' => $supervisor,
                    ':church_id' => $church_id
                    );

                  $result_upd = $pre_upd->execute($values_upd);
                }

                $pre_dis = $con->prepare("UPDATE groups_sectors SET sector_code = :sector_code, parent_id = NULL, supervisor = :supervisor, is_complete = 1, active = 1 WHERE id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis = array(
                  ':sector_code' => $sector_code,
                  ':sector_id' => $sector_id,
                  ':church_id' => $church_id,
                  ':supervisor' => $supervisor
                  );

                $result_dis = $pre_dis->execute($values_dis);

                /*if supervisor is verified*/
                $pre_ve = $con->prepare("SELECT *
                                      FROM user
                                      WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                $pre_ve->execute($values_ve);
                $result_ve = $pre_ve->fetch();

                if ($result_ve) {

                  /*update actual pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET sector_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_us = $pre_us->execute($values_us);

                }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

                }


                /*update new pastor*/
                $pre_ac = $con->prepare("UPDATE user_groups SET sector_id = :sector_id WHERE user_id = :supervisor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ac = array(
                  ':supervisor' => $supervisor,
                  ':sector_id' => $sector_id
                  );

                $result_ac = $pre_ac->execute($values_ac);

                $pre_us2 = $con->prepare("UPDATE user SET is_complete = 1 WHERE id = :supervisor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us2 = array(
                  ':supervisor' => $supervisor
                  );

                $result_us2 = $pre_us2->execute($values_us2);
                

                // update sector_code in other group tables

                $pre_upco = $con->prepare("UPDATE groups_cells SET sector_code = :sector_code WHERE sector_id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco = array(
                  ':sector_code' => $sector_code,
                  ':sector_id' => $sector_id,
                  ':church_id' => $church_id
                );

                $result_upco = $pre_upco->execute($values_upco);


                if ($result_dis) {

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                    $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of sector S" . $sector_code;
                    $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                    $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_actm = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $impersonate_id,
                        ':final_d' => $final_d);

                    $result_actm =  $pre_actm->execute($values_actm);

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Sector)*/
                    $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the sector S" . $sector_code;
                    $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;


                  }else{
                    /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                    $en_mess = $first_name . " " . $last_name . " edited profile of sector S" . $sector_code;
                    $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Sector)*/
                    $en_mess2 = $first_name . " " . $last_name . " edited profile of the sector S" . $sector_code;
                    $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;

                  }

                  $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $user_id,
                      ':final_d' => $final_d);

                  $result_act_lead = $pre_act_lead->execute($values_act_lead);


                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Sector)*/
                  $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead2 = array(
                      ':es_mess2' => $es_mess2,
                      ':en_mess2' => $en_mess2,
                      ':sector_id' => $sector_id,
                      ':final_d' => $final_d);

                  $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                  
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => 'Sector has been successfully edited'));
                }else{

                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
                }

                
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Supervisor does not exist",
                            "status"=>422)));
              }

            } // end else pastor

          }else{

            // verify if pastor is null
            if ($zone_pastor == "null" || $zone_pastor == null) {

              // verify if parent_sector exists
              $pre_di2 = $con->prepare("SELECT *
                                       FROM groups_sectors
                                       WHERE id = :parent_sector AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di2 = array(':parent_sector' => $parent_sector, ':church_id' => $church_id);
              $pre_di2->execute($values_di2);
              $result_di2 = $pre_di2->fetch();

              if ($result_di2) {
              
                $pre_dis3 = $con->prepare("UPDATE groups_sectors SET sector_code = :sector_code, parent_id = :parent_sector, supervisor = NULL, is_complete = 0 WHERE id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis3 = array(
                  ':sector_code' => $sector_code,
                  ':parent_sector' => $parent_sector,
                  ':sector_id' => $sector_id,
                  ':church_id' => $church_id
                  );

                $result_dis3 = $pre_dis3->execute($values_dis3);


                /*if supervisor is verified*/
                $pre_ve = $con->prepare("SELECT *
                                      FROM user
                                      WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                $pre_ve->execute($values_ve);
                $result_ve = $pre_ve->fetch();

                if ($result_ve) {

                  /*update actual pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET sector_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_us = $pre_us->execute($values_us);

                  /*delete not verified*/
                }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

                }


                // update sector_code in other group tables

                $pre_upco = $con->prepare("UPDATE groups_cells SET sector_code = :sector_code WHERE sector_id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco = array(
                  ':sector_code' => $sector_code,
                  ':sector_id' => $sector_id,
                  ':church_id' => $church_id
                );

                $result_upco = $pre_upco->execute($values_upco);

                if ($result_dis3) {

                  /*************** ACTIVITIES ***********************/
                  if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of sector S" . $sector_code;
                  $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm =  $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                /*Activity Profile updates (Sector)*/
                $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the sector S" . $sector_code;
                $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                }else{
                  /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                  $en_mess = $first_name . " " . $last_name . " edited profile of sector S" . $sector_code;
                  $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Sector)*/
                  $en_mess2 = $first_name . " " . $last_name . " edited profile of the sector S" . $sector_code;
                  $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;
                }

                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_d' => $final_d);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*ACTIVITY GROUPS*/

                /*Activity Profile updates (Sector)*/
                $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead2 = array(
                    ':es_mess2' => $es_mess2,
                    ':en_mess2' => $en_mess2,
                    ':sector_id' => $sector_id,
                    ':final_d' => $final_d);

                $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Sector has been successfully edited'));

                }else{

                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
                }


              }else{
                return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Parent Sector does not exist",
                          "status"=>422)));
              }

              /*if parent_sector and supervisor != null*/
            }else{
              
              // verify if supervisor exists
              $pre_di = $con->prepare("SELECT *
                                       FROM user
                                       WHERE id = :supervisor AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di = array(':supervisor' => $supervisor, ':church_id' => $church_id);
              $pre_di->execute($values_di);
              $result_di = $pre_di->fetch();

              if ($result_di) {

                $verify = $result_di['verified_account'];

                // verify if parent_sector exists
                $pre_di2 = $con->prepare("SELECT *
                                         FROM groups_sectors
                                         WHERE id = :parent_sector AND church_id = :church_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_di2 = array(':parent_sector' => $parent_sector, ':church_id' => $church_id);
                $pre_di2->execute($values_di2);
                $result_di2 = $pre_di2->fetch();

                if ($result_di2) {

                  /*activate user if verified_acc 1*/
                  if ($verify == '1') {
                    $pre_upd = $con->prepare("UPDATE user SET status = 1 WHERE id = :supervisor AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_upd = array(
                      ':supervisor' => $supervisor,
                      ':church_id' => $church_id
                      );

                    $result_upd = $pre_upd->execute($values_upd);
                  }

                  $pre_dis = $con->prepare("UPDATE groups_sectors SET sector_code = :sector_code, parent_id = :parent_sector, supervisor = :supervisor, is_complete = 1, active = 1 WHERE id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis = array(
                    ':sector_code' => $sector_code,
                    ':parent_sector' => $parent_sector,
                    ':sector_id' => $sector_id,
                    ':church_id' => $church_id,
                    ':supervisor' => $supervisor
                    );

                  $result_dis = $pre_dis->execute($values_dis);


                  /*if supervisor is verified*/
                  $pre_ve = $con->prepare("SELECT *
                                        FROM user
                                        WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                        array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                  $pre_ve->execute($values_ve);
                  $result_ve = $pre_ve->fetch();

                  if ($result_ve) {

                    /*update actual pastor*/
                    $pre_ac = $con->prepare("UPDATE user_groups SET sector_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_ac = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result_ac = $pre_ac->execute($values_ac);

                    $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_us = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result_us = $pre_us->execute($values_us);

                    /*delete not verified*/
                  }else{

                    $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values2 = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result2 = $pre2->execute($values2);

                  }

                  /*update new pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET sector_id = :sector_id WHERE user_id = :supervisor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':supervisor' => $supervisor,
                    ':sector_id' => $sector_id
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us2 = $con->prepare("UPDATE user SET is_complete = 1 WHERE id = :supervisor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us2 = array(
                    ':supervisor' => $supervisor
                    );

                  $result_us2 = $pre_us2->execute($values_us2);


                  // update sector_code in other group tables

                  $pre_upco = $con->prepare("UPDATE groups_cells SET sector_code = :sector_code WHERE sector_id = :sector_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upco = array(
                    ':sector_code' => $sector_code,
                    ':sector_id' => $sector_id,
                    ':church_id' => $church_id
                  );

                  $result_upco = $pre_upco->execute($values_upco);

                  if ($result_dis) {

                      /*************** ACTIVITIES ***********************/
                      if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                      $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of sector S" . $sector_code;
                      $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_actm = array(
                          ':es_mess' => $es_mess,
                          ':en_mess' => $en_mess,
                          ':user_id' => $impersonate_id,
                          ':final_d' => $final_d);

                      $result_actm =  $pre_actm->execute($values_actm);

                      /*ACTIVITY GROUPS*/

                      /*Activity Profile updates (Sector)*/
                      $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the sector S" . $sector_code;
                      $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil del sector S" . $sector_code;

                    }else{
                      /*Activity Edited a Sectorâs profile (Zone Pastor)*/
                      $en_mess = $first_name . " " . $last_name . " edited profile of sector S" . $sector_code;
                      $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;

                      /*ACTIVITY GROUPS*/

                      /*Activity Profile updates (Sector)*/
                      $en_mess2 = $first_name . " " . $last_name . " edited profile of the sector S" . $sector_code;
                      $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil del sector S" . $sector_code;
                    }

                    $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $user_id,
                        ':final_d' => $final_d);

                    $result_act_lead = $pre_act_lead->execute($values_act_lead);


                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Sector)*/
                    $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead2 = array(
                        ':es_mess2' => $es_mess2,
                        ':en_mess2' => $en_mess2,
                        ':sector_id' => $sector_id,
                        ':final_d' => $final_d);

                    $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                    
                    return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Sector has been successfully edited'));
                  }else{

                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                              "message"=>"There was a problem, verify your parameters",
                              "status"=>422)));
                  }


                }else{
                  return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Parent Sector does not exist",
                            "status"=>422)));
                }
                
                
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Supervisor does not exist",
                            "status"=>422)));
              }

            } /*end else parent_zone and zone_pastor != null*/

          } // end else parent is null

        } // end else code exists

      }else{
        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Sector does not exist",
                  "status"=>422)));
      }
       
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"You do'nt have permission to edit this group",
                  "status"=>422)));
    }

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "message"=>"User with this role does not exist",
                 "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/sectors/activate', function ($request,$response) {

  try{
   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $sector_id = $request->getParam('sector_id');
   $church_id = $request->getParam('church_id');
   $active = $request->getParam('active');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
    } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i",$active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

     // verify if the logged in user exists
     $pre_user = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
     $pre_user->execute($values_user);
     $result_user = $pre_user->fetch();

     if ($result_user) {

      // verify if role exists
      if ($role_id == 3) {

        $first_name = $result_user['first_name'];
        $last_name =  $result_user['last_name'];

        $pre_i = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :sector_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_i = array(':sector_id' => $sector_id, ':church_id' => $church_id);
        $pre_i->execute($values_i);
        $result_i = $pre_i->fetch();

        if ($result_i) {

          /*Obtain zone_id for statistics*/
          $zone_f = $result_i['zone_id'];

          $final_s = $result_i['sector_code'];

          if ($active == '0') {

            /*inactivate sector and supervisor*/

            $pre = $con->prepare("UPDATE groups_sectors SET active = '0' WHERE id = :sector_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(':sector_id' => $sector_id);
            $result = $pre->execute($values);


            $pre_zpastor = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT supervisor FROM groups_sectors WHERE id = :sector_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zpastor = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_zpastor = $pre_zpastor->execute($values_zpastor);

            /*inactivate cells and leaders*/

            $pre_sector = $con->prepare("UPDATE groups_cells SET active = '0' WHERE sector_id = :sector_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sector = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_sector = $pre_sector->execute($values_sector);

            $pre_super = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT leader FROM groups_cells WHERE sector_id = :sector_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_super = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_super = $pre_super->execute($values_super);


            /*inactivate members associated with cells*/

            $pre_member = $con->prepare("UPDATE members_cells SET active = '0' WHERE cell_id IN (SELECT id from groups_cells where sector_id IN (SELECT id from groups_sectors where id = :sector_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_member = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_member = $pre_member->execute($values_member);

            if($result){

                $date_u = date("Y-m-d H:i:s");

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Inactivated a Sector (Zone Pastor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated sector S" . $final_s;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ el sector S" . $final_s;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':date_u' => $date_u);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Inactivated Sector confirmation (Zone)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated sector S" . $final_s;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ el sector S" . $final_s;

                }else{

                  /*Activity Inactivated a Sector (Zone Pastor)*/
                  $en_message = $first_name . " " . $last_name . " inactivated sector S" . $final_s;
                  $es_message = $first_name . " " . $last_name . " inactivÃ³ el sector S" . $final_s;

                  /*ACTIVITY GROUPS*/

                  /*Activity Inactivated Sector confirmation (Zone)*/
                  $en_message2 = $first_name . " " . $last_name . " inactivated sector S" . $final_s;
                  $es_message2 = $first_name . " " . $last_name . " inactivÃ³ el sector S" . $final_s;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Sector confirmation (Zone)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_f,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2, 
                    ':zone_f' => $zone_f,
                    ':date_u' => $date_u);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Sectors and associated groups has been inactivated successfully')));
            }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
            }


          } else if ($active == '1') {

            /*activate sector and supervisor*/

            $pre = $con->prepare("UPDATE groups_sectors SET active = '1' WHERE id = :sector_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(':sector_id' => $sector_id);
            $result = $pre->execute($values);


            $pre_zpastor = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT supervisor FROM groups_sectors WHERE id = :sector_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zpastor = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_zpastor = $pre_zpastor->execute($values_zpastor);

            /*inactivate cells and leaders*/

            $pre_sector = $con->prepare("UPDATE groups_cells SET active = '1' WHERE sector_id = :sector_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sector = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_sector = $pre_sector->execute($values_sector);

            $pre_super = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT leader FROM groups_cells WHERE sector_id = :sector_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_super = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_super = $pre_super->execute($values_super);


            /*inactivate members associated with cells*/

            $pre_member = $con->prepare("UPDATE members_cells SET active = '1' WHERE cell_id IN (SELECT id from groups_cells where sector_id IN (SELECT id from groups_sectors where id = :sector_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_member = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $result_member = $pre_member->execute($values_member);

            if($result){

                $date_u = date("Y-m-d H:i:s");

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Activated a Sector (Zone Pastor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated sector S" . $final_s;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ el sector S" . $final_s;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':date_u' => $date_u);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/
                  /*Activity Activated Sector confirmation (Zone)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated sector S" . $final_s;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ el sector S" . $final_s;

                }else{

                  /*Activity Activated a Sector (Zone Pastor)*/
                  $en_message = $first_name . " " . $last_name . " activated sector S" . $final_s;
                  $es_message = $first_name . " " . $last_name . " activÃ³ el sector S" . $final_s;

                  /*ACTIVITY GROUPS*/
                  /*Activity Activated Sector confirmation (Zone)*/
                  $en_message2 = $first_name . " " . $last_name . " activated sector S" . $final_s;
                  $es_message2 = $first_name . " " . $last_name . " activÃ³ el sector S" . $final_s;
                }

                /*Activity Activated a Sector (Zone Pastor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);



                /*ACTIVITY GROUPS*/

                /*Activity Activated Sector confirmation (Zone)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_f,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2, 
                    ':zone_f' => $zone_f,
                    ':date_u' => $date_u);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Sectors and associated groups has been inactivated successfully')));
            }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
            }


          } else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"filter does not exist",
                        "status"=>422)));

          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Sector does not exist",
                      "status"=>422)));
        }

        /*else role_id*/
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"You do'nt have permission to perform this action",
                    "status"=>422)));
      }

      /*else user logged*/
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User with this role does not exist",
                  "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


 /*group children*/
$app->post('/sectors/cell-groups-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $sector_id = $request->getParam('sector_id');
   $active = $request->getParam('active');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("SELECT *
                             FROM groups_sectors
                             WHERE id = :sector_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':sector_id' => $sector_id);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {

      $final_church = $result['church_id'];

      if ($active || $active == '0') {

        if ($active == '0') {
          
          $sql = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.sector_id = $sector_id AND groups_cells.church_id = $final_church AND groups_cells.active = 0";
          

          foreach ($con->query($sql) as $row) {
            $cells[] = $row;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $cells));

        }else if ($active == '1') {

          $sql2 = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.sector_id = $sector_id AND groups_cells.church_id = $final_church AND groups_cells.active = 1";
          

          foreach ($con->query($sql2) as $row2) {
            $cells2[] = $row2;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $cells2));
        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"filter does not exist",
                      "status"=>422)));
        }

        /*if empty active*/
      }else{

        $sql = "SELECT groups_cells.id,groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code,groups_cells.district_code, groups_cells.start_date,groups_cells.city,groups_cells.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.sector_id = $sector_id AND groups_cells.church_id = $final_church";
        

        foreach ($con->query($sql) as $row) {
          $cells[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $cells));

      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Sector does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*report children*/
$app->post('/sectors/reports-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $sector_id = $request->getParam('sector_id');
   $district_code = $request->getParam('district_code');
   $zone_code = $request->getParam('zone_code');
   $sector_code = $request->getParam('sector_code');
   $initial_date_range = $request->getParam('initial_date_range');
   $end_date_range = $request->getParam('end_date_range');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   } else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   } else if(empty($zone_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_code",
               "status"=>500)));
   } else if(empty($sector_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_code",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $pre = $con->prepare("SELECT *
                             FROM groups_sectors
                             WHERE id = :sector_id AND district_code = :district_code
                             AND zone_code = :zone_code AND sector_code = :sector_code", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':sector_id' => $sector_id, ':district_code' => $district_code, ':zone_code' => $zone_code, ':sector_code' => $sector_code);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {


      $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date_range);
      $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date_range);

      if ($initial_date_range || $end_date_range) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        } else if($initial_date_range > $end_date_range){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Final date must be greater than initial date",
                    "status"=>500)));
        }else if(empty($initial_date_range) || empty($end_date_range)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        }


        $sql = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, CONCAT(user.first_name, ' ', user.last_name) AS leader FROM reports, groups_cells,user WHERE reports.cell_id = groups_cells.id AND groups_cells.leader = user.id AND reports.district_code = $district_code AND reports.zone_code = $zone_code AND reports.sector_code = $sector_code AND groups_cells.church_id = $final_church AND reports.creation_date BETWEEN '$initial_date_range' AND '$end_date_range' ORDER BY reports.creation_date DESC";
          

        foreach ($con->query($sql) as $row) {
          $reports[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $reports));


      } else{

        $sql2 = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, CONCAT(user.first_name, ' ', user.last_name) AS leader FROM reports, groups_cells,user WHERE reports.cell_id = groups_cells.id AND groups_cells.leader = user.id AND reports.district_code = $district_code AND reports.zone_code = $zone_code AND reports.sector_code = $sector_code AND groups_cells.church_id = $final_church";
          

        foreach ($con->query($sql2) as $row2) {
          $reports2[] = $row2;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $reports2));
      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Sector does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/************* Transfers ***********************/

/*Transfer Sector*/
$app->post('/sectors/transfer-cell', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $sector_id = $request->getParam('sector_id');
   $zone_id = $request->getParam('zone_id');
   $district_id = $request->getParam('district_id');
   $sector_code = $request->getParam('sector_code');
   $zone_code = $request->getParam('zone_code');
   $district_code = $request->getParam('district_code');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($sector_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_code",
               "status"=>500)));
   } else if(empty($zone_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_code",
               "status"=>500)));
   } else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    
    if ($role_id == '4') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $first_name = $result_user['first_name'];
          $last_name = $result_user['last_name'];

          /*verify sector exist*/
          $final_church = $result_user['church_id'];

          $pre_cell = $con->prepare("SELECT *
                                   FROM groups_cells
                                   WHERE id = :cell_id AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cell = array(':cell_id' => $cell_id, ':final_church' => $final_church);
          $pre_cell->execute($values_cell);
          $result_cell = $pre_cell->fetch();

          if ($result_cell) {

              $cell_f = $result_cell['cell_code'];

              $cell_code = $result_cell['cell_code'];
              /*verify district exist*/
              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :district_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':district_id' => $district_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              if ($result_dis) {

                /*verify zone exist*/
                $pre_zone = $con->prepare("SELECT *
                                         FROM groups_zones
                                         WHERE id = :zone_id AND church_id = :final_church", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zone = array(':zone_id' => $zone_id, ':final_church' => $final_church);
                $pre_zone->execute($values_zone);
                $result_zone = $pre_zone->fetch();

                if ($result_zone) {

                  /*verify sector exist*/
                  $pre_sec = $con->prepare("SELECT *
                                           FROM groups_sectors
                                           WHERE id = :sector_id AND church_id = :final_church", 
                                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_sec = array(':sector_id' => $sector_id, ':final_church' => $final_church);
                  $pre_sec->execute($values_sec);
                  $result_sec = $pre_sec->fetch();

                  if ($result_sec) {
                  
                    $sql_code = "SELECT cell_code FROM groups_cells WHERE sector_id = $sector_id";

                    $final_code = null;
                    
                    foreach ($con->query($sql_code) as $row_code) {
                      $final_code[] = $row_code;
                    }

                    $err_code = 0;

                    /*verify if sector_code exist*/
                    for($i = 0; $i < count($final_code); $i++) {

                      if($final_code[$i]['cell_code'] == $cell_code){
                        $err_code += 1;
                      }

                    }

                    // if sector_code exist, new code is assigned
                    if ($err_code > 0) {

                      $pre_max = $con->prepare("SELECT max(cell_code) as max_code
                                               FROM groups_cells
                                               WHERE sector_id = :sector_id", 
                                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_max = array(':sector_id' => $sector_id);
                      $pre_max->execute($values_max);
                      $result_max = $pre_max->fetch();

                      $new_code = $result_max['max_code']+1;
                      
                      /*Update sector with new zone*/

                      $pre_dis3 = $con->prepare("UPDATE groups_cells SET sector_id = :sector_id, district_code = :district_code, zone_code = :zone_code, sector_code = :sector_code, cell_code = :cell_code WHERE id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_dis3 = array(
                         ':sector_id' => $sector_id,
                         ':district_code' => $district_code,
                         ':zone_code' => $zone_code,
                         ':sector_code' => $sector_code,
                         ':cell_code' => $new_code,
                         ':cell_id' => $cell_id
                      );

                      $result_dis3 = $pre_dis3->execute($values_dis3);


                      if ($result_dis3) {

                        $date_u = date("Y-m-d H:i:s");

                        if ($impersonate) {
                         
                          $roles = getRole($impersonate_role);

                          $role_name = $roles['role_name'];
                          $role_name_es = $roles['role_name_es'];

                          $imperson = " (Impersonate)";
                          $imperson_es = " (Impersonado)";

                          /*Activity Cell groupâs transfer confirmation (Supervisor)*/
                          $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                          $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                          $values_actm = array(
                              ':es_message' => $es_message, 
                              ':en_message' => $en_message, 
                              ':id_m' => $impersonate_id,
                              ':date_u' => $date_u);

                          $result_actm = $pre_actm->execute($values_actm);

                          /*ACTIVITY GROUPS*/

                          /*Activity Cell groupâs transfer confirmation (Sector)*/
                          $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                        }else{

                          /*Activity Cell groupâs transfer confirmation (Supervisor)*/
                          $en_message = $first_name . " " . $last_name . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message = $first_name . " " . $last_name . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                          /*ACTIVITY GROUPS*/

                          /*Activity Cell groupâs transfer confirmation (Sector)*/
                          $en_message2 = $first_name . " " . $last_name . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                        }

                        $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_act = array(
                            ':es_message' => $es_message, 
                            ':en_message' => $en_message, 
                            ':id_m' => $user_id,
                            ':date_u' => $date_u);

                        $result_act = $pre_act->execute($values_act);


                        /*ACTIVITY GROUPS*/

                        /*Activity Cell groupâs transfer confirmation (Sector)*/
                        $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_act2 = array(
                            ':es_message2' => $es_message2, 
                            ':en_message2' => $en_message2, 
                            ':sector_id' => $sector_id,
                            ':date_u' => $date_u);

                        $result_act2 = $pre_act2->execute($values_act2);
                         
                        return $response->withStatus(200)
                                 ->withHeader('Content-Type', 'application/json')
                                 ->withJson(array('response' => 'Cell has been transferred successfully'));
                      }else{

                        return $response->withStatus(422)
                                 ->withHeader('Content-Type', 'application/json')
                                 ->withJson(array('error' => array(
                                   "message"=>"There was a problem, verify your parameters",
                                   "status"=>422)));
                      }

                    }else{

                      /*Update sector with new zone*/

                      $pre_dis3 = $con->prepare("UPDATE groups_cells SET sector_id = :sector_id, district_code = :district_code, zone_code = :zone_code, sector_code = :sector_code, cell_code = :cell_code WHERE id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_dis3 = array(
                         ':sector_id' => $sector_id,
                         ':district_code' => $district_code,
                         ':zone_code' => $zone_code,
                         ':sector_code' => $sector_code,
                         ':cell_code' => $cell_code,
                         ':cell_id' => $cell_id
                      );

                      $result_dis3 = $pre_dis3->execute($values_dis3);


                      if ($result_dis3) {

                        $date_u = date("Y-m-d H:i:s");

                        /*************** ACTIVITIES ***********************/

                        if ($impersonate) {
                         
                          $roles = getRole($impersonate_role);

                          $role_name = $roles['role_name'];
                          $role_name_es = $roles['role_name_es'];

                          $imperson = " (Impersonate)";
                          $imperson_es = " (Impersonado)";

                          /*Activity Cell groupâs transfer confirmation (Supervisor)*/
                          $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                          $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                          $values_actm = array(
                              ':es_message' => $es_message,
                              ':en_message' => $en_message,
                              ':id_m' => $impersonate_id,
                              ':date_u' => $date_u);

                          $result_actm = $pre_actm->execute($values_actm);

                          /*Activity Cell groupâs transfer confirmation (Sector)*/
                          $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                        }else{

                          /*Activity Cell groupâs transfer confirmation (Supervisor)*/
                          $en_message = $first_name . " " . $last_name . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message = $first_name . " " . $last_name . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;

                          /*Activity Cell groupâs transfer confirmation (Sector)*/
                          $en_message2 = $first_name . " " . $last_name . " transferred the cell group C" . $cell_f . " to D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                          $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ la cÃ©lula C" . $cell_f . " a D" . $district_code . " Z" . $zone_code . " S" . $sector_code;
                        }

                        $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_act = array(
                            ':es_message' => $es_message,
                            ':en_message' => $en_message,
                            ':id_m' => $user_id,
                            ':date_u' => $date_u);

                        $result_act = $pre_act->execute($values_act);


                        /*ACTIVITY GROUPS*/

                        /*Activity Cell groupâs transfer confirmation (Sector)*/
                        $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_act2 = array(
                            ':es_message2' => $es_message2, 
                            ':en_message2' => $en_message2, 
                            ':sector_id' => $sector_id,
                            ':date_u' => $date_u);

                        $result_act2 = $pre_act2->execute($values_act2);
                         
                        return $response->withStatus(200)
                                 ->withHeader('Content-Type', 'application/json')
                                 ->withJson(array('response' => 'Cell has been transferred successfully'));
                      }else{

                        return $response->withStatus(422)
                                 ->withHeader('Content-Type', 'application/json')
                                 ->withJson(array('error' => array(
                                   "message"=>"There was a problem, verify your parameters",
                                   "status"=>422)));
                      }

                    } /*end else err_code*/


                  }else{ /*end else exist sector*/
                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"Sector does not exist",
                                "status"=>422)));
                  }

                }else{ /*end else exist zone*/
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "message"=>"Zone does not exist",
                              "status"=>422)));
                }
                     

              }else{ /*end else exist district*/
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District does not exist",
                            "status"=>422)));
              }

          } else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Cell does not exist",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*Trasnfer leader*/
$app->post('/sectors/transfer-leader', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $leader_id = $request->getParam('leader_id');
   $district_id = $request->getParam('district_id');
   $zone_id = $request->getParam('zone_id');
   $sector_id = $request->getParam('sector_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    
    if ($role_id == '4') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $final_church = $result_user['church_id'];

          $first_name = $result_user['first_name'];
          $last_name = $result_user['last_name'];

          $pre_lead = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :leader_id AND rol = 5 AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_lead = array(':leader_id' => $leader_id, ':final_church' => $final_church);
          $pre_lead->execute($values_lead);
          $result_lead = $pre_lead->fetch();

          /*verify supervisor exist*/
          if ($result_lead) {

              $first_name_l = $result_lead['first_name'];
              $last_name_l = $result_lead['last_name'];

              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :district_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':district_id' => $district_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              /*verify district exist*/
              if ($result_dis) {

                $final_d = $result_dis['district_code'];

                /*verify zone exist*/
                $pre_zone = $con->prepare("SELECT *
                                         FROM groups_zones
                                         WHERE id = :zone_id AND church_id = :final_church", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zone = array(':zone_id' => $zone_id, ':final_church' => $final_church);
                $pre_zone->execute($values_zone);
                $result_zone = $pre_zone->fetch();

                if ($result_zone) {

                  $final_z = $result_zone['zone_code'];

                  /*verify sector exist*/
                  $pre_sec = $con->prepare("SELECT *
                                           FROM groups_sectors
                                           WHERE id = :sector_id AND church_id = :final_church", 
                                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_sec = array(':sector_id' => $sector_id, ':final_church' => $final_church);
                  $pre_sec->execute($values_sec);
                  $result_sec = $pre_sec->fetch();

                  if ($result_sec) {

                    $final_s = $result_sec['sector_code'];

                    $pre_id = $con->prepare("SELECT *
                                             FROM groups_cells
                                             WHERE leader = :leader_id AND church_id = :final_church", 
                                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_id = array(':leader_id' => $leader_id, ':final_church' => $final_church);
                    $pre_id->execute($values_id);
                    $result_id = $pre_id->fetch();

                    /*verify if sector is associated with supervisor*/
                    if ($result_id) {

                      $cell_id = $result_id['id'];
                      
                      /*Update sector associated*/

                      $pre_sec = $con->prepare("UPDATE groups_cells SET leader = NULL, is_complete = 0 WHERE id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_sec = array(
                         ':cell_id' => $cell_id
                      );

                      $result_sec = $pre_sec->execute($values_sec);

                    }

                    /*Update user_groups*/
                    $pre_gr = $con->prepare("UPDATE user_groups SET cell_id = NULL, sector_id = :sector_id, zone_id = :zone_id, district_id = :district_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_gr = array(
                       ':leader_id' => $leader_id,
                       ':sector_id' => $sector_id,
                       ':zone_id' => $zone_id,
                       ':district_id' => $district_id
                    );


                    $result_gr = $pre_gr->execute($values_gr);


                    $pre_us = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_us = array(
                       ':leader_id' => $leader_id
                    );

                    $result_us = $pre_us->execute($values_us);


                    if ($result_gr) {

                      $date_u = date("Y-m-d H:i:s");

                      if ($impersonate) {
                       
                        $roles = getRole($impersonate_role);

                        $role_name = $roles['role_name'];
                        $role_name_es = $roles['role_name_es'];

                        $imperson = " (Impersonate)";
                        $imperson_es = " (Impersonado)";

                        /*Activity Leaderâs transfer confirmation (Supervisor)*/
                        $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred leader " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z . " S" . $final_s;
                        $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el lÃ­der " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z . " S" . $final_s;

                        /*Activity Leaderâs transfer confirmation (Supervisor)*/
                        $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_actm = array(
                            ':es_message' => $es_message,
                            ':en_message' => $en_message, 
                            ':id_m' => $impersonate_id,
                            ':date_u' => $date_u);

                        $result_actm = $pre_actm->execute($values_actm);

                        /*ACTIVITY GROUP*/

                        /*Activity Leaderâs transfer confirmation (Sector)*/
                        $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred leader " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z . " S" . $final_s;
                        $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el lÃ­der " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z . " S" . $final_s;

                      }else{

                        /*Activity Leaderâs transfer confirmation (Supervisor)*/
                        $en_message = $first_name . " " . $last_name . " transferred leader " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z . " S" . $final_s;
                        $es_message = $first_name . " " . $last_name . " transfiriÃ³ el lÃ­der " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z . " S" . $final_s;

                        /*ACTIVITY GROUP*/

                        /*Activity Leaderâs transfer confirmation (Sector)*/
                        $en_message2 = $first_name . " " . $last_name . " transferred leader " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z . " S" . $final_s;
                        $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ el lÃ­der " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z . " S" . $final_s;

                      }

                      /*Activity Leaderâs transfer confirmation (Supervisor)*/
                      $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act = array(
                          ':es_message' => $es_message,
                          ':en_message' => $en_message, 
                          ':id_m' => $user_id,
                          ':date_u' => $date_u);

                      $result_act = $pre_act->execute($values_act);


                      /*ACTIVITY GROUP*/

                      /*Activity Leaderâs transfer confirmation (Sector)*/
                      $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act2 = array(
                          ':es_message2' => $es_message2,
                          ':en_message2' => $en_message2, 
                          ':sector_id' => $sector_id,
                          ':date_u' => $date_u); 

                      $result_act2 = $pre_act2->execute($values_act2);
                       
                      return $response->withStatus(200)
                               ->withHeader('Content-Type', 'application/json')
                               ->withJson(array('response' => 'Leader has been transferred successfully'));
                    }else{

                      return $response->withStatus(422)
                               ->withHeader('Content-Type', 'application/json')
                               ->withJson(array('error' => array(
                                 "message"=>"There was a problem, verify your parameters",
                                 "status"=>422)));
                    }


                  }else{ /*end else sector*/
                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"Sector does not exist",
                                "status"=>422)));

                  }

                }else{ /*end else zone*/
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "message"=>"Zone does not exist",
                              "status"=>422)));

                }
                

              }else{ /*end else district*/
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District does not exist",
                            "status"=>422)));

              }

          } else{ /*end else supervisor*/
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Leader does not exist",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});




/********** ZONES ****************/

$app->post('/zones/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');
   $active = $request->getParam('active');
   $district_code = $request->getParam('district_code');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   } 
   else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $filter_val = '';

    /*validate filter logged*/
    if ($rol_id != '1' || $rol_id != '6' || $rol_id != '7') {

      /*obtain group id of the user logued*/
      $pre_gr = $con->prepare("SELECT *
                               FROM user_groups
                               WHERE user_id = :user_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gr = array(':user_id' => $user_id);
      $pre_gr->execute($values_gr);
      $result_gr = $pre_gr->fetch();

      if ($rol_id == '2') {
          
        $district_id = $result_gr['district_id'];

        $filter_val = "AND groups_zones.id IN (SELECT id from groups_zones WHERE district_id = '$district_id' AND active = 1 AND church_id = '$final_church')";

      } 
      // else if ($rol_id == '3') {
          
      //   $zone_id = $result_gr['zone_id'];

      //   $filter_val = "AND groups_zones.id = '$zone_id'";

      // }

    }

    if ($active == '0' || $active == '1') {

      if($district_code){

        $pre = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE district_code = :district_code", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':district_code' => $district_code);
        $pre->execute($values);
        $result = $pre->fetch();

        if ($result) {
          
          $zones = null;
          $sql = "SELECT groups_zones.id,groups_zones.zone_code,groups_zones.district_code, groups_zones.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.district_code = $district_code AND groups_zones.church_id = $final_church AND groups_zones.active = $active $filter_val";
          

          foreach ($con->query($sql) as $row) {
            $zones[] = $row;
          }


            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => $zones));

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"District code does not exist",
                      "status"=>422)));
        }

      }else{

        $zones3 = null;
        $sql3 = "SELECT groups_zones.id,groups_zones.zone_code,groups_zones.district_code, groups_zones.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.church_id = $final_church AND groups_zones.active = $active $filter_val";
        

        foreach ($con->query($sql3) as $row3) {
          $zones3[] = $row3;
        }


          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $zones3));
      }

    }else{
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                                "message"=>"filter active does not exist",
                                "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/zones/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $zone_id = $request->getParam('zone_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   }

   // type user (member-group or admin)
   if ($type_user == "member-group") {
      
    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if ($result_user) {

       $pre_i = $con->prepare("SELECT *
                                FROM groups_zones
                                WHERE id = :zone_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_i = array(':zone_id' => $zone_id);
       $pre_i->execute($values_i);
       $result_i = $pre_i->fetch();

       if ($result_i) {

         $final_church = $result_i['church_id'];

         $pre = $con->prepare("SELECT groups_zones.id AS zone_id, groups_zones.zone_code, groups_zones.district_code, (SELECT id from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT profile_picture from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor_picture, (SELECT address from user WHERE user.id = groups_zones.zone_pastor) AS address FROM groups_zones WHERE groups_zones.church_id = :final_church AND groups_zones.id = :zone_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values = array(':final_church' => $final_church, ':zone_id' => $zone_id);
         $pre->execute($values);
         $result = $pre->fetch();

         /*Total members*/
         $pre2 = $con->prepare("SELECT SUM((SELECT count(members_cells.id) from members_cells WHERE church_id = :church_id AND cell_id = groups_cells.id AND role !='1' AND active = '1')) as members_count FROM groups_sectors, groups_cells WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.zone_id = :zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id AND groups_cells.church_id = :church_id AND groups_cells.active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values2 = array(':church_id' => $final_church, ':zone_id' => $zone_id);
         $pre2->execute($values2);
         $result2 = $pre2->fetch();

         /*Total cell groups*/
         $pre3 = $con->prepare("SELECT SUM((SELECT count(groups_cells.id) from groups_cells WHERE church_id = :church_id AND sector_id = groups_sectors.id AND active = '1')) as cells_count FROM groups_sectors WHERE groups_sectors.zone_id = :zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values3 = array(':church_id' => $final_church, ':zone_id' => $zone_id);
         $pre3->execute($values3);
         $result3 = $pre3->fetch();

         /*Total sectors*/
         $pre_sec = $con->prepare("SELECT count(groups_sectors.id) as sectors_count FROM groups_sectors WHERE groups_sectors.zone_id = :zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id;",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_sec = array(':church_id' => $final_church, ':zone_id' => $zone_id);
         $pre_sec->execute($values_sec);
         $result_sec = $pre_sec->fetch();

         /*List cell groups*/
         $sql_cell = "SELECT groups_cells.id as cell_id, groups_cells.cell_code, groups_cells.sector_code, groups_cells.zone_code, groups_cells.district_code, groups_cells.city, groups_cells.address, (SELECT CONCAT(user.first_name, ' ', user.last_name) AS name from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as leader, (SELECT profile_picture from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as profile_picture FROM groups_sectors, groups_cells WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.zone_id = $zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND groups_cells.church_id = $final_church AND groups_cells.active = '1'";
         
         $list_cell = null;

         foreach ($con->query($sql_cell) as $row_cell) {
           $list_cell[] = $row_cell;
         }

         /*New sectors last week*/
         $sql_new = "SELECT id as sector_id, sector_code FROM groups_sectors WHERE groups_sectors.zone_id = $zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND DATEDIFF(CURRENT_DATE, start_date) <= 7";
         
         $new_cell = null;

         foreach ($con->query($sql_new) as $row2) {
           $new_cell[] = $row2;
         }

         /*Cell Team*/

         // Zone Pastor
         $pre4 = $con->prepare("SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, user.profile_picture, user.rol AS role FROM groups_zones INNER JOIN user ON groups_zones.zone_pastor = user.id WHERE groups_zones.id = :zone_id AND groups_zones.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values4 = array(':church_id' => $final_church, ':zone_id' => $zone_id);
         $pre4->execute($values4);
         $result4 = $pre4->fetch();

         $zone_pastor = array("name" => $result4['name'],
                   "profile_picture" => $result4['profile_picture'],
                   "role" => $result4['role'],
                   "member_role" => 'Zone Pastor');

         $cell_team = null;

         $cell_team[] = $zone_pastor;

         // Supervisors
         $sql_le = "SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, profile_picture, rol as role, IF(rol = '4', 'Supervisor', null) as member_role FROM groups_sectors, user WHERE user.id = groups_sectors.supervisor AND groups_sectors.zone_id = $zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND user.church_id = 1";
         

         foreach ($con->query($sql_le) as $row_le) {
           $cell_team[] = $row_le;
         }

         /*CHURCH TEAM*/

         /*Obtain senior pastor*/
         $pre_se = $con->prepare("SELECT CONCAT(first_name, ' ', last_name) AS name, profile_picture, rol as role FROM user WHERE user.church_id = :church_id AND user.rol = 1",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_se = array(':church_id' => $final_church);
         $pre_se->execute($values_se);
         $result_se = $pre_se->fetch();

         $senior_pastor = array("name" => $result_se['name'],
                            "profile_picture" => $result_se['profile_picture'],
                            "role" => $result_se['role'],
                            "member_role" => "Senior Pastor");

         $team = null;
         $team[] = $senior_pastor;


        /*Obtain district_pastor data*/
        $pre_dis = $con->prepare("SELECT district_id, (SELECT district_pastor from groups_districts WHERE groups_districts.id = groups_zones.district_id AND groups_districts.church_id = :church_id) as district_pastor, (SELECT CONCAT(first_name, ' ', last_name) from user WHERE user.id = district_pastor AND user.church_id = :church_id) as name, (SELECT user.profile_picture from user WHERE user.id = district_pastor AND user.church_id = :church_id) as profile_picture, (SELECT rol from user WHERE user.id = district_pastor AND user.church_id = :church_id) as role FROM groups_zones WHERE groups_zones.id = :zone_id AND groups_zones.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':church_id' => $final_church, ':zone_id' => $zone_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $district_pastor = array("name" => $result_dis['name'],
                           "profile_picture" => $result_dis['profile_picture'],
                           "role" => $result_dis['role'],
                           "member_role" => "District Pastor");

        $team[] = $district_pastor;
        

         $res = array("zone_id" => $result['zone_id'],
                      "zone_code" => $result['zone_code'],
                      "zone_pastor_id" => $result['zone_pastor_id'],
                      "district_code" => $result['district_code'],
                      "zone_pastor" => $result['zone_pastor'],
                      "zone_pastor_picture" => $result['zone_pastor_picture'],
                      "address" => $result['address'],
                      "members_count" => $result2['members_count'],
                      "cells_count" => $result3['cells_count'],
                      "sectors_count" => $result_sec['sectors_count'],
                      "list_cells" => $list_cell,
                      "new_cells" => $new_cell,
                      "cell_team" => $cell_team,
                      "church_team" => $team
              );

         return $response->withStatus(200)
                           ->withHeader('Content-Type', 'application/json')
                           ->withJson(array('response' => $res));

       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"Zone does not exist",
                     "status"=>422)));
       }


     }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
     }

     // type user (member-group or admin)
   }

   // else if($type_user == 'admin'){

   //  $pre_user = $con->prepare("SELECT *
   //                           FROM administrators
   //                           WHERE id = :user_id AND owner = :role_id AND state = '1'", 
   //                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //  $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
   //  $pre_user->execute($values_user);
   //  $result_user = $pre_user->fetch();

   //  if ($result_user) {

   //    $pre_i = $con->prepare("SELECT *
   //                              FROM groups_zones
   //                              WHERE id = :zone_id", 
   //                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //     $values_i = array(':zone_id' => $zone_id);
   //     $pre_i->execute($values_i);
   //     $result_i = $pre_i->fetch();

   //     if ($result_i) {

   //       $final_church = $result_i['church_id'];

   //       $pre = $con->prepare("SELECT groups_zones.id AS zone_id, groups_zones.zone_code, groups_zones.district_code,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT profile_picture from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor_picture, (SELECT address from user WHERE user.id = groups_zones.zone_pastor) AS address FROM groups_zones WHERE groups_zones.church_id = :final_church AND groups_zones.id = :zone_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //       $values = array(':final_church' => $final_church, ':zone_id' => $zone_id);
   //       $pre->execute($values);
   //       $result = $pre->fetch();

   //       /*Total members*/
   //       $pre2 = $con->prepare("SELECT SUM((SELECT count(members_cells.id) from members_cells WHERE church_id = :church_id AND cell_id = groups_cells.id AND role !='1' AND active = '1')) as members_count FROM groups_sectors, groups_cells WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.zone_id = :zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id AND groups_cells.church_id = :church_id AND groups_cells.active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //       $values2 = array(':church_id' => $final_church, ':zone_id' => $zone_id);
   //       $pre2->execute($values2);
   //       $result2 = $pre2->fetch();

   //       /*Total cell groups*/
   //       $pre3 = $con->prepare("SELECT SUM((SELECT count(groups_cells.id) from groups_cells WHERE church_id = :church_id AND sector_id = groups_sectors.id AND active = '1')) as cells_count FROM groups_sectors WHERE groups_sectors.zone_id = :zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //       $values3 = array(':church_id' => $final_church, ':zone_id' => $zone_id);
   //       $pre3->execute($values3);
   //       $result3 = $pre3->fetch();

   //       /*Total sectors*/
   //       $pre_sec = $con->prepare("SELECT count(groups_sectors.id) as sectors_count FROM groups_sectors WHERE groups_sectors.zone_id = :zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = :church_id;",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //       $values_sec = array(':church_id' => $final_church, ':zone_id' => $zone_id);
   //       $pre_sec->execute($values_sec);
   //       $result_sec = $pre_sec->fetch();

   //       /*List cell groups*/
   //       $sql_cell = "SELECT groups_cells.id as cell_id, groups_cells.cell_code, groups_cells.sector_code, groups_cells.zone_code, groups_cells.district_code, groups_cells.city, groups_cells.address, (SELECT CONCAT(user.first_name, ' ', user.last_name) AS name from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as leader, (SELECT profile_picture from user WHERE user.id = groups_cells.leader AND user.church_id = $final_church) as profile_picture FROM groups_sectors, groups_cells WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.zone_id = $zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND groups_cells.church_id = $final_church AND groups_cells.active = '1'";
         
   //       $list_cell = null;

   //       foreach ($con->query($sql_cell) as $row_cell) {
   //         $list_cell[] = $row_cell;
   //       }

   //       /*New sectors last week*/
   //       $sql_new = "SELECT id as sector_id, sector_code FROM groups_sectors WHERE groups_sectors.zone_id = $zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND DATEDIFF(CURRENT_DATE, start_date) <= 7";
         
   //       $new_cell = null;

   //       foreach ($con->query($sql_new) as $row2) {
   //         $new_cell[] = $row2;
   //       }

   //       /*Cell Team*/

   //       // Zone Pastor
   //       $pre4 = $con->prepare("SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, user.profile_picture, user.rol AS role FROM groups_zones INNER JOIN user ON groups_zones.zone_pastor = user.id WHERE groups_zones.id = :zone_id AND groups_zones.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //       $values4 = array(':church_id' => $final_church, ':zone_id' => $zone_id);
   //       $pre4->execute($values4);
   //       $result4 = $pre4->fetch();

   //       $zone_pastor = array("name" => $result4['name'],
   //                 "profile_picture" => $result4['profile_picture'],
   //                 "role" => $result4['role'],
   //                 "member_role" => 'Zone Pastor');

   //       $cell_team = null;

   //       $cell_team[] = $zone_pastor;

   //       // Supervisors
   //       $sql_le = "SELECT CONCAT(user.first_name, ' ', user.last_name) AS name, profile_picture, rol as role, IF(rol = '4', 'Supervisor', null) as member_role FROM groups_sectors, user WHERE user.id = groups_sectors.supervisor AND groups_sectors.zone_id = $zone_id AND groups_sectors.active = 1 AND groups_sectors.church_id = $final_church AND user.church_id = 1";
         

   //       foreach ($con->query($sql_le) as $row_le) {
   //         $cell_team[] = $row_le;
   //       }

   //       /*CHURCH TEAM*/

   //       /*Obtain senior pastor*/
   //       $pre_se = $con->prepare("SELECT CONCAT(first_name, ' ', last_name) AS name, profile_picture, rol as role FROM user WHERE user.church_id = :church_id AND user.rol = 1",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //       $values_se = array(':church_id' => $final_church);
   //       $pre_se->execute($values_se);
   //       $result_se = $pre_se->fetch();

   //       $senior_pastor = array("name" => $result_se['name'],
   //                          "profile_picture" => $result_se['profile_picture'],
   //                          "role" => $result_se['role'],
   //                          "member_role" => "Senior Pastor");

   //       $team = null;
   //       $team[] = $senior_pastor;


   //      /*Obtain district_pastor data*/
   //      $pre_dis = $con->prepare("SELECT district_id, (SELECT district_pastor from groups_districts WHERE groups_districts.id = groups_zones.district_id AND groups_districts.church_id = :church_id) as district_pastor, (SELECT CONCAT(first_name, ' ', last_name) from user WHERE user.id = district_pastor AND user.church_id = :church_id) as name, (SELECT user.profile_picture from user WHERE user.id = district_pastor AND user.church_id = :church_id) as profile_picture, (SELECT rol from user WHERE user.id = district_pastor AND user.church_id = :church_id) as role FROM groups_zones WHERE groups_zones.id = :zone_id AND groups_zones.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   //      $values_dis = array(':church_id' => $final_church, ':zone_id' => $zone_id);
   //      $pre_dis->execute($values_dis);
   //      $result_dis = $pre_dis->fetch();

   //      $district_pastor = array("name" => $result_dis['name'],
   //                         "profile_picture" => $result_dis['profile_picture'],
   //                         "role" => $result_dis['role'],
   //                         "member_role" => "District Pastor");

   //      $team[] = $district_pastor;
        

   //       $res = array("zone_id" => $result['zone_id'],
   //                    "zone_code" => $result['zone_code'],
   //                    "district_code" => $result['district_code'],
   //                    "zone_pastor" => $result['zone_pastor'],
   //                    "zone_pastor_picture" => $result['zone_pastor_picture'],
   //                    "address" => $result['address'],
   //                    "members_count" => $result2['members_count'],
   //                    "cells_count" => $result3['cells_count'],
   //                    "sectors_count" => $result_sec['sectors_count'],
   //                    "list_cells" => $list_cell,
   //                    "new_cells" => $new_cell,
   //                    "cell_team" => $cell_team,
   //                    "church_team" => $team
   //            );

   //       return $response->withStatus(200)
   //                         ->withHeader('Content-Type', 'application/json')
   //                         ->withJson(array('response' => $res));

   //     }else{
   //       return $response->withStatus(422)
   //               ->withHeader('Content-Type', 'application/json')
   //               ->withJson(array('error' => array(
   //                   "message"=>"Zone does not exist",
   //                   "status"=>422)));
   //     }

   //   }else{
   //     return $response->withStatus(422)
   //             ->withHeader('Content-Type', 'application/json')
   //             ->withJson(array('error' => array(
   //                 "message"=>"User with this role does not exist",
   //                 "status"=>422)));
   //   }

   // }
   else{

    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Type user does not exist",
                "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/zones/edit', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $zone_id = $request->getParam('zone_id');
   $zone_code = $request->getParam('zone_code');
   $parent_zone = $request->getParam('parent_zone');
   $zone_pastor = $request->getParam('zone_pastor');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($zone_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_code",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

   // verify if the logged in user exists
   $pre_user = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
   $pre_user->execute($values_user);
   $result_user = $pre_user->fetch();

   if ($result_user) {

    // verify if role exists
    if ($role_id == 2) {

      $first_name = $result_user['first_name'];
      $last_name = $result_user['last_name'];

      $final_church = $result_user['church_id'];

      // verify if zone exists
      $pre_i = $con->prepare("SELECT *
                               FROM groups_zones
                               WHERE id = :zone_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_i = array(':zone_id' => $zone_id);
      $pre_i->execute($values_i);
      $result_i = $pre_i->fetch();

      if ($result_i) {

        $actual_pastor = $result_i['zone_pastor'];

        // verify if code exists
        $pre_co = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE zone_code = :zone_code AND id != :zone_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_co = array(':zone_code' => $zone_code, ':zone_id' => $zone_id, ':church_id' => $church_id);
        $pre_co->execute($values_co);
        $result_co = $pre_co->fetch();

        if ($result_co) {
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Zone code already exists",
                      "status"=>422)));
        }else{

          $final_d = date("Y-m-d H:i:s");

          // verify if parent is null
          if ($parent_zone == "null" || $parent_zone == null) {
            // verify if pastor is null
            if ($zone_pastor == "null" || $zone_pastor == null) {

              $pre_dis3 = $con->prepare("UPDATE groups_zones SET zone_code = :zone_code, parent_id = NULL, zone_pastor = NULL, is_complete = 0 WHERE id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis3 = array(
                ':zone_code' => $zone_code,
                ':zone_id' => $zone_id,
                ':church_id' => $church_id
                );

              $result_dis3 = $pre_dis3->execute($values_dis3);


              /*if zone_pastor is verified*/
              $pre_ve = $con->prepare("SELECT *
                                    FROM user
                                    WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
              $pre_ve->execute($values_ve);
              $result_ve = $pre_ve->fetch();

              if ($result_ve) {

                /*update actual pastor*/
                $pre_ac = $con->prepare("UPDATE user_groups SET zone_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ac = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result_ac = $pre_ac->execute($values_ac);

                $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':actual_pastor' => $actual_pastor
                  );

                $result_us = $pre_us->execute($values_us);

                /*delete not verified*/
              }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

              }


              // update zone_code in other group tables

              $pre_upco = $con->prepare("UPDATE groups_sectors SET zone_code = :zone_code WHERE zone_id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upco = array(
                ':zone_code' => $zone_code,
                ':zone_id' => $zone_id,
                ':church_id' => $church_id
              );

              $result_upco = $pre_upco->execute($values_upco);


              $pre_upco2 = $con->prepare("UPDATE groups_cells SET zone_code = :zone_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upco2 = array(
                ':zone_code' => $zone_code,
                ':zone_id' => $zone_id,
                ':church_id' => $church_id
              );

              $result_upco2 = $pre_upco2->execute($values_upco2);

              if ($result_dis3) {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Edited a Zoneâs profile (District Pastor)*/
                  $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of zone Z" . $zone_code;
                  $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Zone)*/
                  $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the zone Z" . $zone_code;
                  $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                }else{

                  /*Activity Edited a Zoneâs profile (District Pastor)*/
                  $en_mess = $first_name . " " . $last_name . " edited profile of zone Z" . $zone_code;
                  $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;

                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Zone)*/
                  $en_mess2 = $first_name . " " . $last_name . " edited profile of the zone Z" . $zone_code;
                  $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;
                }

                $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead = array(
                    ':es_mess' => $es_mess,
                    ':en_mess' => $en_mess,
                    ':user_id' => $user_id,
                    ':final_d' => $final_d);

                $result_act_lead = $pre_act_lead->execute($values_act_lead);


                /*ACTIVITY GROUPS*/

                /*Activity Profile updates (Zone)*/
                $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act_lead2 = array(
                    ':es_mess2' => $es_mess2,
                    ':en_mess2' => $en_mess2,
                    ':zone_id' => $zone_id,
                    ':final_d' => $final_d);

                $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Zone has been successfully edited'));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }else{

              // verify if zone_pastor exists
              $pre_di = $con->prepare("SELECT *
                                       FROM user
                                       WHERE id = :zone_pastor AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di = array(':zone_pastor' => $zone_pastor, ':church_id' => $church_id);
              $pre_di->execute($values_di);
              $result_di = $pre_di->fetch();

              if ($result_di) {

                $verify = $result_di['verified_account'];

                /*activate user if verified_acc 1*/
                if ($verify == '1') {
                  $pre_upd = $con->prepare("UPDATE user SET status = 1 WHERE id = :zone_pastor AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upd = array(
                    ':zone_pastor' => $zone_pastor,
                    ':church_id' => $church_id
                    );

                  $result_upd = $pre_upd->execute($values_upd);
                }

                $pre_dis = $con->prepare("UPDATE groups_zones SET zone_code = :zone_code, parent_id = NULL, zone_pastor = :zone_pastor, is_complete = 1, active = 1 WHERE id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis = array(
                  ':zone_code' => $zone_code,
                  ':zone_id' => $zone_id,
                  ':church_id' => $church_id,
                  ':zone_pastor' => $zone_pastor
                  );

                $result_dis = $pre_dis->execute($values_dis);

                /*if zone_pastor is verified*/
                $pre_ve = $con->prepare("SELECT *
                                      FROM user
                                      WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                $pre_ve->execute($values_ve);
                $result_ve = $pre_ve->fetch();

                if ($result_ve) {

                  /*update actual pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET zone_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_us = $pre_us->execute($values_us);

                  /*delete not verified*/
                }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

                }

                /*update new pastor*/
                $pre_ac = $con->prepare("UPDATE user_groups SET zone_id = :zone_id WHERE user_id = :zone_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ac = array(
                  ':zone_pastor' => $zone_pastor,
                  ':zone_id' => $zone_id
                  );

                $result_ac = $pre_ac->execute($values_ac);

                $pre_us2 = $con->prepare("UPDATE user SET is_complete = 1 WHERE id = :zone_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us2 = array(
                  ':zone_pastor' => $zone_pastor
                  );

                $result_us2 = $pre_us2->execute($values_us2);
                

                // update zone_code in other group tables

                $pre_upco = $con->prepare("UPDATE groups_sectors SET zone_code = :zone_code WHERE zone_id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco = array(
                  ':zone_code' => $zone_code,
                  ':zone_id' => $zone_id,
                  ':church_id' => $church_id
                );

                $result_upco = $pre_upco->execute($values_upco);


                $pre_upco2 = $con->prepare("UPDATE groups_cells SET zone_code = :zone_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco2 = array(
                  ':zone_code' => $zone_code,
                  ':zone_id' => $zone_id,
                  ':church_id' => $church_id
                );

                $result_upco2 = $pre_upco2->execute($values_upco2);

                if ($result_dis) {

                  /*************** ACTIVITIES ***********************/

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*Activity Edited a Zoneâs profile (District Pastor)*/
                    $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of zone Z" . $zone_code;
                    $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                    $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_actm = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $impersonate_id,
                        ':final_d' => $final_d);

                    $result_actm = $pre_actm->execute($values_actm);

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Zone)*/
                    $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the zone Z" . $zone_code;
                    $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                  }else{
                    /*Activity Edited a Zoneâs profile (District Pastor)*/
                    $en_mess = $first_name . " " . $last_name . " edited profile of zone Z" . $zone_code;
                    $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Zone)*/
                    $en_mess2 = $first_name . " " . $last_name . " edited profile of the zone Z" . $zone_code;
                    $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;

                  }

                  $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $user_id,
                      ':final_d' => $final_d);

                  $result_act_lead = $pre_act_lead->execute($values_act_lead);


                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Zone)*/
                  $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead2 = array(
                      ':es_mess2' => $es_mess2,
                      ':en_mess2' => $en_mess2,
                      ':zone_id' => $zone_id,
                      ':final_d' => $final_d);

                  $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                  
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => 'Zone has been successfully edited'));
                }else{

                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
                }

                
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Zone pastor does not exist",
                            "status"=>422)));
              }

            } // end else pastor

          }else{

            // verify if pastor is null
            if ($zone_pastor == "null" || $zone_pastor == null) {

              // verify if parent_zone exists
              $pre_di2 = $con->prepare("SELECT *
                                       FROM groups_zones
                                       WHERE id = :parent_zone AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di2 = array(':parent_zone' => $parent_zone, ':church_id' => $church_id);
              $pre_di2->execute($values_di2);
              $result_di2 = $pre_di2->fetch();

              if ($result_di2) {
              
                $pre_dis3 = $con->prepare("UPDATE groups_zones SET zone_code = :zone_code, parent_id = :parent_zone, zone_pastor = NULL, is_complete = 0 WHERE id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis3 = array(
                  ':zone_code' => $zone_code,
                  ':parent_zone' => $parent_zone,
                  ':zone_id' => $zone_id,
                  ':church_id' => $church_id
                  );

                $result_dis3 = $pre_dis3->execute($values_dis3);

                /*if zone_pastor is verified*/
                $pre_ve = $con->prepare("SELECT *
                                      FROM user
                                      WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                $pre_ve->execute($values_ve);
                $result_ve = $pre_ve->fetch();

                if ($result_ve) {

                  /*update actual pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET zone_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result_us = $pre_us->execute($values_us);

                }else{

                  $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values2 = array(
                    ':actual_pastor' => $actual_pastor
                    );

                  $result2 = $pre2->execute($values2);

                }


                // update zone_code in other group tables

                $pre_upco = $con->prepare("UPDATE groups_sectors SET zone_code = :zone_code WHERE zone_id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco = array(
                  ':zone_code' => $zone_code,
                  ':zone_id' => $zone_id,
                  ':church_id' => $church_id
                );

                $result_upco = $pre_upco->execute($values_upco);


                $pre_upco2 = $con->prepare("UPDATE groups_cells SET zone_code = :zone_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upco2 = array(
                  ':zone_code' => $zone_code,
                  ':zone_id' => $zone_id,
                  ':church_id' => $church_id
                );

                $result_upco2 = $pre_upco2->execute($values_upco2);


                if ($result_dis3) {

                  /*************** ACTIVITIES ***********************/

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*Activity Edited a Zoneâs profile (District Pastor)*/
                    $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of zone Z" . $zone_code;
                    $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                    $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_actm = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $impersonate_id,
                        ':final_d' => $final_d);

                    $result_actm = $pre_actm->execute($values_actm);

                    /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Zone)*/
                  $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the zone Z" . $zone_code;
                  $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                  }else{
                    /*Activity Edited a Zoneâs profile (District Pastor)*/
                    $en_mess = $first_name . " " . $last_name . " edited profile of zone Z" . $zone_code;
                    $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;

                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Zone)*/
                    $en_mess2 = $first_name . " " . $last_name . " edited profile of the zone Z" . $zone_code;
                    $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;
                  }

                  $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead = array(
                      ':es_mess' => $es_mess,
                      ':en_mess' => $en_mess,
                      ':user_id' => $user_id,
                      ':final_d' => $final_d);

                  $result_act_lead = $pre_act_lead->execute($values_act_lead);


                  /*ACTIVITY GROUPS*/

                  /*Activity Profile updates (Zone)*/
                  $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act_lead2 = array(
                      ':es_mess2' => $es_mess2,
                      ':en_mess2' => $en_mess2,
                      ':zone_id' => $zone_id,
                      ':final_d' => $final_d);

                  $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                  
                  return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => 'Zone has been successfully edited'));
                }else{

                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                            "message"=>"There was a problem, verify your parameters",
                            "status"=>422)));
                }


              }else{
                return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Parent Zone does not exist",
                          "status"=>422)));
              }

              /*if parent_zone and zone_pastor != null*/
            }else{
              
              // verify if zone_pastor exists
              $pre_di = $con->prepare("SELECT *
                                       FROM user
                                       WHERE id = :zone_pastor AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_di = array(':zone_pastor' => $zone_pastor, ':church_id' => $church_id);
              $pre_di->execute($values_di);
              $result_di = $pre_di->fetch();

              if ($result_di) {

                $verify = $result_di['verified_account'];

                // verify if parent_zone exists
                $pre_di2 = $con->prepare("SELECT *
                                         FROM groups_zones
                                         WHERE id = :parent_zone AND church_id = :church_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_di2 = array(':parent_zone' => $parent_zone, ':church_id' => $church_id);
                $pre_di2->execute($values_di2);
                $result_di2 = $pre_di2->fetch();

                if ($result_di2) {

                  /*activate user if verified_acc 1*/
                  if ($verify == '1') {
                    $pre_upd = $con->prepare("UPDATE user SET status = 1 WHERE id = :zone_pastor AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_upd = array(
                      ':zone_pastor' => $zone_pastor,
                      ':church_id' => $church_id
                      );

                    $result_upd = $pre_upd->execute($values_upd);
                  }

                  $pre_dis = $con->prepare("UPDATE groups_zones SET zone_code = :zone_code, parent_id = :parent_zone, zone_pastor = :zone_pastor, is_complete = 1, active = 1 WHERE id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_dis = array(
                    ':zone_code' => $zone_code,
                    ':parent_zone' => $parent_zone,
                    ':zone_id' => $zone_id,
                    ':church_id' => $church_id,
                    ':zone_pastor' => $zone_pastor
                    );

                  $result_dis = $pre_dis->execute($values_dis);


                  /*if zone_pastor is verified*/
                  $pre_ve = $con->prepare("SELECT *
                                        FROM user
                                        WHERE id = :actual_pastor AND church_id = :church_id AND verified_account = '1'", 
                                        array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ve  = array(':actual_pastor' => $actual_pastor,':church_id' => $church_id);
                  $pre_ve->execute($values_ve);
                  $result_ve = $pre_ve->fetch();

                  if ($result_ve) {

                    /*update actual pastor*/
                    $pre_ac = $con->prepare("UPDATE user_groups SET zone_id = NULL WHERE user_id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_ac = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result_ac = $pre_ac->execute($values_ac);

                    $pre_us = $con->prepare("UPDATE user SET is_complete = 0 WHERE id = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_us = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result_us = $pre_us->execute($values_us);

                    /*delete not verified*/
                  }else{

                    $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :actual_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values2 = array(
                      ':actual_pastor' => $actual_pastor
                      );

                    $result2 = $pre2->execute($values2);

                  }

                  /*update new pastor*/
                  $pre_ac = $con->prepare("UPDATE user_groups SET zone_id = :zone_id WHERE user_id = :zone_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_ac = array(
                    ':zone_pastor' => $zone_pastor,
                    ':zone_id' => $zone_id
                    );

                  $result_ac = $pre_ac->execute($values_ac);

                  $pre_us2 = $con->prepare("UPDATE user SET is_complete = 1 WHERE id = :zone_pastor", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us2 = array(
                    ':zone_pastor' => $zone_pastor
                    );

                  $result_us2 = $pre_us2->execute($values_us2);

                  // update zone_code in other group tables

                  $pre_upco = $con->prepare("UPDATE groups_sectors SET zone_code = :zone_code WHERE zone_id = :zone_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upco = array(
                    ':zone_code' => $zone_code,
                    ':zone_id' => $zone_id,
                    ':church_id' => $church_id
                  );

                  $result_upco = $pre_upco->execute($values_upco);


                  $pre_upco2 = $con->prepare("UPDATE groups_cells SET zone_code = :zone_code WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_upco2 = array(
                    ':zone_code' => $zone_code,
                    ':zone_id' => $zone_id,
                    ':church_id' => $church_id
                  );

                  $result_upco2 = $pre_upco2->execute($values_upco2);


                  if ($result_dis) {

                    /*************** ACTIVITIES ***********************/

                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity Edited a Zoneâs profile (District Pastor)*/
                      $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of zone Z" . $zone_code;
                      $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_actm = array(
                          ':es_mess' => $es_mess,
                          ':en_mess' => $en_mess,
                          ':user_id' => $impersonate_id,
                          ':final_d' => $final_d);

                      $result_actm = $pre_actm->execute($values_actm);

                      /*ACTIVITY GROUPS*/

                      /*Activity Profile updates (Zone)*/
                      $en_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the zone Z" . $zone_code;
                      $es_mess2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ el perfil de la zona Z" . $zone_code;

                    }else{

                      /*Activity Edited a Zoneâs profile (District Pastor)*/
                      $en_mess = $first_name . " " . $last_name . " edited profile of zone Z" . $zone_code;
                      $es_mess = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;

                      /*ACTIVITY GROUPS*/

                      /*Activity Profile updates (Zone)*/
                      $en_mess2 = $first_name . " " . $last_name . " edited profile of the zone Z" . $zone_code;
                      $es_mess2 = $first_name . " " . $last_name . " editÃ³ el perfil de la zona Z" . $zone_code;
                    }

                    /*Activity Edited a Zoneâs profile (District Pastor)*/
                    $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead = array(
                        ':es_mess' => $es_mess,
                        ':en_mess' => $en_mess,
                        ':user_id' => $user_id,
                        ':final_d' => $final_d);

                    $result_act_lead = $pre_act_lead->execute($values_act_lead);


                    /*ACTIVITY GROUPS*/

                    /*Activity Profile updates (Zone)*/
                    $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act_lead2 = array(
                        ':es_mess2' => $es_mess2,
                        ':en_mess2' => $en_mess2,
                        ':zone_id' => $zone_id,
                        ':final_d' => $final_d);

                    $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
                    
                    return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Zone has been successfully edited'));
                  }else{

                    return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                              "message"=>"There was a problem, verify your parameters",
                              "status"=>422)));
                  }


                }else{
                  return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Parent Zone does not exist",
                            "status"=>422)));
                }
                
                
              }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"Zone pastor does not exist",
                            "status"=>422)));
              }

            } /*end else parent_zone and zone_pastor != null*/

          } // end else parent is null

        } // end else code exists

      }else{
        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Zone does not exist",
                  "status"=>422)));
      }
       
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"You do'nt have permission to edit this group",
                  "status"=>422)));
    }

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "message"=>"User with this role does not exist",
                 "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/zones/activate', function ($request,$response) {

  try{
   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $zone_id = $request->getParam('zone_id');
   $church_id = $request->getParam('church_id');
   $active = $request->getParam('active');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
    } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


    // verify if the logged in user exists
    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if ($result_user) {

     // verify if role exists
     if ($role_id == 2) {

        $first_name = $result_user['first_name'];
        $last_name =  $result_user['last_name'];

        $pre_i = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :zone_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_i = array(':zone_id' => $zone_id, ':church_id' => $church_id);
        $pre_i->execute($values_i);
        $result_i = $pre_i->fetch();

        if ($result_i) {

          /*Obtain district_id for statistics*/
          $district_f = $result_i['district_id'];

          $final_z = $result_i['zone_code'];

          if ($active == '0') {

            /*inactivate zone and zone_pastor*/

            $pre = $con->prepare("UPDATE groups_zones SET active = '0' WHERE id = :zone_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(':zone_id' => $zone_id);
            $result = $pre->execute($values);


            $pre_zpastor = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT zone_pastor FROM groups_zones WHERE id = :zone_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zpastor = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_zpastor = $pre_zpastor->execute($values_zpastor);

            /*inactivate sectors and supervisors*/

            $pre_sector = $con->prepare("UPDATE groups_sectors SET active = '0' WHERE zone_id = :zone_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sector = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_sector = $pre_sector->execute($values_sector);

            $pre_super = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT supervisor FROM groups_sectors WHERE zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_super = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_super = $pre_super->execute($values_super);


            /*inactivate cells and leaders*/

            $pre_cell = $con->prepare("UPDATE groups_cells SET active = '0' WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_cell = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_cell = $pre_cell->execute($values_cell);

            $pre_lead = $con->prepare("UPDATE user SET status = '0' WHERE id IN (SELECT leader FROM groups_cells WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_lead = array(':zone_id' => $district_id, ':church_id' => $church_id);
            $result_lead = $pre_lead->execute($values_lead);


            /*inactivate members associated with cells*/

            $pre_member = $con->prepare("UPDATE members_cells SET active = '0' WHERE cell_id IN (SELECT id from groups_cells where sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where id = :zone_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_member = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_member = $pre_member->execute($values_member);

            if($result){

                $date_u = date("Y-m-d H:i:s");

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Inactivated a Zone (District Pastor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated zone Z" . $final_z;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ la zona Z" . $final_z;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':date_u' => $date_u);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Inactivated Zone confirmation (District)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated zone Z" . $final_z;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ la zona Z" . $final_z;

                }else{

                  /*Activity Inactivated a Zone (District Pastor)*/
                  $en_message = $first_name . " " . $last_name . " inactivated zone Z" . $final_z;
                  $es_message = $first_name . " " . $last_name . " inactivÃ³ la zona Z" . $final_z;

                  /*ACTIVITY GROUPS*/

                  /*Activity Inactivated Zone confirmation (District)*/
                  $en_message2 = $first_name . " " . $last_name . " inactivated zone Z" . $final_z;
                  $es_message2 = $first_name . " " . $last_name . " inactivÃ³ la zona Z" . $final_z;
                }

                /*Activity Inactivated a Zone (District Pastor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Zone confirmation (District)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_f,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2, 
                    ':district_f' => $district_f,
                    ':date_u' => $date_u);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Zone and associated groups has been inactivated successfully')));
            }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
            }


          }else if($active == "1"){

            /*inactivate zone and zone_pastor*/

            $pre = $con->prepare("UPDATE groups_zones SET active = '1' WHERE id = :zone_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(':zone_id' => $zone_id);
            $result = $pre->execute($values);


            $pre_zpastor = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT zone_pastor FROM groups_zones WHERE id = :zone_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zpastor = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_zpastor = $pre_zpastor->execute($values_zpastor);

            /*inactivate sectors and supervisors*/

            $pre_sector = $con->prepare("UPDATE groups_sectors SET active = '1' WHERE zone_id = :zone_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sector = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_sector = $pre_sector->execute($values_sector);

            $pre_super = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT supervisor FROM groups_sectors WHERE zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_super = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_super = $pre_super->execute($values_super);


            /*inactivate cells and leaders*/

            $pre_cell = $con->prepare("UPDATE groups_cells SET active = '1' WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_cell = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_cell = $pre_cell->execute($values_cell);

            $pre_lead = $con->prepare("UPDATE user SET status = '1' WHERE id IN (SELECT leader FROM groups_cells WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :zone_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_lead = array(':zone_id' => $district_id, ':church_id' => $church_id);
            $result_lead = $pre_lead->execute($values_lead);


            /*inactivate members associated with cells*/

            $pre_member = $con->prepare("UPDATE members_cells SET active = '1' WHERE cell_id IN (SELECT id from groups_cells where sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones where id = :zone_id AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id) AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_member = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $result_member = $pre_member->execute($values_member);

            if($result){

                $date_u = date("Y-m-d H:i:s");

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Activated a Zone (District Pastor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated zone Z" . $final_z;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ la zona Z" . $final_z;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':date_u' => $date_u);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/
                  /*Activity Activated Zone confirmation (District)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated zona Z" . $final_z;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ la zona Z" . $final_z;

                }else{

                  /*Activity Activated a Zone (District Pastor)*/
                  $en_message = $first_name . " " . $last_name . " activated zone Z" . $final_z;
                  $es_message = $first_name . " " . $last_name . " activÃ³ la zona Z" . $final_z;

                  /*ACTIVITY GROUPS*/
                  /*Activity Activated Zone confirmation (District)*/
                  $en_message2 = $first_name . " " . $last_name . " activated zona Z" . $final_z;
                  $es_message2 = $first_name . " " . $last_name . " activÃ³ la zona Z" . $final_z;
                }

                /*Activity Activated a Zone (District Pastor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/
                /*Activity Activated Zone confirmation (District)*/
                $en_message2 = $first_name . " " . $last_name . " activated district D" . $final_z;
                $es_message2 = $first_name . " " . $last_name . " activÃ³ el distrito D" . $final_z;

                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_f,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2, 
                    ':district_f' => $district_f,
                    ':date_u' => $date_u);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Zone and associated groups has been activated successfully')));
            }else{
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"filter does not exist",
                        "status"=>422)));

          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Zone does not exist",
                      "status"=>422)));
        }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"You do'nt have permission to perform this action",
                    "status"=>422)));
      }

      /*else user logged*/
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User with this role does not exist",
                  "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

 /*group children*/
$app->post('/zones/sectors-groups-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $zone_id = $request->getParam('zone_id');
   $active = $request->getParam('active');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   }
   // else if(!preg_match("/^[0-1]+$/i", $active)){
   //   return $response->withStatus(500)
   //           ->withHeader('Content-Type', 'application/json')
   //           ->withJson(array('error' => array(
   //             "message"=>"Missing parameter: active",
   //             "status"=>500)));
   // }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre = $con->prepare("SELECT *
                             FROM groups_zones
                             WHERE id = :zone_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':zone_id' => $zone_id);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {

      $final_church = $result['church_id'];

      if ($active || $active == '0') {

        if ($active == '0') {
          
          $sql = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_id = $zone_id AND groups_sectors.church_id = $final_church AND groups_sectors.active = 0";
          

          foreach ($con->query($sql) as $row) {
            $sectors[] = $row;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors));

        }else if ($active == '1') {

          $sql2 = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_id = $zone_id AND groups_sectors.church_id = $final_church AND groups_sectors.active = 1";
          

          foreach ($con->query($sql2) as $row2) {
            $sectors2[] = $row2;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $sectors2));
        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"filter does not exist",
                      "status"=>422)));
        }

        /*if empty active*/
      }else{
        $sql = "SELECT groups_sectors.id,groups_sectors.sector_code,groups_sectors.zone_code,groups_sectors.district_code,groups_sectors.is_complete,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_id = $zone_id AND groups_sectors.church_id = $final_church";
        

        foreach ($con->query($sql) as $row) {
          $sectors[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $sectors));

      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Zone does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*report children*/
$app->post('/zones/reports-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $zone_id = $request->getParam('zone_id');
   $district_code = $request->getParam('district_code');
   $zone_code = $request->getParam('zone_code');
   $initial_date_range = $request->getParam('initial_date_range');
   $end_date_range = $request->getParam('end_date_range');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   } else if(empty($zone_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_code",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    $pre = $con->prepare("SELECT *
                             FROM groups_zones
                             WHERE id = :zone_id AND district_code = :district_code
                             AND zone_code = :zone_code", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':zone_id' => $zone_id, ':district_code' => $district_code, ':zone_code' => $zone_code);
    $pre->execute($values);
    $result = $pre->fetch();


    if ($result) {

      $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date_range);
      $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date_range);

      if ($initial_date_range || $end_date_range) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        } else if($initial_date_range > $end_date_range){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Final date must be greater than initial date",
                    "status"=>500)));
        }else if(empty($initial_date_range) || empty($end_date_range)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid initial date and end date",
                    "status"=>500)));
        }

        $sql = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, CONCAT(user.first_name, ' ', user.last_name) AS leader FROM reports, groups_cells,user WHERE reports.cell_id = groups_cells.id AND groups_cells.leader = user.id AND reports.district_code = $district_code AND reports.zone_code = $zone_code AND groups_cells.church_id = $final_church AND reports.creation_date BETWEEN '$initial_date_range' AND '$end_date_range' ORDER BY reports.creation_date DESC";
          
        foreach ($con->query($sql) as $row) {
          $reports[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $reports));

      } else{

        $sql2 = "SELECT reports.id AS report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code,reports.cell_id, reports.creation_date, CONCAT(user.first_name, ' ', user.last_name) AS leader FROM reports, groups_cells,user WHERE reports.cell_id = groups_cells.id AND groups_cells.leader = user.id AND reports.district_code = $district_code AND reports.zone_code = $zone_code AND groups_cells.church_id = $final_church";
          

        foreach ($con->query($sql2) as $row2) {
          $reports2[] = $row2;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $reports2));
      }

      
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Zone does not exist",
                  "status"=>422)));
    }

    
  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/************* Transfers ***********************/

/*Transfer Sector*/
$app->post('/zones/transfer-sector', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $sector_id = $request->getParam('sector_id');
   $district_id = $request->getParam('district_id');
   $zone_id = $request->getParam('zone_id');
   $zone_code = $request->getParam('zone_code');
   $district_code = $request->getParam('district_code');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($sector_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: sector_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   } else if(empty($zone_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_code",
               "status"=>500)));
   } else if(empty($district_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_code",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

    
    if ($role_id == '3') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $first_name = $result_user['first_name'];
          $last_name = $result_user['last_name'];

          /*verify sector exist*/
          $final_church = $result_user['church_id'];

          $pre_sec = $con->prepare("SELECT *
                                   FROM groups_sectors
                                   WHERE id = :sector_id AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_sec = array(':sector_id' => $sector_id, ':final_church' => $final_church);
          $pre_sec->execute($values_sec);
          $result_sec = $pre_sec->fetch();

          if ($result_sec) {

              $sector_code = $result_sec['sector_code'];
              /*verify district exist*/
              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :district_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':district_id' => $district_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              if ($result_dis) {

                /*verify zone exist*/
                $pre_zone = $con->prepare("SELECT *
                                         FROM groups_zones
                                         WHERE id = :zone_id AND church_id = :final_church", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zone = array(':zone_id' => $zone_id, ':final_church' => $final_church);
                $pre_zone->execute($values_zone);
                $result_zone = $pre_zone->fetch();

                if ($result_zone) {
                  
                  $sql_code = "SELECT sector_code FROM groups_sectors WHERE zone_id = $zone_id";

                  $final_code = null;
                  
                  foreach ($con->query($sql_code) as $row_code) {
                    $final_code[] = $row_code;
                  }

                  $err_code = 0;

                  /*verify if sector_code exist*/
                  for($i = 0; $i < count($final_code); $i++) {

                    if($final_code[$i]['sector_code'] == $sector_code){
                      $err_code += 1;
                    }

                  }

                  // if sector_code exist, new code is assigned
                  if ($err_code > 0) {

                    $pre_max = $con->prepare("SELECT max(sector_code) as max_code
                                             FROM groups_sectors
                                             WHERE zone_id = :zone_id", 
                                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_max = array(':zone_id' => $zone_id);
                    $pre_max->execute($values_max);
                    $result_max = $pre_max->fetch();

                    $new_code = $result_max['max_code']+1;
                    
                    /*Update sector with new zone*/

                    $pre_dis3 = $con->prepare("UPDATE groups_sectors SET zone_id = :zone_id, district_code = :district_code, zone_code = :zone_code, sector_code = :sector_code WHERE id = :sector_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_dis3 = array(
                       ':zone_id' => $zone_id,
                       ':district_code' => $district_code,
                       ':zone_code' => $zone_code,
                       ':sector_code' => $new_code,
                       ':sector_id' => $sector_id
                    );

                    $result_dis3 = $pre_dis3->execute($values_dis3);


                    /*Update sector_code in cell table*/
                    $pre_dis4 = $con->prepare("UPDATE groups_cells SET district_code = :district_code, zone_code = :zone_code, sector_code = :sector_code WHERE sector_id = :sector_id AND church_id = :final_church", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_dis4 = array(
                       ':district_code' => $district_code,
                       ':zone_code' => $zone_code,
                       ':sector_code' => $new_code,
                       ':sector_id' => $sector_id,
                       ':final_church' => $final_church
                    );

                    $result_dis4 = $pre_dis4->execute($values_dis4);


                    if ($result_dis4) {

                      $date_u = date("Y-m-d H:i:s");

                      /*************** ACTIVITIES ***********************/

                      if ($impersonate) {
                       
                        $roles = getRole($impersonate_role);

                        $role_name = $roles['role_name'];
                        $role_name_es = $roles['role_name_es'];

                        $imperson = " (Impersonate)";
                        $imperson_es = " (Impersonado)";

                        /*Activity Sectorâs transfer confirmation (Zone Pastor)*/
                        $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;

                        $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_actm = array(
                            ':es_message' => $es_message, 
                            ':en_message' => $en_message, 
                            ':id_m' => $impersonate_id,
                            ':date_u' => $date_u);

                        $result_actm = $pre_actm->execute($values_actm);

                        /*ACTIVITY GROUPS*/
                        /*Activity Sectorâs transfer confirmation (Zone)*/
                        $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;

                      }else{

                        /*Activity Sectorâs transfer confirmation (Zone Pastor)*/
                        $en_message = $first_name . " " . $last_name . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message = $first_name . " " . $last_name . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;

                        /*ACTIVITY GROUPS*/
                        /*Activity Sectorâs transfer confirmation (Zone)*/
                        $en_message2 = $first_name . " " . $last_name . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;
                      }

                      $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act = array(
                          ':es_message' => $es_message, 
                          ':en_message' => $en_message, 
                          ':id_m' => $user_id,
                          ':date_u' => $date_u);

                      $result_act = $pre_act->execute($values_act);


                      /*ACTIVITY GROUPS*/
                      /*Activity Sectorâs transfer confirmation (Zone)*/
                      $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act2 = array(
                          ':es_message2' => $es_message2, 
                          ':en_message2' => $en_message2, 
                          ':zone_id' => $zone_id,
                          ':date_u' => $date_u);

                      $result_act2 = $pre_act2->execute($values_act2);
                       
                      return $response->withStatus(200)
                               ->withHeader('Content-Type', 'application/json')
                               ->withJson(array('response' => 'Sector has been transferred successfully'));
                    }else{

                      return $response->withStatus(422)
                               ->withHeader('Content-Type', 'application/json')
                               ->withJson(array('error' => array(
                                 "message"=>"There was a problem, verify your parameters",
                                 "status"=>422)));
                    }

                  }else{

                    /*Update sector with new zone*/

                    $pre_dis3 = $con->prepare("UPDATE groups_sectors SET zone_id = :zone_id, district_code = :district_code, zone_code = :zone_code, sector_code = :sector_code WHERE id = :sector_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_dis3 = array(
                       ':zone_id' => $zone_id,
                       ':district_code' => $district_code,
                       ':zone_code' => $zone_code,
                       ':sector_code' => $sector_code,
                       ':sector_id' => $sector_id
                    );

                    $result_dis3 = $pre_dis3->execute($values_dis3);

                    /*Update sector_code in cell table*/
                    $pre_dis4 = $con->prepare("UPDATE groups_cells SET district_code = :district_code, zone_code = :zone_code, sector_code = :sector_code WHERE sector_id = :sector_id AND church_id = :final_church", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_dis4 = array(
                       ':district_code' => $district_code,
                       ':zone_code' => $zone_code,
                       ':sector_code' => $sector_code,
                       ':sector_id' => $sector_id,
                       ':final_church' => $final_church
                    );

                    $result_dis4 = $pre_dis4->execute($values_dis4);


                    if ($result_dis4) {

                      $date_u = date("Y-m-d H:i:s");

                      /*************** ACTIVITIES ***********************/

                      if ($impersonate) {
                       
                        $roles = getRole($impersonate_role);

                        $role_name = $roles['role_name'];
                        $role_name_es = $roles['role_name_es'];

                        $imperson = " (Impersonate)";
                        $imperson_es = " (Impersonado)";

                        /*Activity Sectorâs transfer confirmation (Zone Pastor)*/
                        $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;

                        $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                        $values_actm = array(
                            ':es_message' => $es_message, 
                            ':en_message' => $en_message, 
                            ':id_m' => $impersonate_id,
                            ':date_u' => $date_u);

                        $result_actm = $pre_actm->execute($values_actm);

                        /*Activity Sectorâs transfer confirmation (Zone)*/
                        $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;

                      }else{

                        /*Activity Sectorâs transfer confirmation (Zone Pastor)*/
                        $en_message = $first_name . " " . $last_name . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message = $first_name . " " . $last_name . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;

                        /*Activity Sectorâs transfer confirmation (Zone)*/
                        $en_message2 = $first_name . " " . $last_name . " transferred sector S" . $sector_code . " to D" . $district_code . " Z" . $zone_code;
                        $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ el sector S" . $sector_code . " a D" . $district_code . " Z" . $zone_code;
                      }

                      $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act = array(
                          ':es_message' => $es_message, 
                          ':en_message' => $en_message, 
                          ':id_m' => $user_id,
                          ':date_u' => $date_u);

                      $result_act = $pre_act->execute($values_act);


                      /*ACTIVITY GROUPS*/

                      /*Activity Sectorâs transfer confirmation (Zone)*/
                      $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_act2 = array(
                          ':es_message2' => $es_message2, 
                          ':en_message2' => $en_message2, 
                          ':zone_id' => $zone_id,
                          ':date_u' => $date_u);

                      $result_act2 = $pre_act2->execute($values_act2);
                       
                      return $response->withStatus(200)
                               ->withHeader('Content-Type', 'application/json')
                               ->withJson(array('response' => 'Sector has been transferred successfully'));
                    }else{

                      return $response->withStatus(422)
                               ->withHeader('Content-Type', 'application/json')
                               ->withJson(array('error' => array(
                                 "message"=>"There was a problem, verify your parameters",
                                 "status"=>422)));
                    }

                  } /*end else err_code*/

                }else{ /*end else exist zone*/
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "message"=>"Zone does not exist",
                              "status"=>422)));
                }
                     

              }else{ /*end else exist district*/
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District does not exist",
                            "status"=>422)));
              }

          } else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Sector does not exist",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*Trasnfer supervisor*/
$app->post('/zones/transfer-supervisor', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $supervisor_id = $request->getParam('supervisor_id');
   $district_id = $request->getParam('district_id');
   $zone_id = $request->getParam('zone_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($supervisor_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: supervisor_id",
               "status"=>500)));
   } else if(empty($district_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: district_id",
               "status"=>500)));
   } else if(empty($zone_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: zone_id",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }
    
    if ($role_id == '3') {
        
      $pre_user = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND status = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_user = array(':user_id' => $user_id,':role_id' => $role_id);
      $pre_user->execute($values_user);
      $result_user = $pre_user->fetch();

      if ($result_user) {

          $final_church = $result_user['church_id'];

          $first_name = $result_user['first_name'];
          $last_name = $result_user['last_name'];

          $pre_lead = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :supervisor_id AND rol = 4 AND church_id = :final_church", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_lead = array(':supervisor_id' => $supervisor_id, ':final_church' => $final_church);
          $pre_lead->execute($values_lead);
          $result_lead = $pre_lead->fetch();

          /*verify supervisor exist*/
          if ($result_lead) {

              $first_name_l = $result_lead['first_name'];
              $last_name_l = $result_lead['last_name'];

              $pre_dis = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :district_id AND church_id = :final_church", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis = array(':district_id' => $district_id, ':final_church' => $final_church);
              $pre_dis->execute($values_dis);
              $result_dis = $pre_dis->fetch();

              /*verify district exist*/
              if ($result_dis) {

                $final_d = $result_dis['district_code'];

                /*verify zone exist*/
                $pre_zone = $con->prepare("SELECT *
                                         FROM groups_zones
                                         WHERE id = :zone_id AND church_id = :final_church", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zone = array(':zone_id' => $zone_id, ':final_church' => $final_church);
                $pre_zone->execute($values_zone);
                $result_zone = $pre_zone->fetch();

                if ($result_zone) {

                  $final_z = $result_zone['zone_code'];

                  $pre_id = $con->prepare("SELECT *
                                           FROM groups_sectors
                                           WHERE supervisor = :supervisor_id AND church_id = :final_church", 
                                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_id = array(':supervisor_id' => $supervisor_id, ':final_church' => $final_church);
                  $pre_id->execute($values_id);
                  $result_id = $pre_id->fetch();

                  /*verify if sector is associated with supervisor*/
                  if ($result_id) {

                    $sector_id = $result_id['id'];
                    
                    /*Update sector associated*/

                    $pre_sec = $con->prepare("UPDATE groups_sectors SET supervisor = NULL, is_complete = 0 WHERE id = :sector_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_sec = array(
                       ':sector_id' => $sector_id
                    );

                    $result_sec = $pre_sec->execute($values_sec);

                  }

                  /*Update user_groups*/
                  $pre_gr = $con->prepare("UPDATE user_groups SET sector_id = NULL, zone_id = :zone_id, district_id = :district_id WHERE user_id = :supervisor_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_gr = array(
                     ':supervisor_id' => $supervisor_id,
                     ':zone_id' => $zone_id,
                     ':district_id' => $district_id
                  );

                  $result_gr = $pre_gr->execute($values_gr);

                  /*update user*/
                  $pre_us = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :supervisor_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_us = array(
                     ':supervisor_id' => $supervisor_id
                  );

                  $result_us = $pre_us->execute($values_us);

                  if ($result_gr) {

                    $date_u = date("Y-m-d H:i:s");

                    /*************** ACTIVITIES ***********************/

                    if ($impersonate) {
                     
                      $roles = getRole($impersonate_role);

                      $role_name = $roles['role_name'];
                      $role_name_es = $roles['role_name_es'];

                      $imperson = " (Impersonate)";
                      $imperson_es = " (Impersonado)";

                      /*Activity Supervisorâs transfer confirmation (Zone Pastor)*/
                      $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred supervisor " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z;
                      $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el supervisor " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z;

                      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                      $values_actm = array(
                          ':es_message' => $es_message,
                          ':en_message' => $en_message, 
                          ':id_m' => $impersonate_id,
                          ':date_u' => $date_u);

                      $result_actm = $pre_actm->execute($values_actm);

                      /*ACTIVITY GROUP*/
                      /*Activity Supervisorâs transfer confirmation (Zone)*/
                      $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transferred supervisor " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z;
                      $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " transfiriÃ³ el supervisor " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z;

                    }else{

                      /*Activity Supervisorâs transfer confirmation (Zone Pastor)*/
                      $en_message = $first_name . " " . $last_name . " transferred supervisor " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z;
                      $es_message = $first_name . " " . $last_name . " transfiriÃ³ el supervisor " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z;

                      /*ACTIVITY GROUP*/
                      /*Activity Supervisorâs transfer confirmation (Zone)*/
                      $en_message2 = $first_name . " " . $last_name . " transferred supervisor " . $first_name_l . " " . $last_name_l . " to D" . $final_d . " Z" . $final_z;
                      $es_message2 = $first_name . " " . $last_name . " transfiriÃ³ el supervisor " . $first_name_l . " " . $last_name_l . " a D" . $final_d . " Z" . $final_z;
                    }

                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message,
                        ':en_message' => $en_message, 
                        ':id_m' => $user_id,
                        ':date_u' => $date_u);

                    $result_act = $pre_act->execute($values_act);


                    /*ACTIVITY GROUP*/
                    /*Activity Supervisorâs transfer confirmation (Zone)*/
                    $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act2 = array(
                        ':es_message2' => $es_message2,
                        ':en_message2' => $en_message2, 
                        ':zone_id' => $zone_id,
                        ':date_u' => $date_u); 

                    $result_act2 = $pre_act2->execute($values_act2);
                     
                    return $response->withStatus(200)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('response' => 'Supervisor has been transferred successfully'));
                  }else{

                    return $response->withStatus(422)
                             ->withHeader('Content-Type', 'application/json')
                             ->withJson(array('error' => array(
                               "message"=>"There was a problem, verify your parameters",
                               "status"=>422)));
                  }

                }else{ /*end else zone*/
                  return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "message"=>"Zone does not exist",
                              "status"=>422)));

                }
                

              }else{ /*end else district*/
                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"District does not exist",
                            "status"=>422)));

              }

          } else{ /*end else supervisor*/
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Supervisor does not exist",
                        "status"=>422)));
          }


       }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"User with this role does not exist",
                     "status"=>422)));
       }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }
    
 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});




/********** FILTER LIST ****************/

$app->post('/filter/districts-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];


    $sql = "SELECT id AS district_id, district_code FROM groups_districts WHERE church_id = $final_church AND active = 1";
    

    foreach ($con->query($sql) as $row) {
      $districts[] = $row;
    }


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $districts));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/filter/zones-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];


    $sql = "SELECT id AS zone_id, zone_code FROM groups_zones WHERE church_id = $final_church AND active = 1";
    

    foreach ($con->query($sql) as $row) {
      $districts[] = $row;
    }


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $districts));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/filter/sectors-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];


    $sql = "SELECT id AS sector_id, sector_code FROM groups_sectors WHERE church_id = $final_church AND active = 1";
    

    foreach ($con->query($sql) as $row) {
      $districts[] = $row;
    }


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $districts));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/************** ASSIGN GROUPS (LIST) **********************/

$app->post('/groups/assign', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $leader_id = $request->getParam('leader_id');
   $group_id = $request->getParam('group_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   } else if(empty($group_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: group_id",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $first_name = $result_i['first_name'];
    $last_name = $result_i['last_name'];

    $pre_fi = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :leader_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_fi = array(':leader_id' => $leader_id,':church_id' => $church_id);
    $pre_fi->execute($values_fi);
    $result_fi = $pre_fi->fetch();

    if ($result_fi) {

      $first_name_l = $result_i['first_name'];
      $last_name_l = $result_i['last_name'];

      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        $pre_dis = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :group_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':group_id' => $group_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        if($result_dis){

          $district_pastor = $result_dis['district_pastor'];

          if (empty($district_pastor)) {

            /*obtain codes of district*/
            $district_c = $result_dis['district_code'];

            $pre_dis3 = $con->prepare("UPDATE groups_districts SET district_pastor = :leader_id, is_complete = '1', active = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis3 = array(
              ':group_id' => $group_id,
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_dis3 = $pre_dis3->execute($values_dis3);


            $pre_usf = $con->prepare("UPDATE user SET status = '1'
                             WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_usf = array(
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_usf = $pre_usf->execute($values_usf);

            /*update user_groups*/
            $pre_dis2 = $con->prepare("UPDATE user_groups SET district_id = :group_id
                             WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis2 = array(
              ':leader_id' => $leader_id,
              ':group_id' => $group_id
              );

            $result_dis2 = $pre_dis2->execute($values_dis2);


            if ($result_dis3) {

              $final_d = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*** ACTIVITY GROUPS ***/
                /*Activity New District pastor assigned (District)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned District Pastor " . $first_name_l . " " . $last_name_l . "to district D " . $district_c;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al Pastor de Distrito " . $first_name_l . " " . $last_name_l . "al distrito D " . $district_c;

              }else{

                /*** ACTIVITY GROUPS ***/
                /*Activity New District pastor assigned (District)*/
                $en_message2 = $first_name . " " . $last_name . " assigned District Pastor " . $first_name_l . " " . $last_name_l . "to district D " . $district_c;
                $es_message2 = $first_name . " " . $last_name . " asigno al Pastor de Distrito " . $first_name_l . " " . $last_name_l . "al distrito D " . $district_c;
              }

              /*** ACTIVITY GROUPS ***/
                /*Activity New District pastor assigned (District)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:group_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2,
                  ':group_id' => $group_id,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'District Pastor assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"District already has a District Pastor",
                        "status"=>422)));
          }


        }else{

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"District does not exist",
                      "status"=>422)));
        }
        
      } else if ($role_id == '2') {

        $pre_zone = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :group_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_zone = array(':group_id' => $group_id, ':church_id' => $church_id);
        $pre_zone->execute($values_zone);
        $result_zone = $pre_zone->fetch();

        if($result_zone){

          $zone_pastor = $result_zone['zone_pastor'];

          if (empty($zone_pastor)) {

            /*obtain codes of zone*/
            $district_c = $result_zone['district_code'];
            $zone_c = $result_zone['zone_code'];

            /*district_id*/
            $district_id = $result_zone['district_id'];

            $pre_zone3 = $con->prepare("UPDATE groups_zones SET zone_pastor = :leader_id, is_complete = '1', active = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zone3 = array(
              ':group_id' => $group_id,
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_zone3 = $pre_zone3->execute($values_zone3);


            $pre_usf = $con->prepare("UPDATE user SET status = '1'
                             WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_usf = array(
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_usf = $pre_usf->execute($values_usf);

            /*update user_groups*/
            $pre_us = $con->prepare("UPDATE user_groups SET zone_id = :group_id, district_id = :district_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_us = array(
              ':leader_id' => $leader_id,
              ':group_id' => $group_id,
              ':district_id' => $district_id
              );

            $result_us = $pre_us->execute($values_us);

            if ($result_zone3) {

              $final_d = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Assigned a Zone Pastor (District Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned zone pastor " . $first_name_l . " " . $last_name_l . "to zone D " . $district_c . " Z " . $zone_c;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al pastor de zona " . $first_name_l . " " . $last_name_l . "a la zona D " . $district_c . " Z " . $zone_c;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message,
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*** ACTIVITY GROUPS ***/

                /*Activity New Zone pastor assigned (Zone)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned Zone Pastor " . $first_name_l . " " . $last_name_l . "to zone D " . $district_c . " Z " . $zone_c;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al Pastor de Zona " . $first_name_l . " " . $last_name_l . "a la zona D " . $district_c . " Z " . $zone_c;

                /*Activity New Zone pastor assigned to a Zone (District)*/
                $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned zone pastor " . $first_name_l . " " . $last_name_l . "to zone D " . $district_c . " Z " . $zone_c;
                $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al pastor de zona " . $first_name_l . " " . $last_name_l . "a la zona D " . $district_c . " Z " . $zone_c;

              }else{

                /*Activity Assigned a Zone Pastor (District Pastor)*/
                $en_message = $first_name . " " . $last_name . " assigned zone pastor " . $first_name_l . " " . $last_name_l . "to zone D " . $district_c . " Z " . $zone_c;
                $es_message = $first_name . " " . $last_name . " asigno al pastor de zona " . $first_name_l . " " . $last_name_l . "a la zona D " . $district_c . " Z " . $zone_c;

                /*** ACTIVITY GROUPS ***/

                /*Activity New Zone pastor assigned (Zone)*/
                $en_message2 = $first_name . " " . $last_name . " assigned Zone Pastor " . $first_name_l . " " . $last_name_l . "to zone D " . $district_c . " Z " . $zone_c;
                $es_message2 = $first_name . " " . $last_name . " asigno al Pastor de Zona " . $first_name_l . " " . $last_name_l . "a la zona D " . $district_c . " Z " . $zone_c;

                /*Activity New Zone pastor assigned to a Zone (District)*/
                $en_message3 = $first_name . " " . $last_name . " assigned zone pastor " . $first_name_l . " " . $last_name_l . "to zone D " . $district_c . " Z " . $zone_c;
                $es_message3 = $first_name . " " . $last_name . " asigno al pastor de zona " . $first_name_l . " " . $last_name_l . "a la zona D " . $district_c . " Z " . $zone_c;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message,
                  ':id_m' => $user_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);


              /*** ACTIVITY GROUPS ***/

              /*Activity New Zone pastor assigned (Zone)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:group_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2,
                  ':group_id' => $group_id,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);


              /*Activity New Zone pastor assigned to a Zone (District)*/
              $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,:district_id,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act3 = array(
                  ':es_message3' => $es_message3, 
                  ':en_message3' => $en_message3,
                  ':district_id' => $district_id,
                  ':final_d' => $final_d);

              $result_act3 = $pre_act3->execute($values_act3);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone Pastor assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Zone already has a Zone Pastor",
                        "status"=>422)));
          }


        }else{

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Zone does not exist",
                      "status"=>422)));
        } 
        
      } else if ($role_id == '3') {

        $pre_sector = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :group_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_sector = array(':group_id' => $group_id, ':church_id' => $church_id);
        $pre_sector->execute($values_sector);
        $result_sector = $pre_sector->fetch();

        if($result_sector){

          $supervisor = $result_sector['supervisor'];

          if (empty($supervisor)) {

            /*obtain codes of cell*/
            $district_c = $result_sector['district_code'];
            $zone_c = $result_sector['zone_code'];
            $sector_c = $result_sector['sector_code'];
            
            /*zone_id*/
            $zone_id = $result_sector['zone_id'];

            $pre_sector3 = $con->prepare("UPDATE groups_sectors SET supervisor = :leader_id, is_complete = '1', active = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sector3 = array(
              ':group_id' => $group_id,
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_sector3 = $pre_sector3->execute($values_sector3);


            $pre_usf = $con->prepare("UPDATE user SET status = '1'
                             WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_usf = array(
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_usf = $pre_usf->execute($values_usf);

            /*update user_groups*/
            $pre_disg = $con->prepare("SELECT district_id
                                     FROM groups_zones
                                     WHERE id = :zone_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_disg = array(':zone_id' => $zone_id, ':church_id' => $church_id);
            $pre_disg->execute($values_disg);
            $result_disg = $pre_disg->fetch();

            $final_dist = $result_disg['district_id'];

            $pre_us = $con->prepare("UPDATE user_groups SET sector_id = :group_id, zone_id = :zone_id, district_id = :district_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_us = array(
              ':leader_id' => $leader_id,
              ':group_id' => $group_id,
              ':zone_id' => $zone_id,
              ':district_id' => $final_dist,
              );

            $result_us = $pre_us->execute($values_us);

            if ($result_sector3) {

              $final_d = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Assigned a Supervisor (Zone Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned supervisor " . $first_name_l . " " . $last_name_l . "to sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al supervisor " . $first_name_l . " " . $last_name_l . "al sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message,
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*Activity New Supervisor assigned (Sector)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned supervisor " . $first_name_l . " " . $last_name_l . "to sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al supervisor " . $first_name_l . " " . $last_name_l . "al sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;

                /*Activity New Supervisor assigned to a Sector (Zone)*/
                $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned supervisor " . $first_name_l . " " . $last_name_l . "to sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
                $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al supervisor " . $first_name_l . " " . $last_name_l . "al sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;

              }else{

                /*Activity Assigned a Supervisor (Zone Pastor)*/
                $en_message = $first_name . " " . $last_name . " assigned supervisor " . $first_name_l . " " . $last_name_l . "to sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
                $es_message = $first_name . " " . $last_name . " asigno al supervisor " . $first_name_l . " " . $last_name_l . "al sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;

                /*Activity New Supervisor assigned (Sector)*/
                $en_message2 = $first_name . " " . $last_name . " assigned supervisor " . $first_name_l . " " . $last_name_l . "to sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
                $es_message2 = $first_name . " " . $last_name . " asigno al supervisor " . $first_name_l . " " . $last_name_l . "al sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;

                /*Activity New Supervisor assigned to a Sector (Zone)*/
                $en_message3 = $first_name . " " . $last_name . " assigned supervisor " . $first_name_l . " " . $last_name_l . "to sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
                $es_message3 = $first_name . " " . $last_name . " asigno al supervisor " . $first_name_l . " " . $last_name_l . "al sector D " . $district_c . " Z " . $zone_c . " S " . $sector_c;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message,
                  ':id_m' => $user_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);


              /*** ACTIVITY GROUPS ***/

              /*Activity New Supervisor assigned (Sector)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:group_id,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2,
                  ':group_id' => $group_id,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);

              /*Activity New Supervisor assigned to a Sector (Zone)*/
              $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,NULL,:zone_id,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act3 = array(
                  ':es_message3' => $es_message3, 
                  ':en_message3' => $en_message3,
                  ':zone_id' => $zone_id,
                  ':final_d' => $final_d);

              $result_act3 = $pre_act3->execute($values_act3);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Supervisor assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Sector already has a Supervisor",
                        "status"=>422)));
          }


        }else{

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Sector does not exist",
                      "status"=>422)));
        }
        
      } else if ($role_id == '4') {
        
        $pre_cell = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :group_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cell = array(':group_id' => $group_id, ':church_id' => $church_id);
        $pre_cell->execute($values_cell);
        $result_cell = $pre_cell->fetch();

        if($result_cell){

          $leader = $result_cell['leader'];

          if (empty($leader)) {

            /*obtain codes of cell*/
            $district_c = $result_cell['district_code'];
            $zone_c = $result_cell['zone_code'];
            $sector_c = $result_cell['sector_code'];
            $cell_c = $result_cell['cell_code'];

            /*sector_id*/
            $sector_id = $result_cell['sector_id'];

            $pre_cell3 = $con->prepare("UPDATE groups_cells SET leader = :leader_id, is_complete = '1', active = '1'
                             WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_cell3 = array(
              ':group_id' => $group_id,
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_cell3 = $pre_cell3->execute($values_cell3);


            $pre_usf = $con->prepare("UPDATE user SET status = '1'
                             WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_usf = array(
              ':leader_id' => $leader_id,
              ':church_id' => $church_id
              );

            $result_usf = $pre_usf->execute($values_usf);

            /*update user_groups*/
            $pre_zoneg = $con->prepare("SELECT zone_id
                                     FROM groups_sectors
                                     WHERE id = :sector_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zoneg = array(':sector_id' => $sector_id, ':church_id' => $church_id);
            $pre_zoneg->execute($values_zoneg);
            $result_zoneg = $pre_zoneg->fetch();

            $final_zone = $result_zoneg['zone_id'];

            $pre_disg = $con->prepare("SELECT district_id
                                     FROM groups_zones
                                     WHERE id = :zone_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_disg = array(':zone_id' => $final_zone, ':church_id' => $church_id);
            $pre_disg->execute($values_disg);
            $result_disg = $pre_disg->fetch();

            $final_dist = $result_disg['district_id'];


            $pre_us = $con->prepare("UPDATE user_groups SET sector_id = :sector_id, zone_id = :zone_id, district_id = :district_id, cell_id = :group_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_us = array(
              ':leader_id' => $leader_id,
              ':group_id' => $group_id,
              ':sector_id' => $sector_id,
              ':zone_id' => $final_zone,
              ':district_id' => $final_dist
              );

            $result_us = $pre_us->execute($values_us);

            if ($result_cell3) {

              $final_d = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Assigned a leader (Supervisor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned leader " . $first_name_l . " " . $last_name_l . "to cell group D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al lÃ­der " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message,
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*Activity New Leader assigned (Cell Group)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned leader " . $first_name_l . " " . $last_name_l . "to cell group D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al lÃ­der " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;

                /*Activity New Leader assigned to a Cell Group (Sector)*/
                $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned leader " . $first_name_l . " " . $last_name_l . "to cell group D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
                $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asigno al lÃ­der " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;

              }else{

                /*Activity Assigned a leader (Supervisor)*/
                $en_message = $first_name . " " . $last_name . " assigned leader " . $first_name_l . " " . $last_name_l . "to cell group D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
                $es_message = $first_name . " " . $last_name . " asigno al lÃ­der " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;

                /*Activity New Leader assigned (Cell Group)*/
                $en_message2 = $first_name . " " . $last_name . " assigned leader " . $first_name_l . " " . $last_name_l . "to cell group D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
                $es_message2 = $first_name . " " . $last_name . " asigno al lÃ­der " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;

                /*Activity New Leader assigned to a Cell Group (Sector)*/
                $en_message3 = $first_name . " " . $last_name . " assigned leader " . $first_name_l . " " . $last_name_l . "to cell group D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
                $es_message3 = $first_name . " " . $last_name . " asigno al lÃ­der " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D " . $district_c . " Z " . $zone_c . " S " . $sector_c . " C " . $cell_c;
              }

              /*Activity Assigned a leader (Supervisor)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message,
                  ':id_m' => $user_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);


              /*** ACTIVITY GROUPS ***/

              /*Activity New Leader assigned (Cell Group)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:group_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2,
                  ':group_id' => $group_id,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);

              /*Activity New Leader assigned to a Cell Group (Sector)*/
              $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,NULL,NULL,:sector_id,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act3 = array(
                  ':es_message3' => $es_message3, 
                  ':en_message3' => $en_message3,
                  ':sector_id' => $sector_id,
                  ':final_d' => $final_d);

              $result_act3 = $pre_act3->execute($values_act3);
              
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Leader assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }

          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Cell Group already has a Leader",
                        "status"=>422)));
          }


        }else{

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell Group does not exist",
                      "status"=>422)));
        }


      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Role does not exist",
                    "status"=>422)));
      }


    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User to assign does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/groups/list-user-assign', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($role_id == '1') {

      $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 2 AND user_groups.district_id IS NULL AND user.church_id = $church_id AND user.verified_account = '1'";
      

      foreach ($con->query($sql) as $row) {
        $district_pastors[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $district_pastors));


        
    } else if ($role_id == '2') {

        if(empty($parent_id)){
           return $response->withStatus(500)
                   ->withHeader('Content-Type', 'application/json')
                   ->withJson(array('error' => array(
                     "message"=>"Missing parameter: parent_id",
                     "status"=>500)));
        }

        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 3 AND user_groups.zone_id IS NULL AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1'";
        

        foreach ($con->query($sql) as $row) {
          $zone_pastor[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $zone_pastor));
        
    } else if ($role_id == '3') {

        if(empty($parent_id)){
           return $response->withStatus(500)
                   ->withHeader('Content-Type', 'application/json')
                   ->withJson(array('error' => array(
                     "message"=>"Missing parameter: parent_id",
                     "status"=>500)));
        }

        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user_groups.sector_id IS NULL AND user_groups.zone_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1'";
        

        foreach ($con->query($sql) as $row) {
          $supervisor[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $supervisor));
        
    } else if ($role_id == '4') {
        
      if(empty($parent_id)){
         return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
      }

      $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.cell_id IS NULL AND user_groups.sector_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1'";
      

      foreach ($con->query($sql) as $row) {
        $leader[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $leader));


    }else{ // else role not exist

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Role does not exist",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/************** TRANSFERS LIST FILTERED GENERAL**********************/

$app->post('/groups/list-user-transfer', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($parent_id)){
      return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: parent_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($role_id == '2') {

        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 3 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = '1'";
        

        foreach ($con->query($sql) as $row) {
          $zone_pastor[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $zone_pastor));
        
    } else if ($role_id == '3') {

        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user_groups.zone_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = '1'";
        

        foreach ($con->query($sql) as $row) {
          $supervisor[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $supervisor));
        
    } else if ($role_id == '4') {
        
      $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.sector_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = '1'";
      

      foreach ($con->query($sql) as $row) {
        $leader[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $leader));


    }else{ // else role not exist

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Role does not exist",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/groups/list-groups-target', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

      /*Districts*/
      $sql = "SELECT id AS district_id, district_code
        FROM groups_districts
        WHERE church_id = $final_church AND active = '1'";
      

      foreach ($con->query($sql) as $row) {
        $districts[] = $row;
      }

      /*Zones*/
      $sql2 = "SELECT id AS zone_id, zone_code
        FROM groups_zones
        WHERE church_id = $final_church AND active = '1'";
      

      foreach ($con->query($sql2) as $row2) {
        $zones[] = $row2;
      }

      /*Sectores*/
      $sql3 = "SELECT id AS sector_id, sector_code
        FROM groups_sectors
        WHERE church_id = $final_church AND active = '1'";
      

      foreach ($con->query($sql3) as $row3) {
        $sectors[] = $row3;
      }

      /*Cells*/
      $sql4 = "SELECT id AS cell_id, cell_code
        FROM groups_cells
        WHERE church_id = $final_church AND active = '1'";
      

      foreach ($con->query($sql4) as $row4) {
        $cells[] = $row4;
      }


      $final_response = array("districts" => $districts,
                              "zones" => $zones,
                              "sectors" => $sectors,
                              "cells" => $cells);


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_response));


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/********************** MULTIPLY GENERAL ***************************/

/*district, zone, sector*/

$app->post('/groups/multiply-general', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $leader_group_id = $request->getParam('leader_group_id');
   $child_code = $request->getParam('child_code');
   $parent = $request->getParam('parent');
   $child = $request->getParam('child');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($parent_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: parent_id",
               "status"=>500)));
   } else if(empty($leader_group_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_group_id",
               "status"=>500)));
   } else if(empty($child_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: child_code",
               "status"=>500)));
   }


    /*Impersonate*/
    if ($impersonate) {
     
       if ($impersonate != '1') {
         return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "message"=>"Impersonate is not valid",
                   "status"=>500)));
       }else if(empty($impersonate_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: impersonate_id",
                  "status"=>500)));
      } else if(empty($impersonate_role)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: impersonate_role",
                  "status"=>500)));
      }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "message"=>"Impersonated user with this role does not exist",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

   }


   $c_parent = count($parent);
   $c_child = count($child);

   $err_subid = 0;
   $err_subc = 0;
   $err_zero = 0;
   $err_code = 0;
   $err_dup = 0;
   $usedParent = array(); // used codes

   $err_child_id = 0;
   $err_childc = 0;
   $err_zeroc = 0;
   $err_codec = 0;
   $err_duplicate = 0;
   $usedChild = array(); // used codes

   /*PARENT*/
   for($i = 0; $i < count($parent); $i++) {

    if(empty($parent[$i]['subgroup_id'])){
      $err_subid += 1;
      $err_id = $i;
      $arr[] = $err_id;
    }else if(empty($parent[$i]['subgroup_code'])){
      $err_subc += 1;
      $err_id1 = $i;
      $arr1[] = $err_id1;
    }else if ($parent[$i]['subgroup_code'] == '0') {
      $err_zero += 1;
      $err_id2 = $i;
      $arr2[] = $err_id2;
    } else if ($parent[$i]['subgroup_code'] > $c_parent) {
      $err_code += 1;
      $err_id3 = $i;
      $arr3[] = $err_id3;
    }
    
    if(in_array($parent[$i]['subgroup_code'], $usedParent)){
      $err_dup += 1;
      $err_id4 = $i;
      $arr4[] = $err_id4;
    } else {
        $usedParent[] = $parent[$i]['subgroup_code'];
    }

   }

   /*CHILD*/
   for($j = 0; $j < count($child); $j++) {

    if(empty($child[$j]['subgroup_id'])){
      $err_child_id += 1;
      $err_fn = $j;
      $fn[] = $err_fn;
    }else if(empty($child[$j]['subgroup_code'])){
      $err_childc += 1;
      $err_fn1 = $j;
      $fn1[] = $err_fn1;
    }else if ($child[$j]['subgroup_code'] == '0') {
      $err_zeroc += 1;
      $err_fn2 = $j;
      $fn2[] = $err_fn2;
    } else if ($child[$j]['subgroup_code'] > $c_child) {
      $err_codec += 1;
      $err_fn3 = $j;
      $fn3[] = $err_fn3;
    }
    
    if(in_array($child[$j]['subgroup_code'], $usedChild)){
      $err_duplicate += 1;
      $err_fn4 = $j;
      $fn4[] = $err_fn4;
    } else {
        $usedChild[] = $child[$j]['subgroup_code'];
    }

   }

   if($err_subid > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: parent subgroup id",
               "err_id"=>$arr,
               "status"=>500)));

   } else if($err_subc > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: parent subgroup code",
               "err_id"=>$arr1,
               "status"=>500)));

   } else if($err_zero > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Parent code can not be 0",
               "err_id"=>$arr2,
               "status"=>500)));

   }else if($err_code > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Parent subgroup code is not in the established range",
               "err_id"=>$arr3,
               "status"=>500)));

   } else if($err_dup > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Parent subgroup code is duplicated",
               "err_id"=>$arr4,
               "status"=>500)));

   }

   /*errors child*/

   if($err_child_id > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: child subgroup id",
               "err_id"=>$fn,
               "status"=>500)));

   } else if($err_childc > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: child subgroup code",
               "err_id"=>$fn1,
               "status"=>500)));

   } else if($err_zeroc > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Child code can not be 0",
               "err_id"=>$fn2,
               "status"=>500)));

   }else if($err_codec > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Child subgroup code is not in the established range",
               "err_id"=>$fn3,
               "status"=>500)));

   } else if($err_duplicate > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Child subgroup code is duplicated",
               "err_id"=>$fn4,
               "status"=>500)));

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $first_name = $result_i['first_name'];
    $last_name = $result_i['last_name'];
      
    /*Districts*/
    if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        $pre_di = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :parent_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_di = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_di->execute($values_di);
        $result_di = $pre_di->fetch();

        if ($result_di) {

          $dis_codef = $result_di['district_code'];

          /*if exist district_pastor*/
          $pre_pastor = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :leader_group_id AND church_id = :church_id AND rol = '2'", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_pastor = array(':leader_group_id' => $leader_group_id, ':church_id' => $church_id);
          $pre_pastor->execute($values_pastor);
          $result_pastor = $pre_pastor->fetch();

          if ($result_pastor) {
            
            // verify if code exists
            $pre_co = $con->prepare("SELECT *
                                     FROM groups_districts
                                     WHERE district_code = :child_code AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_co = array(':child_code' => $child_code, ':church_id' => $church_id);
            $pre_co->execute($values_co);
            $result_co = $pre_co->fetch();

            if ($result_co) {
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"District code already exists",
                          "status"=>422)));
            }else{

              /*General Process*/

              /****** Parent Zones ******/
              for($k = 0; $k < count($parent); $k++) {

                /*update zone table*/
                $final_id = $parent[$k]['subgroup_id'];
                $final_code = $parent[$k]['subgroup_code'];

                $pre_pa = $con->prepare("UPDATE groups_zones SET zone_code = :final_code
                                 WHERE id = :final_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_pa = array(
                  ':final_id' => $final_id,
                  ':final_code' => $final_code,
                  ':church_id' => $church_id
                  );

                $result_pa = $pre_pa->execute($values_pa);

                /*update sector and cell table*/

                $pre_upse = $con->prepare("UPDATE groups_sectors SET zone_code = :final_code WHERE zone_id = :final_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upse = array(
                  ':final_id' => $final_id,
                  ':final_code' => $final_code,
                  ':church_id' => $church_id
                );

                $result_upse = $pre_upse->execute($values_upse);


                $pre_upce = $con->prepare("UPDATE groups_cells SET zone_code = :final_code WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :final_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_upce = array(
                  ':final_id' => $final_id,
                  ':final_code' => $final_code,
                  ':church_id' => $church_id
                );

                $result_upce = $pre_upce->execute($values_upce);


              }


              /*insert new district*/

              $date_d = date("Y-m-d H:i:s");

              $pre_us = $con->prepare("INSERT INTO groups_districts (`district_code`, `church_id`, `district_pastor`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:child_code, :church_id, :leader_group_id, :parent_id, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_us = array(
                ':child_code' => $child_code,
                ':church_id' => $church_id,
                ':leader_group_id' => $leader_group_id,
                ':parent_id' => $parent_id
                );

              $result_us = $pre_us->execute($values_us);
              $child_id = $con->lastInsertId();

              /*update user_groups*/
              $pre_upgr = $con->prepare("UPDATE user_groups SET district_id = :child_id WHERE user_id = :leader_group_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upgr = array(
                ':child_id' => $child_id,
                ':leader_group_id' => $leader_group_id
              );

              $result_upgr = $pre_upgr->execute($values_upgr);


              /***** Child Zones ******/
              for($l = 0; $l < count($child); $l++) {

                $sub_id = $child[$l]['subgroup_id'];
                $sub_code = $child[$l]['subgroup_code'];

                /*obtain zone_pastor*/

                $pre_zone = $con->prepare("SELECT zone_pastor
                                         FROM groups_zones
                                         WHERE id = :sub_id AND church_id = :church_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zone = array(':sub_id' => $sub_id, ':church_id' => $church_id);
                $pre_zone->execute($values_zone);
                $result_zone = $pre_zone->fetch();

                $zone_p = $result_zone['zone_pastor'];

                /*update district for zone_pastor*/
                $pre_pa = $con->prepare("UPDATE user_groups SET district_id = :child_id WHERE user_id = :zone_p", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_pa = array(
                  ':child_id' => $child_id,
                  ':zone_p' => $zone_p
                  );

                $result_pa = $pre_pa->execute($values_pa);

                /*update groups_zones with new data*/
                $pre_pa = $con->prepare("UPDATE groups_zones SET zone_code = :sub_code, district_code = :child_code, district_id = :child_id WHERE id = :sub_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_pa = array(
                  ':sub_id' => $sub_id,
                  ':sub_code' => $sub_code,
                  ':church_id' => $church_id,
                  ':child_code' => $child_code,
                  ':child_id' => $child_id
                  );

                $result_pa = $pre_pa->execute($values_pa);


                /*update district for supervisors associated to zone*/

                $pre_sup = $con->prepare("UPDATE user_groups SET district_id = :child_id WHERE user_id IN (SELECT supervisor from groups_sectors where zone_id = :sub_id AND church_id = :church_id)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_sup = array(
                  ':child_id' => $child_id,
                  ':sub_id' => $sub_id,
                  ':church_id' => $church_id
                  );

                $result_sup = $pre_sup->execute($values_sup);

                /*update groups_sectors with new data*/
                $pre_pa = $con->prepare("UPDATE groups_sectors SET zone_code = :sub_code, district_code = :child_code WHERE zone_id = :sub_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_pa = array(
                  ':sub_id' => $sub_id,
                  ':sub_code' => $sub_code,
                  ':church_id' => $church_id,
                  ':child_code' => $child_code
                  );

                $result_pa = $pre_pa->execute($values_pa);


                /*update district for leaders associated to zone*/

                $pre_le = $con->prepare("UPDATE user_groups SET district_id = :child_id WHERE user_id IN (SELECT leader from groups_cells where sector_id IN (SELECT id from groups_sectors where zone_id = :sub_id AND church_id = :church_id) AND church_id = :church_id)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_le = array(
                  ':child_id' => $child_id,
                  ':sub_id' => $sub_id,
                  ':church_id' => $church_id
                  );

                $result_le = $pre_le->execute($values_le);

                /*update groups_cells with new data*/
                $pre_pa = $con->prepare("UPDATE groups_cells SET zone_code = :sub_code, district_code = :child_code WHERE sector_id IN (SELECT id from groups_sectors where zone_id = :sub_id AND church_id = :church_id) AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_pa = array(
                  ':sub_id' => $sub_id,
                  ':sub_code' => $sub_code,
                  ':church_id' => $church_id,
                  ':child_code' => $child_code
                  );

                $result_pa = $pre_pa->execute($values_pa);


              }

              if ($result_us) {

                // Record A District multiplied (Senior Pastor / Admin)
                $en_multi = "D" . $dis_codef . " has been multiplied";

                $es_multi = "D" . $dis_codef . " ha sido multiplicado";

                $multi = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':church_id' => $church_id,
                    ':date_d' => $date_d);

                $result_multi = $multi->execute($val_multi);

                // Record A District multiplied (District Pastor)
                $multi2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,:parent_id,NULL,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi2 = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':parent_id' => $parent_id,
                    ':date_d' => $date_d);

                $result_multi2 = $multi2->execute($val_multi2);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'District has multiplied successfully'));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"District Pastor does not exist",
                        "status"=>422)));
          }


        } else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"District does not exist",
                      "status"=>422)));
        }

     /*Zones*/
    }else if ($role_id == '2') {

      $pre_di = $con->prepare("SELECT *
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_di = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_di->execute($values_di);
      $result_di = $pre_di->fetch();

      if ($result_di) {

        $parent_dis = $result_di['district_id'];
        $parent_zone = $result_di['zone_code'];
        $parent_code = $result_di['district_code'];

        /*if exist zone_pastor*/
        $pre_pastor = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :leader_group_id AND church_id = :church_id AND rol = '3'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_pastor = array(':leader_group_id' => $leader_group_id, ':church_id' => $church_id);
        $pre_pastor->execute($values_pastor);
        $result_pastor = $pre_pastor->fetch();

        if ($result_pastor) {
          
          // verify if code exists
          $pre_co = $con->prepare("SELECT *
                                   FROM groups_zones
                                   WHERE zone_code = :child_code AND district_id = :parent_dis AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_co = array(':child_code' => $child_code, ':parent_dis' => $parent_dis, ':church_id' => $church_id);
          $pre_co->execute($values_co);
          $result_co = $pre_co->fetch();

          if ($result_co) {
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Zone code already exists",
                        "status"=>422)));
          }else{

            /*General Process*/

            /****** Parent Sectors ******/
            for($k = 0; $k < count($parent); $k++) {

              /*update zone table*/
              $final_id = $parent[$k]['subgroup_id'];
              $final_code = $parent[$k]['subgroup_code'];

              $pre_pa = $con->prepare("UPDATE groups_sectors SET sector_code = :final_code
                               WHERE id = :final_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':final_id' => $final_id,
                ':final_code' => $final_code,
                ':church_id' => $church_id
                );

              $result_pa = $pre_pa->execute($values_pa);

              /*update cell table*/

              $pre_upse = $con->prepare("UPDATE groups_cells SET sector_code = :final_code WHERE sector_id = :final_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upse = array(
                ':final_id' => $final_id,
                ':final_code' => $final_code,
                ':church_id' => $church_id
              );

              $result_upse = $pre_upse->execute($values_upse);

            }


            /*insert new zone*/

            $date_d = date("Y-m-d H:i:s");
            $date_g = date("Y-m-d");

            $pre_us = $con->prepare("INSERT INTO groups_zones (`zone_code`, `church_id`, `district_code`, `district_id`, `zone_pastor`, `start_date`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:child_code, :church_id, :parent_code, :parent_dis, :leader_group_id, '$date_g' , :parent_id, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_us = array(
              ':child_code' => $child_code,
              ':church_id' => $church_id,
              ':parent_code' => $parent_code,
              ':parent_dis' => $parent_dis,
              ':leader_group_id' => $leader_group_id,
              ':parent_id' => $parent_id
              );

            $result_us = $pre_us->execute($values_us);
            $child_id = $con->lastInsertId();

            /*update user_groups*/
            $pre_upgr = $con->prepare("UPDATE user_groups SET zone_id = :child_id, district_id = :parent_dis WHERE user_id = :leader_group_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_upgr = array(
              ':child_id' => $child_id,
              ':leader_group_id' => $leader_group_id,
              ':parent_dis' => $parent_dis
            );

            $result_upgr = $pre_upgr->execute($values_upgr);


            /***** Child Zones ******/
            for($l = 0; $l < count($child); $l++) {

              $sub_id = $child[$l]['subgroup_id'];
              $sub_code = $child[$l]['subgroup_code'];

              /*obtain supervisor*/

              $pre_zone = $con->prepare("SELECT supervisor
                                       FROM groups_sectors
                                       WHERE id = :sub_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zone = array(':sub_id' => $sub_id, ':church_id' => $church_id);
              $pre_zone->execute($values_zone);
              $result_zone = $pre_zone->fetch();

              $zone_p = $result_zone['supervisor'];

              /*update zone for supervisor*/
              $pre_pa = $con->prepare("UPDATE user_groups SET zone_id = :child_id, district_id = :parent_dis WHERE user_id = :zone_p", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':child_id' => $child_id,
                ':zone_p' => $zone_p,
                ':parent_dis' => $parent_dis,
                );

              $result_pa = $pre_pa->execute($values_pa);

              /*update groups_sectors with new data*/
              $pre_pa = $con->prepare("UPDATE groups_sectors SET sector_code = :sub_code, zone_code = :child_code, zone_id = :child_id, district_code = :parent_code WHERE id = :sub_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':sub_id' => $sub_id,
                ':sub_code' => $sub_code,
                ':church_id' => $church_id,
                ':child_code' => $child_code,
                ':child_id' => $child_id,
                ':parent_code' => $parent_code
                );

              $result_pa = $pre_pa->execute($values_pa);


              /*update zone for leaders associated to sector*/

              $pre_sup = $con->prepare("UPDATE user_groups SET zone_id = :child_id, district_id = :parent_dis WHERE user_id IN (SELECT leader from groups_cells where sector_id = :sub_id AND church_id = :church_id)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_sup = array(
                ':child_id' => $child_id,
                ':sub_id' => $sub_id,
                ':church_id' => $church_id,
                ':parent_dis' => $parent_dis
                );

              $result_sup = $pre_sup->execute($values_sup);

              /*update groups_cells with new data*/
              $pre_pa = $con->prepare("UPDATE groups_cells SET sector_code = :sub_code, zone_code = :child_code, district_code = :parent_code WHERE sector_id = :sub_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':sub_id' => $sub_id,
                ':sub_code' => $sub_code,
                ':church_id' => $church_id,
                ':child_code' => $child_code,
                ':parent_code' => $parent_code
                );

              $result_pa = $pre_pa->execute($values_pa);


            }

            if ($result_us) {

              $final_d = date("Y-m-d H:i:s");


              // Record A Zone multiplied (Senior Pastor / Admin)
              $en_multi = "Zone D" . $parent_code . " Z" . $parent_zone . " has been multiplied";

              $es_multi = "Zona D" . $parent_code . " Z" . $parent_zone . " ha sido multiplicada";

              $multi = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':church_id' => $church_id,
                  ':date_d' => $date_d);

              $result_multi = $multi->execute($val_multi);

              // Record A Zone multiplied (District Pastor)
              $multi2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,:parent_dis,NULL,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi2 = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':parent_dis' => $parent_dis,
                  ':date_d' => $date_d);

              $result_multi2 = $multi2->execute($val_multi2);

              // Record A Zone multiplied (Zone Pastor)
              $multi3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,:parent_id,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi3 = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':parent_id' => $parent_id,
                  ':date_d' => $date_d);

              $result_multi3 = $multi3->execute($val_multi3);


              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Multiplied a Zone (District Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplied zone D" . $parent_code . " Z" . $parent_zone;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplicÃ³ la zona D" . $parent_code . " Z" . $parent_zone;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message,
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/
                /*Activity Multiplied Zone (District)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplied zone D" . $parent_code . " Z" . $parent_zone;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplicÃ³ la zona D" . $parent_code . " Z" . $parent_zone;

              }else{

                /*Activity Multiplied a Zone (District Pastor)*/
                $en_message = $first_name . " " . $last_name . " multiplied zone D" . $parent_code . " Z" . $parent_zone;
                $es_message = $first_name . " " . $last_name . " multiplicÃ³ la zona D" . $parent_code . " Z" . $parent_zone;

                /*ACTIVITY GROUPS*/
                /*Activity Multiplied Zone (District)*/
                $en_message2 = $first_name . " " . $last_name . " multiplied zone D" . $parent_code . " Z" . $parent_zone;
                $es_message2 = $first_name . " " . $last_name . " multiplicÃ³ la zona D" . $parent_code . " Z" . $parent_zone;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message,
                  ':id_m' => $user_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/
              /*Activity Multiplied Zone (District)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:parent_dis,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2,
                  ':parent_dis' => $parent_dis,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone has multiplied successfully'));
            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Zone Pastor does not exist",
                      "status"=>422)));
        }


      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Zone does not exist",
                    "status"=>422)));
      }
      
      /*Sectors*/
    } else if ($role_id == '3') {

      $pre_di = $con->prepare("SELECT *
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_di = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_di->execute($values_di);
      $result_di = $pre_di->fetch();

      if ($result_di) {

        $parent_dis = $result_di['zone_id'];
        $parent_sector = $result_di['sector_code'];
        $parent_code = $result_di['zone_code'];
        $parent_discode = $result_di['district_code'];

        /*if exist supervisor*/
        $pre_pastor = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :leader_group_id AND church_id = :church_id AND rol = '4'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_pastor = array(':leader_group_id' => $leader_group_id, ':church_id' => $church_id);
        $pre_pastor->execute($values_pastor);
        $result_pastor = $pre_pastor->fetch();

        if ($result_pastor) {
          
          // verify if code exists
          $pre_co = $con->prepare("SELECT *
                                   FROM groups_sectors
                                   WHERE sector_code = :child_code AND zone_id = :parent_dis AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_co = array(':child_code' => $child_code, ':parent_dis' => $parent_dis, ':church_id' => $church_id);
          $pre_co->execute($values_co);
          $result_co = $pre_co->fetch();

          if ($result_co) {
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Sector code already exists",
                        "status"=>422)));
          }else{

            /*General Process*/

            /****** Parent Sectors ******/
            for($k = 0; $k < count($parent); $k++) {

              /*update cell table*/
              $final_id = $parent[$k]['subgroup_id'];
              $final_code = $parent[$k]['subgroup_code'];

              $pre_pa = $con->prepare("UPDATE groups_cells SET cell_code = :final_code
                               WHERE id = :final_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':final_id' => $final_id,
                ':final_code' => $final_code,
                ':church_id' => $church_id
                );

              $result_pa = $pre_pa->execute($values_pa);

            }


            /*insert new sector*/

            $date_d = date("Y-m-d H:i:s");
            $date_g = date("Y-m-d");

            $pre_us = $con->prepare("INSERT INTO groups_sectors (`sector_code`, `church_id`, `zone_code`, `district_code`, `zone_id`, `supervisor`, `start_date`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:child_code, :church_id, :parent_code, :parent_discode, :parent_dis, :leader_group_id, '$date_g' , :parent_id, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_us = array(
              ':child_code' => $child_code,
              ':church_id' => $church_id,
              ':parent_code' => $parent_code,
              ':parent_dis' => $parent_dis,
              ':parent_discode' => $parent_discode,
              ':leader_group_id' => $leader_group_id,
              ':parent_id' => $parent_id
              );

            $result_us = $pre_us->execute($values_us);
            $child_id = $con->lastInsertId();


            /*obtain district_id*/
            $pre_id = $con->prepare("SELECT *
                                     FROM groups_zones
                                     WHERE id = :parent_dis AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_id = array(':parent_dis' => $parent_dis, ':church_id' => $church_id);
            $pre_id->execute($values_id);
            $result_id = $pre_id->fetch();

            $final_disid = $result_id['district_id'];


            /*update user_groups*/
            $pre_upgr = $con->prepare("UPDATE user_groups SET sector_id = :child_id, zone_id = : parent_dis, district_id = :final_disid  WHERE user_id = :leader_group_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_upgr = array(
              ':child_id' => $child_id,
              ':leader_group_id' => $leader_group_id,
              ':parent_dis' => $parent_dis,
              ':final_disid' => $final_disid
            );

            $result_upgr = $pre_upgr->execute($values_upgr);


            /***** Child Zones ******/
            for($l = 0; $l < count($child); $l++) {

              $sub_id = $child[$l]['subgroup_id'];
              $sub_code = $child[$l]['subgroup_code'];

              /*obtain leader*/

              $pre_zone = $con->prepare("SELECT leader
                                       FROM groups_cells
                                       WHERE id = :sub_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zone = array(':sub_id' => $sub_id, ':church_id' => $church_id);
              $pre_zone->execute($values_zone);
              $result_zone = $pre_zone->fetch();

              $zone_p = $result_zone['leader'];

              /*update sector for leader*/
              $pre_pa = $con->prepare("UPDATE user_groups SET sector_id = :child_id, zone_id = : parent_dis, district_id = :final_disid WHERE user_id = :zone_p", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':child_id' => $child_id,
                ':zone_p' => $zone_p,
                ':parent_dis' => $parent_dis,
                ':final_disid' => $final_disid
                );

              $result_pa = $pre_pa->execute($values_pa);

              /*update groups_cells with new data*/
              $pre_pa = $con->prepare("UPDATE groups_cells SET cell_code = :sub_code, sector_code = :child_code, sector_id = :child_id, zone_code = :parent_code , district_code = :parent_discode WHERE id = :sub_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_pa = array(
                ':sub_id' => $sub_id,
                ':sub_code' => $sub_code,
                ':church_id' => $church_id,
                ':child_code' => $child_code,
                ':child_id' => $child_id,
                ':parent_code' => $parent_code,
                ':parent_discode' => $parent_discode
                );

              $result_pa = $pre_pa->execute($values_pa);


            }


            if ($result_us) {

              $final_d = date("Y-m-d H:i:s");

              // Record A Sector multiplied (Senior Pastor / Admin)
              $en_multi = "Sector D" . $parent_discode . " Z" . $parent_code . " S" . $parent_sector . " has been multiplied";

              $es_multi = "Sector D" . $parent_discode . " Z" . $parent_code . " S" . $parent_sector . " ha sido multiplicado";

              $multi = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':church_id' => $church_id,
                  ':date_d' => $date_d);

              $result_multi = $multi->execute($val_multi);

              // Record A Sector multiplied (District Pastor)
              $multi2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,:final_disid,NULL,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi2 = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':final_disid' => $final_disid,
                  ':date_d' => $date_d);

              $result_multi2 = $multi2->execute($val_multi2);

              // Record A Sector multiplied (Zone Pastor)
              $multi3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,:parent_dis,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi3 = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':parent_dis' => $parent_dis,
                  ':date_d' => $date_d);

              $result_multi3 = $multi3->execute($val_multi3);

              // Record A Sector multiplied (Supervisor)
              $multi4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,:parent_id,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_multi4 = array(
                  ':en_multi' => $en_multi,
                  ':es_multi' => $es_multi,
                  ':parent_id' => $parent_id,
                  ':date_d' => $date_d);

              $result_multi4 = $multi4->execute($val_multi4);


              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Multiplied a Sector (Zone Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplied sector D" . $parent_discode . " Z" . $parent_code . " S " . $parent_sector;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplicÃ³ el sector D" . $parent_discode . " Z " . $parent_code . " S" . $parent_sector;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message,
                    ':id_m' => $impersonate_id,
                    ':final_d' => $final_d);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Activity Multiplied Sector (Zone)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplied sector D" . $parent_discode . " Z" . $parent_code . " S" . $parent_sector;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplicÃ³ el sector D" . $parent_discode . " Z" . $parent_code . " S" . $parent_sector;

              }else{

                /*Activity Multiplied a Sector (Zone Pastor)*/
                $en_message = $first_name . " " . $last_name . " multiplied sector D" . $parent_discode . " Z" . $parent_code . " S " . $parent_sector;
                $es_message = $first_name . " " . $last_name . " multiplicÃ³ el sector D" . $parent_discode . " Z " . $parent_code . " S" . $parent_sector;

                /*ACTIVITY GROUPS*/

                /*Activity Multiplied Sector (Zone)*/
                $en_message2 = $first_name . " " . $last_name . " multiplied sector D" . $parent_discode . " Z" . $parent_code . " S" . $parent_sector;
                $es_message2 = $first_name . " " . $last_name . " multiplicÃ³ el sector D" . $parent_discode . " Z" . $parent_code . " S" . $parent_sector;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message,
                  ':id_m' => $user_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Multiplied Sector (Zone)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:parent_dis,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2,
                  ':parent_dis' => $parent_dis,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);

              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Sector has multiplied successfully'));
            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Supervisor does not exist",
                      "status"=>422)));
        }


      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Sector does not exist",
                    "status"=>422)));
      }
          
    }else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Role does not exist",
                      "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*Cell*/

$app->post('/groups/multiply-cell-group', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $leader_group_id = $request->getParam('leader_group_id');
   $child_code = $request->getParam('child_code');
   $child = $request->getParam('child');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($parent_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: parent_id",
               "status"=>500)));
   } else if(empty($leader_group_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_group_id",
               "status"=>500)));
   } else if(empty($child_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: child_code",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

   $err_child_id = 0;
   $err_valid_member = 0;

   /*CHILD*/
   for($j = 0; $j < count($child); $j++) {

    $pre2 = $con->prepare("SELECT *
                          FROM members_cells
                          WHERE id = :member_id AND rol != '1' AND cell_id = :parent_id AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values2  = array(':member_id' => $child[$j]['member_id'], ':church_id' => $church_id, ':parent_id' => $parent_id);
    $pre2->execute($values2);
    $result2 = $pre2->fetch();

    if(empty($child[$j]['member_id'])){
      $err_child_id += 1;
      $err_fn = $j;
      $fn[] = $err_fn;
    } else if(empty($result2)){
        $err_valid_member += 1;
        $err_id = $j;
        $arr[] = $err_id;
      }

   }


   /*errors child*/

   if($err_child_id > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member id",
               "err_id"=>$fn,
               "status"=>500)));

   } else if($err_valid_member > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Cell Member does not exist",
                "err_id"=>$arr6,
                "status"=>500)));

    }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {
      
    /*Cells*/
    if ($role_id == '4') {

        $first_name = $result_i['first_name'];
        $last_name = $result_i['last_name'];

        $pre_di = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :parent_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_di = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_di->execute($values_di);
        $result_di = $pre_di->fetch();

        if ($result_di) {

          $parent_sec = $result_di['sector_id'];
          $parent_cell = $result_di['cell_code'];
          $parent_code = $result_di['sector_code'];
          $parent_zone = $result_di['zone_code'];
          $parent_district = $result_di['district_code'];

          /*if exist district_pastor*/
          $pre_pastor = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :leader_group_id AND church_id = :church_id AND rol = '5'", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_pastor = array(':leader_group_id' => $leader_group_id, ':church_id' => $church_id);
          $pre_pastor->execute($values_pastor);
          $result_pastor = $pre_pastor->fetch();

          if ($result_pastor) {
            
            // verify if code exists
            $pre_co = $con->prepare("SELECT *
                                     FROM groups_cells
                                     WHERE cell_code = :child_code AND sector_id = :parent_sec AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_co = array(':child_code' => $child_code, ':parent_sec' => $parent_sec, ':church_id' => $church_id);
            $pre_co->execute($values_co);
            $result_co = $pre_co->fetch();

            if ($result_co) {
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Cell code already exists",
                          "status"=>422)));
            }else{

              /*General Process*/

              /*insert new cell group*/
              $date_d = date("Y-m-d H:i:s");
              $date_g = date("Y-m-d");

              $pre_us = $con->prepare("INSERT INTO groups_cells (`cell_code`, `church_id`, `sector_code`, `zone_code`, `district_code`, `sector_id`,`leader`,`host`,`assistent`,`secretary`,`groups_type`, `start_date`,`address`,`city`,`phone`,`meets_on`, `meets_time`,`parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:child_code, :church_id, :parent_code,:parent_zone,:parent_district :parent_sec, :leader_group_id,NULL,NULL,NULL,NULL,'$date_g',NULL,NULL,NULL,NULL,NULL, :parent_id, '1', '0', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_us = array(
                ':child_code' => $child_code,
                ':church_id' => $church_id,
                ':leader_group_id' => $leader_group_id,
                ':parent_id' => $parent_id,
                ':parent_code' => $parent_code,
                ':parent_sec' => $parent_sec,
                ':parent_zone' => $parent_zone,
                ':parent_district' => $parent_district
                );

              $result_us = $pre_us->execute($values_us);
              $child_id = $con->lastInsertId();

              /*obtain zone_id*/
              $pre_zo = $con->prepare("SELECT *
                                    FROM groups_sectors
                                    WHERE id = :parent_sec AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zo  = array(':parent_sec' => $parent_sec,':church_id' => $church_id);
              $pre_zo->execute($values_zo);
              $result_zo = $pre_zo->fetch();

              $zone_f = $result_zo['zone_id'];

              /*obtain district_id*/
              $pre_zo = $con->prepare("SELECT *
                                    FROM groups_zones
                                    WHERE id = :zone_f AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zo  = array(':zone_f' => $zone_f,':church_id' => $church_id);
              $pre_zo->execute($values_zo);
              $result_zo = $pre_zo->fetch();

              $district_f = $result_zo['district_id'];


              /*update user_groups*/
              $pre_upgr = $con->prepare("UPDATE user_groups SET cell_id = :child_id, sector_id = :parent_sec, zone_id = :zone_f, district_id = :district_f WHERE user_id = :leader_group_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_upgr = array(
                ':child_id' => $child_id,
                ':leader_group_id' => $leader_group_id,
                ':parent_sec' => $parent_sec,
                ':zone_f' => $zone_f,
                ':district_f' => $district_f
              );

              $result_upgr = $pre_upgr->execute($values_upgr);


              /***** Child Cells ******/
              for($l = 0; $l < count($child); $l++) {

                $sub_id = $child[$l]['member_id'];

                /*update member_cells with new data*/
                $pre_pa = $con->prepare("UPDATE members_cells SET cell_id = :child_id WHERE id = :sub_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_pa = array(
                  ':child_id' => $child_id,
                  ':sub_id' => $sub_id,
                  ':church_id' => $church_id
                  );

                $result_pa = $pre_pa->execute($values_pa);

              }


              if ($result_us) {

                $final_d = date("Y-m-d H:i:s");

                // Record A Cell Group multiplied (Senior Pastor / Admin)
                $en_multi = "Cell Group D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell . " has been multiplied";

                $es_multi = "CÃ©lula D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell . " ha sido multiplicada";

                $multi = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':church_id' => $church_id,
                    ':date_d' => $date_d);

                $result_multi = $multi->execute($val_multi);

                // Record A Cell Group multiplied (District Pastor)
                $multi2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,:district_f,NULL,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi2 = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':district_f' => $district_f,
                    ':date_d' => $date_d);

                $result_multi2 = $multi2->execute($val_multi2);

                // Record A Cell Group multiplied (Zone Pastor)
                $multi3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,:zone_f,NULL,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi3 = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':zone_f' => $zone_f,
                    ':date_d' => $date_d);

                $result_multi3 = $multi3->execute($val_multi3);

                // Record A Cell Group multiplied (Supervisor)
                $multi4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,:parent_sec,NULL,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi4 = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':parent_sec' => $parent_sec,
                    ':date_d' => $date_d);

                $result_multi4 = $multi4->execute($val_multi4);

                // Record A Cell Group multiplied (Leader)
                $multi5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_multi, :en_multi,NULL,NULL,NULL,:parent_id,NULL,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_multi5 = array(
                    ':en_multi' => $en_multi,
                    ':es_multi' => $es_multi,
                    ':parent_id' => $parent_id,
                    ':date_d' => $date_d);

                $result_multi5 = $multi5->execute($val_multi5);



                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Multiplied a Cell Group (Supervisor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplied the cell group D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplicÃ³ la cÃ©lula D " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message,
                      ':id_m' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                  /*Activity Multiplied Cell Group (Sector)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplied the cell group D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " multiplicÃ³ la cÃ©lula D " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;

                }else{

                  /*Activity Multiplied a Cell Group (Supervisor)*/
                  $en_message = $first_name . " " . $last_name . " multiplied the cell group D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;
                  $es_message = $first_name . " " . $last_name . " multiplicÃ³ la cÃ©lula D " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;

                  /*ACTIVITY GROUPS*/

                  /*Activity Multiplied Cell Group (Sector)*/
                  $en_message2 = $first_name . " " . $last_name . " multiplied the cell group D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;
                  $es_message2 = $first_name . " " . $last_name . " multiplicÃ³ la cÃ©lula D " . $first_name_l . " " . $last_name_l . "a la cÃ©lula D" . $parent_district . " Z" . $parent_zone . " S" . $parent_code . " C" . $parent_cell;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message,
                    ':id_m' => $user_id,
                    ':final_d' => $final_d);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/

                /*Activity Multiplied Cell Group (Sector)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:parent_sec,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2,
                    ':parent_sec' => $parent_sec,
                    ':final_d' => $final_d);

                $result_act2 = $pre_act2->execute($values_act2);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Cell has multiplied successfully'));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Leader does not exist",
                        "status"=>422)));
          }


        } else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell Group does not exist",
                      "status"=>422)));
        }

    }else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Don't have permission to perform this action",
                      "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/*********** NEWS ***************/

$app->post('/news/list', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');
   $category_id = $request->getParam('category_id');
   $date = $request->getParam('date');

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } 


  $pre_i = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$date);

      if ($category_id) {
        
        $pre_2 = $con->prepare("SELECT *
                                 FROM news_categories
                                 WHERE id = :category_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_2 = array(':category_id' => $category_id);
        $pre_2->execute($values_2);
        $result2 = $pre_2->fetch();

        if ($result2) {
          
          if ($date) {

            /*valid date*/
            if (!$valid_date) {
                
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"You must enter a valid date",
                        "status"=>500)));
            }else{

              $sql1 = "SELECT news.id, news.title, CONCAT(user.first_name, ' ', user.last_name) AS autor, news.date, news_categories.name AS category FROM news INNER JOIN user ON news.user_id = user.id INNER JOIN news_categories ON news.category_id = news_categories.id WHERE news.church_id = $church_id AND news.category_id = $category_id AND news.date = '$date' ORDER BY news.date DESC";
              
              foreach ($con->query($sql1) as $row1) {
                $news_cd[] = $row1;
              }

              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => $news_cd));

            }


          }else{

            $sql2 = "SELECT news.id, news.title, CONCAT(user.first_name, ' ', user.last_name) AS autor, news.date, news_categories.name AS category FROM news INNER JOIN user ON news.user_id = user.id INNER JOIN news_categories ON news.category_id = news_categories.id WHERE news.church_id = $church_id AND news.category_id = $category_id ORDER BY news.date DESC";
            
            foreach ($con->query($sql2) as $row2) {
              $news_c[] = $row2;
            }

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => $news_c));

          }


        }else{

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Category does not exist",
                      "status"=>422)));
        }


      }else if($date){

        if (!$valid_date) {

          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid date",
                    "status"=>500)));
        }else{

          $sql3 = "SELECT news.id, news.title, CONCAT(user.first_name, ' ', user.last_name) AS autor, news.date, news_categories.name AS category FROM news INNER JOIN user ON news.user_id = user.id INNER JOIN news_categories ON news.category_id = news_categories.id WHERE news.church_id = $church_id AND news.date = '$date' ORDER BY news.date DESC";
          

          foreach ($con->query($sql3) as $row3) {
            $news_date[] = $row3;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $news_date));

        }

      }else{

        $sql4 = "SELECT news.id, news.title, CONCAT(user.first_name, ' ', user.last_name) AS autor, news.date, news_categories.name AS category FROM news INNER JOIN user ON news.user_id = user.id INNER JOIN news_categories ON news.category_id = news_categories.id WHERE news.church_id = $church_id ORDER BY news.date DESC";
        

        foreach ($con->query($sql4) as $row4) {
          $news_f[] = $row4;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $news_f));

      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/news/create', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $title = $request->getParam('title');
   $description = $request->getParam('description');
   $news_date = $request->getParam('date');
   $tags = $request->getParam('tags');
   $cover_image = $request->getParam('cover_image');
   $category_id = $request->getParam('category_id');
   $status = $request->getParam('status');

   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$news_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $status)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: status",
               "status"=>500)));
   } else if(empty($title)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: title",
               "status"=>500)));
   } else if(empty($description)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: description",
               "status"=>500)));
   } else if(empty($news_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: date",
               "status"=>500)));
   }else if(empty($cover_image)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cover_image",
               "status"=>500)));
   } else if(empty($category_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: category_id",
               "status"=>500)));
   } else if(!$valid_date){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Invalid date",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre1 = $con->prepare("SELECT *
                             FROM news_categories
                             WHERE id = :category_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values1 = array(':category_id' => $category_id);
    $pre1->execute($values1);
    $result1 = $pre1->fetch();

    if ($result1) {

      $final_d = date("Y-m-d H:i:s");
      // $n_date = date("Y-m-d");

      $sql = "INSERT INTO news (`title`, `description`,`date`,`tags`,`cover_image`,`status`,`category_id`,`user_id`,`church_id`,`created_at`,`updated_at`) VALUES (:title,:description,:news_date,:tags,:cover_image,:status,:category_id,:user_id,:church_id,'$final_d','$final_d')";
      
      $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      
      $values = array(
             ':user_id' => $user_id,
             ':church_id' => $church_id,
             ':title' => $title,
             ':description' => $description,
             ':news_date' => $news_date,
             ':tags' => $tags,
             ':cover_image' => $cover_image,
             ':category_id' => $category_id,
             ':status' => $status
             );
      
      $result = $pre->execute($values);
      $id = $con->lastInsertId();

      if($result){
          return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => array('message' => 'Post added successfully', 'id' => $id)));
      }else{   
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"There was a problem, verify your parameters",
                    "status"=>422)));
      }
      

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Category does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->put('/news/edit', function ($request,$response) {

  try{
   $con = $this->db;
   $news_id = $request->getParam('news_id');
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $title = $request->getParam('title');
   $description = $request->getParam('description');
   $news_date = $request->getParam('date');
   $tags = $request->getParam('tags');
   $cover_image = $request->getParam('cover_image');
   $category_id = $request->getParam('category_id');
   $status = $request->getParam('status');

   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$news_date);

   if(empty($news_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: news_id",
               "status"=>500)));
   } else if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $status)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: status",
               "status"=>500)));
   } else if(empty($title)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: title",
               "status"=>500)));
   } else if(empty($description)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: description",
               "status"=>500)));
   } else if(empty($news_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: date",
               "status"=>500)));
   }else if(empty($cover_image)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cover_image",
               "status"=>500)));
   } else if(empty($category_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: category_id",
               "status"=>500)));
   } else if(!$valid_date){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Invalid date",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre_n = $con->prepare("SELECT *
                             FROM news
                             WHERE id = :news_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_n = array(':news_id' => $news_id, ':church_id' => $church_id);
    $pre_n->execute($values_n);
    $result_n = $pre_n->fetch();

    if ($result_n) {
      
      $pre1 = $con->prepare("SELECT *
                               FROM news_categories
                               WHERE id = :category_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values1 = array(':category_id' => $category_id);
      $pre1->execute($values1);
      $result1 = $pre1->fetch();

      if ($result1) {

        $final_d = date("Y-m-d H:i:s");
        // $n_date = date("Y-m-d");

        $pre2 = $con->prepare("UPDATE news SET title = :title,
                               description = :description,
                               `date` = :news_date,
                               tags = :tags,
                               cover_image = :cover_image,
                               status = :status,
                               category_id = :category_id,
                               user_id = :user_id,
                               church_id = :church_id,
                               updated_at = '$final_d'
                               WHERE id = :news_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values2 = array(
          ':user_id' => $user_id,
          ':church_id' => $church_id,
          ':title' => $title,
          ':description' => $description,
          ':news_date' => $news_date,
          ':tags' => $tags,
          ':cover_image' => $cover_image,
          ':category_id' => $category_id,
          ':status' => $status,
          ':news_id' => $news_id
          );

        $result2 = $pre2->execute($values2);

        if($result2){
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => 'New has been saved successfully'));
        }else{   
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Category does not exist",
                    "status"=>422)));
      }


    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"New does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->delete('/news/delete', function ($request,$response) {

  try{
   $con = $this->db;
   $news_id = $request->getParam('news_id');
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');


   if(empty($news_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: news_id",
               "status"=>500)));
   } else if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre_n = $con->prepare("SELECT *
                             FROM news
                             WHERE id = :news_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_n = array(':news_id' => $news_id);
    $pre_n->execute($values_n);
    $result_n = $pre_n->fetch();

    if ($result_n) {

        $pre2 = $con->prepare("DELETE FROM news WHERE `id` = :news_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values2 = array(
          ':news_id' => $news_id
          );

        $result2 = $pre2->execute($values2);

        if($result2){
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => 'New deleted'));
        }else{   
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
        }



    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"New does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->get('/news/categories-list', function ($request,$response) {

  try{
   $con = $this->db;


    $sql = "SELECT id, name FROM news_categories";
    

    foreach ($con->query($sql) as $row) {
      $categories[] = $row;
    }


    return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => $categories));

   }
   catch(\Exception $ex){
     return $response->withJson(array('error' => array(
                  "message"=> $ex->getMessage(),
                  "status"=>422)),422);
 }

});

$app->post('/news/create-category', function ($request,$response) {

  try{
   $con = $this->db;

   $category_name = $request->getParam('category_name');

   if(empty($category_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: category_name",
               "status"=>500)));
   }


   $pre_i = $con->prepare("SELECT *
                            FROM news_categories
                            WHERE name = :category_name", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':category_name' => $category_name);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if (!$result_i) {

      $final_d = date("Y-m-d H:i:s");

      $sql = "INSERT INTO news_categories (`name`,`created_at`,`updated_at`) VALUES (:category_name,'$final_d','$final_d')";
      
      $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      
      $values = array(
             ':category_name' => $category_name
             );
      
      $result = $pre->execute($values);
      $id = $con->lastInsertId();

      if($result){
          return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => array('message' => 'Category added successfully', 'id' => $id)));
      }else{   
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"There was a problem, verify your parameters",
                    "status"=>422)));
      }

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Category name already exists",
                  "status"=>422)));
    }


  }catch(\Exception $ex){
       return $response->withJson(array('error' => array(
                    "message"=> $ex->getMessage(),
                    "status"=>422)),422);
  }

});


/******* News comments ********/

$app->post('/news/add-comment', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $new_id = $request->getParam('new_id');
   $title = $request->getParam('title');
   $comment = $request->getParam('comment');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($new_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: new_id",
               "status"=>500)));
   } else if(empty($title)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: title",
               "status"=>500)));
   }else if(empty($comment)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: comment",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $pre1 = $con->prepare("SELECT *
                             FROM news
                             WHERE id = :new_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values1 = array(':new_id' => $new_id);
    $pre1->execute($values1);
    $result1 = $pre1->fetch();

    if ($result1) {

      $final_title = $result1['title'];

      $final_d = date("Y-m-d H:i:s");
      $comment_date = date("Y-m-d");

      $sql = "INSERT INTO news_comments (`title`,`comment`, `date`,`news_id`,`user_id`,`created_at`,`updated_at`) VALUES (:title,:comment,'$comment_date',:new_id,:user_id,'$final_d','$final_d')";
      
      $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      
      $values = array(
             ':title' => $title,
             ':comment' => $comment,
             ':user_id' => $user_id,
             ':new_id' => $new_id
             );
      
      $result = $pre->execute($values);
      $id = $con->lastInsertId();

      if($result){

          $final_d = date("Y-m-d H:i:s");

          if ($impersonate) {
           
            $roles = getRole($impersonate_role);

            $role_name = $roles['role_name'];
            $role_name_es = $roles['role_name_es'];

            $imperson = " (Impersonate)";
            $imperson_es = " (Impersonado)";

            /*Activity Commented a news*/
            $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " commented new: '" . $final_title . "'";
            $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " comentÃ³ la noticia: '" . $final_title . "'";

            $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_actm = array(
                ':es_message' => $es_message, 
                ':en_message' => $en_message,
                ':id_m' => $impersonate_id,
                ':final_d' => $final_d);

            $result_actm = $pre_actm->execute($values_actm);

          }else{

            /*Activity Commented a news*/
            $en_message = $first_name . " " . $last_name . " commented new: '" . $final_title . "'";
            $es_message = $first_name . " " . $last_name . " comentÃ³ la noticia: '" . $final_title . "'";
          }

          $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act = array(
              ':es_message' => $es_message, 
              ':en_message' => $en_message,
              ':id_m' => $user_id,
              ':final_d' => $final_d);

          $result_act = $pre_act->execute($values_act);

          return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => array('message' => 'Comment added successfully', 'id' => $id)));
      }else{   
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"There was a problem, verify your parameters",
                    "status"=>422)));
      }
      

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"New does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/news/comments-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $new_id = $request->getParam('new_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($new_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: new_id",
               "status"=>500)));
   } 


   $pre_i = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if ($result_i) {

     $pre1 = $con->prepare("SELECT *
                              FROM news
                              WHERE id = :new_id", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values1 = array(':new_id' => $new_id);
     $pre1->execute($values1);
     $result1 = $pre1->fetch();

     if ($result1) {

      $sql2 = "SELECT news_comments.id, news_comments.title,news_comments.comment, CONCAT(user.first_name, ' ', user.last_name) AS autor, user.profile_picture, news_comments.date, news_comments.created_at FROM news_comments INNER JOIN user ON news_comments.user_id = user.id WHERE news_comments.news_id = $new_id ORDER BY news_comments.date DESC";
      
      foreach ($con->query($sql2) as $row2) {
        $comments[] = $row2;
      }

      return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => $comments));
       

     }else{

       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"New does not exist",
                   "status"=>422)));
     }

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "message"=>"User with this role does not exist",
                 "status"=>422)));
   }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/********* DASHBOARD *************/

$app->post('/home', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }

    
    $pre_i = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':user_id' => $user_id, ':role_id' => $role_id,':church_id' => $church_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      $pre = $con->prepare("SELECT CONCAT(user.first_name, ' ', user.last_name) AS full_name, user.email, user.rol AS role, user.is_complete, churches.id AS church_id, churches.name AS church_name, churches.country, churches.state, churches.city, churches.address FROM user INNER JOIN churches ON user.church_id = churches.id WHERE user.id = :user_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(':user_id' => $user_id);
      $pre->execute($values);
      $result = $pre->fetch();

      // Roles
      $user_rol = null;

      if ($result['role'] == '1') {
        $user_rol = 'Senior Pastor';
      } else if ($result['role'] == '2') {
        $user_rol = 'District Pastor';
      } else if ($result['role'] == '3') {
        $user_rol = 'Zone Pastor';
      } else if ($result['role'] == '4') {
        $user_rol = 'Supervisor';
      } else if ($result['role'] == '5') {
        $user_rol = 'Leader';
      } else if ($result['role'] == '6') {
        $user_rol = 'Administrator';
      } else if ($result['role'] == '7') {
        $user_rol = 'Owner';
      }


      $pre2 = $con->prepare("SELECT count(id) AS count FROM groups_cells WHERE church_id = :church_id AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values2 = array(':church_id' => $result['church_id']);
      $pre2->execute($values2);
      $result2 = $pre2->fetch();


      $pre3 = $con->prepare("SELECT count(id) AS members_count FROM members_cells WHERE church_id = :church_id AND role !='1' AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values3 = array(':church_id' => $result['church_id']);
      $pre3->execute($values3);
      $result3 = $pre3->fetch();

      $pre4 = $con->prepare("SELECT count(id) AS guest_count FROM members_cells WHERE church_id = :church_id AND role ='1' AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values4 = array(':church_id' => $result['church_id']);
      $pre4->execute($values4);
      $result4 = $pre4->fetch();


      $sql = "SELECT news.id, news.title, CONCAT(user.first_name, ' ', user.last_name) AS autor, user.profile_picture AS user_picture, news.date, news.description, news.tags, news.cover_image, news_categories.name AS category FROM news INNER JOIN user ON news.user_id = user.id INNER JOIN news_categories ON news.category_id = news_categories.id WHERE news.church_id = $church_id AND news.status = 1 ORDER BY news.date DESC";
      
      $news = null;

      foreach ($con->query($sql) as $row) {
        $news[] = $row;
      }

      /**** REPORTS STADISTICS*****/

      /*actual date*/
      $today = date("Y-m-d");
      $month = date('n');
      $month_t = date('m');
      $year = date ("Y");

      $prev_y = $year -1;

      /*function general dates*/
      $general_d = generalDates($month, $year, $prev_y);

      $initial_quarter = $general_d['initial_quarter'];
      $final_quarter = $general_d['final_quarter'];
      $initial_quarter2 = $general_d['initial_quarter2'];
      $final_quarter2 = $general_d['final_quarter2'];

      /****** obtain weeks *******/
      $week = date('W');
      $week_start = date("Y-m-d", strtotime("{$year}-W{$week}-1")) . " 00:00:00";
      $week_end = date("Y-m-d", strtotime("{$year}-W{$week}-7")) . " 23:59:59";

      $week2 = date("Y-m-d", strtotime('-1 week'));
      $week_start2 = date('Y-m-d', strtotime('monday this week' , strtotime($week2))) . " 00:00:00";
      $week_end2 = date('Y-m-d', strtotime('-1 day' , strtotime($week_start))) . " 23:59:59";

      $week3 = date("Y-m-d", strtotime('-2 week'));
      $week_start3 = date('Y-m-d', strtotime('monday this week' , strtotime($week3))) . " 00:00:00";
      $week_end3 = date('Y-m-d', strtotime('-1 day' , strtotime($week_start2))) . " 23:59:59";

      $week4 = date("Y-m-d", strtotime('-3 week'));
      $week_start4 = date('Y-m-d', strtotime('monday this week' , strtotime($week4))) . " 00:00:00";
      $week_end4 = date('Y-m-d', strtotime('-1 day' , strtotime($week_start3))) . " 23:59:59";

      $week5 = date("Y-m-d", strtotime('-4 week'));
      $week_start5 = date('Y-m-d', strtotime('monday this week' , strtotime($week5))) . " 00:00:00";
      $week_end5 = date('Y-m-d', strtotime('-1 day' , strtotime($week_start4))) . " 23:59:59";

      $week6 = date("Y-m-d", strtotime('-5 week'));
      $week_start6 = date('Y-m-d', strtotime('monday this week' , strtotime($week6))) . " 00:00:00";
      $week_end6 = date('Y-m-d', strtotime('-1 day' , strtotime($week_start5))) . " 23:59:59";

      $week7 = date("Y-m-d", strtotime('-5 week'));
      $week_start7 = date('Y-m-d', strtotime('monday this week' , strtotime($week7))) . " 00:00:00";
      $week_end7 = date('Y-m-d', strtotime('-1 day' , strtotime($week_start6))) . " 23:59:59";


      $sql_cells = $con->prepare("SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) AS actual_week,
                    (SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start2' AND '$week_end2')) AS last_week,
                    (SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start3' AND '$week_end3')) AS third_week,
                    (SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start4' AND '$week_end4')) AS fourth_week,
                    (SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start5' AND '$week_end5')) AS fifth_week,
                    (SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start6' AND '$week_end6')) AS sixth_week,
                    (SELECT IFNULL(SUM(total_member_assistance + total_guest_assistance + total_kids_assistance),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start7' AND '$week_end7')) AS seventh_week
                     FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start' AND '$week_end')",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values5 = array(':church_id' => $result['church_id']);
      $sql_cells->execute($values5);
      $result5 = $sql_cells->fetch();

      /*obtain percentage*/
      if ($result5['last_week'] != '0'){
        $percantage_cells = ($result5['actual_week'] - $result5['last_week']) * 100 / $result5['last_week'];
      }else{
        $percantage_cells = '100';
      }

      $result5['percentage'] = (string)round($percantage_cells);

      /*Church attendance*/

      $sql_church = $con->prepare("SELECT IFNULL(SUM(total_doctrine + total_celebration),0) AS actual_week,
                    (SELECT IFNULL(SUM(total_doctrine + total_celebration),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start2' AND '$week_end2')) AS last_week,
                    (SELECT IFNULL(SUM(total_doctrine + total_celebration),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start3' AND '$week_end3')) AS third_week,
                    (SELECT IFNULL(SUM(total_doctrine + total_celebration),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start4' AND '$week_end4')) AS fourth_week,
                    (SELECT IFNULL(SUM(total_doctrine + total_celebration),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start5' AND '$week_end5')) AS fifth_week,
                    (SELECT IFNULL(SUM(total_doctrine + total_celebration),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start6' AND '$week_end6')) AS sixth_week,
                    (SELECT IFNULL(SUM(total_doctrine + total_celebration),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start7' AND '$week_end7')) AS seventh_week
                     FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start' AND '$week_end')",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values6 = array(':church_id' => $result['church_id']);
      $sql_church->execute($values6);
      $result6 = $sql_church->fetch();

      /*obtain percentage*/
      if ($result6['last_week'] != '0'){
        $percantage_church = ($result6['actual_week'] - $result6['last_week']) * 100 / $result6['last_week'];
      }else{
        $percantage_church = '100';
      }

      $result6['percentage'] = (string)round($percantage_church);

      // $sql_church = $con->prepare("SELECT
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 7 )) AS actual_week,
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) > 7 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 14 )) AS last_week,
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) > 14 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 21 )) AS third_week,
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) > 21 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 28 )) AS fourth_week,
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) > 28 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 35 )) AS fifth_week,
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) > 35 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 42 )) AS sixth_week,
      //                   SUM((SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.report_id = reports.id AND doctrine = 1 and DATEDIFF(CURRENT_DATE, reports.creation_date) > 42 and DATEDIFF(CURRENT_DATE, reports.creation_date) <= 49 )) AS seventh_week
      //                   from groups_cells, reports
      //                   where groups_cells.id = reports.cell_id
      //                   and groups_cells.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      // $values6 = array(':church_id' => $result['church_id']);
      // $sql_church->execute($values6);
      // $result6 = $sql_church->fetch();


      /*Perfomance*/

      $sql_perfom = $con->prepare("SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) AS actual_week,
                    (SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start2' AND '$week_end2')) AS last_week,
                    (SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start3' AND '$week_end3')) AS third_week,
                    (SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start4' AND '$week_end4')) AS fourth_week,
                    (SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start5' AND '$week_end5')) AS fifth_week,
                    (SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start6' AND '$week_end6')) AS sixth_week,
                    (SELECT IFNULL(SUM(total_salvation + total_baptized + total_schedule_visits),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start7' AND '$week_end7')) AS seventh_week
                     FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start' AND '$week_end')",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values7 = array(':church_id' => $result['church_id']);
      $sql_perfom->execute($values7);
      $result7 = $sql_perfom->fetch();

      /*obtain percentage*/
      if ($result7['last_week'] != '0'){
        $percantage_perf = ($result7['actual_week'] - $result7['last_week']) * 100 / $result7['last_week'];
      }else{
        $percantage_perf = '100';
      }

      $result7['percentage'] = (string)round($percantage_perf);


      /*Donations*/

      $sql_donat = $con->prepare("SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) AS actual_week,
                    (SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start2' AND '$week_end2')) AS last_week,
                    (SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start3' AND '$week_end3')) AS third_week,
                    (SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start4' AND '$week_end4')) AS fourth_week,
                    (SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start5' AND '$week_end5')) AS fifth_week,
                    (SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start6' AND '$week_end6')) AS sixth_week,
                    (SELECT IFNULL(SUM(donations_offering + donations_events + donations_transport),0) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start7' AND '$week_end7')) AS seventh_week
                     FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$week_start' AND '$week_end')",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values8 = array(':church_id' => $result['church_id']);
      $sql_donat->execute($values8);
      $result8 = $sql_donat->fetch();

      /*obtain percentage*/
      if ($result8['last_week'] != '0'){
        $percantage_perf = ($result8['actual_week'] - $result8['last_week']) * 100 / $result8['last_week'];
      }else{
        $percantage_perf = '100';
      }

      $result8['percentage'] = (string)round($percantage_perf);

      /*Cells groups*/
      $sql_c = "SELECT groups_cells.id, groups_cells.cell_code,groups_cells.sector_code,groups_cells.zone_code, groups_cells.district_code, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where user.id = groups_cells.leader) as leader, (SELECT user.profile_picture from user where user.id = groups_cells.leader) as profile_picture ,groups_cells.address, groups_cells.city FROM groups_cells WHERE groups_cells.church_id = $church_id AND groups_cells.active = 1";
      
      $cell_g = null;

      foreach ($con->query($sql_c) as $row_g) {
        $cell_g[] = $row_g;
      }


      /*TOP leaders*/

      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, groups_cells.id as cell_id, groups_cells.city FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

      $final_points = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        // obtain overall multiply global

        $cell_id = $row['cell_id'];

        $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_cell = array(':church_id' => $church_id);
        $pre_ac_cell->execute($values_ac_cell);
        $result_ac_cell = $pre_ac_cell->fetch();

        $total_cells = $result_ac_cell['total_cells'];

        // last quarter
        $total_last_cell = $result_ac_cell['last_cells'];

        // obtain advance
        $overall_advance = $total_cells - $total_last_cell;

        // obtain percentage and goal in church_goals
        $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $pre_percen->execute($values_ac_cell);
        $result_percen = $pre_percen->fetch();

        $percentage_gen = $result_percen['percentage'];
        $goal_gen = $result_percen['value'];

        // whole percentage
        $w_percentage = round($percentage_gen * 100);

        // obtain overall of multiply
        $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


        /*obtain cell_attendance global*/

        // obtain adult points

        // actual quarter
        $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_adults = array(':church_id' => $church_id);
        $pre_ac_adults->execute($values_ac_adults);
        $result_ac_adults = $pre_ac_adults->fetch();

        $total_adults = $result_ac_adults['total_adults'];

        // last quarter
        $total_last_adults = $result_ac_adults['last_adults'];

        if ($total_adults == null) {
          $total_adults = '0';
        } else if ($total_last_adults == null) {
          $total_last_adults = '0';
        }

        // obtain advance
        $adults_advance = $total_adults - $total_last_adults;

        // obtain percentage and goal in church_goals
        $percentage_ad = $result_percen['percentage_ad'];
        $goal_ad = $result_percen['goal_ad'];

        // whole percentage
        $w_percentagead = round($percentage_ad * 100);

        // obtain points of adults
        $points_ad = $adults_advance * $w_percentagead / $goal_ad;


        /*now obtain kids points*/

        // actual quarter
        $total_kids2 = $result_ac_adults['total_kids'];

        // last quarter
        $total_last_kids = $result_ac_adults['last_kids'];

        if ($total_kids2 == null) {
          $total_kids2 = '0';
        } else if ($total_last_kids == null) {
          $total_last_kids = '0';
        }

        // obtain advance
        $kids_advance = $total_kids2 - $total_last_kids;

        // obtain percentage and goal in church_goals
        $percentage_kd = $result_percen['percentage_kd'];
        $goal_kd = $result_percen['goal_kd'];

        // whole percentage
        $w_percentagekd = round($percentage_kd * 100);

        // obtain points of kids
        $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

        // FINAL OVERALL CELL ATTENDANCE
        $overall_attend = $points_ad + $points_kd;



        // obtain church_attendance global

        // actual quarter
        $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_church = array(':church_id' => $church_id);
        $pre_ac_church->execute($values_ac_church);
        $result_ac_church = $pre_ac_church->fetch();

        $total_doctrine = $result_ac_church['total_doctrine'];

        // last quarter
        $total_last_church = $result_ac_church['last_church'];

        if ($total_doctrine == null) {
          $total_doctrine = '0';
        } else if ($total_last_church == null) {
          $total_last_church = '0';
        }

        // obtain advance
        $church_advance = $total_doctrine - $total_last_church;

        // obtain percentage and goal in church_goals
        $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $pre_percen_ch->execute($values_ac_church);
        $result_percen_ch = $pre_percen_ch->fetch();

        $percentage_ch = $result_percen_ch['percentage'];
        $goal_ch = $result_percen_ch['value'];

        // whole percentage
        $w_percentagech = round($percentage_ch * 100);

        // obtain overall of church
        $overall_church = $church_advance * $w_percentagech / $goal_ch;


        // obtain salvation global

        // actual quarter
        $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_salv = array(':church_id' => $church_id);
        $pre_ac_salv->execute($values_ac_salv);
        $result_ac_salv = $pre_ac_salv->fetch();

        $total_salvation = $result_ac_salv['total_salvation'];

        // obtain percentage and goal in church_goals
        $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $pre_percen_sv->execute($values_ac_salv);
        $result_percen_sv = $pre_percen_sv->fetch();

        $percentage_sv = $result_percen_sv['percentage'];
        $goal_sv = $result_percen_sv['value'];

        // whole percentage
        $w_percentagesv = round($percentage_sv * 100);

        // obtain points of salvation
        $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


        // obtain baptized global

        // actual quarter
        $total_baptized = $result_ac_salv['total_baptized'];

        // obtain percentage and goal in church_goals
        $percentage_bp = $result_percen_sv['percentage_bp'];
        $goal_bp = $result_percen_sv['goal_bp'];

        // whole percentage
        $w_percentagebp = round($percentage_bp * 100);

        // obtain points of salvation
        $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


        // obtain scheduled global

        // actual quarter
        $total_schedule = $result_ac_salv['total_schedule_visits'];

        // obtain percentage and goal in church_goals
        $percentage_sch = $result_percen_sv['percentage_sch'];
        $goal_sch = $result_percen_sv['goal_sch'];

        // whole percentage
        $w_per_sch = round($percentage_sch * 100);

        // obtain points of schedule
        $points_sche = $total_schedule * $w_per_sch / $goal_sch;

        // FINAL OVERALL PERFOMANCE
        $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

        /*** OVERALL CHURCH GLOBAL ***/
        $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

        $leader_info['points'] = (string)$overall_growth;

        $final_points[] = $leader_info;

      }

      if($final_points != null){

        // order array points
        foreach ($final_points as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $final_points);

      }


      $jsonObject = array(
        "full_name" => $result['full_name'],
        "email" => $result['email'],
        "role" => $result['role'],
        "user_role" => $user_rol,
        "is_complete" => $result['is_complete'],
        "church_name" => $result['church_name'],
        "country" => $result['country'],
        "state" => $result['state'],
        "city" => $result['city'],
        "address" => $result['address'],
        "total_cells_groups" => $result2['count'],
        "total_members" => $result3['members_count'],
        "total_guest" => $result4['guest_count'],
        "cell_attendance" => $result5,
        "church_attendance" => $result6,
        "perfomance" => $result7,
        "donations" => $result8,
        "cells_groups" => $cell_g,
        "news" => $news,
        "top_leaders" => $final_points
      );

        return $response->withStatus(200)
                          ->withHeader('Access-Control-Allow-Origin', '*')
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $jsonObject));

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User with this role does not exist",
                  "status"=>422)));
    }

  

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



$app->post('/edit-profile-general', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $exelerate_id = $request->getParam('exelerate_id');

   /*Admin*/
   $full_name = $request->getParam('full_name');

   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(!$valid_phone){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid phone",
               "status"=>500)));
   } else if(!$valid_email){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid email address",
               "status"=>500)));
   }


   if ($type_user == 'member-group') {

    if(empty($profile_picture)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: profile_picture",
               "status"=>500)));
     } else if(empty($gender)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: gender",
                 "status"=>500)));
     } else if(empty($marital_status)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: marital_status",
                 "status"=>500)));
     } else if($birth_date){

      if(!$valid_birthdate){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid birthdate",
                 "status"=>500)));
      }

     }else if($married_since){

      if(!$valid_married){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid married date",
                 "status"=>500)));
      }

     }

     
      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if ($result_s) {

        if ($marital_status == 'Married') {
          if(empty($married_since)){
               return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: married_since",
                         "status"=>500)));
          }else{
            if(!$valid_married){
             return $response->withStatus(500)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                       "message"=>"You must enter a valid married date",
                       "status"=>500)));
            }
          }
        }else{
          $married_since = null;
        }

        if (empty($exelerate_id)) {

          /*update user info*/
          $pre = $con->prepare("UPDATE user SET first_name = :first_name,
                                 last_name = :last_name,
                                 email = :email,
                                 phone = :phone,
                                 address = :address,
                                 city = :city,
                                 birth_date = :birth_date,
                                 profile_picture= :profile_picture,
                                 gender= :gender,
                                 marital_status= :marital_status,
                                 married_since= :married_since,
                                 is_complete= '1'
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':user_id' => $user_id, 
            ':first_name' => $first_name,
            ':last_name' => $last_name,
            ':email' => $email,
            ':profile_picture' => $profile_picture,
            ':phone' => $phone,
            ':address' => $address,
            ':city' => $city,
            ':birth_date' => $birth_date,
            ':gender' => $gender,
            ':marital_status' => $marital_status,
            ':married_since' => $married_since); 

          $result = $pre->execute($values);

        }else{

          $pre_ex = $con->prepare("SELECT *
                                   FROM user
                                   WHERE exelerate_id = :exelerate_id AND id != :user_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ex = array(':exelerate_id' => $exelerate_id, ':user_id' => $user_id);
          $pre_ex->execute($values_ex);
          $result_ex = $pre_ex->fetch();

          if ($result_ex) {
            
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"Exelerate ID already exists",
                                "status"=>422)));

          }else{

              /*update user info*/
              $pre = $con->prepare("UPDATE user SET first_name = :first_name,
                                     last_name = :last_name,
                                     email = :email,
                                     phone = :phone,
                                     address = :address,
                                     city = :city,
                                     birth_date = :birth_date,
                                     profile_picture= :profile_picture,
                                     gender= :gender,
                                     marital_status= :marital_status,
                                     married_since= :married_since,
                                     exelerate_id= :exelerate_id,
                                     is_complete= '1'
                                     WHERE id = :user_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                ':user_id' => $user_id, 
                ':first_name' => $first_name,
                ':last_name' => $last_name,
                ':email' => $email,
                ':profile_picture' => $profile_picture,
                ':phone' => $phone,
                ':address' => $address,
                ':city' => $city,
                ':birth_date' => $birth_date,
                ':gender' => $gender,
                ':marital_status' => $marital_status,
                ':exelerate_id' => $exelerate_id,
                ':married_since' => $married_since);

                $result = $pre->execute($values);

            }



          }

        if($result){

          $final_d = date("Y-m-d H:i:s");

          /*Activity profile updates*/
          $en_message = $first_name . " " . $last_name . " profile has been updated";
          $es_message = "El perfil de " . $first_name . " " . $last_name . " ha sido actualizado";

          $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_actm = array(
              ':es_message' => $es_message, 
              ':en_message' => $en_message, 
              ':id_m' => $user_id,
              ':final_d' => $final_d);

          $result_actm = $pre_actm->execute($values_actm);

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Your user profile has been saved successfully'));
        }else{   
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"There was a problem, verify your parameters",
                                "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

   } 
   
   else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"type_user does not exist",
                "status"=>422)));
   }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/edit-password-general', function ($request,$response) {

  try{
   
    $con = $this->db;
    $user_id = $request->getParam('user_id');
    $role_id = $request->getParam('role_id');
    $type_user = $request->getParam('type_user');
    $current_password = $request->getParam('current_password');
    $password = $request->getParam('password');

    $valid_pass = preg_match("/^.*(?=.{6,}).*$/", $password);

    if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
     } else if(!preg_match("/^[0-9]+$/i", $role_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: role_id",
                 "status"=>500)));
     } else if(empty($type_user)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: type_user",
                 "status"=>500)));
     } else if(empty($password)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: password",
                  "status"=>500)));
    } else if(!$valid_pass){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Password must contain 6 characters",
                  "status"=>422)));
    }


    if ($type_user == 'member-group') {

      if(empty($current_password)){
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"Missing parameter: current_password",
                      "status"=>500)));
      }

      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if ($result_s) {

        $final_current= md5($current_password);

        $pre_p = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :user_id AND password = :final_current", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_p = array(':user_id' => $user_id, ':final_current' => $final_current);
        $pre_p->execute($values_p);
        $result_p = $pre_p->fetch();

        if ($result_p) {
          
          /*update pass*/
          $pre = $con->prepare("UPDATE user SET password = :password
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':user_id' => $user_id, 
            ':password' => md5($password));

          $result = $pre->execute($values);

          if($result){
            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Your password has been updated successfully'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Current password is incorrect",
                      "status"=>422)));
        }
 
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }
    
    else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"type_user does not exist",
                  "status"=>422)));

    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/edit-steps-general', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $type_user = $request->getParam('type_user');
   $guest_since = $request->getParam('guest_since');
   $member_since = $request->getParam('member_since');
   $steps = $request->getParam('steps');

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
   $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($type_user)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_user",
               "status"=>500)));
   } else if(!$valid_guest){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid guest_since",
                 "status"=>500)));

   }else if(!$valid_member){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid member_since",
                 "status"=>500)));
    }

    $err_name = 0;
    $err_date = 0;
    $err_idp = 0;
    $err_stepid = 0;

    for($i = 0; $i < count($steps); $i++) {

    $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$steps[$i]['step_date']);

    $pre_step = $con->prepare("SELECT *
                             FROM steps
                             WHERE step_id = :step_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_step = array(':step_id' => $steps[$i]['step_id']);
    $pre_step->execute($values_step);
    $result_step = $pre_step->fetch();

      if(empty($steps[$i]['name'])){
        $err_name += 1;
        $err_id = $i;
        $arr[] = $err_id;
      } else if(empty($steps[$i]['step_id'])){
        $err_idp += 1;
        $err_id1 = $i;
        $arr1[] = $err_id1;
      }else if(!$valid_date){
        $err_date += 1;
        $err_id2 = $i;
        $arr2[] = $err_id2;
      } else if(empty($result_step)){
        $err_stepid += 1;
        $err_id3 = $i;
        $arr3[] = $err_id3;
      }

    }

    if($err_name > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: name",
                "err_id"=>$arr,
                "status"=>500)));

    } else if($err_idp > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step_id",
                "err_id"=>$arr1,
                "status"=>500)));

    } else if($err_date > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: step_date",
                "err_id"=>$arr2,
                "status"=>500)));

    } else if($err_stepid > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Step does not exists",
                "err_id"=>$arr3,
                "status"=>500)));

    }


    if ($type_user == 'member-group') {

      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if ($result_s) {

        $pre = $con->prepare("UPDATE user SET guest_since = :guest_since,
                               member_since = :member_since
                               WHERE id = :user_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(
          ':user_id' => $user_id, 
          ':guest_since' => $guest_since,
          ':member_since' => $member_since);

        $result = $pre->execute($values);

        /*STEPS*/

        $pre2 = $con->prepare("DELETE FROM user_steps WHERE `user_id` = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values2 = array(
          ':user_id' => $user_id
          );

        $result2 = $pre2->execute($values2);


        $final_d = date("Y-m-d H:i:s"); 
        for($j = 0; $j < count($steps); $j++) {

          $pre3 = $con->prepare("INSERT INTO user_steps (`user_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:user_id, :name,:step_date,:step_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values3 = array(
            ':user_id' => $user_id,
            ':name' => $steps[$j]['name'],
            ':step_date' => $steps[$j]['step_date'],
            ':step_id' => $steps[$j]['step_id']
            );

          $result3 = $pre3->execute($values3);

        }

        if($result3){
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Your steps has been saved successfully'));
        }else{
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"There was a problem, verify your parameters",
                                "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"type_user does not exist",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/********* SEND INVITATIONS GENERAL *************/

$app->post('/general/send-invitations', function ($request,$response) {

  try{
   
    $con = $this->db;
    $invitations = $request->getParam('invitations');

    /*Impersonate*/
    $impersonate = $request->getParam('impersonate');
    $impersonate_id = $request->getParam('impersonate_id');
    $impersonate_role = $request->getParam('impersonate_role');

    /*Impersonate*/
    if ($impersonate) {
      
      if ($impersonate != '1') {
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Impersonate is not valid",
                  "status"=>500)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: impersonate_role",
                 "status"=>500)));
     }

     $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
     $pre_imper->execute($values_imper);
     $result_imper = $pre_imper->fetch();

     if (empty($result_imper)) {

      return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                        "message"=>"Impersonated user with this role does not exist",
                        "status"=>422)));
     }


     $name_imper = $result_imper['first_name'];
     $last_name_imper = $result_imper['last_name'];

    }

    $err_user = 0;
    $err_role = 0;
    $err_email = 0;
    $err_church = 0;
    $err_group = 0;
    $err_sel_email = 0;
    $err_valid_user = 0;
    $err_valid_new = 0;

    for($i = 0; $i < count($invitations); $i++) {

      $pre = $con->prepare("SELECT *
                            FROM user
                            WHERE email = :email", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values  = array(':email' => $invitations[$i]['email']);
      $pre->execute($values);
      $result = $pre->fetch();

      $pre2 = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values2  = array(':user_id' => $invitations[$i]['user_id'],':role_id' => $invitations[$i]['role_id'],':church_id' => $invitations[$i]['church_id']);
      $pre2->execute($values2);
      $result2 = $pre2->fetch();

      if(empty($invitations[$i]['user_id'])){
        $err_user += 1;
        $err_id = $i;
        $arr[] = $err_id;
      }else if(empty($invitations[$i]['role_id'])){
        $err_role += 1;
        $err_id1 = $i;
        $arr1[] = $err_id1;
      }else if(!preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $invitations[$i]['email'])){
        $err_email += 1;
        $err_id2 = $i;
        $arr2[] = $err_id2;
      }else if(empty($invitations[$i]['church_id'])){
        $err_church += 1;
        $err_id3 = $i;
        $arr3[] = $err_id3;
      } else if(empty($invitations[$i]['group_id'])){
        $err_group += 1;
        $err_id4 = $i;
        $arr4[] = $err_id4;
      }else if($result){
        $err_sel_email += 1;
        $err_id5 = $i;
        $arr5 = null;
        $arr5[] = $err_id5;
      } else if(empty($result2)){
        $err_valid_user += 1;
        $err_id6 = $i;
        $arr6[] = $err_id6;
      } else if($invitations[$i]['new_group'] || $invitations[$i]['new_group'] == '0'){

        if ($invitations[$i]['new_group'] != '1') {
          $err_valid_new += 1;
          $err_id7 = $i;
          $arr7[] = $err_id7;
        }

      }

    }

    if($err_user > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: user_id",
                "err_id"=>$arr,
                "status"=>500)));

    }else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: role_id",
                "err_id"=>$arr1,
                "status"=>500)));

    } else if($err_email > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: email",
                "err_id"=>$arr2,
                "status"=>500)));

    } else if($err_church > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "err_id"=>$arr3,
                "status"=>500)));

    } else if($err_group > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: group_id",
                "err_id"=>$arr4,
                "status"=>500)));

    }else if($err_sel_email > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Email already exists",
                "err_id"=>$arr5,
                "status"=>500)));

    }else if($err_valid_user > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "err_id"=>$arr6,
                "status"=>500)));

    } else if($err_valid_new > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"New group parameter is not valid",
                "err_id"=>$arr7,
                "status"=>500)));

    } 

    else{

      $err_exist_district = 0;
      $err_exist_zone = 0;
      $err_exist_sector = 0;
      $err_exist_cell = 0;
      $err_exist_dcode = 0;
      $err_exist_zcode = 0;
      $err_exist_scode = 0;
      $err_exist_ccode = 0;
      $err_req = 0;

      for($j = 0; $j < count($invitations); $j++) {


        if ($invitations[$j]['role_id'] == '1' || $invitations[$j]['role_id'] == '6' || $invitations[$j]['role_id'] == '7') {

          if (empty($invitations[$j]['new_group'])) {
            
            // Districts
            $pre_dis = $con->prepare("SELECT *
                                  FROM groups_districts
                                  WHERE id = :group_id AND church_id = :church_id AND active = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis  = array(':group_id' => $invitations[$j]['group_id'],':church_id' => $invitations[$j]['church_id']);
            $pre_dis->execute($values_dis);
            $result_dis = $pre_dis->fetch();

            $distp = $result_dis['district_pastor'];

            /*if district_pastor is verified*/
            $pre_dis2 = $con->prepare("SELECT *
                                  FROM user
                                  WHERE id = :distp AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis  = array(':distp' => $distp,':church_id' => $invitations[$j]['church_id']);
            $pre_dis2->execute($values_dis);
            $result_dis2 = $pre_dis2->fetch();

            if ($result_dis['district_pastor'] && $result_dis2) {
                $err_exist_district += 1;
                $err_exist_d = $j;
                $arr_d[] = $err_exist_d;

            }

            /*new group*/
          } else{

            $pre_new = $con->prepare("SELECT *
                                  FROM groups_districts
                                  WHERE district_code = :group_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new  = array(':group_id' => $invitations[$j]['group_id'],':church_id' => $invitations[$j]['church_id']);
            $pre_new->execute($values_new);
            $result_new = $pre_new->fetch();

            if ($result_new) {
              $err_exist_dcode += 1;
              $err_dc = $j;
              $arr_dc[] = $err_dc;
            }

          }
          

        } else if ($invitations[$j]['role_id'] == '2') {

          /*parent_id required*/
          if (empty($invitations[$j]['parent_id'])) {
            $err_req += 1;
            $err_r = $j;
            $arr_req[] = $err_r;  

          }else if (empty($invitations[$j]['new_group'])) {
            /*Zones*/
            $pre_zone = $con->prepare("SELECT *
                                  FROM groups_zones
                                  WHERE id = :group_id AND church_id = :church_id AND active = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zone  = array(':group_id' => $invitations[$j]['group_id'],':church_id' => $invitations[$j]['church_id']);
            $pre_zone->execute($values_zone);
            $result_zone = $pre_zone->fetch();

            $zonep = $result_zone['zone_pastor'];

            /*if zone_pastor is verified*/
            $pre_dis2 = $con->prepare("SELECT *
                                  FROM user
                                  WHERE id = :zonep AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis  = array(':zonep' => $zonep,':church_id' => $invitations[$j]['church_id']);
            $pre_dis2->execute($values_dis);
            $result_dis2 = $pre_dis2->fetch();

            if ($result_zone['zone_pastor'] && $result_dis2) {
                $err_exist_zone += 1;
                $err_exist_z = $j;
                $arr_z[] = $err_exist_z;  

            }

           /*new group*/
          }else{
            $pre_new = $con->prepare("SELECT *
                                  FROM groups_zones
                                  WHERE zone_code = :group_id AND district_id = :parent_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new  = array(':group_id' => $invitations[$j]['group_id'], ':parent_id' => $invitations[$j]['parent_id'], ':church_id' => $invitations[$j]['church_id']);
            $pre_new->execute($values_new);
            $result_new = $pre_new->fetch();

            if ($result_new) {
              $err_exist_zcode += 1;
              $err_zc = $j;
              $arr_zc[] = $err_zc;
            }

          }
          
        } else if ($invitations[$j]['role_id'] == '3') {
          /*Sectors*/

          /*parent_id required*/
          if (empty($invitations[$j]['parent_id'])) {
            $err_req += 1;
            $err_r = $j;
            $arr_req[] = $err_r;  

          } else if (empty($invitations[$j]['new_group'])) {

            $pre_sector = $con->prepare("SELECT *
                                  FROM groups_sectors
                                  WHERE id = :group_id AND church_id = :church_id AND active = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sector  = array(':group_id' => $invitations[$j]['group_id'],':church_id' => $invitations[$j]['church_id']);
            $pre_sector->execute($values_sector);
            $result_sector = $pre_sector->fetch();

            $sectorp = $result_sector['supervisor'];

            /*if supervisor is verified*/
            $pre_dis2 = $con->prepare("SELECT *
                                  FROM user
                                  WHERE id = :sectorp AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis  = array(':sectorp' => $sectorp,':church_id' => $invitations[$j]['church_id']);
            $pre_dis2->execute($values_dis);
            $result_dis2 = $pre_dis2->fetch();

            if ($result_sector['supervisor'] && $result_dis2) {
                $err_exist_sector += 1;
                $err_exist_s = $j;
                $arr_s[] = $err_exist_s;  

            }

           /*new group*/
          }else{
            $pre_new = $con->prepare("SELECT *
                                  FROM groups_sectors
                                  WHERE sector_code = :group_id AND zone_id = :parent_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new  = array(':group_id' => $invitations[$j]['group_id'], ':parent_id' => $invitations[$j]['parent_id'], ':church_id' => $invitations[$j]['church_id']);
            $pre_new->execute($values_new);
            $result_new = $pre_new->fetch();

            if ($result_new) {
              $err_exist_scode += 1;
              $err_sc = $j;
              $arr_sc[] = $err_sc;
            }

          }
          
        } else if ($invitations[$j]['role_id'] == '4') {
          /*Cell groups*/
          
          /*parent_id required*/
          if (empty($invitations[$j]['parent_id'])) {
            $err_req += 1;
            $err_r = $j;
            $arr_req[] = $err_r;  

          }else if (empty($invitations[$j]['new_group'])) {

            $pre_cell = $con->prepare("SELECT *
                                  FROM groups_cells
                                  WHERE id = :group_id AND church_id = :church_id AND active = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_cell  = array(':group_id' => $invitations[$j]['group_id'],':church_id' => $invitations[$j]['church_id']);
            $pre_cell->execute($values_cell);
            $result_cell = $pre_cell->fetch();

            $cellp = $result_cell['leader'];

            /*if leader is verified*/
            $pre_dis2 = $con->prepare("SELECT *
                                  FROM user
                                  WHERE id = :cellp AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis  = array(':cellp' => $cellp,':church_id' => $invitations[$j]['church_id']);
            $pre_dis2->execute($values_dis);
            $result_dis2 = $pre_dis2->fetch();

            if ($result_cell['leader'] && $result_dis2) {
                $err_exist_cell += 1;
                $err_exist_c = $j;
                $arr_c[] = $err_exist_c;  

            }

            /*new group*/
          } else{
            $pre_new = $con->prepare("SELECT *
                                  FROM groups_cells
                                  WHERE cell_code = :group_id AND sector_id = :parent_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new  = array(':group_id' => $invitations[$j]['group_id'], ':parent_id' => $invitations[$j]['parent_id'], ':church_id' => $invitations[$j]['church_id']);
            $pre_new->execute($values_new);
            $result_new = $pre_new->fetch();

            if ($result_new) {
              $err_exist_ccode += 1;
              $err_co = $j;
              $arr_co[] = $err_co;
            }

          }

        } /*end role supervisor*/
        else{

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
        }


      } /*end second for*/

      if($err_exist_district > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"This District has a District Pastor",
                  "err_id"=>$arr_d,
                  "status"=>500)));

      } else if($err_exist_zone > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"This Zone has a Zone Pastor",
                  "err_id"=>$arr_z,
                  "status"=>500)));

      } else if($err_exist_sector > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"This Sector has a Supervisor",
                  "err_id"=>$arr_s,
                  "status"=>500)));

      } else if($err_exist_cell > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"This Cell has a Leader",
                  "err_id"=>$arr_c,
                  "status"=>500)));

      } else if($err_req > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Parent id is required",
                  "err_id"=>$arr_req,
                  "status"=>500)));

      }else if($err_exist_dcode > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"New district code already exists",
                  "err_id"=>$arr_dc,
                  "status"=>500)));

      }else if($err_exist_zcode > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"New zone code already exists",
                  "err_id"=>$arr_zc,
                  "status"=>500)));

      }else if($err_exist_scode > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"New sector code already exists",
                  "err_id"=>$arr_sc,
                  "status"=>500)));

      }else if($err_exist_ccode > 0){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"New cell code already exists",
                  "err_id"=>$arr_co,
                  "status"=>500)));

      } 

      else{
        
        for($k = 0; $k < count($invitations); $k++) {

          $pre_principal_user = $con->prepare("SELECT *
                                FROM user
                                WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_principal  = array(':user_id' => $invitations[$k]['user_id'],':role_id' => $invitations[$k]['role_id'],':church_id' => $invitations[$k]['church_id']);
          $pre_principal_user->execute($values_principal);
          $result_principal = $pre_principal_user->fetch();

          $email_principal_user = $result_principal['email'];


          if ($invitations[$k]['role_id'] == '1' || $invitations[$k]['role_id'] == '6' || $invitations[$k]['role_id'] == '7') {

            if (empty($invitations[$k]['new_group'])) {
              // Obtain actual user inactive
              $pre_ac = $con->prepare("SELECT *
                                    FROM groups_districts
                                    WHERE id = :group_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ac  = array(':group_id' => $invitations[$k]['group_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_ac->execute($values_ac);
              $result_ac = $pre_ac->fetch();

              $distac = $result_ac['district_pastor'];
              $dis_code = $result_ac['district_code'];

            }

            // Districts
            $token_d = password_hash(microtime(), PASSWORD_BCRYPT);
            $token_d = substr($token_d, 7, strlen($token_d));
            $token_d = preg_replace("#[^a-z0-9._]#i", "", $token_d);

            $code_d = bin2hex(openssl_random_pseudo_bytes(3));

            $date_d = date("Y-m-d H:i:s"); 
            $date_g = date("Y-m-d"); 


            $mail = new PHPMailer;
            //Enable SMTP debugging. 
            // $mail->SMTPDebug = 3;                               
            //Set PHPMailer to use SMTP.
            $mail->isSMTP();            
            //Set SMTP host name                          
            $mail->Host = "smtp.mailtrap.io";
            //Set this to true if SMTP host requires authentication to send email
            $mail->SMTPAuth = true;                          
            //Provide username and password     
            $mail->Username = "1c2d44422b38c1";                 
            $mail->Password = "a0d4af94adb609";                           
            //If SMTP requires TLS encryption then set it
            $mail->SMTPSecure = "tls";                           
            //Set TCP port to connect to 
            $mail->Port = 25;                                   

            $mail->CharSet = "UTF-8";
            $mail->From = $email_principal_user;
            $mail->FromName = "CÃ©lulas";

            $mail->addAddress($invitations[$k]['email']);

            $mail->isHTML(true);

            $mail->Subject = "Invitation District Pastor";
            $mail->Body = "<p>You have been invited to be part of C+ iRest as a district pastor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d</a></p>";
            $mail->AltBody = "Invitation District Pastor";

            // $mail->send();

            if(!$mail->send()) {

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Message could not be sent.",
                        "Mailer Error:"=>$mail->ErrorInfo,
                        "status"=>422)));
            } else {

              $email_d = $invitations[$k]['email'];
              $church_d = $invitations[$k]['church_id'];

              /*exelerate_id*/
              $exe = rand(10000, 99999);

              $pre_dis2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_d, '$token_d', NULL, NULL, :email_d, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'2','$exe', '$code_d', '0' ,'0', '1' , '', '', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis2 = array(
                ':email_d' => $email_d,
                ':church_d' => $church_d
              );

              $result_dis2 = $pre_dis2->execute($values_dis2);
              $id_d = $con->lastInsertId();


              /*if empty new_group*/
              if (empty($invitations[$j]['new_group'])) {

                /*Update new district_pastor*/

                $district_id = $invitations[$k]['group_id'];

                $pre_dis3 = $con->prepare("UPDATE groups_districts SET district_pastor = :id_d, active = '1', is_complete = '1' WHERE id = :district_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dis3 = array(
                  ':district_id' => $district_id,
                  ':id_d' => $id_d
                  );

                $result_dis3 = $pre_dis3->execute($values_dis3);

                /*Delete old user if exist*/
                $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :distac", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':distac' => $distac
                  );

                $result2 = $pre2->execute($values2);

                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_d, :district_id, NULL, NULL, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_d' => $id_d,
                  ':district_id' => $district_id
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A District Pastor was added (Senior Pastor / Admin)
                $en_disp = "D" . $dis_code . " has a new district pastor";

                $es_disp = "D" . $dis_code . " tiene un nuevo pastor de distrito";

                $rec_disp = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_disp, :en_disp,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_disp = array(
                    ':en_disp' => $en_disp,
                    ':es_disp' => $es_disp,
                    ':church_id' => $church_d,
                    ':date_d' => $date_d);

                $result_disp = $rec_disp->execute($val_rec_disp);

                /*new group*/
              }else{

                $district_id = $invitations[$k]['group_id'];

                $pre_new = $con->prepare("INSERT INTO groups_districts (`district_code`, `church_id`, `district_pastor`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:district_id, :church_d, :id_d, NULL, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_new = array(
                  ':district_id' => $district_id,
                  ':church_d' => $church_d,
                  ':id_d' => $id_d
                );

                $result_new = $pre_new->execute($values_new);
                $new_gr = $con->lastInsertId();


                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_d, :new_gr, NULL, NULL, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_d' => $id_d,
                  ':new_gr' => $new_gr
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A new District was added (Senior Pastor / Admin)
                $en_disn = "New district D" . $district_id . "has been added";

                $es_disn = "Nuevo distrito D" . $district_id . "ha sido agregado";

                $rec_disn = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_disn, :en_disn,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_disn = array(
                    ':en_disn' => $en_disn,
                    ':es_disn' => $es_disn,
                    ':church_id' => $church_d,
                    ':date_d' => $date_d);

                $result_disn = $rec_disn->execute($val_rec_disn);

                // Record A District Pastor was added (Senior Pastor / Admin)
                $en_disp = "D" . $district_id . " has a new district pastor";

                $es_disp = "D" . $district_id . " tiene un nuevo pastor de distrito";

                $rec_disp = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_disp, :en_disp,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_disp = array(
                    ':en_disp' => $en_disp,
                    ':es_disp' => $es_disp,
                    ':church_id' => $church_d,
                    ':date_d' => $date_d);

                $result_disp = $rec_disp->execute($val_rec_disp);


              }


              if ($result_dis3 || $result_new) {
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_d, 'email' => $email_d)));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }

            }


          } else if ($invitations[$k]['role_id'] == '2') {


            if (empty($invitations[$k]['new_group'])) {
              // Obtain actual user inactive
              $pre_ac = $con->prepare("SELECT *
                                    FROM groups_zones
                                    WHERE id = :group_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ac  = array(':group_id' => $invitations[$k]['group_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_ac->execute($values_ac);
              $result_ac = $pre_ac->fetch();

              $distac = $result_ac['zone_pastor'];
              $district_f = $result_ac['district_id'];
              $zone_codef = $result_ac['zone_code'];
              $district_codef = $result_ac['district_code'];
            }

            /*Zones*/

            $token_z = password_hash(microtime(), PASSWORD_BCRYPT);
            $token_z = substr($token_z, 7, strlen($token_z));
            $token_z = preg_replace("#[^a-z0-9._]#i", "", $token_z);

            $code_z = bin2hex(openssl_random_pseudo_bytes(3));

            $date_z = date("Y-m-d H:i:s"); 

            $date_g = date("Y-m-d");

            $mail_z = new PHPMailer;
            //Enable SMTP debugging. 
            // $mail_z->SMTPDebug = 3;                               
            //Set PHPMailer to use SMTP.
            $mail_z->isSMTP();            
            //Set SMTP host name                          
            $mail_z->Host = "smtp.mailtrap.io";
            //Set this to true if SMTP host requires authentication to send email
            $mail_z->SMTPAuth = true;                          
            //Provide username and password     
            $mail_z->Username = "1c2d44422b38c1";                 
            $mail_z->Password = "a0d4af94adb609";                           
            //If SMTP requires TLS encryption then set it
            $mail_z->SMTPSecure = "tls";                           
            //Set TCP port to connect to 
            $mail_z->Port = 25;                                   

            $mail_z->CharSet = "UTF-8";
            $mail_z->From = $email_principal_user;
            $mail_z->FromName = "CÃ©lulas";

            $mail_z->addAddress($invitations[$k]['email']);

            $mail_z->isHTML(true);

            $mail_z->Subject = "Invitation Zone Pastor";
            $mail_z->Body = "<p>You have been invited to be part of C+ iRest as a zone pastor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_z' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_z</a></p>";
            $mail_z->AltBody = "Invitation Zone Pastor";

            // $mail_z->send();

            if(!$mail_z->send()) {

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Message could not be sent.",
                        "Mailer Error:"=>$mail_z->ErrorInfo,
                        "status"=>422)));
            } 
            else {

              $email_z = $invitations[$k]['email'];
              $church_z = $invitations[$k]['church_id'];

              $final_user = $invitations[$k]['user_id'];

              /*exelerate_id*/
              $exe = rand(10000, 99999);

              $pre_zone2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_z, '$token_z', NULL, NULL, :email_z, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'3','$exe', '$code_z', '0' ,'0', '1' , '', '', '$date_z', '$date_z')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zone2 = array(
                ':email_z' => $email_z,
                ':church_z' => $church_z
                );

              $result_zone2 = $pre_zone2->execute($values_zone2);
              $id_z = $con->lastInsertId();


              /*Obtain name of owner transfer*/
              $pre_name = $con->prepare("SELECT *
                                    FROM user
                                    WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_name  = array(':user_id' => $invitations[$k]['user_id'],':role_id' => $invitations[$k]['role_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_name->execute($values_name);
              $result_name = $pre_name->fetch();

              $first_name = $result_name['first_name'];
              $last_name = $result_name['last_name'];


              if (empty($invitations[$k]['new_group'])) {

                /*Update new zone_pastor*/

                $zone_id = $invitations[$k]['group_id'];

                $pre_zone3 = $con->prepare("UPDATE groups_zones SET zone_pastor = :id_z, active = '1', is_complete = '1' WHERE id = :zone_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zone3 = array(
                  ':zone_id' => $zone_id,
                  ':id_z' => $id_z
                  );

                $result_zone3 = $pre_zone3->execute($values_zone3);

                /*Delete old user if exist*/
                $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :distac", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':distac' => $distac
                  );

                $result2 = $pre2->execute($values2);

                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_z, :district_f, :zone_id, NULL, NULL, '$date_z', '$date_z')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_z' => $id_z,
                  ':zone_id' => $zone_id,
                  ':district_f' => $district_f
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A Zone Pastor was added (Senior Pastor / Admin)
                $en_zonep = "D" . $district_codef . " Z" . $zone_codef . " has a new zone pastor";

                $es_zonep = "D" . $district_codef . " Z" . $zone_codef . " tiene un nuevo pastor de zona";

                $rec_zonep = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonep,NULL,NULL,NULL,NULL,:church_id,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_zonep = array(
                    ':en_zonep' => $en_zonep,
                    ':es_zonep' => $es_zonep,
                    ':church_id' => $church_z,
                    ':date_z' => $date_z);

                $result_zonep = $rec_zonep->execute($val_rec_zonep);

                // Record A Zone Pastor was added (District Pastor)
                $rec_zonep2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonep,:district_f,NULL,NULL,NULL,NULL,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_zonep2 = array(
                    ':en_zonep' => $en_zonep,
                    ':es_zonep' => $es_zonep,
                    ':district_f' => $district_f,
                    ':date_z' => $date_z);

                $result_zonep2 = $rec_zonep2->execute($val_rec_zonep2);


                /*new group*/
              }else{

                $zone_id = $invitations[$k]['group_id'];

                // obatin district_code
                $pre_dco = $con->prepare("SELECT district_code
                                      FROM groups_districts
                                      WHERE id = :parent_id AND church_id = :church_id", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dco  = array(':parent_id' => $invitations[$k]['parent_id'],':church_id' => $invitations[$k]['church_id']);
                $pre_dco->execute($values_dco);
                $result_dco = $pre_dco->fetch();

                $final_dco = $result_dco['district_code'];


                $pre_new = $con->prepare("INSERT INTO groups_zones (`zone_code`, `church_id`, `district_code`, `district_id`, `zone_pastor`, `start_date`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:zone_id, :church_z, :final_dco, :parent_id, :id_z, '$date_g' , NULL, '1', '1', '$date_z', '$date_z')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_new = array(
                  ':zone_id' => $zone_id,
                  ':church_z' => $church_z,
                  ':final_dco' => $final_dco,
                  ':parent_id' => $invitations[$k]['parent_id'],
                  ':id_z' => $id_z
                  );

                $result_new = $pre_new->execute($values_new);
                $new_gr = $con->lastInsertId();


                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_z, :parent_id, :new_gr, NULL, NULL, '$date_z', '$date_z')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_z' => $id_z,
                  ':new_gr' => $new_gr,
                  ':parent_id' => $invitations[$k]['parent_id']
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A new Zone was added (Senior Pastor / Admin)
                $en_zonen = "New zone D" . $final_dco . " Z" . $zone_id . " has been added";

                $es_zonep = "Nueva zona D" . $final_dco . " Z" . $zone_id . " ha sido agregado";

                $rec_zonen = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonen,NULL,NULL,NULL,NULL,:church_id,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_zonen = array(
                    ':en_zonen' => $en_zonen,
                    ':es_zonep' => $es_zonep,
                    ':church_id' => $church_z,
                    ':date_z' => $date_z);

                $result_zonen = $rec_zonen->execute($val_rec_zonen);

                // Record A new Zone was added (District Pastor)
                $rec_zonen2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonen,:parent_id,NULL,NULL,NULL,NULL,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_zonen2 = array(
                    ':en_zonen' => $en_zonen,
                    ':es_zonep' => $es_zonep,
                    ':parent_id' => $parent_id,
                    ':date_z' => $date_z);

                $result_zonen2 = $rec_zonen2->execute($val_rec_zonen2);


                // Record A Zone Pastor was added (Senior Pastor / Admin)
                $en_zonep = "D" . $final_dco . " Z" . $zone_id . " has a new zone pastor";

                $es_zonep = "D" . $final_dco . " Z" . $zone_id . " tiene un nuevo pastor de zona";

                $rec_zonep = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonep,NULL,NULL,NULL,NULL,:church_id,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_zonep = array(
                    ':en_zonep' => $en_zonep,
                    ':es_zonep' => $es_zonep,
                    ':church_id' => $church_z,
                    ':date_z' => $date_z);

                $result_zonep = $rec_zonep->execute($val_rec_zonep);

                // Record A Zone Pastor was added (District Pastor)
                $rec_zonep2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonep,:parent_id,NULL,NULL,NULL,NULL,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_zonep2 = array(
                    ':en_zonep' => $en_zonep,
                    ':es_zonep' => $es_zonep,
                    ':parent_id' => $parent_id,
                    ':date_z' => $date_z);

                $result_zonep2 = $rec_zonep2->execute($val_rec_zonep2);

              }

              if ($result_zone3 || $result_new) {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Send a Zone Pastor invitation (District Pastor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " send a zone pastor invitation to " . $email_z;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " enviÃ³ una invitaciÃ³n de pastor de zona a " . $email_z;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':final_user' => $impersonate_id,
                      ':date_z' => $date_z);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Send a Zone Pastor invitation (District Pastor)*/
                  $en_message = $first_name . " " . $last_name . " send a zone pastor invitation to " . $email_z;
                  $es_message = $first_name . " " . $last_name . " enviÃ³ una invitaciÃ³n de pastor de zona a " . $email_z;
                }

                /*Activity Send a Zone Pastor invitation (District Pastor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':final_user' => $final_user,
                    ':date_z' => $date_z);

                $result_act = $pre_act->execute($values_act);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_z, 'email' => $email_z)));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }

            }

            
          } else if ($invitations[$k]['role_id'] == '3') {

            if (empty($invitations[$k]['new_group'])) {
              // Obtain actual user inactive
              $pre_ac = $con->prepare("SELECT *
                                    FROM groups_sectors
                                    WHERE id = :group_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ac  = array(':group_id' => $invitations[$k]['group_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_ac->execute($values_ac);
              $result_ac = $pre_ac->fetch();

              $distac = $result_ac['supervisor'];
              $zone_f = $result_ac['zone_id'];
              $dis_codef = $result_ac['district_code'];
              $zone_codef = $result_ac['zone_code'];
              $sector_codef = $result_ac['sector_code'];

              /*obtain district*/
              $pre_zo = $con->prepare("SELECT *
                                    FROM groups_zones
                                    WHERE id = :zone_f AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zo  = array(':zone_f' => $zone_f,':church_id' => $invitations[$k]['church_id']);
              $pre_zo->execute($values_zo);
              $result_zo = $pre_zo->fetch();

              $district_f = $result_zo['district_id'];

            }


            /*Sectors*/

            $token_s = password_hash(microtime(), PASSWORD_BCRYPT);
            $token_s = substr($token_s, 7, strlen($token_s));
            $token_s = preg_replace("#[^a-z0-9._]#i", "", $token_s);

            $code_s = bin2hex(openssl_random_pseudo_bytes(3));

            $date_s = date("Y-m-d H:i:s"); 

            $date_g = date("Y-m-d");


            $mail_s = new PHPMailer;
            //Enable SMTP debugging. 
            // $mail_s->SMTPDebug = 3;                               
            //Set PHPMailer to use SMTP.
            $mail_s->isSMTP();            
            //Set SMTP host name                          
            $mail_s->Host = "smtp.mailtrap.io";
            //Set this to true if SMTP host requires authentication to send email
            $mail_s->SMTPAuth = true;                          
            //Provide username and password     
            $mail_s->Username = "1c2d44422b38c1";                 
            $mail_s->Password = "a0d4af94adb609";                           
            //If SMTP requires TLS encryption then set it
            $mail_s->SMTPSecure = "tls";                           
            //Set TCP port to connect to 
            $mail_s->Port = 25;                                   

            $mail_s->CharSet = "UTF-8";
            $mail_s->From = $email_principal_user;
            $mail_s->FromName = "CÃ©lulas";

            $mail_s->addAddress($invitations[$k]['email']);

            $mail_s->isHTML(true);

            $mail_s->Subject = "Invitation Supervisor";
            $mail_s->Body = "<p>You have been invited to be part of C+ iRest as a supervisor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_s' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_s</a></p>";
            $mail_s->AltBody = "Invitation Supervisor";

            // $mail_s->send();

            if(!$mail_s->send()) {

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Message could not be sent.",
                        "Mailer Error:"=>$mail_s->ErrorInfo,
                        "status"=>422)));
            } else {

              $email_s = $invitations[$k]['email'];
              $church_s = $invitations[$k]['church_id'];

              $final_user = $invitations[$k]['user_id'];

              /*exelerate_id*/
              $exe = rand(10000, 99999);

              $pre_sector2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_s, '$token_s', NULL, NULL, :email_s, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'4','$exe', '$code_s', '0' ,'0', '1' , '', '', '$date_s', '$date_s')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_sector2 = array(
                ':email_s' => $email_s,
                ':church_s' => $church_s
                );

              $result_sector2 = $pre_sector2->execute($values_sector2);
              $id_s = $con->lastInsertId();

              /*Obtain name of owner transfer*/
              $pre_name = $con->prepare("SELECT *
                                    FROM user
                                    WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_name  = array(':user_id' => $invitations[$k]['user_id'],':role_id' => $invitations[$k]['role_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_name->execute($values_name);
              $result_name = $pre_name->fetch();

              $first_name = $result_name['first_name'];
              $last_name = $result_name['last_name'];

              /*if empty new_group*/
              if (empty($invitations[$k]['new_group'])) {

                /*Update*/

                $sector_id = $invitations[$k]['group_id'];

                $pre_sector3 = $con->prepare("UPDATE groups_sectors SET supervisor = :id_s, active = '1', is_complete = '1' WHERE id = :sector_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_sector3 = array(
                  ':sector_id' => $sector_id,
                  ':id_s' => $id_s
                  );

                $result_sector3 = $pre_sector3->execute($values_sector3);

                /*Delete old user if exist*/
                $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :distac", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':distac' => $distac
                  );

                $result2 = $pre2->execute($values2);

                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_s, :district_f, :zone_f, :sector_id, NULL, '$date_s', '$date_s')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_s' => $id_s,
                  ':sector_id' => $sector_id,
                  ':zone_f' => $zone_f,
                  ':district_f' => $district_f
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A Supervisor was added (Senior Pastor / Admin)
                $en_sectorp = "D" . $dis_codef . " Z" . $zone_codef . " S" . $sector_codef . " has a new supervisor";

                $es_sectorp = "D" . $dis_codef . " Z" . $zone_codef . " S" . $sector_codef . " tiene un nuevo supervisor";

                $sectorp = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorp, :en_sectorp,NULL,NULL,NULL,NULL,:church_id,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorp = array(
                    ':en_sectorp' => $en_sectorp,
                    ':es_sectorp' => $es_sectorp,
                    ':church_id' => $church_s,
                    ':date_s' => $date_s);

                $result_sectorp = $sectorp->execute($val_sectorp);

                // Record A Supervisor was added (District Pastor)

                $sectorp2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorp, :en_sectorp,:district_f,NULL,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorp2 = array(
                    ':en_sectorp' => $en_sectorp,
                    ':es_sectorp' => $es_sectorp,
                    ':district_f' => $district_f,
                    ':date_s' => $date_s);

                $result_sectorp2 = $sectorp2->execute($val_sectorp2);

                // Record A Supervisor was added (Zone Pastor)
                $sectorp3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorp, :en_sectorp,NULL,:zone_f,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorp3 = array(
                    ':en_sectorp' => $en_sectorp,
                    ':es_sectorp' => $es_sectorp,
                    ':zone_f' => $zone_f,
                    ':date_s' => $date_s);

                $result_sectorp3 = $sectorp3->execute($val_sectorp3);


                /*new_group*/
              }else{

                $sector_id = $invitations[$k]['group_id'];

                /*obatin zone_code*/
                $pre_dco = $con->prepare("SELECT *
                                      FROM groups_zones
                                      WHERE id = :parent_id AND church_id = :church_id", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dco  = array(':parent_id' => $invitations[$k]['parent_id'],':church_id' => $invitations[$k]['church_id']);
                $pre_dco->execute($values_dco);
                $result_dco = $pre_dco->fetch();

                $final_zco = $result_dco['zone_code'];
                $final_dco = $result_dco['district_code'];
                $final_did = $result_dco['district_id'];


                $pre_new = $con->prepare("INSERT INTO groups_sectors (`sector_code`, `church_id`, `zone_code`, `district_code`, `zone_id`, `supervisor`, `start_date`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:sector_id, :church_s, :final_zco, :final_dco, :parent_id, :id_s, '$date_g' , NULL, '1', '1', '$date_s', '$date_s')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_new = array(
                  ':sector_id' => $sector_id,
                  ':church_s' => $church_s,
                  ':final_zco' => $final_zco,
                  ':parent_id' => $invitations[$k]['parent_id'],
                  ':final_dco' => $final_dco,
                  ':id_s' => $id_s
                  );

                $result_new = $pre_new->execute($values_new);
                $new_gr = $con->lastInsertId();

                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_s, :final_did, :parent_id, :new_gr, NULL, '$date_s', '$date_s')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_s' => $id_s,
                  ':new_gr' => $new_gr,
                  ':parent_id' => $invitations[$k]['parent_id'],
                  ':final_did' => $final_did
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A Sector was added (Senior Pastor / Admin)
                $en_sectorn = "New sector D" . $final_dco . " Z" . $final_zco . " S" . $sector_id . " has been added";

                $es_sectorn = "Nuevo sector D" . $final_dco . " Z" . $final_zco . " S" . $sector_id . " ha sido agregado";

                $sectorn = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorn, :en_sectorn,NULL,NULL,NULL,NULL,:church_id,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorn = array(
                    ':en_sectorn' => $en_sectorn,
                    ':es_sectorn' => $es_sectorn,
                    ':church_id' => $church_s,
                    ':date_s' => $date_s);

                $result_sectorn = $sectorn->execute($val_sectorn);

                // Record A Sector was added (District Pastor)
                $sectorn2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorn, :en_sectorn,:final_did,NULL,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorn2 = array(
                    ':en_sectorn' => $en_sectorn,
                    ':es_sectorn' => $es_sectorn,
                    ':final_did' => $final_did,
                    ':date_s' => $date_s);

                $result_sectorn2 = $sectorn2->execute($val_sectorn2);

                // Record A Sector was added (Zone Pastor)
                $sectorn3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorn, :en_sectorn,NULL,:parent_id,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorn3 = array(
                    ':en_sectorn' => $en_sectorn,
                    ':es_sectorn' => $es_sectorn,
                    ':parent_id' => $parent_id,
                    ':date_s' => $date_s);

                $result_sectorn3 = $sectorn3->execute($val_sectorn3);


                // Record A Supervisor was added (Senior Pastor / Admin)
                $en_sectorp = "D" . $final_dco . " Z" . $final_zco . " S" . $sector_id . " has a new supervisor";

                $es_sectorp = "D" . $final_dco . " Z" . $final_zco . " S" . $sector_id . " tiene un nuevo supervisor";

                $sectorp = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorp, :en_sectorp,NULL,NULL,NULL,NULL,:church_id,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorp = array(
                    ':en_sectorp' => $en_sectorp,
                    ':es_sectorp' => $es_sectorp,
                    ':church_id' => $church_s,
                    ':date_s' => $date_s);

                $result_sectorp = $sectorp->execute($val_sectorp);

                // Record A Supervisor was added (District Pastor)
                $sectorp2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorp, :en_sectorp,:final_did,NULL,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorp2 = array(
                    ':en_sectorp' => $en_sectorp,
                    ':es_sectorp' => $es_sectorp,
                    ':final_did' => $final_did,
                    ':date_s' => $date_s);

                $result_sectorp2 = $sectorp2->execute($val_sectorp2);

                // Record A Supervisor was added (Zone Pastor)
                $sectorp2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorp, :en_sectorp,NULL,:parent_id,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_sectorp2 = array(
                    ':en_sectorp' => $en_sectorp,
                    ':es_sectorp' => $es_sectorp,
                    ':parent_id' => $parent_id,
                    ':date_s' => $date_s);

                $result_sectorp2 = $sectorp2->execute($val_sectorp2);

              }


              if ($result_sector3 || $result_new) {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Send a supervisor invitation (Zone Pastor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " send a supervisor invitation to " . $email_s;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " enviÃ³ una invitaciÃ³n de supervisor a " . $email_s;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':final_user' => $impersonate_id,
                      ':date_s' => $date_s);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Send a supervisor invitation (Zone Pastor)*/
                  $en_message = $first_name . " " . $last_name . " send a supervisor invitation to " . $email_s;
                  $es_message = $first_name . " " . $last_name . " enviÃ³ una invitaciÃ³n de supervisor a " . $email_s;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':final_user' => $final_user,
                    ':date_s' => $date_s);

                $result_act = $pre_act->execute($values_act);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_s, 'email' => $email_s)));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }

            }

            
          } else if ($invitations[$k]['role_id'] == '4') {

            if (empty($invitations[$k]['new_group'])) {
              // Obtain actual user inactive
              $pre_ac = $con->prepare("SELECT *
                                    FROM groups_cells
                                    WHERE id = :group_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ac  = array(':group_id' => $invitations[$k]['group_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_ac->execute($values_ac);
              $result_ac = $pre_ac->fetch();

              $distac = $result_ac['leader'];
              $sector_f = $result_ac['sector_id'];
              $dis_codef = $result_ac['district_code'];
              $zone_codef = $result_ac['zone_code'];
              $sector_codef = $result_ac['sector_code'];
              $cell_codef = $result_ac['cell_code'];

              /*obtain zone*/
              $pre_zo = $con->prepare("SELECT *
                                    FROM groups_sectors
                                    WHERE id = :sector_f AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zo  = array(':sector_f' => $sector_f,':church_id' => $invitations[$k]['church_id']);
              $pre_zo->execute($values_zo);
              $result_zo = $pre_zo->fetch();

              $zone_f = $result_zo['zone_id'];

              /*obtain district*/
              $pre_zo = $con->prepare("SELECT *
                                    FROM groups_zones
                                    WHERE id = :zone_f AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zo  = array(':zone_f' => $zone_f,':church_id' => $invitations[$k]['church_id']);
              $pre_zo->execute($values_zo);
              $result_zo = $pre_zo->fetch();

              $district_f = $result_zo['district_id'];

            }


            /*Cell groups*/

            $token_c = password_hash(microtime(), PASSWORD_BCRYPT);
            $token_c = substr($token_c, 7, strlen($token_c));
            $token_c = preg_replace("#[^a-z0-9._]#i", "", $token_c);

            $code_c = bin2hex(openssl_random_pseudo_bytes(3));

            $date_c = date("Y-m-d H:i:s"); 

            $date_g = date("Y-m-d");


            $mail_c = new PHPMailer;
            //Enable SMTP debugging. 
            // $mail_c->SMTPDebug = 3;                               
            //Set PHPMailer to use SMTP.
            $mail_c->isSMTP();            
            //Set SMTP host name                          
            $mail_c->Host = "smtp.mailtrap.io";
            //Set this to true if SMTP host requires authentication to send email
            $mail_c->SMTPAuth = true;                          
            //Provide username and password     
            $mail_c->Username = "1c2d44422b38c1";                 
            $mail_c->Password = "a0d4af94adb609";                           
            //If SMTP requires TLS encryption then set it
            $mail_c->SMTPSecure = "tls";                           
            //Set TCP port to connect to 
            $mail_c->Port = 25;                                   

            $mail_c->CharSet = "UTF-8";
            $mail_c->From = $email_principal_user;
            $mail_c->FromName = "CÃ©lulas";

            $mail_c->addAddress($invitations[$k]['email']);

            $mail_c->isHTML(true);

            $mail_c->Subject = "Invitation Leader";
            $mail_c->Body = "<p>You have been invited to be part of C+ iRest as a leader.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_c' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_c</a></p>";
            $mail_c->AltBody = "Invitation Leader";

            // $mail_c->send();

            if(!$mail_c->send()) {

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Message could not be sent.",
                        "Mailer Error:"=>$mail_c->ErrorInfo,
                        "status"=>422)));
            } else {

              $email_c = $invitations[$k]['email'];
              $church_c = $invitations[$k]['church_id'];

              $final_user = $invitations[$k]['user_id'];

              /*exelerate_id*/
              $exe = rand(10000, 99999);

              $pre_cell2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_c, '$token_c', NULL, NULL, :email_c, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'5','$exe', '$code_c', '0' ,'0', '1' , '', '', '$date_c', '$date_c')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_cell2 = array(
                ':email_c' => $email_c,
                ':church_c' => $church_c
              );

              $result_cell2 = $pre_cell2->execute($values_cell2);
              $id_c = $con->lastInsertId();


              /*Obtain name of owner transfer*/
              $pre_name = $con->prepare("SELECT *
                                    FROM user
                                    WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                                    array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_name  = array(':user_id' => $invitations[$k]['user_id'],':role_id' => $invitations[$k]['role_id'],':church_id' => $invitations[$k]['church_id']);
              $pre_name->execute($values_name);
              $result_name = $pre_name->fetch();

              $first_name = $result_name['first_name'];
              $last_name = $result_name['last_name'];


              /*if emptyÂ´new_group*/
              if (empty($invitations[$k]['new_group'])) {

                /*Update leader*/

                $cell_id = $invitations[$k]['group_id'];

                $pre_cell3 = $con->prepare("UPDATE groups_cells SET leader = :id_c, active = '1', is_complete = '1' WHERE id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_cell3 = array(
                  ':cell_id' => $cell_id,
                  ':id_c' => $id_c
                  );

                $result_cell3 = $pre_cell3->execute($values_cell3);


                /*Delete old user if exist*/
                $pre2 = $con->prepare("DELETE FROM user WHERE `id` = :distac", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':distac' => $distac
                  );

                $result2 = $pre2->execute($values2);

                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_c, :district_f, :zone_f, :sector_f, :cell_id, '$date_c', '$date_c')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_c' => $id_c,
                  ':cell_id' => $cell_id,
                  ':sector_f' => $sector_f,
                  ':zone_f' => $zone_f,
                  ':district_f' => $district_f
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A Leader was added (Senior Pastor / Admin)
                $en_cellp = "D" . $dis_codef . " Z" . $zone_codef . " S" . $sector_codef . " C" . $cell_codef . " has a new leader";

                $es_cellp = "D" . $dis_codef . " Z" . $zone_codef . " S" . $sector_codef . " C" . $cell_codef . " tiene un nuevo lÃ­der";

                $cellp = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,NULL,NULL,NULL,NULL,:church_id,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':church_id' => $church_c,
                    ':date_c' => $date_c);

                $result_cellp = $cellp->execute($val_cellp);


                // Record A Leader was added (District Pastor)
                $cellp2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,:district_f,NULL,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp2 = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':district_f' => $district_f,
                    ':date_c' => $date_c);

                $result_cellp2 = $cellp2->execute($val_cellp2);

                // Record A Leader was added (Zone Pastor)
                $cellp3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,NULL,:zone_f,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp3 = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':zone_f' => $zone_f,
                    ':date_c' => $date_c);

                $result_cellp3 = $cellp3->execute($val_cellp3);

                // Record A Leader was added (Supervisor)
                $cellp4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,NULL,NULL,:sector_f,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp4 = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':sector_f' => $sector_f,
                    ':date_c' => $date_c);

                $result_cellp4 = $cellp4->execute($val_cellp4);


                /*new group*/
              }else{

                $cell_id = $invitations[$k]['group_id'];

                /*obatin sector_code*/
                $pre_dco = $con->prepare("SELECT *
                                      FROM groups_sectors
                                      WHERE id = :parent_id AND church_id = :church_id", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_dco  = array(':parent_id' => $invitations[$k]['parent_id'],':church_id' => $invitations[$k]['church_id']);
                $pre_dco->execute($values_dco);
                $result_dco = $pre_dco->fetch();

                $final_sco = $result_dco['sector_code'];
                $final_zco = $result_dco['zone_code'];
                $final_dco = $result_dco['district_code'];
                $final_zid = $result_dco['zone_id'];

                /*obatin district_id*/
                $pre_zoneid = $con->prepare("SELECT *
                                      FROM groups_zones
                                      WHERE id = :final_zid AND church_id = :church_id", 
                                      array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_zoneid  = array(':final_zid' => $final_zid,':church_id' => $invitations[$k]['church_id']);
                $pre_zoneid->execute($values_zoneid);
                $result_zoneid = $pre_zoneid->fetch();

                $final_disid = $result_zoneid['district_id'];


                $pre_new = $con->prepare("INSERT INTO groups_cells (`cell_code`, `church_id`, `sector_code`, `zone_code`, `district_code`, `sector_id`,`leader`,`host`,`assistent`,`secretary`,`groups_type`, `start_date`,`address`,`city`,`phone`,`meets_on`, `meets_time`,`parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:cell_id, :church_c, :final_sco, :final_zco,:final_dco, :parent_id, :id_c,NULL,NULL,NULL,NULL,'$date_g',NULL,NULL,NULL,NULL,NULL, NULL, '1', '0', '$date_c', '$date_c')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_new = array(
                  ':cell_id' => $cell_id,
                  ':church_c' => $church_c,
                  ':id_c' => $id_c,
                  ':parent_id' => $invitations[$k]['parent_id'],
                  ':final_sco' => $final_sco,
                  ':final_zco' => $final_zco,
                  ':final_dco' => $final_dco
                  );

                $result_new = $pre_new->execute($values_new);
                $new_gr = $con->lastInsertId();

                /*Add new user in user_groups*/
                $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_c, :final_disid, :final_zid, :parent_id, :new_gr, '$date_c', '$date_c')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_us = array(
                  ':id_c' => $id_c,
                  ':new_gr' => $new_gr,
                  ':parent_id' => $invitations[$k]['parent_id'],
                  ':final_zid' => $final_zid,
                  ':final_disid' => $final_disid
                  );

                $result_us = $pre_us->execute($values_us);


                // Record A new Cell group was added (Senior Pastor / Admin)
                $en_celln = "New cell group D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $cell_id . " has beed added";

                $es_celln = "Nueva cÃ©lula D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $cell_id . " ha sido agregada";

                $celln = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,NULL,NULL,NULL,NULL,:church_id,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_celln = array(
                    ':en_celln' => $en_celln,
                    ':es_celln' => $es_celln,
                    ':church_id' => $church_c,
                    ':date_c' => $date_c);

                $result_celln = $celln->execute($val_celln);

                // Record A new Cell group was added (District Pastor)
                $celln2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,:final_disid,NULL,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_celln2 = array(
                    ':en_celln' => $en_celln,
                    ':es_celln' => $es_celln,
                    ':final_disid' => $final_disid,
                    ':date_c' => $date_c);

                $result_celln2 = $celln2->execute($val_celln2);

                // Record A new Cell group was added (Zone Pastor)
                $celln3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,NULL,:final_zid,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_celln3 = array(
                    ':en_celln' => $en_celln,
                    ':es_celln' => $es_celln,
                    ':final_zid' => $final_zid,
                    ':date_c' => $date_c);

                $result_celln3 = $celln3->execute($val_celln3);

                // Record A new Cell group was added (Supervisor)
                $celln4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,NULL,NULL,:parent_id,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_celln4 = array(
                    ':en_celln' => $en_celln,
                    ':es_celln' => $es_celln,
                    ':parent_id' => $parent_id,
                    ':date_c' => $date_c);

                $result_celln4 = $celln4->execute($val_celln4);


                // Record A Leader was added (Senior Pastor / Admin)
                $en_cellp = "D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $cell_id . " has a new leader";

                $es_cellp = "D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $cell_id . " tiene un nuevo lÃ­der";

                $cellp = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,NULL,NULL,NULL,NULL,:church_id,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':church_id' => $church_c,
                    ':date_c' => $date_c);

                $result_cellp = $cellp->execute($val_cellp);

                // Record A Leader was added (District Pastor)
                $cellp2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,:final_disid,NULL,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp2 = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':final_disid' => $final_disid,
                    ':date_c' => $date_c);

                $result_cellp2 = $cellp2->execute($val_cellp2);

                // Record A Leader was added (Zone Pastor)
                $cellp3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,NULL,:final_zid,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp3 = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':final_zid' => $final_zid,
                    ':date_c' => $date_c);

                $result_cellp3 = $cellp3->execute($val_cellp3);

                // Record A Leader was added (Supervisor)
                $cellp4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cellp, :en_cellp,NULL,NULL,:parent_id,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_cellp4 = array(
                    ':en_cellp' => $en_cellp,
                    ':es_cellp' => $es_cellp,
                    ':parent_id' => $parent_id,
                    ':date_c' => $date_c);

                $result_cellp4 = $cellp4->execute($val_cellp4);


              }


              if ($result_cell3 || $result_new) {

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Send a leader invitation (Supervisor)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " send a leader invitation to " . $email_c;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " enviÃ³ una invitaciÃ³n de lÃ­der a " . $email_c;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message, 
                      ':final_user' => $impersonate_id,
                      ':date_c' => $date_c);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Send a leader invitation (Supervisor)*/
                  $en_message = $first_name . " " . $last_name . " send a leader invitation to " . $email_c;
                  $es_message = $first_name . " " . $last_name . " enviÃ³ una invitaciÃ³n de lÃ­der a " . $email_c;
                }

                /*Activity Send a leader invitation (Supervisor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':final_user' => $final_user,
                    ':date_c' => $date_c);

                $result_act = $pre_act->execute($values_act);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_c, 'email' => $email_c)));
              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }

            }

            
          } /*end cell groups*/
          else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"User with this role does not exist",
                      "status"=>422)));
          } /*end else roles*/


        } //end for k


      } // end else final


    } // end else validation

 } // end try
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/invitations-edit', function ($request,$response) {

  try{
   
    $con = $this->db;
    $invitations = $request->getParam('invitations');

    $err_user = 0;
    $err_role = 0;
    $err_email = 0;
    $err_church = 0;
    $err_sel_email = 0;
    $err_valid_user = 0;
    $err_valid_new = 0;

    for($i = 0; $i < count($invitations); $i++) {

      $pre = $con->prepare("SELECT *
                            FROM user
                            WHERE email = :email", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values  = array(':email' => $invitations[$i]['email']);
      $pre->execute($values);
      $result = $pre->fetch();

      $pre2 = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values2  = array(':user_id' => $invitations[$i]['user_id'],':role_id' => $invitations[$i]['role_id'],':church_id' => $invitations[$i]['church_id']);
      $pre2->execute($values2);
      $result2 = $pre2->fetch();

      if(empty($invitations[$i]['user_id'])){
        $err_user += 1;
        $err_id = $i;
        $arr[] = $err_id;
      }else if(empty($invitations[$i]['role_id'])){
        $err_role += 1;
        $err_id1 = $i;
        $arr1[] = $err_id1;
      }else if(!preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $invitations[$i]['email'])){
        $err_email += 1;
        $err_id2 = $i;
        $arr2[] = $err_id2;
      }else if(empty($invitations[$i]['church_id'])){
        $err_church += 1;
        $err_id3 = $i;
        $arr3[] = $err_id3;
      } else if($result){
        $err_sel_email += 1;
        $err_id5 = $i;
        $arr5 = null;
        $arr5[] = $err_id5;
      } else if(empty($result2)){
        $err_valid_user += 1;
        $err_id6 = $i;
        $arr6[] = $err_id6;
      }

    }

    if($err_user > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: user_id",
                "err_id"=>$arr,
                "status"=>500)));

    }else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: role_id",
                "err_id"=>$arr1,
                "status"=>500)));

    } else if($err_email > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: email",
                "err_id"=>$arr2,
                "status"=>500)));

    } else if($err_church > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: church_id",
                "err_id"=>$arr3,
                "status"=>500)));

    } else if($err_sel_email > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Email already exists",
                "err_id"=>$arr5,
                "status"=>500)));

    }else if($err_valid_user > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "err_id"=>$arr6,
                "status"=>500)));

    }  

    
    for($k = 0; $k < count($invitations); $k++) {

      $pre_principal_user = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_principal  = array(':user_id' => $invitations[$k]['user_id'],':role_id' => $invitations[$k]['role_id'],':church_id' => $invitations[$k]['church_id']);
      $pre_principal_user->execute($values_principal);
      $result_principal = $pre_principal_user->fetch();

      $email_principal_user = $result_principal['email'];


      if ($invitations[$k]['role_id'] == '1' || $invitations[$k]['role_id'] == '6' || $invitations[$k]['role_id'] == '7') {

        // Districts
        $token_d = password_hash(microtime(), PASSWORD_BCRYPT);
        $token_d = substr($token_d, 7, strlen($token_d));
        $token_d = preg_replace("#[^a-z0-9._]#i", "", $token_d);

        $code_d = bin2hex(openssl_random_pseudo_bytes(3));

        $date_d = date("Y-m-d H:i:s"); 
        $date_g = date("Y-m-d"); 


        $mail = new PHPMailer;
        //Enable SMTP debugging. 
        // $mail->SMTPDebug = 3;                               
        //Set PHPMailer to use SMTP.
        $mail->isSMTP();            
        //Set SMTP host name                          
        $mail->Host = "smtp.mailtrap.io";
        //Set this to true if SMTP host requires authentication to send email
        $mail->SMTPAuth = true;                          
        //Provide username and password     
        $mail->Username = "1c2d44422b38c1";                 
        $mail->Password = "a0d4af94adb609";                           
        //If SMTP requires TLS encryption then set it
        $mail->SMTPSecure = "tls";                           
        //Set TCP port to connect to 
        $mail->Port = 25;                                   

        $mail->CharSet = "UTF-8";
        $mail->From = $email_principal_user;
        $mail->FromName = "CÃ©lulas";

        $mail->addAddress($invitations[$k]['email']);

        $mail->isHTML(true);

        $mail->Subject = "Invitation District Pastor";
        $mail->Body = "<p>You have been invited to be part of C+ iRest as a district pastor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d</a></p>";
        $mail->AltBody = "Invitation District Pastor";

        // $mail->send();

        if(!$mail->send()) {

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Message could not be sent.",
                    "Mailer Error:"=>$mail->ErrorInfo,
                    "status"=>422)));
        } else {

          $email_d = $invitations[$k]['email'];
          $church_d = $invitations[$k]['church_id'];

          /*exelerate_id*/
          $exe = rand(10000, 99999);

          $pre_dis2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_d, '$token_d', NULL, NULL, :email_d, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'2','$exe', '$code_d', '0' ,'0', '1' , '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dis2 = array(
            ':email_d' => $email_d,
            ':church_d' => $church_d
          );

          $result_dis2 = $pre_dis2->execute($values_dis2);
          $id_d = $con->lastInsertId();

          /*Add new user in user_groups*/
          $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_d, NULL, NULL, NULL, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_us = array(
            ':id_d' => $id_d
            );

          $result_us = $pre_us->execute($values_us);


          if ($result_dis2) {
            
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_d, 'email' => $email_d)));
          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
          }

        }


      } else if ($invitations[$k]['role_id'] == '2') {

        /*Zones*/

        $token_z = password_hash(microtime(), PASSWORD_BCRYPT);
        $token_z = substr($token_z, 7, strlen($token_z));
        $token_z = preg_replace("#[^a-z0-9._]#i", "", $token_z);

        $code_z = bin2hex(openssl_random_pseudo_bytes(3));

        $date_z = date("Y-m-d H:i:s"); 

        $date_g = date("Y-m-d");

        $mail_z = new PHPMailer;
        //Enable SMTP debugging. 
        // $mail_z->SMTPDebug = 3;                               
        //Set PHPMailer to use SMTP.
        $mail_z->isSMTP();            
        //Set SMTP host name                          
        $mail_z->Host = "smtp.mailtrap.io";
        //Set this to true if SMTP host requires authentication to send email
        $mail_z->SMTPAuth = true;                          
        //Provide username and password     
        $mail_z->Username = "1c2d44422b38c1";                 
        $mail_z->Password = "a0d4af94adb609";                           
        //If SMTP requires TLS encryption then set it
        $mail_z->SMTPSecure = "tls";                           
        //Set TCP port to connect to 
        $mail_z->Port = 25;                                   

        $mail_z->CharSet = "UTF-8";
        $mail_z->From = $email_principal_user;
        $mail_z->FromName = "CÃ©lulas";

        $mail_z->addAddress($invitations[$k]['email']);

        $mail_z->isHTML(true);

        $mail_z->Subject = "Invitation Zone Pastor";
        $mail_z->Body = "<p>You have been invited to be part of C+ iRest as a zone pastor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_z</a></p>";
        $mail_z->AltBody = "Invitation Zone Pastor";


        if(!$mail->send()) {

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Message could not be sent.",
                    "Mailer Error:"=>$mail->ErrorInfo,
                    "status"=>422)));
        } else {

          $email_z = $invitations[$k]['email'];
          $church_z = $invitations[$k]['church_id'];

          /*exelerate_id*/
          $exe = rand(10000, 99999);

          $pre_zone2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_z, '$token_z', NULL, NULL, :email_z, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'3','$exe', '$code_z', '0' ,'0', '1' , '', '', '$date_z', '$date_z')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_zone2 = array(
            ':email_z' => $email_z,
            ':church_z' => $church_z
            );

          $result_zone2 = $pre_zone2->execute($values_zone2);
          $id_z = $con->lastInsertId();


          /*Add new user in user_groups*/
          $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_z, NULL, NULL, NULL, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_us = array(
            ':id_z' => $id_z
            );

          $result_us = $pre_us->execute($values_us);


          if ($result_zone2) {
            
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_z, 'email' => $email_z)));
          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
          }

        }

        
      } else if ($invitations[$k]['role_id'] == '3') {

        /*Sectors*/

        $token_s = password_hash(microtime(), PASSWORD_BCRYPT);
        $token_s = substr($token_s, 7, strlen($token_s));
        $token_s = preg_replace("#[^a-z0-9._]#i", "", $token_s);

        $code_s = bin2hex(openssl_random_pseudo_bytes(3));

        $date_s = date("Y-m-d H:i:s"); 

        $date_g = date("Y-m-d");


        $mail_s = new PHPMailer;
        //Enable SMTP debugging. 
        // $mail_s->SMTPDebug = 3;                               
        //Set PHPMailer to use SMTP.
        $mail_s->isSMTP();            
        //Set SMTP host name                          
        $mail_s->Host = "smtp.mailtrap.io";
        //Set this to true if SMTP host requires authentication to send email
        $mail_s->SMTPAuth = true;                          
        //Provide username and password     
        $mail_s->Username = "1c2d44422b38c1";                 
        $mail_s->Password = "a0d4af94adb609";                           
        //If SMTP requires TLS encryption then set it
        $mail_s->SMTPSecure = "tls";                           
        //Set TCP port to connect to 
        $mail_s->Port = 25;                                   

        $mail_s->CharSet = "UTF-8";
        $mail_s->From = $email_principal_user;
        $mail_s->FromName = "CÃ©lulas";

        $mail_s->addAddress($invitations[$k]['email']);

        $mail_s->isHTML(true);

        $mail_s->Subject = "Invitation Supervisor";
        $mail_s->Body = "<p>You have been invited to be part of C+ iRest as a supervisor.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_s</a></p>";
        $mail_s->AltBody = "Invitation Supervisor";

        // $mail_s->send();

        if(!$mail->send()) {

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Message could not be sent.",
                    "Mailer Error:"=>$mail->ErrorInfo,
                    "status"=>422)));
        } else {

          $email_s = $invitations[$k]['email'];
          $church_s = $invitations[$k]['church_id'];

          /*exelerate_id*/
          $exe = rand(10000, 99999);

          $pre_sector2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_s, '$token_s', NULL, NULL, :email_s, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'4','$exe', '$code_s', '0' ,'0', '1' , '', '', '$date_s', '$date_s')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_sector2 = array(
            ':email_s' => $email_s,
            ':church_s' => $church_s
            );

          $result_sector2 = $pre_sector2->execute($values_sector2);
          $id_s = $con->lastInsertId();


          /*Add new user in user_groups*/
          $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_s, NULL, NULL, NULL, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_us = array(
            ':id_s' => $id_s
            );

          $result_us = $pre_us->execute($values_us);


          if ($result_sector2) {
            
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_s, 'email' => $email_s)));
          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
          }

        }

        
      } else if ($invitations[$k]['role_id'] == '4') {

        /*Cell groups*/

        $token_c = password_hash(microtime(), PASSWORD_BCRYPT);
        $token_c = substr($token_c, 7, strlen($token_c));
        $token_c = preg_replace("#[^a-z0-9._]#i", "", $token_c);

        $code_c = bin2hex(openssl_random_pseudo_bytes(3));

        $date_c = date("Y-m-d H:i:s"); 

        $date_g = date("Y-m-d");


        $mail_c = new PHPMailer;
        //Enable SMTP debugging. 
        // $mail_c->SMTPDebug = 3;                               
        //Set PHPMailer to use SMTP.
        $mail_c->isSMTP();            
        //Set SMTP host name                          
        $mail_c->Host = "smtp.mailtrap.io";
        //Set this to true if SMTP host requires authentication to send email
        $mail_c->SMTPAuth = true;                          
        //Provide username and password     
        $mail_c->Username = "1c2d44422b38c1";                 
        $mail_c->Password = "a0d4af94adb609";                           
        //If SMTP requires TLS encryption then set it
        $mail_c->SMTPSecure = "tls";                           
        //Set TCP port to connect to 
        $mail_c->Port = 25;                                   

        $mail_c->CharSet = "UTF-8";
        $mail_c->From = $email_principal_user;
        $mail_c->FromName = "CÃ©lulas";

        $mail_c->addAddress($invitations[$k]['email']);

        $mail_c->isHTML(true);

        $mail_c->Subject = "Invitation Leader";
        $mail_c->Body = "<p>You have been invited to be part of C+ iRest as a leader.</p><p>You must register in this link:</p><p><a href='http://$_SERVER[HTTP_HOST]/invitation/?token=$token_d' target='_blank'>http://$_SERVER[HTTP_HOST]/invitation/?token=$token_c</a></p>";
        $mail_c->AltBody = "Invitation Leader";


        if(!$mail->send()) {

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Message could not be sent.",
                    "Mailer Error:"=>$mail->ErrorInfo,
                    "status"=>422)));
        } else {

          $email_c = $invitations[$k]['email'];
          $church_c = $invitations[$k]['church_id'];

          $final_user = $invitations[$k]['user_id'];

          /*exelerate_id*/
          $exe = rand(10000, 99999);

          $pre_cell2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_c, '$token_c', NULL, NULL, :email_c, NULL,NULL,NULL,NULL,'m',NULL,'Single',NULL,'$date_g',NULL,NULL,'5','$exe', '$code_c', '0' ,'0', '1' , '', '', '$date_c', '$date_c')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cell2 = array(
            ':email_c' => $email_c,
            ':church_c' => $church_c
          );

          $result_cell2 = $pre_cell2->execute($values_cell2);
          $id_c = $con->lastInsertId();


          /*Obtain name of owner transfer*/
          $pre_name = $con->prepare("SELECT *
                                FROM user
                                WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_name  = array(':user_id' => $invitations[$k]['user_id'],':role_id' => $invitations[$k]['role_id'],':church_id' => $invitations[$k]['church_id']);
          $pre_name->execute($values_name);
          $result_name = $pre_name->fetch();

          $first_name = $result_name['first_name'];
          $last_name = $result_name['last_name'];


          /*Add new user in user_groups*/
          $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:id_c, NULL, NULL, NULL, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_us = array(
            ':id_c' => $id_c
            );

          $result_us = $pre_us->execute($values_us);


          if ($result_cell2) {

            /*Activity send a leader invitation (Supervisor)*/
            $en_message = $first_name . " " . $last_name . " send a leader invitation to " . $email_c;
            $es_message = $first_name . " " . $last_name . " enviÃ³ una invitaciÃ³n de lÃ­der a " . $email_c;

            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:final_user,NULL,'0',NULL,NULL,:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message,
                ':en_message' => $en_message, 
                ':final_user' => $final_user,
                ':date_c' => $date_c);

            $result_act = $pre_act->execute($values_act);

            
            return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => array('message' => 'Invitations sent successfully', 'id' => $id_c, 'email' => $email_c)));
          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"There was a problem, verify your parameters",
                      "status"=>422)));
          }

        }

        
      } /*end cell groups*/
      else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"User with this role does not exist",
                  "status"=>422)));
      } /*end else roles*/


    } //end for k   

 } // end try
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/list-groups', function ($request,$response) {

  try{

     $con = $this->db;
     $user_id = $request->getParam('user_id');
     $role_id = $request->getParam('role_id');
     $church_id = $request->getParam('church_id');

     if(empty($user_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: user_id",
                 "status"=>500)));
     } if(empty($role_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: role_id",
                 "status"=>500)));
     } if(empty($church_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: church_id",
                 "status"=>500)));
     }



    $pre_i = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      $final_role = $result_i['rol'];

      if ($final_role == '1') {

        $sql = "SELECT id, district_code FROM groups_districts WHERE church_id = $church_id AND active = '1'";
        
        foreach ($con->query($sql) as $row) {
          $districts[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $districts));

      } else if ($final_role == '2') {

        $sql2 = "SELECT id, zone_code FROM groups_zones WHERE church_id = $church_id AND active = '1'";
        
        foreach ($con->query($sql2) as $row2) {
          $zones[] = $row2;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $zones));

      } else if ($final_role == '3') {

        $sql3 = "SELECT id, sector_code FROM groups_sectors WHERE church_id = $church_id AND active = '1'";
        
        foreach ($con->query($sql3) as $row3) {
          $sectors[] = $row3;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $sectors));

      } else if ($final_role == '4') {

        $sql4 = "SELECT id, cell_code FROM groups_cells WHERE church_id = $church_id AND active = '1'";
        
        foreach ($con->query($sql4) as $row4) {
          $cells[] = $row4;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $cells));

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this roles does not exists",
                    "status"=>422)));
      }


              
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User with this roles does not exists",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/********* ASSIGN GENERAL *************/

$app->post('/general/list-users', function ($request,$response) {

  try{

     $con = $this->db;
     $church_id = $request->getParam('church_id');

    if(empty($church_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: church_id",
                 "status"=>500)));
     }

    $pre_i = $con->prepare("SELECT *
                             FROM churches
                             WHERE id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':church_id' => $church_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      $sql = "SELECT id, CONCAT(first_name, ' ', last_name) AS full_name, email,profile_picture, is_complete FROM user WHERE church_id = $church_id AND status = '1' AND verified_account = '1' AND rol != '1'";
        
      foreach ($con->query($sql) as $row) {
        $user[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $user));

              
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Church does not exists",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/assign', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $leader_id = $request->getParam('leader_id');
   $group_id = $request->getParam('group_id');
   $parent_id = $request->getParam('parent_id');
   $new_group = $request->getParam('new_group');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   } else if(empty($group_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: group_id",
               "status"=>500)));
   } else if($new_group || $new_group == '0'){

        if ($new_group != '1') {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"New group parameter is not valid",
                    "status"=>500)));
        }

   }


  /*Impersonate*/
  if ($impersonate) {
    
    if ($impersonate != '1') {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Impersonate is not valid",
                "status"=>500)));
    }else if(empty($impersonate_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: impersonate_id",
               "status"=>500)));
   } else if(empty($impersonate_role)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: impersonate_role",
               "status"=>500)));
   }

   $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
   $pre_imper->execute($values_imper);
   $result_imper = $pre_imper->fetch();

   if (empty($result_imper)) {

    return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
                      "message"=>"Impersonated user with this role does not exist",
                      "status"=>422)));
   }

   $name_imper = $result_imper['first_name'];
   $last_name_imper = $result_imper['last_name'];

  }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $first_name_user = $result_i['first_name'];
    $last_name_user = $result_i['last_name'];

    $pre_fi = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :leader_id AND church_id = :church_id AND status = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_fi = array(':leader_id' => $leader_id,':church_id' => $church_id);
    $pre_fi->execute($values_fi);
    $result_fi = $pre_fi->fetch();

    if ($result_fi) {

      /*full name leader to asign*/
      $first_name = $result_fi['first_name'];
      $last_name = $result_fi['last_name'];

      $date_d = date("Y-m-d H:i:s"); 

      $date_g = date("Y-m-d");

      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        if (empty($new_group)) {

          $pre_dis = $con->prepare("SELECT *
                                   FROM groups_districts
                                   WHERE id = :group_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dis = array(':group_id' => $group_id, ':church_id' => $church_id);
          $pre_dis->execute($values_dis);
          $result_dis = $pre_dis->fetch();

          if($result_dis){

            $district_pastor = $result_dis['district_pastor'];

            if (empty($district_pastor)) {
              
              $pre_usf = $con->prepare("UPDATE user SET rol = '2', status = '1' WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_usf = array(
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_usf = $pre_usf->execute($values_usf);


              $pre_dis3 = $con->prepare("UPDATE groups_districts SET district_pastor = :leader_id, is_complete = '1', active = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis3 = array(
                ':group_id' => $group_id,
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_dis3 = $pre_dis3->execute($values_dis3);


              /*obtain district codes to activity*/
              $pre_cell = $con->prepare("SELECT *
                                       FROM groups_districts
                                       WHERE id = :group_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_cell = array(':group_id' => $group_id, ':church_id' => $church_id);
              $pre_cell->execute($values_cell);
              $result_cell = $pre_cell->fetch();

              $final_d = $result_cell['district_code'];

              /*update user_groups*/
              $pre_dis2 = $con->prepare("UPDATE user_groups SET district_id = :group_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_dis2 = array(
                ':leader_id' => $leader_id,
                ':group_id' => $group_id
                );

              $result_dis2 = $pre_dis2->execute($values_dis2);

              if ($result_dis3) {

                /*************** ACTIVITIES ***********************/
                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Assigned to a District (District Pastor)*/   
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to district D" . $final_d;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " al distrito D" . $final_d;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':leader_id' => $impersonate_id,
                      ':date_d' => $date_d);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Assigned to a District (District Pastor)*/   
                  $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to district D" . $final_d;
                  $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " al distrito D" . $final_d;
                }

                /*Activity Assigned to a District (District Pastor)*/ 
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $leader_id,
                    ':date_d' => $date_d);

                $result_act = $pre_act->execute($values_act);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'District Pastor assign successfully'));

              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"District already has a District Pastor",
                          "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"District does not exist",
                        "status"=>422)));
          }

          /*new group*/
        }else{

          $pre_new = $con->prepare("SELECT *
                                FROM groups_districts
                                WHERE district_code = :group_id AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_new  = array(':group_id' => $group_id,':church_id' => $church_id);
          $pre_new->execute($values_new);
          $result_new = $pre_new->fetch();

          if ($result_new) {
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"New district code already exists",
                      "status"=>500)));
          }else{

            $pre_new = $con->prepare("INSERT INTO groups_districts (`district_code`, `church_id`, `district_pastor`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:group_id, :church_id, :leader_id, NULL, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new = array(
              ':group_id' => $group_id,
              ':church_id' => $church_id,
              ':leader_id' => $leader_id
            );

            $result_new = $pre_new->execute($values_new);
            $new_gr = $con->lastInsertId();


            /*update user_groups*/
            $pre_dis2 = $con->prepare("UPDATE user_groups SET district_id = :new_gr WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis2 = array(
                ':leader_id' => $leader_id,
                ':new_gr' => $new_gr
            );

            $result_dis2 = $pre_dis2->execute($values_dis2);


            if ($result_new) {


              // Record A new District was added (Senior Pastor / Admin)
              $en_disn = "New district D" . $group_id . "has been added";

              $es_disn = "Nuevo distrito D" . $group_id . "ha sido agregado";

              $rec_disn = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_disn, :en_disn,NULL,NULL,NULL,NULL,:church_id,'1',:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_rec_disn = array(
                  ':en_disn' => $en_disn,
                  ':es_disn' => $es_disn,
                  ':church_id' => $church_id,
                  ':date_d' => $date_d);

              $result_disn = $rec_disn->execute($val_rec_disn);


              /*************** ACTIVITIES ***********************/
              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Assigned to a District (District Pastor)*/   
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to district D" . $group_id;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " al distrito D" . $group_i;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $impersonate_id,
                    ':date_d' => $date_d);

                $result_actm = $pre_actm->execute($values_actm);

              }else{

                /*Activity Assigned to a District (District Pastor)*/   
                $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to district D" . $group_id;
                $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " al distrito D" . $group_id;
              }

              /*Activity Assigned to a District (District Pastor)*/ 
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':leader_id' => $leader_id,
                  ':date_d' => $date_d);

              $result_act = $pre_act->execute($values_act);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'District Pastor assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }


        }
        
      } else if ($role_id == '2') {

        /*parent_id required*/
        if (empty($parent_id)) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Parent id is required",
                    "status"=>500)));  

        }else if (empty($new_group)) {

          $pre_zone = $con->prepare("SELECT *
                                   FROM groups_zones
                                   WHERE id = :group_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_zone = array(':group_id' => $group_id, ':church_id' => $church_id);
          $pre_zone->execute($values_zone);
          $result_zone = $pre_zone->fetch();

          if($result_zone){

            $zone_pastor = $result_zone['zone_pastor'];

            if (empty($zone_pastor)) {

              /*district_id*/
              $district_id = $result_zone['district_id'];
              
              $pre_usf = $con->prepare("UPDATE user SET rol = '3', status = '1'
                               WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_usf = array(
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_usf = $pre_usf->execute($values_usf);


              $pre_zone3 = $con->prepare("UPDATE groups_zones SET zone_pastor = :leader_id, is_complete = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zone3 = array(
                ':group_id' => $group_id,
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_zone3 = $pre_zone3->execute($values_zone3);


              /*obtain zone codes to activity*/
              $pre_cell = $con->prepare("SELECT *
                                       FROM groups_zones
                                       WHERE id = :group_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_cell = array(':group_id' => $group_id, ':church_id' => $church_id);
              $pre_cell->execute($values_cell);
              $result_cell = $pre_cell->fetch();

              $final_d = $result_cell['district_code'];
              $final_z = $result_cell['zone_code'];


              /*VERIFY*/

              /*update user_groups*/
              $pre_us = $con->prepare("UPDATE user_groups SET zone_id = :group_id, district_id = :district_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_us = array(
                ':leader_id' => $leader_id,
                ':group_id' => $group_id,
                ':district_id' => $district_id
                );

              $result_us = $pre_us->execute($values_us);


              if ($result_zone3) {

                /*************** ACTIVITIES ***********************/
                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Assigned to a Sector (Supervisor)*/  
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to zone D" . $final_d . " Z" . $final_z;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " a la zona D" . $final_d . " Z" . $final_z;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':leader_id' => $impersonate_id,
                      ':date_d' => $date_d);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Assigned to a Sector (Supervisor)*/  
                  $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to zone D" . $final_d . " Z" . $final_z;
                  $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " a la zona D" . $final_d . " Z" . $final_z;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $leader_id,
                    ':date_d' => $date_d);

                $result_act = $pre_act->execute($values_act);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Zone Pastor assign successfully'));

              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Zone already has a Zone Pastor",
                          "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Zone does not exist",
                        "status"=>422)));
          } 

          /*new group*/
        }else{

          $pre_new = $con->prepare("SELECT *
                                FROM groups_zones
                                WHERE zone_code = :group_id AND district_id = :parent_id AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_new  = array(':group_id' => $group_id, ':parent_id' => $parent_id, ':church_id' => $church_id);
          $pre_new->execute($values_new);
          $result_new = $pre_new->fetch();

          if ($result_new) {
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"New zone code already exists",
                      "status"=>500)));
          }else{

            /*obatin district_code*/
            $pre_dco = $con->prepare("SELECT district_code
                                  FROM groups_districts
                                  WHERE id = :parent_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dco  = array(':parent_id' => $parent_id,':church_id' => $church_id);
            $pre_dco->execute($values_dco);
            $result_dco = $pre_dco->fetch();

            $final_dco = $result_dco['district_code'];


            $pre_new = $con->prepare("INSERT INTO groups_zones (`zone_code`, `church_id`, `district_code`, `district_id`, `zone_pastor`, `start_date`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:group_id, :church_id, :final_dco, :parent_id, :leader_id, '$date_g' , NULL, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new = array(
              ':group_id' => $group_id,
              ':church_id' => $church_id,
              ':final_dco' => $final_dco,
              ':parent_id' => $parent_id,
              ':leader_id' => $leader_id
              );

            $result_new = $pre_new->execute($values_new);
            $new_gr = $con->lastInsertId();


            /*update user_groups*/
            $pre_dis2 = $con->prepare("UPDATE user_groups SET district_id = :parent_id, zone_id = :new_gr WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis2 = array(
                ':leader_id' => $leader_id,
                ':new_gr' => $new_gr,
                ':parent_id' => $parent_id
            );

            $result_dis2 = $pre_dis2->execute($values_dis2);


            if ($result_new) {

              // Record A new Zone was added (Senior Pastor / Admin)
              $en_zonen = "New zone D" . $final_dco . " Z" . $group_id . " has been added";

              $es_zonep = "Nueva zona D" . $final_dco . " Z" . $group_id . " ha sido agregado";

              $rec_zonen = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonen,NULL,NULL,NULL,NULL,:church_id,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_rec_zonen = array(
                  ':en_zonen' => $en_zonen,
                  ':es_zonep' => $es_zonep,
                  ':church_id' => $church_z,
                  ':date_z' => $date_z);

              $result_zonen = $rec_zonen->execute($val_rec_zonen);

              // Record A new Zone was added (District Pastor)
              $rec_zonen2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_zonep, :en_zonen,:parent_id,NULL,NULL,NULL,NULL,'1',:date_z, :date_z)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_rec_zonen2 = array(
                  ':en_zonen' => $en_zonen,
                  ':es_zonep' => $es_zonep,
                  ':parent_id' => $parent_id,
                  ':date_z' => $date_z);

              $result_zonen2 = $rec_zonen2->execute($val_rec_zonen2);


              /*************** ACTIVITIES ***********************/
              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Assigned to a Sector (Supervisor)*/  
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to zone D" . $final_dco . " Z" . $group_id;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " a la zona D" . $final_dco . " Z" . $group_id;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $impersonate_id,
                    ':date_d' => $date_d);

                $result_actm = $pre_actm->execute($values_actm);

              }else{

                /*Activity Assigned to a Sector (Supervisor)*/  
                $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to zone D" . $final_dco . " Z" . $group_id;
                $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " a la zona D" . $final_dco . " Z" . $group_id;
              }

              /*Activity Assigned to a Sector (Supervisor)*/  
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':leader_id' => $leader_id,
                  ':date_d' => $date_d);

              $result_act = $pre_act->execute($values_act);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone Pastor assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }


        }
        
      } else if ($role_id == '3') {

        /*parent_id required*/
        if (empty($parent_id)) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Parent id is required",
                    "status"=>500)));  

        }else if (empty($new_group)) {

          $pre_sector = $con->prepare("SELECT *
                                   FROM groups_sectors
                                   WHERE id = :group_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_sector = array(':group_id' => $group_id, ':church_id' => $church_id);
          $pre_sector->execute($values_sector);
          $result_sector = $pre_sector->fetch();

          if($result_sector){

            $supervisor = $result_sector['supervisor'];

            if (empty($supervisor)) {

              /*zone_id*/
              $zone_id = $result_sector['zone_id'];
              
              $pre_usf = $con->prepare("UPDATE user SET rol = '4', status = '1' WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_usf = array(
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
              );

              $result_usf = $pre_usf->execute($values_usf);


              $pre_sector3 = $con->prepare("UPDATE groups_sectors SET supervisor = :leader_id, is_complete = '1', active = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_sector3 = array(
                ':group_id' => $group_id,
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_sector3 = $pre_sector3->execute($values_sector3);


              /*obtain sector codes to activity*/
              $pre_cell = $con->prepare("SELECT *
                                       FROM groups_sectors
                                       WHERE id = :group_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_cell = array(':group_id' => $group_id, ':church_id' => $church_id);
              $pre_cell->execute($values_cell);
              $result_cell = $pre_cell->fetch();

              $final_d = $result_cell['district_code'];
              $final_z = $result_cell['zone_code'];
              $final_s = $result_cell['sector_code'];


              /*update user_groups*/
              $pre_disg = $con->prepare("SELECT district_id
                                       FROM groups_zones
                                       WHERE id = :zone_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_disg = array(':zone_id' => $zone_id, ':church_id' => $church_id);
              $pre_disg->execute($values_disg);
              $result_disg = $pre_disg->fetch();

              $final_dist = $result_disg['district_id'];

              $pre_us = $con->prepare("UPDATE user_groups SET sector_id = :group_id, zone_id = :zone_id, district_id = :district_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_us = array(
                ':leader_id' => $leader_id,
                ':group_id' => $group_id,
                ':zone_id' => $zone_id,
                ':district_id' => $final_dist
                );

              $result_us = $pre_us->execute($values_us);

              if ($result_sector3) {

                /*************** ACTIVITIES ***********************/
                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Assigned to a Sector (Supervisor)*/  
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " al sector D" . $final_d . " Z" . $final_z . " S" . $final_s;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':leader_id' => $impersonate_id,
                      ':date_d' => $date_d);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Assigned to a Sector (Supervisor)*/  
                  $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                  $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " al sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                }

                /*Activity Assigned to a Sector (Supervisor)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $leader_id,
                    ':date_d' => $date_d);

                $result_act = $pre_act->execute($values_act);
                
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Supervisor assign successfully'));

              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }


            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Sector already has a Supervisor",
                          "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Sector does not exist",
                        "status"=>422)));
          }


          /*new group*/
        }else{

          $pre_new = $con->prepare("SELECT *
                                FROM groups_sectors
                                WHERE sector_code = :group_id AND zone_id = :parent_id AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_new  = array(':group_id' => $group_id, ':parent_id' => $parent_id, ':church_id' => $church_id);
          $pre_new->execute($values_new);
          $result_new = $pre_new->fetch();

          if ($result_new) {
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"New sector code already exists",
                      "status"=>500)));
          }else{

            /*obatin zone_code*/
            $pre_dco = $con->prepare("SELECT *
                                  FROM groups_zones
                                  WHERE id = :parent_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dco  = array(':parent_id' => $parent_id,':church_id' => $church_id);
            $pre_dco->execute($values_dco);
            $result_dco = $pre_dco->fetch();

            $final_zco = $result_dco['zone_code'];
            $final_dco = $result_dco['district_code'];
            $final_did = $result_dco['district_id'];


            $pre_new = $con->prepare("INSERT INTO groups_sectors (`sector_code`, `church_id`, `zone_code`, `district_code`, `zone_id`, `supervisor`, `start_date`, `parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:group_id, :church_id, :final_zco, :final_dco, :parent_id, :leader_id, '$date_g' , NULL, '1', '1', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new = array(
              ':group_id' => $group_id,
              ':church_id' => $church_id,
              ':final_zco' => $final_zco,
              ':parent_id' => $parent_id,
              ':final_dco' => $final_dco,
              ':leader_id' => $leader_id
              );

            $result_new = $pre_new->execute($values_new);
            $new_gr = $con->lastInsertId();


            /*update user_groups*/
            $pre_dis2 = $con->prepare("UPDATE user_groups SET district_id = :final_did, zone_id = :parent_id, sector_id = :new_gr WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis2 = array(
                ':leader_id' => $leader_id,
                ':new_gr' => $new_gr,
                ':parent_id' => $parent_id,
                ':final_did' => $final_did
            );

            $result_dis2 = $pre_dis2->execute($values_dis2);

            if ($result_new) {

              // Record A Sector was added (Senior Pastor / Admin)
              $en_sectorn = "New sector D" . $final_dco . " Z" . $final_zco . " S" . $group_id . " has been added";

              $es_sectorn = "Nuevo sector D" . $final_dco . " Z" . $final_zco . " S" . $group_id . " ha sido agregado";

              $sectorn = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorn, :en_sectorn,NULL,NULL,NULL,NULL,:church_id,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_sectorn = array(
                  ':en_sectorn' => $en_sectorn,
                  ':es_sectorn' => $es_sectorn,
                  ':church_id' => $church_s,
                  ':date_s' => $date_s);

              $result_sectorn = $sectorn->execute($val_sectorn);

              // Record A Sector was added (District Pastor)
              $sectorn2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorn, :en_sectorn,:final_did,NULL,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_sectorn2 = array(
                  ':en_sectorn' => $en_sectorn,
                  ':es_sectorn' => $es_sectorn,
                  ':final_did' => $final_did,
                  ':date_s' => $date_s);

              $result_sectorn2 = $sectorn2->execute($val_sectorn2);

              // Record A Sector was added (Zone Pastor)
              $sectorn3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_sectorn, :en_sectorn,NULL,:parent_id,NULL,NULL,NULL,'1',:date_s, :date_s)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_sectorn3 = array(
                  ':en_sectorn' => $en_sectorn,
                  ':es_sectorn' => $es_sectorn,
                  ':parent_id' => $parent_id,
                  ':date_s' => $date_s);

              $result_sectorn3 = $sectorn3->execute($val_sectorn3);


              /*************** ACTIVITIES ***********************/
              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Assigned to a Sector (Supervisor)*/  
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to sector D" . $final_dco . " Z" . $final_zco . " S" . $group_id;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " al sector D" . $final_d . " Z" . $final_z . " S" . $group_id;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $impersonate_id,
                    ':date_d' => $date_d);

                $result_actm = $pre_actm->execute($values_actm);

              }else{

                /*Activity Assigned to a Sector (Supervisor)*/  
                $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to sector D" . $final_dco . " Z" . $final_zco . " S" . $group_id;
                $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " al sector D" . $final_d . " Z" . $final_z . " S" . $group_id;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':leader_id' => $leader_id,
                  ':date_d' => $date_d);

              $result_act = $pre_act->execute($values_act);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Supervisor assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }


        }
        
      } else if ($role_id == '4') {

        if (empty($parent_id)) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Parent id is required",
                    "status"=>500)));  

        }else if (empty($new_group)) {
        
          $pre_cell = $con->prepare("SELECT *
                                   FROM groups_cells
                                   WHERE id = :group_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cell = array(':group_id' => $group_id, ':church_id' => $church_id);
          $pre_cell->execute($values_cell);
          $result_cell = $pre_cell->fetch();

          if($result_cell){

            $leader = $result_cell['leader'];

            if (empty($leader)) {

              /*sector_id*/
              $sector_id = $result_cell['sector_id'];
              
              $pre_usf = $con->prepare("UPDATE user SET rol = '5', status = '1'
                               WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $usf = array(
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_usf = $pre_usf->execute($usf);


              $pre_cell3 = $con->prepare("UPDATE groups_cells SET leader = :leader_id, is_complete = '1', active = '1' WHERE id = :group_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_cell3 = array(
                ':group_id' => $group_id,
                ':leader_id' => $leader_id,
                ':church_id' => $church_id
                );

              $result_cell3 = $pre_cell3->execute($values_cell3);


              /*obtain cell codes to activity*/
              $pre_cell = $con->prepare("SELECT *
                                       FROM groups_cells
                                       WHERE id = :group_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_cell = array(':group_id' => $group_id, ':church_id' => $church_id);
              $pre_cell->execute($values_cell);
              $result_cell = $pre_cell->fetch();

              $final_d = $result_cell['district_code'];
              $final_z = $result_cell['zone_code'];
              $final_s = $result_cell['sector_code'];
              $final_c = $result_cell['cell_code'];


              /*update user_groups*/
              $pre_zoneg = $con->prepare("SELECT zone_id
                                       FROM groups_sectors
                                       WHERE id = :sector_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_zoneg = array(':sector_id' => $sector_id, ':church_id' => $church_id);
              $pre_zoneg->execute($values_zoneg);
              $result_zoneg = $pre_zoneg->fetch();

              $final_zone = $result_zoneg['zone_id'];

              $pre_disg = $con->prepare("SELECT district_id
                                       FROM groups_zones
                                       WHERE id = :zone_id AND church_id = :church_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_disg = array(':zone_id' => $final_zone, ':church_id' => $church_id);
              $pre_disg->execute($values_disg);
              $result_disg = $pre_disg->fetch();

              $final_dist = $result_disg['district_id'];


              $pre_us = $con->prepare("UPDATE user_groups SET sector_id = :sector_id, zone_id = :zone_id, district_id = :district_id, cell_id = :group_id WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_us = array(
                ':leader_id' => $leader_id,
                ':group_id' => $group_id,
                ':sector_id' => $sector_id,
                ':zone_id' => $final_zone,
                ':district_id' => $final_dist
                );

              $result_us = $pre_us->execute($values_us);

              if ($result_cell3) {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity impersonate Assigned to a cell group (Leader)*/ 
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':leader_id' => $impersonate_id,
                      ':date_d' => $date_d);

                  $result_actm = $pre_actm->execute($values_actm);

                }else{

                  /*Activity Assigned to a cell group (Leader)*/ 
                  $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                  $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                }

                /*Activity Assigned to a cell group (Leader)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $leader_id,
                    ':date_d' => $date_d);

                $result_act = $pre_act->execute($values_act);

                


                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Leader assign successfully'));

              }else{

                return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                          "message"=>"There was a problem, verify your parameters",
                          "status"=>422)));
              }

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Cell Group already has a Leader",
                          "status"=>422)));
            }


          }else{

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Cell Group does not exist",
                        "status"=>422)));
          }

          /*new group*/
        }else{

          $pre_new = $con->prepare("SELECT *
                                FROM groups_cells
                                WHERE cell_code = :group_id AND sector_id = :parent_id AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_new  = array(':group_id' => $group_id, ':parent_id' => $parent_id, ':church_id' => $church_id);
          $pre_new->execute($values_new);
          $result_new = $pre_new->fetch();

          if ($result_new) {
            return $response->withStatus(500)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "message"=>"New cell code already exists",
                      "status"=>500)));
          }else{

            /*obatin sector_code*/
            $pre_dco = $con->prepare("SELECT *
                                  FROM groups_sectors
                                  WHERE id = :parent_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dco  = array(':parent_id' => $parent_id,':church_id' => $church_id);
            $pre_dco->execute($values_dco);
            $result_dco = $pre_dco->fetch();

            $final_sco = $result_sco['sector_code'];
            $final_zco = $result_dco['zone_code'];
            $final_dco = $result_dco['district_code'];
            $final_zid = $result_dco['zone_id'];

            /*obatin district_id*/
            $pre_zoneid = $con->prepare("SELECT *
                                  FROM groups_zones
                                  WHERE id = :final_zid AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zoneid  = array(':final_zid' => $final_zid,':church_id' => $church_id);
            $pre_zoneid->execute($values_zoneid);
            $result_zoneid = $pre_zoneid->fetch();

            $final_disid = $result_zoneid['district_id'];


            $pre_new = $con->prepare("INSERT INTO groups_cells (`cell_code`, `church_id`, `sector_code`, `zone_code`, `district_code`, `sector_id`,`leader`,`host`,`assistent`,`secretary`,`groups_type`, `start_date`,`address`,`city`,`phone`,`meets_on`, `meets_time`,`parent_id`, `active`,`is_complete`, `created_at`, `updated_at`) VALUES (:group_id, :church_id, :final_sco, :final_zco,:final_dco, :parent_id, :leader_id,NULL,NULL,NULL,NULL,'$date_g',NULL,NULL,NULL,NULL,NULL, NULL, '1', '0', '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_new = array(
              ':group_id' => $group_id,
              ':church_id' => $church_id,
              ':leader_id' => $leader_id,
              ':parent_id' => $parent_id,
              ':final_sco' => $final_sco,
              ':final_zco' => $final_zco,
              ':final_dco' => $final_dco
              );

            $result_new = $pre_new->execute($values_new);
            $new_gr = $con->lastInsertId();

            /*update user_groups*/
            $pre_dis2 = $con->prepare("UPDATE user_groups SET district_id = :final_disid, zone_id = :final_zid, sector_id = :parent_id, cell_id = :new_gr WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_dis2 = array(
                ':leader_id' => $leader_id,
                ':new_gr' => $new_gr,
                ':parent_id' => $parent_id,
                ':final_zid' => $final_zid,
                ':final_disid' => $final_disid
            );

            $result_dis2 = $pre_dis2->execute($values_dis2);

            if ($result_new) {


              // Record A new Cell group was added (Senior Pastor / Admin)
              $en_celln = "New cell group D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $group_id . " has beed added";

              $es_celln = "Nueva cÃ©lula D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $group_id . " ha sido agregada";

              $celln = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,NULL,NULL,NULL,NULL,:church_id,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_celln = array(
                  ':en_celln' => $en_celln,
                  ':es_celln' => $es_celln,
                  ':church_id' => $church_c,
                  ':date_c' => $date_c);

              $result_celln = $celln->execute($val_celln);

              // Record A new Cell group was added (District Pastor)
              $celln2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,:final_disid,NULL,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_celln2 = array(
                  ':en_celln' => $en_celln,
                  ':es_celln' => $es_celln,
                  ':final_disid' => $final_disid,
                  ':date_c' => $date_c);

              $result_celln2 = $celln2->execute($val_celln2);

              // Record A new Cell group was added (Zone Pastor)
              $celln3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,NULL,:final_zid,NULL,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_celln3 = array(
                  ':en_celln' => $en_celln,
                  ':es_celln' => $es_celln,
                  ':final_zid' => $final_zid,
                  ':date_c' => $date_c);

              $result_celln3 = $celln3->execute($val_celln3);

              // Record A new Cell group was added (Supervisor)
              $celln4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_celln, :en_celln,NULL,NULL,:parent_id,NULL,NULL,'1',:date_c, :date_c)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $val_celln4 = array(
                  ':en_celln' => $en_celln,
                  ':es_celln' => $es_celln,
                  ':parent_id' => $parent_id,
                  ':date_c' => $date_c);

              $result_celln4 = $celln4->execute($val_celln4);


              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity impersonate Assigned to a cell group (Leader)*/ 
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " assigned " .  $first_name . " " . $last_name . " to cell group D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $group_id;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " asignÃ³ a " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $group_id;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':leader_id' => $impersonate_id,
                    ':date_d' => $date_d);

                $result_actm = $pre_actm->execute($values_actm);

              }else{

              /*Activity Assigned to a cell group (Leader)*/ 
              $en_message = $first_name_user . " " . $last_name_user . " assigned " .  $first_name . " " . $last_name . " to cell group D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $group_id;
              $es_message = $first_name_user . " " . $last_name_user . " asignÃ³ a " . $first_name . " " . $last_name . " a la cÃ©lula D" . $final_dco . " Z" . $final_zco . " S" . $final_sco . " C" . $group_id;

              }

              /*Activity Assigned to a cell group (Leader)*/ 
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:date_d, :date_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':leader_id' => $leader_id,
                  ':date_d' => $date_d);

              $result_act = $pre_act->execute($values_act);
              
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Leader assign successfully'));

            }else{

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
            }


          }

        }


      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Role does not exist",
                    "status"=>422)));
      }


    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"User to assign does not exist",
                  "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*list that helps filter the groups depending on their parent*/
$app->post('/general/list-groups-filters', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }


    if ($role_id == '1') {
      
      // return all districts of the church

      $sql = "SELECT id AS district_id, district_code
        FROM groups_districts
        WHERE church_id = $church_id";
      
      $groups = null;

      foreach ($con->query($sql) as $row) {
        $groups[] = $row;
      }


    } else if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      // return all zones of the district

      $sql2 = "SELECT id AS zone_id, zone_code
        FROM groups_zones
        WHERE church_id = $church_id AND district_id = $parent_id";
      
      $groups = null;

      foreach ($con->query($sql2) as $row2) {
        $groups[] = $row2;
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i 
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      $sql3 = "SELECT id AS sector_id, sector_code
        FROM groups_sectors
        WHERE church_id = $church_id AND zone_id = $parent_id";
      
      $groups = null;

      foreach ($con->query($sql3) as $row3) {
        $groups[] = $row3;
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i 
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      // cells
      $sql4 = "SELECT id AS cell_id, cell_code
        FROM groups_cells
        WHERE church_id = $church_id AND sector_id = $parent_id";
      
      $groups = null;

      foreach ($con->query($sql4) as $row4) {
        $groups[] = $row4;
      }

    }


    return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $groups));


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*TIMELINE GENERAL*/

$app->post('/general/timeline/list-comments', function ($request,$response) {

  try{
   $con = $this->db;
   $owner_id = $request->getParam('owner_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $type = $request->getParam('type');
   $commented_id = $request->getParam('commented_id');

   if(empty($owner_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: owner_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($type)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type",
               "status"=>500)));
   } else if(empty($commented_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: commented_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :owner_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':owner_id' => $owner_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $final_d = date("Y-m-d H:i:s");

      if ($type == 'user') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $sql1 = "SELECT timeline_user.id, timeline_user.comment, CONCAT(user.first_name, ' ', user.last_name) AS comment_owner, user.profile_picture as profile_picture_owner, timeline_user.created_at FROM timeline_user, user WHERE timeline_user.owner_id = user.id AND user_id = $commented_id ORDER BY timeline_user.created_at DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_comment[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_comment));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"User that you want to comment does not exist",
                      "status"=>422)));
        }
        
      } else if ($type == 'member') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $final_role = $result_fi['role'];

          $sql1 = "SELECT timeline_user.id, timeline_user.comment, CONCAT(user.first_name, ' ', user.last_name) AS comment_owner, user.profile_picture as profile_picture_owner, timeline_user.created_at FROM timeline_user, user WHERE timeline_user.owner_id = user.id AND timeline_user.member_id = $commented_id ORDER BY timeline_user.created_at DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_comment[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_comment));


        }else{

          if ($final_role == '1') {
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Guest that you want to comment does not exist",
                        "status"=>422)));
          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Cell Member that you want to comment does not exist",
                        "status"=>422)));

          }
          
        }

        
      } else if ($type == 'district') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $sql1 = "SELECT timeline_group.id, timeline_group.comment, CONCAT(user.first_name, ' ', user.last_name) AS comment_owner, user.profile_picture as profile_picture_owner, timeline_group.created_at FROM timeline_group, user WHERE timeline_group.owner_id = user.id AND timeline_group.district_id = $commented_id ORDER BY timeline_group.created_at DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_comment[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_comment));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"District that you want to comment does not exist",
                      "status"=>422)));
        }


      }else if ($type == 'zone') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $sql1 = "SELECT timeline_group.id, timeline_group.comment, CONCAT(user.first_name, ' ', user.last_name) AS comment_owner, user.profile_picture as profile_picture_owner, timeline_group.created_at FROM timeline_group, user WHERE timeline_group.owner_id = user.id AND timeline_group.zone_id = $commented_id ORDER BY timeline_group.created_at DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_comment[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_comment));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Zone that you want to comment does not exist",
                      "status"=>422)));
        }

      } else if ($type == 'sector') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $sql1 = "SELECT timeline_group.id, timeline_group.comment, CONCAT(user.first_name, ' ', user.last_name) AS comment_owner, user.profile_picture as profile_picture_owner, timeline_group.created_at FROM timeline_group, user WHERE timeline_group.owner_id = user.id AND timeline_group.sector_id = $commented_id ORDER BY timeline_group.created_at DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_comment[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_comment));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Sector that you want to comment does not exist",
                      "status"=>422)));
        }

      }else if ($type == 'cell') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $sql1 = "SELECT timeline_group.id, timeline_group.comment, CONCAT(user.first_name, ' ', user.last_name) AS comment_owner, user.profile_picture as profile_picture_owner, timeline_group.created_at FROM timeline_group, user WHERE timeline_group.owner_id = user.id AND timeline_group.cell_id = $commented_id ORDER BY timeline_group.created_at DESC";
          

          foreach ($con->query($sql1) as $row1) {
            $timeline_comment[] = $row1;
          }

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_comment));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell that you want to comment does not exist",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Parameter type does not exist",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/timeline/add-comments', function ($request,$response) {

  try{
   $con = $this->db;
   $owner_id = $request->getParam('owner_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $type = $request->getParam('type');
   $commented_id = $request->getParam('commented_id');
   $comment = $request->getParam('comment');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($owner_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: owner_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($type)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: type",
               "status"=>500)));
   } else if(empty($commented_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: commented_id",
               "status"=>500)));
   } else if(empty($comment)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: comment",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"impersonate_not_valid",
                 "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                 "status"=>422)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "type"=>"impersonate_not_exist",
                       "message"=>"Usuario impersonado con este rol no existe",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :owner_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':owner_id' => $owner_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $final_d = date("Y-m-d H:i:s");

      if ($type == 'user') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $name_commented = $result_fi['first_name'];
          $last_name_commented = $result_fi['last_name'];

          $role_commented = $result_fi['rol'];

          $sql = "INSERT INTO timeline_user (`comment`, `type_user`,`user_id`,`member_id`,`owner_id`,`created_at`,`updated_at`) VALUES (:comment,:type,:commented_id,NULL,:owner_id,'$final_d','$final_d')";
          
          $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          
          $values = array(
                 ':comment' => $comment,
                 ':type' => $type,
                 ':commented_id' => $commented_id,
                 ':owner_id' => $owner_id
                 );
          
          $result = $pre->execute($values);
          $final_id = $con->lastInsertId();

          /*Obtain name of owner comment*/
          $pre_ow = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :owner_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ow = array(':owner_id' => $owner_id,':church_id' => $church_id);
          $pre_ow->execute($values_ow);
          $result_ow = $pre_ow->fetch();

          $first_name = $result_ow['first_name'];
          $last_name = $result_ow['last_name'];

          /*comments members*/  
          if ($role_commented == '5') {
            
            $pre_mem = $con->prepare("SELECT *
                                     FROM user_groups
                                     WHERE user_id = :commented_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_mem = array(':commented_id' => $commented_id);
            $pre_mem->execute($values_mem);
            $result_mem = $pre_mem->fetch();

            /*obtain sector*/
            $sector_mem = $result_mem['sector_id'];

            /*obtain cell*/
            $cell_mem = $result_mem['cell_id'];

            /*obtain supervisor*/
            $pre_le = $con->prepare("SELECT *
                                     FROM groups_sectors
                                     WHERE id = :sector_mem", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_le = array(':sector_mem' => $sector_mem);
            $pre_le->execute($values_le);
            $result_le = $pre_le->fetch();

            $lead_princi = $result_le['supervisor'];

          } else if ($role_commented == '4') {
            
            $pre_mem = $con->prepare("SELECT *
                                     FROM user_groups
                                     WHERE user_id = :commented_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_mem = array(':commented_id' => $commented_id);
            $pre_mem->execute($values_mem);
            $result_mem = $pre_mem->fetch();

            /*obtain zone*/
            $zone_mem = $result_mem['zone_id'];

            /*obtain sector*/
            $sector_mem = $result_mem['sector_id'];

            /*obtain zone_pastor*/
            $pre_le = $con->prepare("SELECT *
                                     FROM groups_zones
                                     WHERE id = :zone_mem", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_le = array(':zone_mem' => $zone_mem);
            $pre_le->execute($values_le);
            $result_le = $pre_le->fetch();

            $lead_princi = $result_le['zone_pastor'];

          } else if ($role_commented == '3') {
            
            $pre_mem = $con->prepare("SELECT *
                                     FROM user_groups
                                     WHERE user_id = :commented_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_mem = array(':commented_id' => $commented_id);
            $pre_mem->execute($values_mem);
            $result_mem = $pre_mem->fetch();

            /*obtain district*/
            $district_mem = $result_mem['district_id'];

            /*obtain zone*/
            $zone_mem = $result_mem['zone_id'];

            /*obtain district_pastor*/
            $pre_le = $con->prepare("SELECT *
                                     FROM groups_districts
                                     WHERE id = :district_mem", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_le = array(':district_mem' => $district_mem);
            $pre_le->execute($values_le);
            $result_le = $pre_le->fetch();

            $lead_princi = $result_le['district_pastor'];

          } else if ($role_commented == '2') {
            
            $pre_mem = $con->prepare("SELECT *
                                     FROM user_groups
                                     WHERE user_id = :commented_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_mem = array(':commented_id' => $commented_id);
            $pre_mem->execute($values_mem);
            $result_mem = $pre_mem->fetch();

            /*obtain district*/
            $district_mem = $result_mem['district_id'];

          }


          if($result){

            /*************** ACTIVITIES ***********************/

            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity Other member left a comment in their timeline*/
              $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " left a comment in their timeline";
              $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " dejÃ³ un comentario en tu timeline";

            } else{

              /*Activity Other member left a comment in their timeline*/
              $en_message = $first_name . " " . $last_name . " left a comment in their timeline";
              $es_message = $first_name . " " . $last_name . " dejÃ³ un comentario en tu timeline";

            }

            /*Activity Other member left a comment in their timeline*/
            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'1',:final_id,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message, 
                ':en_message' => $en_message, 
                ':id_m' => $commented_id,
                ':final_id' => $final_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => array('message' => 'Comentario agregado exitosamente', 'id' => $final_id)));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                  "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"user_commented",
                      "message"=>"El usuario al que quieres comentar no existe",
                      "status"=>422)));
        }
        
      } else if ($type == 'member') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        $final_role = $result_fi['role'];

        if ($result_fi) {

          $name_commented = $result_fi['first_name'];
          $last_name_commented = $result_fi['last_name'];
          $cell_commented = $result_fi['cell_id'];
          $role_commented = $result_fi['role'];

          $sql = "INSERT INTO timeline_user (`comment`, `type_user`,`user_id`,`member_id`,`owner_id`,`created_at`,`updated_at`) VALUES (:comment,:type,NULL,:commented_id,:owner_id,'$final_d','$final_d')";
          
          $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          
          $values = array(
                 ':comment' => $comment,
                 ':type' => $type,
                 ':commented_id' => $commented_id,
                 ':owner_id' => $owner_id
                 );
          
          $result = $pre->execute($values);
          $final_id = $con->lastInsertId();

          /*Obtain name of owner comment*/
          $pre_ow = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :owner_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ow = array(':owner_id' => $owner_id,':church_id' => $church_id);
          $pre_ow->execute($values_ow);
          $result_ow = $pre_ow->fetch();

          $first_name = $result_ow['first_name'];
          $last_name = $result_ow['last_name'];

          /*Obtain leader of cell commented (activity)*/
          $pre_c = $con->prepare("SELECT *
                                   FROM groups_cells
                                   WHERE id = :cell_commented AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_c = array(':cell_commented' => $cell_commented,':church_id' => $church_id);
          $pre_c->execute($values_c);
          $result_c = $pre_c->fetch();

          $principal_leader = $result_c['leader'];

          if($result){

            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity Other member left a comment in their timeline (Guest/Cell Member)*/
              $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " left a comment in their timeline";
              $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " dejÃ³ un comentario en tu timeline";

            }else{

              /*Activity Other member left a comment in their timeline (Guest/Cell Member)*/
              $en_message = $first_name . " " . $last_name . " left a comment in their timeline";
              $es_message = $first_name . " " . $last_name . " dejÃ³ un comentario en tu timeline";
            }

            /*Activity Other member left a comment in their timeline (Guest/Cell Member)*/
            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'1',:final_id,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message,
                ':en_message' => $en_message, 
                ':id_m' => $commented_id,
                ':final_id' => $final_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => array('message' => 'Comentario agregado exitosamente', 'id' => $final_id)));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                  "status"=>422)));
          }


        }else{

          if ($final_role == '1') {
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"member_commented",
                        "message"=>"El invitado al que quieres comentar no existe.",
                        "status"=>422)));
          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "type"=>"member_commented",
                      "message"=>"El miembro al que quieres comentar no existe.",
                      "status"=>422)));

          }
          
        }

        
      } else if ($type == 'district') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $final_dis_pastor = $result_fi['district_pastor'];

          $final_dis = $result_fi['district_code'];

          $sql = "INSERT INTO timeline_group (`comment`, `type_group`,`owner_id`,`district_id`,`zone_id`,`sector_id`,`cell_id`,`created_at`,`updated_at`) VALUES (:comment,:type,:owner_id,:commented_id,NULL,NULL,NULL,'$final_d','$final_d')";
          
          $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          
          $values = array(
            ':comment' => $comment,
            ':type' => $type,
            ':commented_id' => $commented_id,
            ':owner_id' => $owner_id
          );
          
          $result = $pre->execute($values);
          $final_id = $con->lastInsertId();


          /*Obtain name of owner comment*/
          $pre_ow = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :owner_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ow = array(':owner_id' => $owner_id,':church_id' => $church_id);
          $pre_ow->execute($values_ow);
          $result_ow = $pre_ow->fetch();

          $first_name = $result_ow['first_name'];
          $last_name = $result_ow['last_name'];


          if($result){

            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*ACTIVITY GROUPS*/
              /*Activity Other member left a comment in the District (District)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " left a comment in district D" . $final_dis;
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " dejÃ³ un comentario en el distrito D" . $final_dis;

            }else{

              /*ACTIVITY GROUPS*/
              /*Activity Other member left a comment in the District (District)*/
              $en_message2 = $first_name . " " . $last_name . " left a comment in district D" . $final_dis;
              $es_message2 = $first_name . " " . $last_name . " dejÃ³ un comentario en el distrito D" . $final_dis;
            }

            /*ACTIVITY GROUPS*/

            /*Activity Other member left a comment in the District (District)*/
            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:commented_id,NULL,NULL,NULL,NULL,NULL,'1',NULL, :final_id, :final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2, 
                ':en_message2' => $en_message2, 
                ':commented_id' => $commented_id,
                ':final_id' => $final_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => array('message' => 'Comentario agregado exitosamente', 'id' => $final_id)));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                  "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"district_commented",
                      "message"=>"El distrito al que quieres comentar no existe.",
                      "status"=>422)));
        }


      }else if ($type == 'zone') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $final_dis = $result_fi['district_code'];
          $final_zone = $result_fi['zone_code'];

          $final_zone_pastor = $result_fi['zone_pastor'];
          $district_f = $result_fi['district_id'];


          $sql = "INSERT INTO timeline_group (`comment`, `type_group`,`owner_id`,`district_id`,`zone_id`,`sector_id`,`cell_id`,`created_at`,`updated_at`) VALUES (:comment,:type,:owner_id,NULL,:commented_id,NULL,NULL,'$final_d','$final_d')";
          
          $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          
          $values = array(
            ':comment' => $comment,
            ':type' => $type,
            ':commented_id' => $commented_id,
            ':owner_id' => $owner_id
          );
          
          $result = $pre->execute($values);
          $final_id = $con->lastInsertId();


          /*Obtain name of owner comment*/
          $pre_ow = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :owner_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ow = array(':owner_id' => $owner_id,':church_id' => $church_id);
          $pre_ow->execute($values_ow);
          $result_ow = $pre_ow->fetch();

          $first_name = $result_ow['first_name'];
          $last_name = $result_ow['last_name'];

          if($result){

            /*************** ACTIVITIES ***********************/
            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*ACTIVITY GROUPS*/

              /*Activity Other member left a comment in the Zone (Zone)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " left a comment in Zone D" . $final_dis . " Z" . $final_zone;
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " dejÃ³ un comentario en la Zona D" . $final_dis . " Z" . $final_zone;

            }else{

              /*ACTIVITY GROUPS*/

              /*Activity Other member left a comment in the Zone (Zone)*/
              $en_message2 = $first_name . " " . $last_name . " left a comment in Zone D" . $final_dis . " Z" . $final_zone;
              $es_message2 = $first_name . " " . $last_name . " dejÃ³ un comentario en la Zona D" . $final_dis . " Z" . $final_zone;
            }  

            /*ACTIVITY GROUPS*/

            /*Activity Other member left a comment in the Zone (Zone)*/
            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:commented_id,NULL,NULL,NULL,NULL,'1',NULL, :final_id, :final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2, 
                ':en_message2' => $en_message2, 
                ':commented_id' => $commented_id,
                ':final_id' => $final_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => array('message' => 'Comentario agregado exitosamente', 'id' => $final_id)));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                  "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"zone_commented",
                      "message"=>"La zona al que quieres comentar no existe.",
                      "status"=>422)));
        }

      } else if ($type == 'sector') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $final_dis = $result_fi['district_code'];
          $final_zone = $result_fi['zone_code'];
          $final_sec = $result_fi['sector_code'];

          $final_supervisor = $result_fi['supervisor'];
          $zone_f = $result_fi['zone_id'];

          $sql = "INSERT INTO timeline_group (`comment`, `type_group`,`owner_id`,`district_id`,`zone_id`,`sector_id`,`cell_id`,`created_at`,`updated_at`) VALUES (:comment,:type,:owner_id,NULL,NULL,:commented_id,NULL,'$final_d','$final_d')";
          
          $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          
          $values = array(
            ':comment' => $comment,
            ':type' => $type,
            ':commented_id' => $commented_id,
            ':owner_id' => $owner_id
          );
          
          $result = $pre->execute($values);
          $final_id = $con->lastInsertId();


          /*Obtain name of owner comment*/
          $pre_ow = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :owner_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ow = array(':owner_id' => $owner_id,':church_id' => $church_id);
          $pre_ow->execute($values_ow);
          $result_ow = $pre_ow->fetch();

          $first_name = $result_ow['first_name'];
          $last_name = $result_ow['last_name'];

          if($result){

            /*************** ACTIVITIES ***********************/
            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*ACTIVITY GROUPS*/

              /*Activity Other member left a comment in the Sector (Sector)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " left a comment in Sector D" . $final_dis . " Z" . $final_zone . " S" . $final_sec;
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " dejÃ³ un comentario en el sector D" . $final_dis . " Z" . $final_zone . " S" . $final_sec;

            }else{

              /*ACTIVITY GROUPS*/

              /*Activity Other member left a comment in the Sector (Sector)*/
              $en_message2 = $first_name . " " . $last_name . " left a comment in Sector D" . $final_dis . " Z" . $final_zone . " S" . $final_sec;
              $es_message2 = $first_name . " " . $last_name . " dejÃ³ un comentario en el sector D" . $final_dis . " Z" . $final_zone . " S" . $final_sec;
            }

            /*ACTIVITY GROUPS*/

            /*Activity Other member left a comment in the Sector (Sector)*/
            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:commented_id,NULL,NULL,NULL,'1',NULL, :final_id, :final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2, 
                ':en_message2' => $en_message2, 
                ':commented_id' => $commented_id,
                ':final_id' => $final_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => array('message' => 'Comentario agregado exitosamente', 'id' => $final_id)));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                  "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"sector_commented",
                      "message"=>"El sector al que quieres comentar no existe.",
                      "status"=>422)));
        }

      }else if ($type == 'cell') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $final_dis = $result_fi['district_code'];
          $final_zone = $result_fi['zone_code'];
          $final_sec = $result_fi['sector_code'];
          $final_cell = $result_fi['cell_code'];

          $final_leader = $result_fi['leader'];
          $sector_f = $result_fi['sector_id'];

          $sql = "INSERT INTO timeline_group (`comment`, `type_group`,`owner_id`,`district_id`,`zone_id`,`sector_id`,`cell_id`,`created_at`,`updated_at`) VALUES (:comment,:type,:owner_id,NULL,NULL,NULL,:commented_id,'$final_d','$final_d')";
          
          $pre  = $con->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          
          $values = array(
            ':comment' => $comment,
            ':type' => $type,
            ':commented_id' => $commented_id,
            ':owner_id' => $owner_id
          );
          
          $result = $pre->execute($values);
          $final_id = $con->lastInsertId();

          /*Obtain name of owner comment*/
          $pre_ow = $con->prepare("SELECT *
                                   FROM user
                                   WHERE id = :owner_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ow = array(':owner_id' => $owner_id,':church_id' => $church_id);
          $pre_ow->execute($values_ow);
          $result_ow = $pre_ow->fetch();

          $first_name = $result_ow['first_name'];
          $last_name = $result_ow['last_name'];

          if($result){

            /*************** ACTIVITIES ***********************/
            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*ACTIVITY GROUPS*/

              /*Activity Other member left a comment in the Cell Group (Cell Group)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " left a comment in Cell Group D" . $final_dis . " Z" . $final_zone . " S" . $final_sec . " C" . $final_cell;
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " dejÃ³ un comentario en la cÃ©lula D" . $final_dis . " Z" . $final_zone . " S" . $final_sec . " C" . $final_cell;

            }else{

              /*ACTIVITY GROUPS*/

              /*Activity Other member left a comment in the Cell Group (Cell Group)*/
              $en_message2 = $first_name . " " . $last_name . " left a comment in Cell Group D" . $final_dis . " Z" . $final_zone . " S" . $final_sec . " C" . $final_cell;
              $es_message2 = $first_name . " " . $last_name . " dejÃ³ un comentario en la cÃ©lula D" . $final_dis . " Z" . $final_zone . " S" . $final_sec . " C" . $final_cell;
            }

            /*ACTIVITY GROUPS*/

            /*Activity Other member left a comment in the Cell Group (Cell Group)*/
            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:commented_id,NULL,NULL,'1',NULL, :final_id, :final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2, 
                ':en_message2' => $en_message2, 
                ':commented_id' => $commented_id,
                ':final_id' => $final_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => array('message' => 'Comentario agregado exitosamente.', 'id' => $final_id)));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                  "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"cell_commented",
                      "message"=>"La cÃ©lula que quieres comentar no existe.",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"type_doesnt_exist",
                    "message"=>"El tipo de parÃ¡metro no existe",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/timeline/edit-comments', function ($request,$response) {

  try{
   $con = $this->db;
   $owner_id = $request->getParam('owner_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $type = $request->getParam('type');
   $commented_id = $request->getParam('commented_id');
   $comment = $request->getParam('comment');
   $comment_id = $request->getParam('comment_id');

   if(empty($owner_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: owner_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($type)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: type",
               "status"=>500)));
   } else if(empty($commented_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: commented_id",
               "status"=>500)));
   } else if(empty($comment)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: comment",
               "status"=>500)));
   } else if(empty($comment_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: comment_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :owner_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':owner_id' => $owner_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $final_d = date("Y-m-d H:i:s");

      if ($type == 'user') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_user
                                   WHERE id = :comment_id AND owner_id = :owner_id AND user_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("UPDATE timeline_user SET comment = :comment,
                                   type_user = :type,
                                   user_id = :commented_id,
                                   owner_id = :owner_id,
                                   updated_at = :updated_at
                                   WHERE id = :comment_id AND owner_id = :owner_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment' => $comment,
              ':type' => $type,
              ':commented_id' => $commented_id,
              ':owner_id' => $owner_id,
              ':comment_id' => $comment_id,
              ':updated_at' => $final_d
              );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario editado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"user_commented",
                      "message"=>"El usuario no existe",
                      "status"=>422)));
        }
        
      } else if ($type == 'member') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_user
                                   WHERE id = :comment_id AND owner_id = :owner_id AND member_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("UPDATE timeline_user SET comment = :comment,
                                   type_user = :type,
                                   member_id = :commented_id,
                                   owner_id = :owner_id,
                                   updated_at = :updated_at
                                   WHERE id = :comment_id AND owner_id = :owner_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment' => $comment,
              ':type' => $type,
              ':commented_id' => $commented_id,
              ':owner_id' => $owner_id,
              ':comment_id' => $comment_id,
              ':updated_at' => $final_d
              );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario editado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{

          if ($final_role == '1') {
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"member_commented",
                        "message"=>"El invitado no existe.",
                        "status"=>422)));
          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"member_commented",
                        "message"=>"El miembro no existe.",
                        "status"=>422)));

          }
          
        }

        
      } else if ($type == 'district') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND district_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("UPDATE timeline_group SET comment = :comment,
                                   type_group = :type,
                                   district_id = :commented_id,
                                   owner_id = :owner_id,
                                   updated_at = :updated_at
                                   WHERE id = :comment_id AND owner_id = :owner_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment' => $comment,
              ':type' => $type,
              ':commented_id' => $commented_id,
              ':owner_id' => $owner_id,
              ':comment_id' => $comment_id,
              ':updated_at' => $final_d
              );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario editado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"district_commented",
                      "message"=>"El distrito no existe.",
                      "status"=>422)));
        }


      }else if ($type == 'zone') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND zone_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("UPDATE timeline_group SET comment = :comment,
                                   type_group = :type,
                                   zone_id = :commented_id,
                                   owner_id = :owner_id,
                                   updated_at = :updated_at
                                   WHERE id = :comment_id AND owner_id = :owner_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment' => $comment,
              ':type' => $type,
              ':commented_id' => $commented_id,
              ':owner_id' => $owner_id,
              ':comment_id' => $comment_id,
              ':updated_at' => $final_d
              );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario editado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"zone_commented",
                      "message"=>"La zona no existe.",
                      "status"=>422)));
        }

      } else if ($type == 'sector') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND sector_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("UPDATE timeline_group SET comment = :comment,
                                   type_group = :type,
                                   sector_id = :commented_id,
                                   owner_id = :owner_id,
                                   updated_at = :updated_at
                                   WHERE id = :comment_id AND owner_id = :owner_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment' => $comment,
              ':type' => $type,
              ':commented_id' => $commented_id,
              ':owner_id' => $owner_id,
              ':comment_id' => $comment_id,
              ':updated_at' => $final_d
              );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Commentario editado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"sector_commented",
                      "message"=>"El sector no existe.",
                      "status"=>422)));
        }

      }else if ($type == 'cell') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND cell_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("UPDATE timeline_group SET comment = :comment,
                                   type_group = :type,
                                   cell_id = :commented_id,
                                   owner_id = :owner_id,
                                   updated_at = :updated_at
                                   WHERE id = :comment_id AND owner_id = :owner_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment' => $comment,
              ':type' => $type,
              ':commented_id' => $commented_id,
              ':owner_id' => $owner_id,
              ':comment_id' => $comment_id,
              ':updated_at' => $final_d
              );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Commentario editado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"cell_commented",
                      "message"=>"La cÃ©lula no existe.",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"type_doesnt_exist",
                    "message"=>"El tipo de parÃ¡metro no existe",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/timeline/delete-comments', function ($request,$response) {

  try{
   $con = $this->db;
   $owner_id = $request->getParam('owner_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $type = $request->getParam('type');
   $commented_id = $request->getParam('commented_id');
   $comment_id = $request->getParam('comment_id');

   if(empty($owner_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: owner_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($type)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: type",
               "status"=>500)));
   } else if(empty($commented_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: commented_id",
               "status"=>500)));
   } else if(empty($comment_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: comment_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :owner_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':owner_id' => $owner_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $final_d = date("Y-m-d H:i:s");

      if ($type == 'user') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_user
                                   WHERE id = :comment_id AND owner_id = :owner_id AND user_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("DELETE FROM timeline_user WHERE id = :comment_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment_id' => $comment_id
            );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario eliminado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"user_commented",
                      "message"=>"El usuario comentado no existe",
                      "status"=>422)));
        }
        
      } else if ($type == 'member') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_user
                                   WHERE id = :comment_id AND owner_id = :owner_id AND member_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("DELETE FROM timeline_user WHERE id = :comment_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment_id' => $comment_id
            );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario eliminado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "type"=>"member_commented",
                                    "message"=>"El miembro al que quieres comentar no existe.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{

          if ($final_role == '1') {
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"member_commented",
                        "message"=>"El invitado comentado no existe.",
                        "status"=>422)));
          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"member_commented",
                        "message"=>"El miembro comentado no existe.",
                        "status"=>422)));

          }
          
        }

        
      } else if ($type == 'district') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND district_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("DELETE FROM timeline_group WHERE id = :comment_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment_id' => $comment_id
            );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario eliminado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"district_commented",
                      "message"=>"El distrito comentado no existe.",
                      "status"=>422)));
        }


      }else if ($type == 'zone') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND zone_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("DELETE FROM timeline_group WHERE id = :comment_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment_id' => $comment_id
            );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario eliminado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"zone_commented",
                      "message"=>"La zona comentada no existe.",
                      "status"=>422)));
        }

      } else if ($type == 'sector') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND sector_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("DELETE FROM timeline_group WHERE id = :comment_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment_id' => $comment_id
            );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Comentario eliminado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"sector_commented",
                      "message"=>"El sector comentado no existe.",
                      "status"=>422)));
        }

      }else if ($type == 'cell') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :commented_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':commented_id' => $commented_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $pre_ve = $con->prepare("SELECT *
                                   FROM timeline_group
                                   WHERE id = :comment_id AND owner_id = :owner_id AND cell_id = :commented_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ve = array(':comment_id' => $comment_id,':owner_id' => $owner_id, ':commented_id' => $commented_id);
          $pre_ve->execute($values_ve);
          $result_ve = $pre_ve->fetch();

          if ($result_ve) {

            $pre = $con->prepare("DELETE FROM timeline_group WHERE id = :comment_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values = array(
              ':comment_id' => $comment_id
            );

            $result = $pre->execute($values);


            if($result){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Commentario eliminado exitosamente'));
            }else{
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"comment_doesnt_exist",
                        "message"=>"El comentario no existe",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"cell_commented",
                      "message"=>"La cÃ©lula comentada no existe.",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"type_doesnt_exist",
                    "message"=>"El tipo de parÃ¡metro no existe",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/timeline/list-timeline', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $type = $request->getParam('type');
   $id_timeline_owner = $request->getParam('id_timeline_owner');
   $language = $request->getParam('language');
   $start_date = $request->getParam('start_date');
   $end_date = $request->getParam('end_date');
   $keywords = $request->getParam('keywords');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($type)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: type",
               "status"=>500)));
   } else if(empty($id_timeline_owner)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: id_timeline_owner",
               "status"=>500)));
   } else if(empty($language)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: language",
               "status"=>500)));
   }


  $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$start_date);
  $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$end_date);


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $final_d = date("Y-m-d H:i:s");

      /*TYPE USER*/
      if ($type == 'user') {

        /*verified user exits*/
        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :id_timeline_owner AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':id_timeline_owner' => $id_timeline_owner,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

        	
        	$date_filter=null;

        	/*if exist date filter*/
        	if ($start_date && $end_date) {

        	  if (!$valid_initial_date || !$valid_end_date) {
        	    return $response->withStatus(500)
        	            ->withHeader('Content-Type', 'application/json')
        	            ->withJson(array('error' => array(
        	              "message"=>"Debe ingresar una fecha inicial y una fecha de finalizaciÃ³n vÃ¡lidas",
        	              "status"=>500)));
        	  } else if($start_date > $end_date){
        	    return $response->withStatus(500)
        	            ->withHeader('Content-Type', 'application/json')
        	            ->withJson(array('error' => array(
        	              "message"=>"La fecha de finalizaciÃ³n debe ser mayor que la fecha de inicio",
        	              "status"=>500)));
        	  }

        	  $date_filter = "AND (activity.created_at BETWEEN '".$start_date."' AND '".$end_date."')";
        	}

        	/*verified language*/
        	if ($language == 'en') {
        	  /*sql of complete activity en*/
        	  $sql_en = "SELECT en_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE user_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

        	}else if ($language == 'es'){
        	  /*sql of complete activity es*/
        	  $sql_en = "SELECT es_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE user_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

        	}else{
        	  return $response->withStatus(422)
        	          ->withHeader('Content-Type', 'application/json')
        	          ->withJson(array('error' => array(
        	              "message"=>"Tipo de lenguaje invÃ¡lido",
        	              "status"=>422)));
        	}

        	foreach ($con->query($sql_en) as $row1) {

        	  $activity_line = $row1;

        	  if ($row1['is_comment'] == '1') {

        	    /*sql for comment*/
        	    $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_user.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_user.owner_id = user.id) as full_name, (SELECT id from user where timeline_user.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_user.owner_id = user.id) as role_user_commented FROM timeline_user where timeline_user.id = :comment_id";

              if ($row1['id_comment_user_timeline'] == null){

                $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_user.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_user.owner_id = user.id) as role_user_commented FROM timeline_group where timeline_group.id = :comment_id";

              }

        	    $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        	    $values_gro = array(
        	      ':comment_id' => $row1['id_comment_user_timeline'] != null ?$row1['id_comment_user_timeline']:$row1['id_comment_group_timeline']
        	    );
        	    
        	    $result_gro = $pre_gro->execute($values_gro);
        	    $result_gro = $pre_gro->fetch();

        	    /*add info owner comment*/
              $activity_line['owner_id'] = $result_gro['owner_id'];
        	    $activity_line['comment'] = $result_gro['comment'];
        	    $activity_line['full_name'] = $result_gro['full_name'];
              $activity_line['profile_picture'] = $result_gro['profile_picture'];
              $activity_line['id_user_commented'] = $result_gro['id_user_commented'];
        	    $activity_line['role_user_commented'] = $result_gro['role_user_commented'];

        	  }

        	  /*final array*/
        	  $timeline_ac[] = $activity_line;
        	}

        	/*if exist keywords filter*/
        	if ($keywords) {

        	  $timeline_filter = [];
        	  /*regex keywords*/
        	  $regex  = "/". $keywords. "/";

        	  foreach ($timeline_ac as $item) {
        	    /*preg_match for comment or msg*/
        	    if(preg_match($regex, $item['comment'], $match) || preg_match($regex, $item['activity_msg'], $match)) 
        	    {
        	      $timeline_filter[] = $item;
        	    }
        	  }

        	  if (count($timeline_filter) == 0) {
        	    $timeline_ac = null;
        	  }else{
        	    $timeline_ac = $timeline_filter;
        	  }

        	}
        	
        	return $response->withStatus(200)
        	                  ->withHeader('Content-Type', 'application/json')
        	                  ->withJson(array('response' => $timeline_ac));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"user_timeline_owner",
                      "message"=>"El usuario no existe.",
                      "status"=>422)));
        }
        
        /*TYPE MEMBER*/
      } else if ($type == 'member') {

        /*verified member exits*/
        $pre_fi = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :id_timeline_owner AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':id_timeline_owner' => $id_timeline_owner,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();


        if ($result_fi) {

          $date_filter=null;

          /*if exist date filter*/
          if ($start_date && $end_date) {

            if (!$valid_initial_date || !$valid_end_date) {
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Debe ingresar una fecha inicial y una fecha de finalizaciÃ³n vÃ¡lidas",
                        "status"=>500)));
            } else if($start_date > $end_date){
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"La fecha de finalizaciÃ³n debe ser mayor que la fecha de inicio",
                        "status"=>500)));
            }

            $date_filter = "AND (activity.created_at BETWEEN '".$start_date."' AND '".$end_date."')";
          }

          /*verified language*/
          if ($language == 'en') {
            /*sql of complete activity en*/
            $sql_en = "SELECT en_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE member_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else if ($language == 'es'){
            /*sql of complete activity es*/
            $sql_en = "SELECT es_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE member_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Tipo de lenguaje invÃ¡lido",
                        "status"=>422)));
          }

          foreach ($con->query($sql_en) as $row1) {

            $activity_line = $row1;

            if ($row1['is_comment'] == '1') {

              /*sql for comment*/
              $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_user.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_user.owner_id = user.id) as full_name, (SELECT id from user where timeline_user.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_user.owner_id = user.id) as role_user_commented FROM timeline_user where timeline_user.id = :comment_id";

              if ($row1['id_comment_user_timeline'] == null){

                $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_user.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_user.owner_id = user.id) as role_user_commented FROM timeline_group where timeline_group.id = :comment_id";

              }

              $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_gro = array(
                ':comment_id' => $row1['id_comment_user_timeline'] != null ?$row1['id_comment_user_timeline']:$row1['id_comment_group_timeline']
              );
              
              $result_gro = $pre_gro->execute($values_gro);
              $result_gro = $pre_gro->fetch();

              /*add info owner comment*/
              $activity_line['owner_id'] = $result_gro['owner_id'];
              $activity_line['comment'] = $result_gro['comment'];
              $activity_line['full_name'] = $result_gro['full_name'];
              $activity_line['profile_picture'] = $result_gro['profile_picture'];
              $activity_line['id_user_commented'] = $result_gro['id_user_commented'];
              $activity_line['role_user_commented'] = $result_gro['role_user_commented'];

            }

            /*final array*/
            $timeline_ac[] = $activity_line;
          }

          /*if exist keywords filter*/
          if ($keywords) {

            $timeline_filter = [];
            /*regex keywords*/
            $regex  = "/". $keywords. "/";

            foreach ($timeline_ac as $item) {
              /*preg_match for comment or msg*/
              if(preg_match($regex, $item['comment'], $match) || preg_match($regex, $item['activity_msg'], $match)) 
              {
                $timeline_filter[] = $item;
              }
            }

            if (count($timeline_filter) == 0) {
              $timeline_ac = null;
            }else{
              $timeline_ac = $timeline_filter;
            }

          }
          
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_ac));


        }else{

          return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"member_timeline_owner",
                        "message"=>"El miembro no existe.",
                        "status"=>422)));          
        }

        
      } else if ($type == 'district') {

        /*verified district exits*/
        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :id_timeline_owner AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':id_timeline_owner' => $id_timeline_owner,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $date_filter=null;

          /*if exist date filter*/
          if ($start_date && $end_date) {

            if (!$valid_initial_date || !$valid_end_date) {
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Debe ingresar una fecha inicial y una fecha de finalizaciÃ³n vÃ¡lidas",
                        "status"=>500)));
            } else if($start_date > $end_date){
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"La fecha de finalizaciÃ³n debe ser mayor que la fecha de inicio",
                        "status"=>500)));
            }

            $date_filter = "AND (activity.created_at BETWEEN '".$start_date."' AND '".$end_date."')";
          }

          /*verified language*/
          if ($language == 'en') {
            /*sql of complete activity en*/
            $sql_en = "SELECT en_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE district_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else if ($language == 'es'){
            /*sql of complete activity es*/
            $sql_en = "SELECT es_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE district_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Tipo de lenguaje invÃ¡lido",
                        "status"=>422)));
          }

          foreach ($con->query($sql_en) as $row1) {

            $activity_line = $row1;

            if ($row1['is_comment'] == '1') {

              /*sql for comment*/
              $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_group where timeline_group.id = :comment_id";

              if ($row1['id_comment_group_timeline'] == null){

                $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_user where timeline_group.id = :comment_id";

              }

              $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_gro = array(
                ':comment_id' => $row1['id_comment_group_timeline'] != null ?$row1['id_comment_group_timeline']:$row1['id_comment_user_timeline']
              );
              
              $result_gro = $pre_gro->execute($values_gro);
              $result_gro = $pre_gro->fetch();

              /*add info owner comment*/
              $activity_line['owner_id'] = $result_gro['owner_id'];
              $activity_line['comment'] = $result_gro['comment'];
              $activity_line['full_name'] = $result_gro['full_name'];
              $activity_line['profile_picture'] = $result_gro['profile_picture'];
              $activity_line['id_user_commented'] = $result_gro['id_user_commented'];
              $activity_line['role_user_commented'] = $result_gro['role_user_commented'];

            }

            /*final array*/
            $timeline_ac[] = $activity_line;
          }

          /*if exist keywords filter*/
          if ($keywords) {

            $timeline_filter = [];
            /*regex keywords*/
            $regex  = "/". $keywords. "/";

            foreach ($timeline_ac as $item) {
              /*preg_match for comment or msg*/
              if(preg_match($regex, $item['comment'], $match) || preg_match($regex, $item['activity_msg'], $match)) 
              {
                $timeline_filter[] = $item;
              }
            }

            if (count($timeline_filter) == 0) {
              $timeline_ac = null;
            }else{
              $timeline_ac = $timeline_filter;
            }

          }
          
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_ac));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"district_timeline_owner",
                      "message"=>"El distrito no existe.",
                      "status"=>422)));
        }


      }else if ($type == 'zone') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_zones
                                 WHERE id = :id_timeline_owner AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':id_timeline_owner' => $id_timeline_owner,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $date_filter=null;

          /*if exist date filter*/
          if ($start_date && $end_date) {

            if (!$valid_initial_date || !$valid_end_date) {
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Debe ingresar una fecha inicial y una fecha de finalizaciÃ³n vÃ¡lidas",
                        "status"=>500)));
            } else if($start_date > $end_date){
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"La fecha de finalizaciÃ³n debe ser mayor que la fecha de inicio",
                        "status"=>500)));
            }

            $date_filter = "AND (activity.created_at BETWEEN '".$start_date."' AND '".$end_date."')";
          }

          /*verified language*/
          if ($language == 'en') {
            /*sql of complete activity en*/
            $sql_en = "SELECT en_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE zone_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else if ($language == 'es'){
            /*sql of complete activity es*/
            $sql_en = "SELECT es_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE zone_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Tipo de lenguaje invÃ¡lido",
                        "status"=>422)));
          }

          foreach ($con->query($sql_en) as $row1) {

            $activity_line = $row1;

            if ($row1['is_comment'] == '1') {

              /*sql for comment*/
              $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_group where timeline_group.id = :comment_id";


              if ($row1['id_comment_group_timeline'] == null){

                $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_user where timeline_group.id = :comment_id";

              }

              $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_gro = array(
                ':comment_id' => $row1['id_comment_group_timeline'] != null ?$row1['id_comment_group_timeline']:$row1['id_comment_user_timeline']
              );
              
              $result_gro = $pre_gro->execute($values_gro);
              $result_gro = $pre_gro->fetch();

              /*add info owner comment*/
              $activity_line['owner_id'] = $result_gro['owner_id'];
              $activity_line['comment'] = $result_gro['comment'];
              $activity_line['full_name'] = $result_gro['full_name'];
              $activity_line['profile_picture'] = $result_gro['profile_picture'];
              $activity_line['id_user_commented'] = $result_gro['id_user_commented'];
              $activity_line['role_user_commented'] = $result_gro['role_user_commented'];

            }

            /*final array*/
            $timeline_ac[] = $activity_line;
          }

          /*if exist keywords filter*/
          if ($keywords) {

            $timeline_filter = [];
            /*regex keywords*/
            $regex  = "/". $keywords. "/";

            foreach ($timeline_ac as $item) {
              /*preg_match for comment or msg*/
              if(preg_match($regex, $item['comment'], $match) || preg_match($regex, $item['activity_msg'], $match)) 
              {
                $timeline_filter[] = $item;
              }
            }

            if (count($timeline_filter) == 0) {
              $timeline_ac = null;
            }else{
              $timeline_ac = $timeline_filter;
            }

          }
          
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_ac));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"zone_timeline_owner",
                      "message"=>"La zona no existe.",
                      "status"=>422)));
        }

      } else if ($type == 'sector') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_sectors
                                 WHERE id = :id_timeline_owner AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':id_timeline_owner' => $id_timeline_owner,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $date_filter=null;

          /*if exist date filter*/
          if ($start_date && $end_date) {

            if (!$valid_initial_date || !$valid_end_date) {
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Debe ingresar una fecha inicial y una fecha de finalizaciÃ³n vÃ¡lidas",
                        "status"=>500)));
            } else if($start_date > $end_date){
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"La fecha de finalizaciÃ³n debe ser mayor que la fecha de inicio",
                        "status"=>500)));
            }

            $date_filter = "AND (activity.created_at BETWEEN '".$start_date."' AND '".$end_date."')";
          }

          /*verified language*/
          if ($language == 'en') {
            /*sql of complete activity en*/
            $sql_en = "SELECT en_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE sector_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else if ($language == 'es'){
            /*sql of complete activity es*/
            $sql_en = "SELECT es_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE sector_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Tipo de lenguaje invÃ¡lido",
                        "status"=>422)));
          }

          foreach ($con->query($sql_en) as $row1) {

            $activity_line = $row1;

            if ($row1['is_comment'] == '1') {

              /*sql for comment*/
              $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_group where timeline_group.id = :comment_id";

              if ($row1['id_comment_group_timeline'] == null){

                $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_user where timeline_group.id = :comment_id";

              }

              $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_gro = array(
                ':comment_id' => $row1['id_comment_group_timeline'] != null ?$row1['id_comment_group_timeline']:$row1['id_comment_user_timeline']
              );
              
              $result_gro = $pre_gro->execute($values_gro);
              $result_gro = $pre_gro->fetch();

              /*add info owner comment*/
              $activity_line['owner_id'] = $result_gro['owner_id'];
              $activity_line['comment'] = $result_gro['comment'];
              $activity_line['full_name'] = $result_gro['full_name'];
              $activity_line['profile_picture'] = $result_gro['profile_picture'];
              $activity_line['id_user_commented'] = $result_gro['id_user_commented'];
              $activity_line['role_user_commented'] = $result_gro['role_user_commented'];

            }

            /*final array*/
            $timeline_ac[] = $activity_line;
          }

          /*if exist keywords filter*/
          if ($keywords) {

            $timeline_filter = [];
            /*regex keywords*/
            $regex  = "/". $keywords. "/";

            foreach ($timeline_ac as $item) {
              /*preg_match for comment or msg*/
              if(preg_match($regex, $item['comment'], $match) || preg_match($regex, $item['activity_msg'], $match)) 
              {
                $timeline_filter[] = $item;
              }
            }

            if (count($timeline_filter) == 0) {
              $timeline_ac = null;
            }else{
              $timeline_ac = $timeline_filter;
            }

          }
          
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_ac));

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"sector_timeline_owner",
                      "message"=>"El sector no existe.",
                      "status"=>422)));
        }

      }else if ($type == 'cell') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :id_timeline_owner AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':id_timeline_owner' => $id_timeline_owner,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          $date_filter=null;

          /*if exist date filter*/
          if ($start_date && $end_date) {

            if (!$valid_initial_date || !$valid_end_date) {
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Debe ingresar una fecha inicial y una fecha de finalizaciÃ³n vÃ¡lidas",
                        "status"=>500)));
            } else if($start_date > $end_date){
              return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"La fecha de finalizaciÃ³n debe ser mayor que la fecha de inicio",
                        "status"=>500)));
            }

            $date_filter = "AND (activity.created_at BETWEEN '".$start_date."' AND '".$end_date."')";
          }

          /*verified language*/
          if ($language == 'en') {
            /*sql of complete activity en*/
            $sql_en = "SELECT en_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE cell_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else if ($language == 'es'){
            /*sql of complete activity es*/
            $sql_en = "SELECT es_message as activity_msg, is_comment, id_comment_user_timeline, id_comment_group_timeline, created_at FROM activity WHERE cell_id = $id_timeline_owner ".$date_filter." ORDER BY created_at DESC";

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Tipo de lenguaje invÃ¡lido",
                        "status"=>422)));
          }

          foreach ($con->query($sql_en) as $row1) {

            $activity_line = $row1;

            if ($row1['is_comment'] == '1') {

              /*sql for comment*/
              $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_group where timeline_group.id = :comment_id";

              if ($row1['id_comment_group_timeline'] == null){

                $sql_gro = "SELECT *, (SELECT profile_picture from user where timeline_group.owner_id = user.id) as profile_picture, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user where timeline_group.owner_id = user.id) as full_name, (SELECT id from user where timeline_group.owner_id = user.id) as id_user_commented, (SELECT rol from user where timeline_group.owner_id = user.id) as role_user_commented FROM timeline_user where timeline_group.id = :comment_id";

              }

              $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_gro = array(
                ':comment_id' => $row1['id_comment_group_timeline'] != null ?$row1['id_comment_group_timeline']:$row1['id_comment_user_timeline']
              );
              
              $result_gro = $pre_gro->execute($values_gro);
              $result_gro = $pre_gro->fetch();

              /*add info owner comment*/
              $activity_line['owner_id'] = $result_gro['owner_id'];
              $activity_line['comment'] = $result_gro['comment'];
              $activity_line['full_name'] = $result_gro['full_name'];
              $activity_line['profile_picture'] = $result_gro['profile_picture'];
              $activity_line['id_user_commented'] = $result_gro['id_user_commented'];
              $activity_line['role_user_commented'] = $result_gro['role_user_commented'];
            }

            /*final array*/
            $timeline_ac[] = $activity_line;
          }

          /*if exist keywords filter*/
          if ($keywords) {

            $timeline_filter = [];
            /*regex keywords*/
            $regex  = "/". $keywords. "/";

            foreach ($timeline_ac as $item) {
              /*preg_match for comment or msg*/
              if(preg_match($regex, $item['comment'], $match) || preg_match($regex, $item['activity_msg'], $match)) 
              {
                $timeline_filter[] = $item;
              }
            }

            if (count($timeline_filter) == 0) {
              $timeline_ac = null;
            }else{
              $timeline_ac = $timeline_filter;
            }

          }
          
          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => $timeline_ac));


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"cell_timeline_owner",
                      "message"=>"La cÃ©lula no existe.",
                      "status"=>422)));
        }

      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"type_doesnt_exist",
                    "message"=>"El tipo de parÃ¡metro no existe",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/************ REPORTS ******************/

$app->post('/cells/report-members', function ($request,$response) {

  try{
   $con = $this->db;
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');

   if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM groups_cells
                           WHERE id = :cell_id AND church_id = :church_id AND active = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':cell_id' => $cell_id,':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $sql = "SELECT id AS member_id, first_name, last_name,profile_picture,role FROM members_cells WHERE cell_id = $cell_id AND church_id = $church_id AND (role = '1' OR role = '2') AND active = '1'";
    

    foreach ($con->query($sql) as $row) {
      $members[] = $row;
    }


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $members));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Cell does not exist in this church",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/create-reports', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');

   $donations_offering = $request->getParam('donations_offering');
   $donations_events = $request->getParam('donations_events');
   $donations_transport = $request->getParam('donations_transport');

   $total_member_assistance = $request->getParam('total_member_assistance');
   $total_kids_assistance = $request->getParam('total_kids_assistance');
   $total_guest_assistance = $request->getParam('total_guest_assistance');
   $total_doctrine = $request->getParam('total_doctrine');
   $total_celebration = $request->getParam('total_celebration');
   $total_salvation = $request->getParam('total_salvation');
   $total_baptized = $request->getParam('total_baptized');
   $total_schedule_visits = $request->getParam('total_schedule_visits');

   $attendance = $request->getParam('attendance');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!is_numeric($donations_offering)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: donations_offering",
               "status"=>500)));
   } else if(!is_numeric($donations_events)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: donations_events",
               "status"=>500)));
   } else if(!is_numeric($donations_transport)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: donations_transport",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_member_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_member_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_kids_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_kids_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_guest_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_guest_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_doctrine)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_doctrine",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_celebration)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_celebration",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_salvation)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_salvation",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_baptized)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_baptized",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_schedule_visits)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_schedule_visits",
               "status"=>500)));
   } else if(empty($attendance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: attendance",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


   $err_member = 0;
   $err_cell = 0;
   $err_doctrine = 0;
   $err_celebration = 0;
   $err_salvation = 0;
   $err_baptized = 0;
   $err_scheduled = 0;
   $err_val_member = 0;

   for($i = 0; $i < count($attendance); $i++) {

    $pre_mem = $con->prepare("SELECT *
                          FROM members_cells
                          WHERE id = :member_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_mem  = array(':member_id' => $attendance[$i]['member_id']);
    $pre_mem->execute($values_mem);
    $result_mem = $pre_mem->fetch();

     if(empty($attendance[$i]['member_id'])){
       $err_member += 1;
       $err_id = $i;
       $arr[] = $err_id;
     }else if(!preg_match("/^[0-1]+$/i", $attendance[$i]['cell_group'])){
       $err_cell += 1;
       $err_id1 = $i;
       $arr1[] = $err_id1;
     } else if(!preg_match("/^[0-1]+$/i", $attendance[$i]['doctrine'])){
       $err_doctrine += 1;
       $err_id2 = $i;
       $arr2[] = $err_id2;
     } else if(!preg_match("/^[0-1]+$/i",$attendance[$i]['celebration'])){
       $err_celebration += 1;
       $err_id3 = $i;
       $arr3[] = $err_id3;
     } else if(!preg_match("/^[0-1]+$/i",$attendance[$i]['salvations'])){
       $err_salvation += 1;
       $err_id4 = $i;
       $arr4[] = $err_id4;
     } else if(!preg_match("/^[0-1]+$/i",$attendance[$i]['baptized'])){
       $err_baptized += 1;
       $err_id5 = $i;
       $arr5[] = $err_id5;
     } else if(!preg_match("/^[0-1]+$/i", $attendance[$i]['scheduled_visits'])){
       $err_scheduled += 1;
       $err_id6 = $i;
       $arr6[] = $err_id6;
     } else if(empty($result_mem)){
       $err_val_member += 1;
       $err_id7 = $i;
       $arr7[] = $err_id7;
     }

   }


   if($err_member > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "err_id"=>$arr,
               "status"=>500)));

   } else if($err_cell > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_group",
               "err_id"=>$arr1,
               "status"=>500)));

   } else if($err_doctrine > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: doctrine",
               "err_id"=>$arr2,
               "status"=>500)));

   } else if($err_celebration > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: celebration",
               "err_id"=>$arr3,
               "status"=>500)));

   }else if($err_salvation > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: salvations",
               "err_id"=>$arr4,
               "status"=>500)));

   } else if($err_baptized > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: baptized",
               "err_id"=>$arr5,
               "status"=>500)));

   } else if($err_scheduled > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: scheduled_visits",
               "err_id"=>$arr6,
               "status"=>500)));

   } else if($err_val_member > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Member does not exists",
               "err_id"=>$arr7,
               "status"=>500)));

   }


   /*actual date*/
   $today = date("Y-m-d");
   $month = date('n');
   $month_t = date('m');
   $year = date ("Y");

   $prev_y = $year -1;

   /*function general dates*/
   $general_d = generalDates($month, $year, $prev_y);

   $initial_quarter = $general_d['initial_quarter'];
   $final_quarter = $general_d['final_quarter'];
   $initial_quarter2 = $general_d['initial_quarter2'];
   $final_quarter2 = $general_d['final_quarter2'];
   $start_date_lg = $general_d['start_date_lg'];
   $end_date_lg = $general_d['end_date_lg'];
   // $start_date = $general_d['start_date'];
   // $end_date = $general_d['end_date'];
   // $start_date2 = $general_d['start_date2'];
   // $end_date2 = $general_d['end_date2'];

   $period_i = '';
   $period_f = '';
   $sub_i = '';
   $sub_p = '';

   $initial_date = '';
   $final_date = '';
   $is_mobile = '';

   /*period using in records*/
   $period_filter3 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";


  // if a leader
  if ($role_id == '5') {
      
      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND church_id = :church_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      /*verified user*/
      if ($result_s) {

      	$first_name_leader = $result_s['first_name'];
      	$last_name_leader = $result_s['last_name'];

        $pre_cell = $con->prepare("SELECT *
                                 FROM groups_cells
                                 WHERE id = :cell_id AND church_id = :church_id AND leader = :user_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cell = array(':cell_id' => $cell_id, ':church_id' => $church_id, ':user_id' => $user_id);
        $pre_cell->execute($values_cell);
        $result_cell = $pre_cell->fetch();

        /*obatin sector for records*/
        $sector_idf = $result_cell['sector_id'];

        /*verified cell*/
        if ($result_cell) {

          $district_c = $result_cell['district_code'];
          $zone_c = $result_cell['zone_code'];
          $sector_c = $result_cell['sector_code'];
          $cell_c = $result_cell['cell_code'];

          $sector_ce = $result_cell['sector_id'];

          /*Name of report*/
          $report_y = date("Y");

          $month = date('n');
          $quarter = null;

          if($month < 4){
            $quarter = "Q1";
          } elseif($month > 3 && $month <7){
            $quarter = "Q2";
          } elseif($month >6 && $month < 10){
            $quarter = "Q3";
          } elseif($month >9){
            $quarter = "Q4";
          }

          $currentWeekNumber = date('W');

          $report_name = $report_y.$quarter."W".$currentWeekNumber;


          $pre_em = $con->prepare("SELECT *
                                   FROM reports
                                   WHERE name = :report_name AND cell_id = :cell_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_em = array(':report_name' => $report_name,':cell_id' => $cell_id);
          $pre_em->execute($values_em);
          $result_em = $pre_em->fetch();

          /*verified report name*/
          if (empty($result_em)) {

              $only_date = date("Y-m-d");
              $final_d = date("Y-m-d H:i:s");


              $end_date = date('Y-m-d', strtotime($only_date. ' + 6 days'));

              /*insert member*/
              $pre = $con->prepare("INSERT INTO reports (`name`, `creation_date`,`end_date`, `donations_offering`,`donations_events`,`donations_transport`,`total_member_assistance`,`total_kids_assistance`,`total_guest_assistance`,`total_doctrine`,`total_celebration`,`total_salvation`,`total_baptized`,`total_schedule_visits`,`cell_id`,`district_code`,`zone_code`,`sector_code`,`cell_code`,`created_at`, `updated_at`) VALUES (:name, :creation_date,:end_date, :donations_offering,:donations_events,:donations_transport,:total_member_assistance,:total_kids_assistance,:total_guest_assistance,:total_doctrine,:total_celebration,:total_salvation,:total_baptized,:total_schedule_visits,:cell_id,:district_c,:zone_c,:sector_c,:cell_c,'$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                  ':cell_id' => $cell_id, 
                  ':district_c' => $district_c, 
                  ':zone_c' => $zone_c, 
                  ':sector_c' => $sector_c, 
                  ':cell_c' => $cell_c, 
                  ':name' => $report_name, 
                  ':creation_date' => $only_date,
                  ':end_date' => $end_date,
                  ':donations_offering' => $donations_offering,
                  ':donations_events' => $donations_events,
                  ':donations_transport' => $donations_transport,
                  ':total_member_assistance' => $total_member_assistance,
                  ':total_kids_assistance' => $total_kids_assistance,
                  ':total_guest_assistance' => $total_guest_assistance,
                  ':total_doctrine' => $total_doctrine,
                  ':total_celebration' => $total_celebration,
                  ':total_salvation' => $total_salvation,
                  ':total_baptized' => $total_baptized,
                  ':total_schedule_visits' => $total_schedule_visits
              );

              $result = $pre->execute($values);

              $id_r = $con->lastInsertId();

              for($j = 0; $j < count($attendance); $j++) {

                $pre3 = $con->prepare("INSERT INTO reports_details (`cell_group`, `doctrine`, `celebration`,`salvations`,`baptized`,`scheduled_visits`,`report_id`,`member_id`,`created_at`, `updated_at`) VALUES (:cell_group, :doctrine,:celebration,:salvations,:baptized,:scheduled_visits,:report_id,:member_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values3 = array(
                  ':cell_group' => $attendance[$j]['cell_group'],
                  ':doctrine' => $attendance[$j]['doctrine'],
                  ':celebration' => $attendance[$j]['celebration'],
                  ':salvations' => $attendance[$j]['salvations'],
                  ':baptized' => $attendance[$j]['baptized'],
                  ':scheduled_visits' => $attendance[$j]['scheduled_visits'],
                  ':report_id' => $id_r,
                  ':member_id' => $attendance[$j]['member_id']
                  );

                $result3 = $pre3->execute($values3);

                /*obtain member name*/
                $pre_name = $con->prepare("SELECT *
                                         FROM members_cells
                                         WHERE id = :member_id AND cell_id = :cell_id", 
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_name = array(':member_id' => $attendance[$j]['member_id'],':cell_id' => $cell_id);
                $pre_name->execute($values_name);
                $result_name = $pre_name->fetch();

                $first_name = $result_name['first_name'];
                $last_name = $result_name['last_name'];

                if ($result3) {

                  if ($attendance[$j]['doctrine'] == '1') {

                    /*Activity Church attendance (Guest/Cell Member)*/
                    $en_message = $first_name . " " . $last_name . " attended church";
                    $es_message = $first_name . " " . $last_name . " asistiÃ³ a la iglesia";

                    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_act = array(
                        ':es_message' => $es_message, 
                        ':en_message' => $en_message,
                        ':id_m' => $attendance[$j]['member_id'],
                        ':final_d' => $final_d);

                    $result_act = $pre_act->execute($values_act);
                  }

                  if ($attendance[$j]['cell_group'] == '1') {

                    /*Activity Cell group attendance (Guest/Cell Member)*/
                    $en_me = $first_name . " " . $last_name . " attended cell group";
                    $es_me= $first_name . " " . $last_name . " asistiÃ³ a su cÃ©lula";

                    $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_add = array(
                        ':es_me' => $es_me, 
                        ':en_me' => $en_me,
                        ':id_m' => $attendance[$j]['member_id'],
                        ':final_d' => $final_d);

                    $result_add = $pre_add->execute($values_add);

                  }

                  /*ACTIVITY GROUPS*/

                  /*Activity Guestâs salvation (Cell Group)*/
                  if ($attendance[$j]['salvations'] == '1') {

                    $en_me2 = "New salvation: " . $first_name . " " . $last_name;
                    $es_me2= "Nueva salvaciÃ³n : " . $first_name . " " . $last_name;

                    $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me2, :en_me2,NULL,NULL,NULL,:cell_id,NULL, NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_add = array(
                        ':es_me2' => $es_me2, 
                        ':en_me2' => $en_me2,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_add = $pre_add->execute($values_add);

                  }


                }

              }


              // if the report was created successfully
              if($result){


                /************************************* GLOBAL RECORDS ********************************/

                /*obtain zone for records*/
                if ($sector_idf != null) {
                  $pre_zoneid = $con->prepare("SELECT *
                                           FROM groups_sectors  
                                           WHERE id = :sector_idf AND church_id = :church_id", 
                                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_zoneid = array(':sector_idf' => $sector_idf,':church_id' => $church_id);
                  $pre_zoneid->execute($values_zoneid);
                  $result_zoneid = $pre_zoneid->fetch();

                  $zone_idf = $result_zoneid['zone_id'];
                }
                

                /*obtain district for records*/
                if ($zone_idf != null) {
                  $pre_disid = $con->prepare("SELECT *
                                           FROM groups_zones  
                                           WHERE id = :zone_idf AND church_id = :church_id", 
                                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_disid = array(':zone_idf' => $zone_idf,':church_id' => $church_id);
                  $pre_disid->execute($values_disid);
                  $result_disid = $pre_disid->fetch();

                  $dis_idf = $result_disid['district_id'];
                }

                // if senior pastor / administrator

                $filter_crowd = '';
                $filter_graph_top = '';

                /* Record Cell: Number of Cell Group attendance per Cell Group (Senior Pastor)*/
                $pre_cro = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance + total_kids_assistance) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_cro = array(':church_id' => $church_id);
                $pre_cro->execute($values_cro);
                $result_cro = $pre_cro->fetch();

                $crowd = $result_cro['crowd'];

                if ($crowd == null) {
                  $crowd = '0';
                }

                if ($crowd != '0') {
                  $en_cell_att = $crowd . " cell group attendance within your cells";

                  $es_cell_att = $crowd . " asistencias a cÃ©lula dentro de sus cÃ©lulas";

                  $cell_att = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cell_att, :en_cell_att,NULL,NULL,NULL,NULL,:church_id,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_cell_att = array(
                      ':en_cell_att' => $en_cell_att,
                      ':es_cell_att' => $es_cell_att,
                      ':church_id' => $church_id,
                      ':final_d' => $final_d);

                  $result_cell_att = $cell_att->execute($val_cell_att);
                }


                /*Record Church: Number of Church attendance per Cell Group*/
                $pre_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_church = array(':church_id' => $church_id);
                $pre_church->execute($values_church);
                $result_church = $pre_church->fetch();

                $church_n = $result_church['crowd'];

                if ($church_n == null) {
                  $church_n = '0';
                }

                if ($church_n != '0') {
                  $en_church_att = $church_n . " church attendance within your cells";

                  $es_church_att = $church_n . " asistencias a iglesia dentro de sus cÃ©lulas";

                  $church_att = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_church_att, :en_church_att,NULL,NULL,NULL,NULL,:church_id,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_church_att = array(
                      ':en_church_att' => $en_church_att,
                      ':es_church_att' => $es_church_att,
                      ':church_id' => $church_id,
                      ':final_d' => $final_d);

                  $result_church_att = $church_att->execute($val_church_att);
                }


                /*Record Performance: The salvations gained from a Cell Group*/
                $pre_memb = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_memb = array(':church_id' => $church_id);
                $pre_memb->execute($values_memb);
                $result_memb = $pre_memb->fetch();

                $total_memb = $result_memb['total_salvation'];

                if ($total_memb == null) {
                  $total_memb = '0';
                }

                if ($total_memb != '0') {
                  $en_perfo = $total_memb . " new salvations within your cells";

                  $es_perfo = $total_memb . " nuevas salvaciones dentro de sus cÃ©lulas";

                  $perform = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_perfo, :en_perfo,NULL,NULL,NULL,NULL,:church_id,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_perform = array(
                      ':en_perfo' => $en_perfo,
                      ':es_perfo' => $es_perfo,
                      ':church_id' => $church_id,
                      ':final_d' => $final_d);

                  $result_perform = $perform->execute($val_perform);
                }


                /*Record Performance: The baptizeds gained from a Cell Group*/
                $pre_gu = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_gu = array(':church_id' => $church_id);
                $pre_gu->execute($values_gu);
                $result_gu = $pre_gu->fetch();

                $total_gu = $result_gu['total_baptized'];

                if ($total_gu == null) {
                  $total_gu = '0';
                }

                if ($total_gu != '0') {
                  $en_salva = $total_gu . " new baptizeds within your cells";

                  $es_salva = $total_gu . " nuevos bautizados dentro de sus cÃ©lulas";

                  $salva = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_salva, :en_salva,NULL,NULL,NULL,NULL,:church_id,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_salva = array(
                      ':en_salva' => $en_salva,
                      ':es_salva' => $es_salva,
                      ':church_id' => $church_id,
                      ':final_d' => $final_d);

                  $result_salva = $salva->execute($val_salva);
                }

                /*Record Performance: The Scheduled Visits gained*/
                $pre_k = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_k = array(':church_id' => $church_id);
                $pre_k->execute($values_k);
                $result_k = $pre_k->fetch();

                $total_k = $result_k['total_schedule_visits'];

                if ($total_k == null) {
                  $total_k = '0';
                }

                if ($total_k != '0') {
                  $en_visit = $total_k . " new scheduled visits within your cells";

                  $es_visit = $total_k . " nuevas visitas programadas dentro de sus cÃ©lulas";

                  $visit = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_visit, :en_visit,NULL,NULL,NULL,NULL,:church_id,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_visit = array(
                      ':en_visit' => $en_visit,
                      ':es_visit' => $es_visit,
                      ':church_id' => $church_id,
                      ':final_d' => $final_d);

                  $result_visit = $visit->execute($val_visit);
                }


                // obtain overall multiply global
                $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top,$period_filter3);

                $total_gen = $overall_mult['total_gen'];
                $w_percentage = $overall_mult['w_percentage'];
                $goal_f = $overall_mult['goal_f'];
                $overall_multiply = $overall_mult['overall_multiply'];


                // obtain cell_attendance global
                $overall_att = cellGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

                $period_filter5 = $overall_att['period_filter5'];
                $w_percentagekd = $overall_att['w_percentagekd'];
                $w_percentagead = $overall_att['w_percentagead'];
                $goal_f2 = $overall_att['goal_f2'];
                $goal_f3 = $overall_att['goal_f3'];
                $overall_attend = $overall_att['overall_attend'];

                // Record Cell: Points earned in Cell attendance (Senior Pastor) 
                $en_pointc = $overall_attend . " points earned in cell attendance";

                $es_pointc = $overall_attend . " puntos ganados en asistencia a cÃ©lula";

                $rec_pointc = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pointc, :en_pointc,NULL,NULL,NULL,NULL,:church_id,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_pointc = array(
                    ':en_pointc' => $en_pointc,
                    ':es_pointc' => $es_pointc,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_pointc = $rec_pointc->execute($val_rec_pointc);


                // obtain church_attendance global
                $overall_ch = churchGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

                $w_percentagech = $overall_ch['w_percentagech'];
                $goal_f4 = $overall_ch['goal_f4'];
                $overall_church = $overall_ch['overall_church'];

                // Record Church: Points earned in Church attendance (Senior Pastor)
                $en_churchr = $overall_church . " points earned in church attendance";

                $es_churchr = $overall_church . " puntos ganados en asistencia a iglesia";

                $churchr = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_churchr, :en_churchr,NULL,NULL,NULL,NULL,:church_id,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_churchr = array(
                    ':en_churchr' => $en_churchr,
                    ':es_churchr' => $es_churchr,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_churchr = $churchr->execute($val_churchr);


                // obtain salvation global
                $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$total_gen);

                $w_percentagesv = $overall_pr['w_percentagesv'];
                $w_percentagebp = $overall_pr['w_percentagebp'];
                $w_per_sch = $overall_pr['w_per_sch'];
                $goal_f5 = $overall_pr['goal_f5'];
                $goal_f6 = $overall_pr['goal_f6'];
                $goal_f7 = $overall_pr['goal_f7'];
                // FINAL OVERALL PERFOMANCE
                $overall_perfomance = $overall_pr['overall_perfomance'];

                // Record Church: Points earned in performance
                $en_pr = $overall_perfomance . " points earned in performance";

                $es_pr = $overall_perfomance . " puntos ganados en rendimiento";

                $perf = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pr, :en_pr,NULL,NULL,NULL,NULL,:church_id,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_perf = array(
                    ':en_pr' => $en_pr,
                    ':es_pr' => $es_pr,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_perf = $perf->execute($val_perf);

                /*** OVERALL CHURCH GLOBAL ***/
                $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;


                /*********************************** OVERALL PAST ******************************************/

                // obtain overall multiply global

                $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

                $period_filter6 = $overall_mult2['period_filter6'];
                $period_filter_n = $overall_mult2['period_filter_n'];
                $overall_multiply2 = $overall_mult2['overall_multiply2'];
                $past_i = $overall_mult2['past_i'];
                $past_f = $overall_mult2['past_f'];


                // obtain cell_attendance global
                $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

                $period_filter7 = $overall_att2['period_filter7'];
                $period_filter_n2 = $overall_att2['period_filter_n2'];
                $overall_attend2 = $overall_att2['overall_attend2'];


                // obtain church_attendance global
                $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


                // obtain salvation global
                $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


                /*** OVERALL CHURCH GLOBAL ***/
                $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


                if($overall_growth == $overall_growth_past){
                  $en_status = "It remained in the general growth chart";
                  $es_status = "Se mantuvo en la tabla de crecimiento general";
                }else if ($overall_growth > $overall_growth_past) {
                  $en_status = "Went up in the Overall growth chart";
                  $es_status = "SubiÃ³ en la tabla de crecimiento general";
                }else{
                  $en_status = "Down in the Overall growth chart";
                  $es_status = "BajÃ³ en la tabla de crecimiento general";
                }

                // Record Points earned in Overall growth
                $en_point = $overall_growth . " points earned in overall growth";

                $es_point = $overall_growth . " puntos ganados en crecimiento general";

                $rec_points = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_point, :en_point,NULL,NULL,NULL,NULL,:church_id,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_points = array(
                    ':en_point' => $en_point,
                    ':es_point' => $es_point,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_points = $rec_points->execute($val_rec_points);

                // Record Went up or down in the Overall growth chart
                $rec_status = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_status, :en_status,NULL,NULL,NULL,NULL,:church_id,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_status = array(
                    ':en_status' => $en_status,
                    ':es_status' => $es_status,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_status = $rec_status->execute($val_rec_status);


                // Record Cell: Went up or down in the Cell attendance growth chart (Senior Pastor)
                if($overall_attend == $overall_attend2){
                  $en_statusc = "It remained in the cell attendance growth chart";
                  $es_statusc = "Se mantuvo en la tabla de crecimiento de asistencia a cÃ©lula";
                }else if ($overall_attend > $overall_attend2) {
                  $en_statusc = "Went up in the cell attendance growth chart";
                  $es_statusc = "SubiÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                }else{
                  $en_statusc = "Down in the cell attendance growth chart";
                  $es_statusc = "BajÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                }

                $rec_statusc = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusc, :en_statusc,NULL,NULL,NULL,NULL,:church_id,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_statusc = array(
                    ':en_statusc' => $en_statusc,
                    ':es_statusc' => $es_statusc,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_statusc = $rec_statusc->execute($val_rec_statusc);


                // Record Church: Went up or down in the Church attendance growth chart (Senior Pastor)
                if($overall_church == $overall_church2){
                  $en_statusch = "It remained in the church attendance growth chart";
                  $es_statusch = "Se mantuvo en la tabla de crecimiento de asistencia a la iglesia";
                }else if ($overall_church > $overall_church2) {
                  $en_statusch = "Went up in the church attendance growth chart";
                  $es_statusch = "SubiÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                }else{
                  $en_statusch = "Down in the church attendance growth chart";
                  $es_statusch = "BajÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                }

                $rec_statusch = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusch, :en_statusch,NULL,NULL,NULL,NULL,:church_id,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_statusch = array(
                    ':en_statusch' => $en_statusch,
                    ':es_statusch' => $es_statusch,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_statusch = $rec_statusch->execute($val_rec_statusch);

                // Record Church: Went up or down in the performance growth chart
                if($overall_perfomance == $overall_perfomance2){
                  $en_statuspr = "It remained in the performance growth chart";
                  $es_statuspr = "Se mantuvo en la tabla de crecimiento de rendimiento";
                }else if ($overall_perfomance > $overall_perfomance2) {
                  $en_statuspr = "Went up in the performance growth chart";
                  $es_statuspr = "SubiÃ³ en la tabla de crecimiento de rendimiento";
                }else{
                  $en_statuspr = "Down in the performance growth chart";
                  $es_statuspr = "BajÃ³ en la tabla de crecimiento de rendimiento";
                }

                $rec_statuspr = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statuspr, :en_statuspr,NULL,NULL,NULL,NULL,:church_id,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $val_rec_statuspr = array(
                    ':en_statuspr' => $en_statuspr,
                    ':es_statuspr' => $es_statuspr,
                    ':church_id' => $church_id,
                    ':final_d' => $final_d);

                $result_statuspr = $rec_statuspr->execute($val_rec_statuspr);



                /********************** Top Cities Global ************************/
                $result_cities = null;
                $result_cities2 = null;

                // Actual quarter
                $sql = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 AND (members_cells.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                foreach ($con->query($sql) as $row) {
                  $row['ranking'] = '1';
                  $result_cities[] = $row;
                }

                // Last quarter
                $period_filter4 = "AND (members_cells.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                $sql2 = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 $period_filter4 AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                foreach ($con->query($sql2) as $row2) {
                  $result_cities2[] = $row2;
                }

                /*Obtain final ranking*/
                if ($result_cities != null && $result_cities2 != null) {

                  // order array top cities actual
                  foreach ($result_cities as $key => $frow) {
                      $aux[$key] = $frow['crowd'];
                  }
                  
                  array_multisort($aux, SORT_DESC, $result_cities);

                  // order array top cities actual
                  foreach ($result_cities2 as $key2 => $frow2) {
                      $aux2[$key2] = $frow2['crowd'];
                  }
                  
                  array_multisort($aux2, SORT_DESC, $result_cities2);

                  for($i=0; $i<count($result_cities); $i++){
                      for($j=0; $j<count($result_cities2); $j++){
                          if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                              /*Change of position in the top cities (records)*/
                              if ($i != $j) {

                                if ($i == '0') {
                                  $position = "first";
                                  $es_pos = "primera";
                                } else if ($i == '1') {
                                  $position = "second";
                                  $es_pos = "segunda";
                                } else if ($i == '2') {
                                  $position = "third";
                                  $es_pos = "tercera";
                                } else if ($i == '3') {
                                  $position = "fourth";
                                  $es_pos = "cuarta";
                                } else if ($i == '4') {
                                  $position = "fifth";
                                  $es_pos = "quinta";
                                }

                                // Record Change of position in the top cities
                                $en_top = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities";

                                $es_top = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en el top de ciudades";

                                $rec_top = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_top, :en_top,NULL,NULL,NULL,NULL,:church_id,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                $val_rec_top = array(
                                    ':en_top' => $en_top,
                                    ':es_top' => $es_top,
                                    ':church_id' => $church_id,
                                    ':final_d' => $final_d);

                                $result_top = $rec_top->execute($val_rec_top);
                                 
                              }

                              /*obatin ranking down or up*/
                              if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                $ranking = '1';
                                $result_cities[$i]['ranking'] = '1';
                              }else{
                                $ranking = '0';
                                $result_cities[$i]['ranking'] = '0';
                              }

                          }
                      }
                  }

                }


                /********************** Top Cities Cell Attendance ************************/
                $result_cities = null;
                $result_cities2 = null;

                // Actual quarter
                $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                foreach ($con->query($sql) as $row) {
                  $row['ranking'] = '1';
                  $result_cities[] = $row;
                }

                // Last quarter
                $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                 // if date filter is sent
                if ($initial_date && $final_date && empty($is_mobile)) {
                  $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                  
                }else if ($initial_date && $is_mobile) {
                  $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                }

                $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' $period_filter4 $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                foreach ($con->query($sql2) as $row2) {
                  $result_cities2[] = $row2;
                }

                /*Obtain final ranking*/
                if ($result_cities != null && $result_cities2 != null) {

                  // order array top cities actual
                  foreach ($result_cities as $key => $frow) {
                      $aux[$key] = $frow['crowd'];
                  } 
                  array_multisort($aux, SORT_DESC, $result_cities);

                  // order array top cities actual
                  foreach ($result_cities2 as $key2 => $frow2) {
                      $aux2[$key2] = $frow2['crowd'];
                  }
                  array_multisort($aux2, SORT_DESC, $result_cities2);

                  for($i=0; $i<count($result_cities); $i++){
                      for($j=0; $j<count($result_cities2); $j++){
                          if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                              /*Change of position in the top cities (records)*/
                              if ($i != $j) {

                                if ($i == '0') {
                                  $position = "first";
                                  $es_pos = "primera";
                                } else if ($i == '1') {
                                  $position = "second";
                                  $es_pos = "segunda";
                                } else if ($i == '2') {
                                  $position = "third";
                                  $es_pos = "tercera";
                                } else if ($i == '3') {
                                  $position = "fourth";
                                  $es_pos = "cuarta";
                                } else if ($i == '4') {
                                  $position = "fifth";
                                  $es_pos = "quinta";
                                }

                                // Record Change of position in the top cities
                                $en_topce = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities cell attendance";

                                $es_topce = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en el top de ciudades por asistencia a cÃ©lula";

                                $rec_topce = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_topce, :en_topce,NULL,NULL,NULL,NULL,:church_id,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                $val_rec_topce = array(
                                    ':en_topce' => $en_topce,
                                    ':es_topce' => $es_topce,
                                    ':church_id' => $church_id,
                                    ':final_d' => $final_d);

                                $result_topce = $rec_topce->execute($val_rec_topce);
                                 
                              }

                              if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                $ranking = '1';
                                $result_cities[$i]['ranking'] = '1';
                              }else{
                                $ranking = '0';
                                $result_cities[$i]['ranking'] = '0';
                              }

                          }
                      }
                  }

                }


                // if district pastor
                if ($dis_idf != null) {

                  $filter_p2 = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$dis_idf' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";
                  $filter_crowd2 = "AND reports.cell_id " . $filter_p2;
                  $filter_graph_top2 = "AND groups_cells.id " . $filter_p2;


                  /* Record Cell: Number of Cell Group attendance per Cell Group (District Pastor)*/
                  $pre_cro2 = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance + total_kids_assistance) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd2", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_cro2 = array(':church_id' => $church_id);
                  $pre_cro2->execute($values_cro2);
                  $result_cro2 = $pre_cro2->fetch();

                  $crowd2 = $result_cro2['crowd'];

                  if ($crowd2 == null) {
                    $crowd2 = '0';
                  }

                  if ($crowd2 != '0') {
                    $en_cell_att2 = $crowd2 . " cell group attendance within your cells";

                    $es_cell_att2 = $crowd2 . " asistencias a cÃ©lula dentro de sus cÃ©lulas";

                    $cell_att2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cell_att2, :en_cell_att2,:dis_idf,NULL,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_cell_att2 = array(
                        ':en_cell_att2' => $en_cell_att2,
                        ':es_cell_att2' => $es_cell_att2,
                        ':dis_idf' => $dis_idf,
                        ':final_d' => $final_d);

                    $result_cell_att2 = $cell_att2->execute($val_cell_att2);
                  }


                  /*Record Church: Number of Church attendance per Cell Group*/
                  $pre_church2 = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd2", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_church2 = array(':church_id' => $church_id);
                  $pre_church2->execute($values_church2);
                  $result_church2 = $pre_church2->fetch();

                  $church_n2 = $result_church2['crowd'];

                  if ($church_n2 == null) {
                    $church_n2 = '0';
                  }

                  if ($church_n2 != '0') {
                    $en_church_att2 = $church_n2 . " church attendance within your cells";

                    $es_church_att2 = $church_n2 . " asistencias a iglesia dentro de sus cÃ©lulas";

                    $church_att2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_church_att2, :en_church_att2,:dis_idf,NULL,NULL,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_church_att2 = array(
                        ':en_church_att2' => $en_church_att2,
                        ':es_church_att2' => $es_church_att2,
                        ':dis_idf' => $dis_idf,
                        ':final_d' => $final_d);

                    $result_church_att2 = $church_att2->execute($val_church_att2);
                  }

                /*Record Performance: The salvations gained from a Cell Group*/
                $pre_memb2 = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd2", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_memb2 = array(':church_id' => $church_id);
                $pre_memb2->execute($values_memb2);
                $result_memb2 = $pre_memb2->fetch();

                $total_memb2 = $result_memb2['total_salvation'];

                if ($total_memb2 == null) {
                  $total_memb2 = '0';
                }

                if ($total_memb2 != '0') {
                  $en_perfo2 = $total_memb2 . " new salvations within your cells";

                  $es_perfo2 = $total_memb2 . " nuevas salvaciones dentro de sus cÃ©lulas";

                  $perform2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_perfo2, :en_perfo2,:dis_idf,NULL,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_perform2 = array(
                      ':en_perfo2' => $en_perfo2,
                      ':es_perfo2' => $es_perfo2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_perform2 = $perform2->execute($val_perform2);
                }

                /*Record Performance: The baptizeds gained from a Cell Group*/
                $pre_gu2 = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd2", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_gu2 = array(':church_id' => $church_id);
                $pre_gu2->execute($values_gu2);
                $result_gu2 = $pre_gu2->fetch();

                $total_gu2 = $result_gu2['total_baptized'];

                if ($total_gu2 == null) {
                  $total_gu2 = '0';
                }

                if ($total_gu2 != '0') {
                  $en_salva2 = $total_gu2 . " new baptizeds within your cells";

                  $es_salva2 = $total_gu2 . " nuevos bautizados dentro de sus cÃ©lulas";

                  $salva2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_salva2, :en_salva2,:dis_idf,NULL,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_salva2 = array(
                      ':en_salva2' => $en_salva2,
                      ':es_salva2' => $es_salva2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_salva2 = $salva2->execute($val_salva2);
                }

                /*Record Performance: The Scheduled Visits gained*/
                $pre_k2 = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd2", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_k2 = array(':church_id' => $church_id);
                $pre_k2->execute($values_k2);
                $result_k2 = $pre_k2->fetch();

                $total_k2 = $result_k2['total_schedule_visits'];

                if ($total_k2 == null) {
                  $total_k2 = '0';
                }

                if ($total_k2 != '0') {
                  $en_visit2 = $total_k2 . " new scheduled visits within your cells";

                  $es_visit2 = $total_k2 . " nuevas visitas programadas dentro de sus cÃ©lulas";

                  $visit2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_visit2, :en_visit2,:dis_idf,NULL,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_visit2 = array(
                      ':en_visit2' => $en_visit2,
                      ':es_visit2' => $es_visit2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_visit2 = $visit2->execute($val_visit2);
                }


                  // obtain overall multiply global
                  $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top2,$period_filter3);

                  $total_gen = $overall_mult['total_gen'];
                  $w_percentage = $overall_mult['w_percentage'];
                  $goal_f = $overall_mult['goal_f'];
                  $overall_multiply = $overall_mult['overall_multiply'];


                  // obtain cell_attendance global
                  $overall_att = cellGeneral($con,$church_id,$filter_crowd2,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

                  $period_filter5 = $overall_att['period_filter5'];
                  $w_percentagekd = $overall_att['w_percentagekd'];
                  $w_percentagead = $overall_att['w_percentagead'];
                  $goal_f2 = $overall_att['goal_f2'];
                  $goal_f3 = $overall_att['goal_f3'];
                  $overall_attend = $overall_att['overall_attend'];

                  // Record Cell: Points earned in Cell attendance (District Pastor) 
                  $en_pointc2 = $overall_attend . " points earned in cell attendance";

                  $es_pointc2 = $overall_attend . " puntos ganados en asistencia a cÃ©lula";

                  $rec_pointc2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pointc2, :en_pointc2,:dis_idf,NULL,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_pointc2 = array(
                      ':en_pointc2' => $en_pointc2,
                      ':es_pointc2' => $es_pointc2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_pointc2 = $rec_pointc2->execute($val_rec_pointc2);


                  // obtain church_attendance global
                  $overall_ch = churchGeneral($con,$church_id,$filter_crowd2,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

                  $w_percentagech = $overall_ch['w_percentagech'];
                  $goal_f4 = $overall_ch['goal_f4'];
                  $overall_church = $overall_ch['overall_church'];

                  // Record Church: Points earned in Church attendance (District Pastor) 
                  $en_churchr2 = $overall_church . " points earned in church attendance";

                  $es_churchr2 = $overall_church . " puntos ganados en asistencia a iglesia";

                  $churchr2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_churchr2, :en_churchr2,:dis_idf,NULL,NULL,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_churchr2 = array(
                      ':en_churchr2' => $en_churchr2,
                      ':es_churchr2' => $es_churchr2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_churchr2 = $churchr2->execute($val_churchr2);


                  // obtain salvation global
                  $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd2,$initial_quarter,$final_quarter,$total_gen);

                  $w_percentagesv = $overall_pr['w_percentagesv'];
                  $w_percentagebp = $overall_pr['w_percentagebp'];
                  $w_per_sch = $overall_pr['w_per_sch'];
                  $goal_f5 = $overall_pr['goal_f5'];
                  $goal_f6 = $overall_pr['goal_f6'];
                  $goal_f7 = $overall_pr['goal_f7'];
                  // FINAL OVERALL PERFOMANCE
                  $overall_perfomance = $overall_pr['overall_perfomance'];

                  // Record Church: Points earned in performance
                  $en_pr2 = $overall_perfomance . " points earned in performance";

                  $es_pr2 = $overall_perfomance . " puntos ganados en rendimiento";

                  $perf2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pr2, :en_pr2,:dis_idf,NULL,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_perf2 = array(
                      ':en_pr2' => $en_pr2,
                      ':es_pr2' => $es_pr2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_perf2 = $perf2->execute($val_perf2);

                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;


                  /*********************************** OVERALL PAST ******************************************/

                  // obtain overall multiply global

                  $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top2,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

                  $period_filter6 = $overall_mult2['period_filter6'];
                  $period_filter_n = $overall_mult2['period_filter_n'];
                  $overall_multiply2 = $overall_mult2['overall_multiply2'];
                  $past_i = $overall_mult2['past_i'];
                  $past_f = $overall_mult2['past_f'];


                  // obtain cell_attendance global
                  $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd2,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

                  $period_filter7 = $overall_att2['period_filter7'];
                  $period_filter_n2 = $overall_att2['period_filter_n2'];
                  $overall_attend2 = $overall_att2['overall_attend2'];


                  // obtain church_attendance global
                  $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd2,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


                  // obtain salvation global
                  $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd2,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


                  if($overall_growth == $overall_growth_past){
                    $en_status = "It remained in the general growth chart";
                    $es_status = "Se mantuvo en la tabla de crecimiento general";
                  }else if ($overall_growth > $overall_growth_past) {
                    $en_status = "Went up in the Overall growth chart";
                    $es_status = "SubiÃ³ en la tabla de crecimiento general";
                  }else{
                    $en_status = "Down in the Overall growth chart";
                    $es_status = "BajÃ³ en la tabla de crecimiento general";
                  }

                  // Points earned in Overall growth
                  $en_point = $overall_growth . " points earned in overall growth";

                  $es_point = $overall_growth . " puntos ganados en crecimiento general";

                  $rec_points = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_point, :en_point,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_points = array(
                      ':en_point' => $en_point,
                      ':es_point' => $es_point,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_points = $rec_points->execute($val_rec_points);

                  // Went up or down in the Overall growth chart
                  $rec_status = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_status, :en_status,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_status = array(
                      ':en_status' => $en_status,
                      ':es_status' => $es_status,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_status = $rec_status->execute($val_rec_status);

                  // Record Cell: Went up or down in the Cell attendance growth chart (District Pastor)
                  if($overall_attend == $overall_attend2){
                    $en_statusc2 = "It remained in the cell attendance growth chart";
                    $es_statusc2 = "Se mantuvo en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else if ($overall_attend > $overall_attend2) {
                    $en_statusc2 = "Went up in the cell attendance growth chart";
                    $es_statusc2 = "SubiÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else{
                    $en_statusc2 = "Down in the cell attendance growth chart";
                    $es_statusc2 = "BajÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }

                  $rec_statusc2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusc2, :en_statusc2,:dis_idf,NULL,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusc2 = array(
                      ':en_statusc2' => $en_statusc2,
                      ':es_statusc2' => $es_statusc2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_statusc2 = $rec_statusc2->execute($val_rec_statusc2);

                  // Record Church: Went up or down in the Church attendance growth chart (District Pastor)
                  if($overall_church == $overall_church2){
                    $en_statusch2 = "It remained in the church attendance growth chart";
                    $es_statusch2 = "Se mantuvo en la tabla de crecimiento de asistencia a la iglesia";
                  }else if ($overall_church > $overall_church2) {
                    $en_statusch2 = "Went up in the church attendance growth chart";
                    $es_statusch2 = "SubiÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }else{
                    $en_statusch2 = "Down in the church attendance growth chart";
                    $es_statusch2 = "BajÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }

                  $rec_statusch2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusch2, :en_statusch2,:dis_idf,NULL,NULL,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusch2 = array(
                      ':en_statusch2' => $en_statusch2,
                      ':es_statusch2' => $es_statusch2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_statusch2 = $rec_statusch2->execute($val_rec_statusch2);

                  // Record Church: Went up or down in the performance growth chart
                  if($overall_perfomance == $overall_perfomance2){
                    $en_statuspr2 = "It remained in the performance growth chart";
                    $es_statuspr2 = "Se mantuvo en la tabla de crecimiento de rendimiento";
                  }else if ($overall_perfomance > $overall_perfomance2) {
                    $en_statuspr2 = "Went up in the performance growth chart";
                    $es_statuspr2 = "SubiÃ³ en la tabla de crecimiento de rendimiento";
                  }else{
                    $en_statuspr2 = "Down in the performance growth chart";
                    $es_statuspr2 = "BajÃ³ en la tabla de crecimiento de rendimiento";
                  }

                  $rec_statuspr2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statuspr2, :en_statuspr2,:dis_idf,NULL,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statuspr2 = array(
                      ':en_statuspr2' => $en_statuspr2,
                      ':es_statuspr2' => $es_statuspr2,
                      ':dis_idf' => $dis_idf,
                      ':final_d' => $final_d);

                  $result_statuspr2 = $rec_statuspr2->execute($val_rec_statuspr2);


                  /********************** Top Cities Global ************************/
                  $result_cities = null;
                  $result_cities2 = null;

                  // Actual quarter
                  $sql = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 AND (members_cells.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top2 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql) as $row) {
                    $row['ranking'] = '1';
                    $result_cities[] = $row;
                  }

                  // Last quarter
                  $period_filter4 = "AND (members_cells.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                  $sql2 = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 $period_filter4 AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top2 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql2) as $row2) {
                    $result_cities2[] = $row2;
                  }

                  /*Obtain final ranking*/
                  if ($result_cities != null && $result_cities2 != null) {

                    // order array top cities actual
                    foreach ($result_cities as $key => $frow) {
                        $aux[$key] = $frow['crowd'];
                    }
                    
                    array_multisort($aux, SORT_DESC, $result_cities);

                    // order array top cities actual
                    foreach ($result_cities2 as $key2 => $frow2) {
                        $aux2[$key2] = $frow2['crowd'];
                    }
                    
                    array_multisort($aux2, SORT_DESC, $result_cities2);

                    for($i=0; $i<count($result_cities); $i++){
                        for($j=0; $j<count($result_cities2); $j++){
                            if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                /*Change of position in the top cities (records)*/
                                if ($i != $j) {

                                  if ($i == '0') {
                                    $position = "first";
                                    $es_pos = "primera";
                                  } else if ($i == '1') {
                                    $position = "second";
                                    $es_pos = "segunda";
                                  } else if ($i == '2') {
                                    $position = "third";
                                    $es_pos = "tercera";
                                  } else if ($i == '3') {
                                    $position = "fourth";
                                    $es_pos = "cuarta";
                                  } else if ($i == '4') {
                                    $position = "fifth";
                                    $es_pos = "quinta";
                                  }

                                  // Change of position in the top cities
                                  $en_top = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities";

                                  $es_top = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en las principales ciudades";

                                  $rec_top = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_top, :en_top,:dis_idf,NULL,NULL,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                  $val_rec_top = array(
                                      ':en_top' => $en_top,
                                      ':es_top' => $es_top,
                                      ':dis_idf' => $dis_idf,
                                      ':final_d' => $final_d);

                                  $result_top = $rec_top->execute($val_rec_top);
                                   
                                }

                                /*obatin ranking down or up*/
                                if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                  $ranking = '1';
                                  $result_cities[$i]['ranking'] = '1';
                                }else{
                                  $ranking = '0';
                                  $result_cities[$i]['ranking'] = '0';
                                }

                            }
                        }
                    }

                  }


                 /********************** Top Cities Cell Attendance ************************/
                 $result_cities = null;
                 $result_cities2 = null;

                 // Actual quarter
                 $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd2 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                 foreach ($con->query($sql) as $row) {
                   $row['ranking'] = '1';
                   $result_cities[] = $row;
                 }

                 // Last quarter
                 $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                  // if date filter is sent
                 if ($initial_date && $final_date && empty($is_mobile)) {
                   $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                   
                 }else if ($initial_date && $is_mobile) {
                   $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                 }

                 $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' $period_filter4 $filter_crowd2 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                 foreach ($con->query($sql2) as $row2) {
                   $result_cities2[] = $row2;
                 }

                 /*Obtain final ranking*/
                 if ($result_cities != null && $result_cities2 != null) {

                   // order array top cities actual
                   foreach ($result_cities as $key => $frow) {
                       $aux[$key] = $frow['crowd'];
                   } 
                   array_multisort($aux, SORT_DESC, $result_cities);

                   // order array top cities actual
                   foreach ($result_cities2 as $key2 => $frow2) {
                       $aux2[$key2] = $frow2['crowd'];
                   }
                   array_multisort($aux2, SORT_DESC, $result_cities2);

                   for($i=0; $i<count($result_cities); $i++){
                       for($j=0; $j<count($result_cities2); $j++){
                           if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                               /*Change of position in the top cities (records)*/
                               if ($i != $j) {

                                 if ($i == '0') {
                                   $position = "first";
                                   $es_pos = "primera";
                                 } else if ($i == '1') {
                                   $position = "second";
                                   $es_pos = "segunda";
                                 } else if ($i == '2') {
                                   $position = "third";
                                   $es_pos = "tercera";
                                 } else if ($i == '3') {
                                   $position = "fourth";
                                   $es_pos = "cuarta";
                                 } else if ($i == '4') {
                                   $position = "fifth";
                                   $es_pos = "quinta";
                                 }

                                 // Record Change of position in the top cities
                                 $en_topce2 = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities cell attendance";

                                 $es_topce2 = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en el top de ciudades por asistencia a cÃ©lula";

                                 $rec_topce2 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_topce2, :en_topce2,:dis_idf,NULL,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                 $val_rec_topce2 = array(
                                     ':en_topce2' => $en_topce2,
                                     ':es_topce2' => $es_topce2,
                                     ':dis_idf' => $dis_idf,
                                     ':final_d' => $final_d);

                                 $result_topce2 = $rec_topce2->execute($val_rec_topce2);
                                  
                               }

                               if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                 $ranking = '1';
                                 $result_cities[$i]['ranking'] = '1';
                               }else{
                                 $ranking = '0';
                                 $result_cities[$i]['ranking'] = '0';
                               }

                           }
                       }
                   }

                 }

                /*end if principal*/ 
                }


                // if zone pastor
                if ($zone_idf != null) {

                  $filter_p3 = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$zone_idf' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";
                  $filter_crowd3 = "AND reports.cell_id " . $filter_p3;
                  $filter_graph_top3 = "AND groups_cells.id " . $filter_p3;


                  /* Record Cell: Number of Cell Group attendance per Cell Group (Zone Pastor)*/
                  $pre_cro3 = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance + total_kids_assistance) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd3", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_cro3 = array(':church_id' => $church_id);
                  $pre_cro3->execute($values_cro3);
                  $result_cro3 = $pre_cro3->fetch();

                  $crowd3 = $result_cro3['crowd'];

                  if ($crowd3 == null) {
                    $crowd3 = '0';
                  }

                  if ($crowd3 != '0') {
                    $en_cell_att3 = $crowd3 . " cell group attendance within your cells";

                    $es_cell_att3 = $crowd3 . " asistencias a la cÃ©lula dentro de sus cÃ©lulas";

                    $cell_att3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cell_att3, :en_cell_att3,NULL,:zone_idf,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_cell_att3 = array(
                        ':en_cell_att3' => $en_cell_att3,
                        ':es_cell_att3' => $es_cell_att3,
                        ':zone_idf' => $zone_idf,
                        ':final_d' => $final_d);

                    $result_cell_att3 = $cell_att3->execute($val_cell_att3);

                  }

                  /*Record Church: Number of Church attendance per Cell Group*/
                  $pre_church3 = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd3", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_church3 = array(':church_id' => $church_id);
                  $pre_church3->execute($values_church3);
                  $result_church3 = $pre_church3->fetch();

                  $church_n3 = $result_church3['crowd'];

                  if ($church_n3 == null) {
                    $church_n3 = '0';
                  }

                  if ($church_n3 != '0') {
                    $en_church_att3 = $church_n3 . " church attendance within your cells";

                    $es_church_att3 = $church_n3 . " asistencias a iglesia dentro de sus cÃ©lulas";

                    $church_att3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_church_att3, :en_church_att3,NULL,:zone_idf,NULL,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_church_att3 = array(
                        ':en_church_att3' => $en_church_att3,
                        ':es_church_att3' => $es_church_att3,
                        ':zone_idf' => $zone_idf,
                        ':final_d' => $final_d);

                    $result_church_att3 = $church_att3->execute($val_church_att3);
                  }

                  /*Record Performance: The salvations gained from a Cell Group*/
                  $pre_memb3 = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd3", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_memb3 = array(':church_id' => $church_id);
                  $pre_memb3->execute($values_memb3);
                  $result_memb3 = $pre_memb3->fetch();

                  $total_memb3 = $result_memb3['total_salvation'];

                  if ($total_memb3 == null) {
                    $total_memb3 = '0';
                  }

                  if ($total_memb3 != '0') {
                    $en_perfo3 = $total_memb3 . " new salvations within your cells";

                    $es_perfo3 = $total_memb3 . " nuevas salvaciones dentro de sus cÃ©lulas";

                    $perform3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_perfo3, :en_perfo3,NULL,:zone_idf,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_perform3 = array(
                        ':en_perfo3' => $en_perfo3,
                        ':es_perfo3' => $es_perfo3,
                        ':zone_idf' => $zone_idf,
                        ':final_d' => $final_d);

                    $result_perform3 = $perform3->execute($val_perform3);
                  }

                  /*Record Performance: The baptizeds gained from a Cell Group*/
                  $pre_gu3 = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd3", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_gu3 = array(':church_id' => $church_id);
                  $pre_gu3->execute($values_gu3);
                  $result_gu3 = $pre_gu3->fetch();

                  $total_gu3 = $result_gu3['total_baptized'];

                  if ($total_gu3 == null) {
                    $total_gu3 = '0';
                  }

                  if ($total_gu3 != '0') {
                    $en_salva3 = $total_gu3 . " new baptizeds within your cells";

                    $es_salva3 = $total_gu3 . " nuevos bautizados dentro de sus cÃ©lulas";

                    $salva3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_salva3, :en_salva3,NULL,:zone_idf,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_salva3 = array(
                        ':en_salva3' => $en_salva3,
                        ':es_salva3' => $es_salva3,
                        ':zone_idf' => $zone_idf,
                        ':final_d' => $final_d);

                    $result_salva3 = $salva3->execute($val_salva3);
                  }

                  /*Record Performance: The Scheduled Visits gained*/
                  $pre_k3 = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd3", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_k3 = array(':church_id' => $church_id);
                  $pre_k3->execute($values_k3);
                  $result_k3 = $pre_k3->fetch();

                  $total_k3 = $result_k3['total_schedule_visits'];

                  if ($total_k3 == null) {
                    $total_k3 = '0';
                  }

                  if ($total_k3 != '0') {
                    $en_visit3 = $total_k3 . " new scheduled visits within your cells";

                    $es_visit3 = $total_k3 . " nuevas visitas programadas dentro de sus cÃ©lulas";

                    $visit3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_visit3, :en_visit3,NULL,:zone_idf,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_visit3 = array(
                        ':en_visit3' => $en_visit3,
                        ':es_visit3' => $es_visit3,
                        ':zone_idf' => $zone_idf,
                        ':final_d' => $final_d);

                    $result_visit3 = $visit3->execute($val_visit3);
                  }


                  // obtain overall multiply global
                  $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top3,$period_filter3);

                  $total_gen = $overall_mult['total_gen'];
                  $w_percentage = $overall_mult['w_percentage'];
                  $goal_f = $overall_mult['goal_f'];
                  $overall_multiply = $overall_mult['overall_multiply'];


                  // obtain cell_attendance global
                  $overall_att = cellGeneral($con,$church_id,$filter_crowd3,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

                  $period_filter5 = $overall_att['period_filter5'];
                  $w_percentagekd = $overall_att['w_percentagekd'];
                  $w_percentagead = $overall_att['w_percentagead'];
                  $goal_f2 = $overall_att['goal_f2'];
                  $goal_f3 = $overall_att['goal_f3'];
                  $overall_attend = $overall_att['overall_attend'];

                  // Record Cell: Points earned in Cell attendance (District Pastor) 
                  $en_pointc3 = $overall_attend . " points earned in cell attendance";

                  $es_pointc3 = $overall_attend . " puntos ganados en asistencia a cÃ©lula";

                  $rec_pointc3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pointc3, :en_pointc3,NULL,:zone_idf,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_pointc3 = array(
                      ':en_pointc3' => $en_pointc3,
                      ':es_pointc3' => $es_pointc3,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_pointc3 = $rec_pointc3->execute($val_rec_pointc3);


                  // obtain church_attendance global
                  $overall_ch = churchGeneral($con,$church_id,$filter_crowd3,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

                  $w_percentagech = $overall_ch['w_percentagech'];
                  $goal_f4 = $overall_ch['goal_f4'];
                  $overall_church = $overall_ch['overall_church'];

                  // Record Church: Points earned in Church attendance (Zone Pastor) 
                  $en_churchr3 = $overall_church . " points earned in church attendance";

                  $es_churchr3 = $overall_church . " puntos ganados en asistencia a iglesia";

                  $churchr3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_churchr3, :en_churchr3,NULL,:zone_idf,NULL,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_churchr3 = array(
                      ':en_churchr3' => $en_churchr3,
                      ':es_churchr3' => $es_churchr3,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_churchr3 = $churchr3->execute($val_churchr3);


                  // obtain salvation global
                  $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd3,$initial_quarter,$final_quarter,$total_gen);

                  $w_percentagesv = $overall_pr['w_percentagesv'];
                  $w_percentagebp = $overall_pr['w_percentagebp'];
                  $w_per_sch = $overall_pr['w_per_sch'];
                  $goal_f5 = $overall_pr['goal_f5'];
                  $goal_f6 = $overall_pr['goal_f6'];
                  $goal_f7 = $overall_pr['goal_f7'];
                  // FINAL OVERALL PERFOMANCE
                  $overall_perfomance = $overall_pr['overall_perfomance'];

                  // Record Church: Points earned in performance
                  $en_pr3 = $overall_perfomance . " points earned in performance";

                  $es_pr3 = $overall_perfomance . " puntos ganados en rendimiento";

                  $perf3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pr3, :en_pr3,NULL,:zone_idf,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_perf3 = array(
                      ':en_pr3' => $en_pr3,
                      ':es_pr3' => $es_pr3,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_perf3 = $perf3->execute($val_perf3);

                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;


                  /*********************************** OVERALL PAST ******************************************/

                  // obtain overall multiply global

                  $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top3,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

                  $period_filter6 = $overall_mult2['period_filter6'];
                  $period_filter_n = $overall_mult2['period_filter_n'];
                  $overall_multiply2 = $overall_mult2['overall_multiply2'];
                  $past_i = $overall_mult2['past_i'];
                  $past_f = $overall_mult2['past_f'];


                  // obtain cell_attendance global
                  $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd3,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

                  $period_filter7 = $overall_att2['period_filter7'];
                  $period_filter_n2 = $overall_att2['period_filter_n2'];
                  $overall_attend2 = $overall_att2['overall_attend2'];


                  // obtain church_attendance global
                  $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd3,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


                  // obtain salvation global
                  $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd3,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


                  if($overall_growth == $overall_growth_past){
                    $en_status = "It remained in the general growth chart";
                    $es_status = "Se mantuvo en la tabla de crecimiento general";
                  }else if ($overall_growth > $overall_growth_past) {
                    $en_status = "Went up in the Overall growth chart";
                    $es_status = "SubiÃ³ en la tabla de crecimiento general";
                  }else{
                    $en_status = "Down in the Overall growth chart";
                    $es_status = "BajÃ³ en la tabla de crecimiento general";
                  }

                  // Points earned in Overall growth
                  $en_point = $overall_growth . " points earned in overall growth";

                  $es_point = $overall_growth . " puntos ganados en crecimiento general";

                  $rec_points = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_point, :en_point,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_points = array(
                      ':en_point' => $en_point,
                      ':es_point' => $es_point,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_points = $rec_points->execute($val_rec_points);

                  // Went up or down in the Overall growth chart
                  $rec_status = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_status, :en_status,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_status = array(
                      ':en_status' => $en_status,
                      ':es_status' => $es_status,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_status = $rec_status->execute($val_rec_status);

                  // Record Cell: Went up or down in the Cell attendance growth chart (Zone Pastor)
                  if($overall_attend == $overall_attend2){
                    $en_statusc3 = "It remained in the cell attendance growth chart";
                    $es_statusc3 = "Se mantuvo en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else if ($overall_attend > $overall_attend2) {
                    $en_statusc3 = "Went up in the cell attendance growth chart";
                    $es_statusc3 = "SubiÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else{
                    $en_statusc3 = "Down in the cell attendance growth chart";
                    $es_statusc3 = "BajÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }

                  $rec_statusc3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusc3, :en_statusc3,NULL,:zone_idf,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusc3 = array(
                      ':en_statusc3' => $en_statusc3,
                      ':es_statusc3' => $es_statusc3,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_statusc3 = $rec_statusc3->execute($val_rec_statusc3);


                  // Record Church: Went up or down in the Church attendance growth chart (Zone Pastor)
                  if($overall_church == $overall_church2){
                    $en_statusch3 = "It remained in the church attendance growth chart";
                    $es_statusch3 = "Se mantuvo en la tabla de crecimiento de asistencia a la iglesia";
                  }else if ($overall_church > $overall_church2) {
                    $en_statusch3 = "Went up in the church attendance growth chart";
                    $es_statusch3 = "SubiÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }else{
                    $en_statusch3 = "Down in the church attendance growth chart";
                    $es_statusch3 = "BajÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }

                  $rec_statusch3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusch3, :en_statusch3,NULL,:zone_idf,NULL,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusch3 = array(
                      ':en_statusch3' => $en_statusch3,
                      ':es_statusch3' => $es_statusch3,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_statusch3 = $rec_statusch3->execute($val_rec_statusch3);

                  // Record Church: Went up or down in the performance growth chart
                  if($overall_perfomance == $overall_perfomance2){
                    $en_statuspr3 = "It remained in the performance growth chart";
                    $es_statuspr3 = "Se mantuvo en la tabla de crecimiento de rendimiento";
                  }else if ($overall_perfomance > $overall_perfomance2) {
                    $en_statuspr3 = "Went up in the performance growth chart";
                    $es_statuspr3 = "SubiÃ³ en la tabla de crecimiento de rendimiento";
                  }else{
                    $en_statuspr3 = "Down in the performance growth chart";
                    $es_statuspr3 = "BajÃ³ en la tabla de crecimiento de rendimiento";
                  }

                  $rec_statuspr3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statuspr3, :en_statuspr3,NULL,:zone_idf,NULL,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statuspr3 = array(
                      ':en_statuspr3' => $en_statuspr3,
                      ':es_statuspr3' => $es_statuspr3,
                      ':zone_idf' => $zone_idf,
                      ':final_d' => $final_d);

                  $result_statuspr3 = $rec_statuspr3->execute($val_rec_statuspr3);



                  /********************** Top Cities Global ************************/
                  $result_cities = null;
                  $result_cities2 = null;

                  // Actual quarter
                  $sql = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 AND (members_cells.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top3 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql) as $row) {
                    $row['ranking'] = '1';
                    $result_cities[] = $row;
                  }

                  // Last quarter
                  $period_filter4 = "AND (members_cells.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                  $sql2 = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 $period_filter4 AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top3 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql2) as $row2) {
                    $result_cities2[] = $row2;
                  }

                  /*Obtain final ranking*/
                  if ($result_cities != null && $result_cities2 != null) {

                    // order array top cities actual
                    foreach ($result_cities as $key => $frow) {
                        $aux[$key] = $frow['crowd'];
                    }
                    
                    array_multisort($aux, SORT_DESC, $result_cities);

                    // order array top cities actual
                    foreach ($result_cities2 as $key2 => $frow2) {
                        $aux2[$key2] = $frow2['crowd'];
                    }
                    
                    array_multisort($aux2, SORT_DESC, $result_cities2);

                    for($i=0; $i<count($result_cities); $i++){
                        for($j=0; $j<count($result_cities2); $j++){
                            if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                /*Change of position in the top cities (records)*/
                                if ($i != $j) {

                                  if ($i == '0') {
                                    $position = "first";
                                    $es_pos = "primera";
                                  } else if ($i == '1') {
                                    $position = "second";
                                    $es_pos = "segunda";
                                  } else if ($i == '2') {
                                    $position = "third";
                                    $es_pos = "tercera";
                                  } else if ($i == '3') {
                                    $position = "fourth";
                                    $es_pos = "cuarta";
                                  } else if ($i == '4') {
                                    $position = "fifth";
                                    $es_pos = "quinta";
                                  }

                                  // Change of position in the top cities
                                  $en_top = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities";

                                  $es_top = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en las principales ciudades";

                                  $rec_top = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_top, :en_top,NULL,:zone_idf,NULL,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                  $val_rec_top = array(
                                      ':en_top' => $en_top,
                                      ':es_top' => $es_top,
                                      ':zone_idf' => $zone_idf,
                                      ':final_d' => $final_d);

                                  $result_top = $rec_top->execute($val_rec_top);
                                   
                                }

                                /*obatin ranking down or up*/
                                if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                  $ranking = '1';
                                  $result_cities[$i]['ranking'] = '1';
                                }else{
                                  $ranking = '0';
                                  $result_cities[$i]['ranking'] = '0';
                                }

                            }
                        }
                    }

                  }


                  /********************** Top Cities Cell Attendance ************************/
                   $result_cities = null;
                   $result_cities2 = null;

                   // Actual quarter
                   $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd3 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                   foreach ($con->query($sql) as $row) {
                     $row['ranking'] = '1';
                     $result_cities[] = $row;
                   }

                   // Last quarter
                   $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                    // if date filter is sent
                   if ($initial_date && $final_date && empty($is_mobile)) {
                     $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                     
                   }else if ($initial_date && $is_mobile) {
                     $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                   }

                   $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' $period_filter4 $filter_crowd3 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                   foreach ($con->query($sql2) as $row2) {
                     $result_cities2[] = $row2;
                   }

                   /*Obtain final ranking*/
                   if ($result_cities != null && $result_cities2 != null) {

                     // order array top cities actual
                     foreach ($result_cities as $key => $frow) {
                         $aux[$key] = $frow['crowd'];
                     } 
                     array_multisort($aux, SORT_DESC, $result_cities);

                     // order array top cities actual
                     foreach ($result_cities2 as $key2 => $frow2) {
                         $aux2[$key2] = $frow2['crowd'];
                     }
                     array_multisort($aux2, SORT_DESC, $result_cities2);

                     for($i=0; $i<count($result_cities); $i++){
                         for($j=0; $j<count($result_cities2); $j++){
                             if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                 /*Change of position in the top cities (records)*/
                                 if ($i != $j) {

                                   if ($i == '0') {
                                     $position = "first";
                                     $es_pos = "primera";
                                   } else if ($i == '1') {
                                     $position = "second";
                                     $es_pos = "segunda";
                                   } else if ($i == '2') {
                                     $position = "third";
                                     $es_pos = "tercera";
                                   } else if ($i == '3') {
                                     $position = "fourth";
                                     $es_pos = "cuarta";
                                   } else if ($i == '4') {
                                     $position = "fifth";
                                     $es_pos = "quinta";
                                   }

                                   // Record Change of position in the top cities
                                   $en_topce3 = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities cell attendance";

                                   $es_topce3 = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en el top de ciudades por asistencia a cÃ©lula";

                                   $rec_topce3 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_topce3, :en_topce3,NULL,:zone_idf,NULL,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                   $val_rec_topce3 = array(
                                       ':en_topce3' => $en_topce3,
                                       ':es_topce3' => $es_topce3,
                                       ':zone_idf' => $zone_idf,
                                       ':final_d' => $final_d);

                                   $result_topce3 = $rec_topce3->execute($val_rec_topce3);
                                    
                                 }

                                 if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                   $ranking = '1';
                                   $result_cities[$i]['ranking'] = '1';
                                 }else{
                                   $ranking = '0';
                                   $result_cities[$i]['ranking'] = '0';
                                 }

                             }
                         }
                     }

                  }

                /*end if principal*/ 
                }


                // if supervisor
                if ($sector_idf != null) {

                  $filter_p4 = "IN (SELECT id from groups_cells WHERE sector_id = '$sector_idf' AND active = 1 AND church_id = '$church_id')";
                  $filter_crowd4 = "AND reports.cell_id " . $filter_p4;
                  $filter_graph_top4 = "AND groups_cells.id " . $filter_p4;


                  /* Record Cell: Number of Cell Group attendance per Cell Group (Supervisor)*/
                  $pre_cro4 = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance + total_kids_assistance) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd4", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_cro4 = array(':church_id' => $church_id);
                  $pre_cro4->execute($values_cro4);
                  $result_cro4 = $pre_cro4->fetch();

                  $crowd4 = $result_cro4['crowd'];

                  if ($crowd4 == null) {
                    $crowd4 = '0';
                  }

                  if ($crowd4 != '0'){
                    $en_cell_att4 = $crowd4 . " cell Group attendance within your cells";

                    $es_cell_att4 = $crowd4 . " asistencias a la cÃ©lula dentro de sus cÃ©lulas";

                    $cell_att4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cell_att4, :en_cell_att4,NULL,NULL,:sector_idf,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_cell_att4 = array(
                        ':en_cell_att4' => $en_cell_att4,
                        ':es_cell_att4' => $es_cell_att4,
                        ':sector_idf' => $sector_idf,
                        ':final_d' => $final_d);

                    $result_cell_att4 = $cell_att4->execute($val_cell_att4);
                  }


                  /*Record Church: Number of Church attendance per Cell Group*/
                  $pre_church4 = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd4", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_church4 = array(':church_id' => $church_id);
                  $pre_church4->execute($values_church4);
                  $result_church4 = $pre_church4->fetch();

                  $church_n4 = $result_church4['crowd'];

                  if ($church_n4 == null) {
                    $church_n4 = '0';
                  }

                  if ($church_n4 != '0'){
                    $en_church_att4 = $church_n4 . " church attendance within your cells";

                    $es_church_att4 = $church_n4 . " asistencias a iglesia dentro de sus cÃ©lulas";

                    $church_att4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_church_att4, :en_church_att4,NULL,NULL,:sector_idf,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_church_att4 = array(
                        ':en_church_att4' => $en_church_att4,
                        ':es_church_att4' => $es_church_att4,
                        ':sector_idf' => $sector_idf,
                        ':final_d' => $final_d);

                    $result_church_att4 = $church_att4->execute($val_church_att4);
                  }

                  /*Record Performance: The salvations gained from a Cell Group*/
                  $pre_memb4 = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd4", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_memb4 = array(':church_id' => $church_id);
                  $pre_memb4->execute($values_memb4);
                  $result_memb4 = $pre_memb4->fetch();

                  $total_memb4 = $result_memb4['total_salvation'];

                  if ($total_memb4 == null) {
                    $total_memb4 = '0';
                  }

                  if ($total_memb4 != '0') {
                    $en_perfo4 = $total_memb4 . " new salvations within your cells";

                    $es_perfo4 = $total_memb4 . " nuevas salvaciones dentro de sus cÃ©lulas";

                    $perform4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_perfo4, :en_perfo4,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_perform4 = array(
                        ':en_perfo4' => $en_perfo4,
                        ':es_perfo4' => $es_perfo4,
                        ':sector_idf' => $sector_idf,
                        ':final_d' => $final_d);

                    $result_perform4 = $perform4->execute($val_perform4);
                  }

                  /*Record Performance: The baptizeds gained from a Cell Group*/
                  $pre_gu4 = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd4", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_gu4 = array(':church_id' => $church_id);
                  $pre_gu4->execute($values_gu4);
                  $result_gu4 = $pre_gu4->fetch();

                  $total_gu4 = $result_gu4['total_baptized'];

                  if ($total_gu4 == null) {
                    $total_gu4 = '0';
                  }

                  if ($total_gu4 != '0') {
                    $en_salva4 = $total_gu4 . " new baptizeds within your cells";

                    $es_salva4 = $total_gu4 . " nuevos bautizados dentro de sus cÃ©lulas";

                    $salva4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_salva4, :en_salva4,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_salva4 = array(
                        ':en_salva4' => $en_salva4,
                        ':es_salva4' => $es_salva4,
                        ':sector_idf' => $sector_idf,
                        ':final_d' => $final_d);

                    $result_salva4 = $salva4->execute($val_salva4);
                  }

                  /*Record Performance: The Scheduled Visits gained*/
                  $pre_k4 = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd4", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_k4 = array(':church_id' => $church_id);
                  $pre_k4->execute($values_k4);
                  $result_k4 = $pre_k4->fetch();

                  $total_k4 = $result_k4['total_schedule_visits'];

                  if ($total_k4 == null) {
                    $total_k4 = '0';
                  }

                  if ($total_k4 != '0') {
                    $en_visit4 = $total_k4 . " new scheduled visits within your cells";

                    $es_visit4 = $total_k4 . " nuevas visitas programadas dentro de sus cÃ©lulas";

                    $visit4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_visit4, :en_visit4,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_visit4 = array(
                        ':en_visit4' => $en_visit4,
                        ':es_visit4' => $es_visit4,
                        ':sector_idf' => $sector_idf,
                        ':final_d' => $final_d);

                    $result_visit4 = $visit4->execute($val_visit4);
                  }


                  // obtain overall multiply global
                  $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top4,$period_filter3);

                  $total_gen = $overall_mult['total_gen'];
                  $w_percentage = $overall_mult['w_percentage'];
                  $goal_f = $overall_mult['goal_f'];
                  $overall_multiply = $overall_mult['overall_multiply'];


                  // obtain cell_attendance global
                  $overall_att = cellGeneral($con,$church_id,$filter_crowd4,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

                  $period_filter5 = $overall_att['period_filter5'];
                  $w_percentagekd = $overall_att['w_percentagekd'];
                  $w_percentagead = $overall_att['w_percentagead'];
                  $goal_f2 = $overall_att['goal_f2'];
                  $goal_f3 = $overall_att['goal_f3'];
                  $overall_attend = $overall_att['overall_attend'];

                  // Record Cell: Points earned in Cell attendance (Supervisor) 
                  $en_pointc4 = $overall_attend . " points earned in cell attendance";

                  $es_pointc4 = $overall_attend . " puntos ganados en asistencia a cÃ©lula";

                  $rec_pointc4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pointc4, :en_pointc4,NULL,NULL,:sector_idf,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_pointc4 = array(
                      ':en_pointc4' => $en_pointc4,
                      ':es_pointc4' => $es_pointc4,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_pointc4 = $rec_pointc4->execute($val_rec_pointc4);


                  // obtain church_attendance global
                  $overall_ch = churchGeneral($con,$church_id,$filter_crowd4,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

                  $w_percentagech = $overall_ch['w_percentagech'];
                  $goal_f4 = $overall_ch['goal_f4'];
                  $overall_church = $overall_ch['overall_church'];

                  // Record Church: Points earned in Church attendance (Supervisor) 
                  $en_churchr4 = $overall_church . " points earned in church attendance";

                  $es_churchr4 = $overall_church . " puntos ganados en asistencia a iglesia";

                  $churchr4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_churchr4, :en_churchr4,NULL,NULL,:sector_idf,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_churchr4 = array(
                      ':en_churchr4' => $en_churchr4,
                      ':es_churchr4' => $es_churchr4,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_churchr4 = $churchr4->execute($val_churchr4);


                  // obtain salvation global
                  $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd4,$initial_quarter,$final_quarter,$total_gen);

                  $w_percentagesv = $overall_pr['w_percentagesv'];
                  $w_percentagebp = $overall_pr['w_percentagebp'];
                  $w_per_sch = $overall_pr['w_per_sch'];
                  $goal_f5 = $overall_pr['goal_f5'];
                  $goal_f6 = $overall_pr['goal_f6'];
                  $goal_f7 = $overall_pr['goal_f7'];
                  // FINAL OVERALL PERFOMANCE
                  $overall_perfomance = $overall_pr['overall_perfomance'];

                  // Record Church: Points earned in performance
                  $en_pr4 = $overall_perfomance . " points earned in performance";

                  $es_pr4 = $overall_perfomance . " puntos ganados en rendimiento";

                  $perf4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pr4, :en_pr4,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_perf4 = array(
                      ':en_pr4' => $en_pr4,
                      ':es_pr4' => $es_pr4,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_perf4 = $perf4->execute($val_perf4);

                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;


                  /*********************************** OVERALL PAST ******************************************/

                  // obtain overall multiply global

                  $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top4,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

                  $period_filter6 = $overall_mult2['period_filter6'];
                  $period_filter_n = $overall_mult2['period_filter_n'];
                  $overall_multiply2 = $overall_mult2['overall_multiply2'];
                  $past_i = $overall_mult2['past_i'];
                  $past_f = $overall_mult2['past_f'];


                  // obtain cell_attendance global
                  $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd4,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

                  $period_filter7 = $overall_att2['period_filter7'];
                  $period_filter_n2 = $overall_att2['period_filter_n2'];
                  $overall_attend2 = $overall_att2['overall_attend2'];


                  // obtain church_attendance global
                  $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd4,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


                  // obtain salvation global
                  $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd4,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


                  if($overall_growth == $overall_growth_past){
                    $en_status = "It remained in the general growth chart";
                    $es_status = "Se mantuvo en la tabla de crecimiento general";
                  }else if ($overall_growth > $overall_growth_past) {
                    $en_status = "Went up in the Overall growth chart";
                    $es_status = "SubiÃ³ en la tabla de crecimiento general";
                  }else{
                    $en_status = "Down in the Overall growth chart";
                    $es_status = "BajÃ³ en la tabla de crecimiento general";
                  }

                  // Points earned in Overall growth
                  $en_point = $overall_growth . " points earned in overall growth";

                  $es_point = $overall_growth . " puntos ganados en crecimiento general";

                  $rec_points = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_point, :en_point,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_points = array(
                      ':en_point' => $en_point,
                      ':es_point' => $es_point,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_points = $rec_points->execute($val_rec_points);

                  // Went up or down in the Overall growth chart
                  $rec_status = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_status, :en_status,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_status = array(
                      ':en_status' => $en_status,
                      ':es_status' => $es_status,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_status = $rec_status->execute($val_rec_status);


                  // Record Cell: Went up or down in the Cell attendance growth chart (Supervisor)
                  if($overall_attend == $overall_attend2){
                    $en_statusc4 = "It remained in the cell attendance growth chart";
                    $es_statusc4 = "Se mantuvo en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else if ($overall_attend > $overall_attend2) {
                    $en_statusc4 = "Went up in the cell attendance growth chart";
                    $es_statusc4 = "SubiÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else{
                    $en_statusc4 = "Down in the cell attendance growth chart";
                    $es_statusc4 = "BajÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }

                  $rec_statusc4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusc4, :en_statusc4,NULL,NULL,:sector_idf,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusc4 = array(
                      ':en_statusc4' => $en_statusc4,
                      ':es_statusc4' => $es_statusc4,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_statusc4 = $rec_statusc4->execute($val_rec_statusc4);

                  // Record Church: Went up or down in the Church attendance growth chart (Supervisor)
                  if($overall_church == $overall_church2){
                    $en_statusch4 = "It remained in the church attendance growth chart";
                    $es_statusch4 = "Se mantuvo en la tabla de crecimiento de asistencia a la iglesia";
                  }else if ($overall_church > $overall_church2) {
                    $en_statusch4 = "Went up in the church attendance growth chart";
                    $es_statusch4 = "SubiÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }else{
                    $en_statusch4 = "Down in the church attendance growth chart";
                    $es_statusch4 = "BajÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }

                  $rec_statusch4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusch4, :en_statusch4,NULL,NULL,:sector_idf,NULL,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusch4 = array(
                      ':en_statusch4' => $en_statusch4,
                      ':es_statusch4' => $es_statusch4,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_statusch4 = $rec_statusch4->execute($val_rec_statusch4);

                  // Record Church: Went up or down in the performance growth chart
                  if($overall_perfomance == $overall_perfomance2){
                    $en_statuspr4 = "It remained in the performance growth chart";
                    $es_statuspr4 = "Se mantuvo en la tabla de crecimiento de rendimiento";
                  }else if ($overall_perfomance > $overall_perfomance2) {
                    $en_statuspr4 = "Went up in the performance growth chart";
                    $es_statuspr4 = "SubiÃ³ en la tabla de crecimiento de rendimiento";
                  }else{
                    $en_statuspr4 = "Down in the performance growth chart";
                    $es_statuspr4 = "BajÃ³ en la tabla de crecimiento de rendimiento";
                  }

                  $rec_statuspr4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statuspr4, :en_statuspr4,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statuspr4 = array(
                      ':en_statuspr4' => $en_statuspr4,
                      ':es_statuspr4' => $es_statuspr4,
                      ':sector_idf' => $sector_idf,
                      ':final_d' => $final_d);

                  $result_statuspr4 = $rec_statuspr4->execute($val_rec_statuspr4);


                  /********************** Top Cities Global ************************/
                  $result_cities = null;
                  $result_cities2 = null;

                  // Actual quarter
                  $sql = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 AND (members_cells.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top4 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql) as $row) {
                    $row['ranking'] = '1';
                    $result_cities[] = $row;
                  }

                  // Last quarter
                  $period_filter4 = "AND (members_cells.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                  $sql2 = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 $period_filter4 AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top4 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql2) as $row2) {
                    $result_cities2[] = $row2;
                  }

                  /*Obtain final ranking*/
                  if ($result_cities != null && $result_cities2 != null) {

                    // order array top cities actual
                    foreach ($result_cities as $key => $frow) {
                        $aux[$key] = $frow['crowd'];
                    }
                    
                    array_multisort($aux, SORT_DESC, $result_cities);

                    // order array top cities actual
                    foreach ($result_cities2 as $key2 => $frow2) {
                        $aux2[$key2] = $frow2['crowd'];
                    }
                    
                    array_multisort($aux2, SORT_DESC, $result_cities2);

                    for($i=0; $i<count($result_cities); $i++){
                        for($j=0; $j<count($result_cities2); $j++){
                            if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                /*Change of position in the top cities (records)*/
                                if ($i != $j) {

                                  if ($i == '0') {
                                    $position = "first";
                                    $es_pos = "primera";
                                  } else if ($i == '1') {
                                    $position = "second";
                                    $es_pos = "segunda";
                                  } else if ($i == '2') {
                                    $position = "third";
                                    $es_pos = "tercera";
                                  } else if ($i == '3') {
                                    $position = "fourth";
                                    $es_pos = "cuarta";
                                  } else if ($i == '4') {
                                    $position = "fifth";
                                    $es_pos = "quinta";
                                  }

                                  // Change of position in the top cities
                                  $en_top = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities";

                                  $es_top = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en las principales ciudades";

                                  $rec_top = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_top, :en_top,NULL,NULL,:sector_idf,NULL,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                  $val_rec_top = array(
                                      ':en_top' => $en_top,
                                      ':es_top' => $es_top,
                                      ':sector_idf' => $sector_idf,
                                      ':final_d' => $final_d);

                                  $result_top = $rec_top->execute($val_rec_top);
                                   
                                }

                                /*obatin ranking down or up*/
                                if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                  $ranking = '1';
                                  $result_cities[$i]['ranking'] = '1';
                                }else{
                                  $ranking = '0';
                                  $result_cities[$i]['ranking'] = '0';
                                }

                            }
                        }
                    }

                  }

                  /********************** Top Cities Cell Attendance ************************/
                   $result_cities = null;
                   $result_cities2 = null;

                   // Actual quarter
                   $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd4 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                   foreach ($con->query($sql) as $row) {
                     $row['ranking'] = '1';
                     $result_cities[] = $row;
                   }

                   // Last quarter
                   $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                    // if date filter is sent
                   if ($initial_date && $final_date && empty($is_mobile)) {
                     $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                     
                   }else if ($initial_date && $is_mobile) {
                     $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                   }

                   $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' $period_filter4 $filter_crowd4 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                   foreach ($con->query($sql2) as $row2) {
                     $result_cities2[] = $row2;
                   }

                   /*Obtain final ranking*/
                   if ($result_cities != null && $result_cities2 != null) {

                     // order array top cities actual
                     foreach ($result_cities as $key => $frow) {
                         $aux[$key] = $frow['crowd'];
                     } 
                     array_multisort($aux, SORT_DESC, $result_cities);

                     // order array top cities actual
                     foreach ($result_cities2 as $key2 => $frow2) {
                         $aux2[$key2] = $frow2['crowd'];
                     }
                     array_multisort($aux2, SORT_DESC, $result_cities2);

                     for($i=0; $i<count($result_cities); $i++){
                         for($j=0; $j<count($result_cities2); $j++){
                             if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                 /*Change of position in the top cities (records)*/
                                 if ($i != $j) {

                                   if ($i == '0') {
                                     $position = "first";
                                     $es_pos = "primera";
                                   } else if ($i == '1') {
                                     $position = "second";
                                     $es_pos = "segunda";
                                   } else if ($i == '2') {
                                     $position = "third";
                                     $es_pos = "tercera";
                                   } else if ($i == '3') {
                                     $position = "fourth";
                                     $es_pos = "cuarta";
                                   } else if ($i == '4') {
                                     $position = "fifth";
                                     $es_pos = "quinta";
                                   }

                                   // Record Change of position in the top cities
                                   $en_topce4 = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities cell attendance";

                                   $es_topce4 = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en el top de ciudades por asistencia a cÃ©lula";

                                   $rec_topce4 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_topce4, :en_topce4,NULL,NULL,:sector_idf,NULL,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                   $val_rec_topce4 = array(
                                       ':en_topce4' => $en_topce4,
                                       ':es_topce4' => $es_topce4,
                                       ':sector_idf' => $sector_idf,
                                       ':final_d' => $final_d);

                                   $result_topce4 = $rec_topce4->execute($val_rec_topce4);
                                    
                                 }

                                 if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                   $ranking = '1';
                                   $result_cities[$i]['ranking'] = '1';
                                 }else{
                                   $ranking = '0';
                                   $result_cities[$i]['ranking'] = '0';
                                 }

                             }
                         }
                     }

                  }

                /*end if principal*/
                }


                // if leader
                if ($cell_id != null) {

                  $filter_p5 = "= '$cell_id'";
                  $filter_crowd5 = "AND reports.cell_id " . $filter_p5;
                  $filter_graph_top5 = "AND groups_cells.id " . $filter_p5;


                  /* Record Cell: Number of Cell Group attendance per Cell Group (Leader)*/
                  $pre_cro5 = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance + total_kids_assistance) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd5", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_cro5 = array(':church_id' => $church_id);
                  $pre_cro5->execute($values_cro5);
                  $result_cro5 = $pre_cro5->fetch();

                  $crowd5 = $result_cro5['crowd'];

                  if ($crowd5 == null) {
                    $crowd5 = '0';
                  }

                  if ($crowd5 != '0') {
                    $en_cell_att5 = $crowd5 . " cell Group attendance";

                    $es_cell_att5 = $crowd5 . " asistencias a la cÃ©lula";

                    $cell_att5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_cell_att5, :en_cell_att5,NULL,NULL,NULL,:cell_id,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_cell_att5 = array(
                        ':en_cell_att5' => $en_cell_att5,
                        ':es_cell_att5' => $es_cell_att5,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_cell_att5 = $cell_att5->execute($val_cell_att5);
                  }


                  /*Record Church: Number of Church attendance per Cell Group (Leader)*/
                  $pre_church5 = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd5", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_church5 = array(':church_id' => $church_id);
                  $pre_church5->execute($values_church5);
                  $result_church5 = $pre_church5->fetch();

                  $church_n5 = $result_church5['crowd'];

                  if ($church_n5 == null) {
                    $church_n5 = '0';
                  }

                  if ($church_n5 != '0') {
                    $en_church_att5 = $church_n5 . " church attendance";

                    $es_church_att5 = $church_n5 . " asistencias a la iglesia";

                    $church_att5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_church_att5, :en_church_att5,NULL,NULL,NULL,:cell_id,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_church_att5 = array(
                        ':en_church_att5' => $en_church_att5,
                        ':es_church_att5' => $es_church_att5,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_church_att5 = $church_att5->execute($val_church_att5);
                  }

                  /*Record Performance: The salvations gained from a Cell Group*/
                  $pre_memb5 = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd5", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_memb5 = array(':church_id' => $church_id);
                  $pre_memb5->execute($values_memb5);
                  $result_memb5 = $pre_memb5->fetch();

                  $total_memb5 = $result_memb5['total_salvation'];

                  if ($total_memb5 == null) {
                    $total_memb5 = '0';
                  }

                  if ($total_memb5 != '0') {
                    $en_perfo5 = $total_memb5 . " new salvations";

                    $es_perfo5 = $total_memb5 . " nuevas salvaciones";

                    $perform5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_perfo5, :en_perfo5,NULL,NULL,NULL,:cell_id,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_perform5 = array(
                        ':en_perfo5' => $en_perfo5,
                        ':es_perfo5' => $es_perfo5,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_perform5 = $perform5->execute($val_perform5);
                  }

                  /*Record Performance: The baptizeds gained from a Cell Group*/
                  $pre_gu5 = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd5", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_gu5 = array(':church_id' => $church_id);
                  $pre_gu5->execute($values_gu5);
                  $result_gu5 = $pre_gu5->fetch();

                  $total_gu5 = $result_gu5['total_baptized'];

                  if ($total_gu5 == null) {
                    $total_gu5 = '0';
                  }

                  if ($total_gu5 != '0') {
                    $en_salva5 = $total_gu5 . " new baptizeds";

                    $es_salva5 = $total_gu5 . " nuevos bautizados";

                    $salva5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_salva5, :en_salva5,NULL,NULL,NULL,:cell_id,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_salva5 = array(
                        ':en_salva5' => $en_salva5,
                        ':es_salva5' => $es_salva5,
                        ':cell_id' => $cell_id,
                        ':final_d' => $final_d);

                    $result_salva5 = $salva5->execute($val_salva5);
                  }

                  /*Record Performance: The Scheduled Visits gained*/
                  $pre_k5 = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd5", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_k5 = array(':church_id' => $church_id);
                  $pre_k5->execute($values_k5);
                  $result_k5 = $pre_k5->fetch();

                  $total_k5 = $result_k5['total_schedule_visits'];

                  if ($total_k5 == null) {
                    $total_k5 = '0';
                  }

                  if ($total_k5 != '0') {
                    $en_visit5 = $total_k5 . " new scheduled visits";

                    $es_visit5 = $total_k5 . " nuevas visitas programadas";

                    $visit5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_visit5, :en_visit5,NULL,NULL,:sector_idf,NULL,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $val_visit5 = array(
                        ':en_visit5' => $en_visit5,
                        ':es_visit5' => $es_visit5,
                        ':sector_idf' => $sector_idf,
                        ':final_d' => $final_d);

                    $result_visit5 = $visit5->execute($val_visit5);
                  }


                  // obtain overall multiply global
                  $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top5,$period_filter3);

                  $total_gen = $overall_mult['total_gen'];
                  $w_percentage = $overall_mult['w_percentage'];
                  $goal_f = $overall_mult['goal_f'];
                  $overall_multiply = $overall_mult['overall_multiply'];


                  // obtain cell_attendance global
                  $overall_att = cellGeneral($con,$church_id,$filter_crowd5,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

                  $period_filter5 = $overall_att['period_filter5'];
                  $w_percentagekd = $overall_att['w_percentagekd'];
                  $w_percentagead = $overall_att['w_percentagead'];
                  $goal_f2 = $overall_att['goal_f2'];
                  $goal_f3 = $overall_att['goal_f3'];
                  $overall_attend = $overall_att['overall_attend'];

                  // Record Cell: Points earned in Cell attendance (Leader) 
                  $en_pointc5 = $overall_attend . " points earned in cell attendance";

                  $es_pointc5 = $overall_attend . " puntos ganados en asistencia a cÃ©lula";

                  $rec_pointc5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pointc5, :en_pointc5,NULL,NULL,NULL,:cell_id,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_pointc5 = array(
                      ':en_pointc5' => $en_pointc5,
                      ':es_pointc5' => $es_pointc5,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_pointc5 = $rec_pointc5->execute($val_rec_pointc5);


                  // obtain church_attendance global
                  $overall_ch = churchGeneral($con,$church_id,$filter_crowd5,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

                  $w_percentagech = $overall_ch['w_percentagech'];
                  $goal_f4 = $overall_ch['goal_f4'];
                  $overall_church = $overall_ch['overall_church'];


                  // Record Church: Points earned in Church attendance (Leader) 
                  $en_churchr5 = $overall_church . " points earned in church attendance";

                  $es_churchr5 = $overall_church . " puntos ganados en asistencia a iglesia";

                  $churchr5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_churchr5, :en_churchr5,NULL,NULL,NULL,:cell_id,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_churchr5 = array(
                      ':en_churchr5' => $en_churchr5,
                      ':es_churchr5' => $es_churchr5,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_churchr5 = $churchr5->execute($val_churchr5);


                  // obtain salvation global
                  $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd5,$initial_quarter,$final_quarter,$total_gen);

                  $w_percentagesv = $overall_pr['w_percentagesv'];
                  $w_percentagebp = $overall_pr['w_percentagebp'];
                  $w_per_sch = $overall_pr['w_per_sch'];
                  $goal_f5 = $overall_pr['goal_f5'];
                  $goal_f6 = $overall_pr['goal_f6'];
                  $goal_f7 = $overall_pr['goal_f7'];
                  // FINAL OVERALL PERFOMANCE
                  $overall_perfomance = $overall_pr['overall_perfomance'];

                  // Record Church: Points earned in performance
                  $en_pr5 = $overall_perfomance . " points earned in performance";

                  $es_pr5 = $overall_perfomance . " puntos ganados en rendimiento";

                  $perf5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_pr5, :en_pr5,NULL,NULL,NULL,:cell_id,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_perf5 = array(
                      ':en_pr5' => $en_pr5,
                      ':es_pr5' => $es_pr5,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_perf5 = $perf5->execute($val_perf5);

                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;


                  /*********************************** OVERALL PAST ******************************************/

                  // obtain overall multiply global

                  $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top5,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

                  $period_filter6 = $overall_mult2['period_filter6'];
                  $period_filter_n = $overall_mult2['period_filter_n'];
                  $overall_multiply2 = $overall_mult2['overall_multiply2'];
                  $past_i = $overall_mult2['past_i'];
                  $past_f = $overall_mult2['past_f'];


                  // obtain cell_attendance global
                  $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd5,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

                  $period_filter7 = $overall_att2['period_filter7'];
                  $period_filter_n2 = $overall_att2['period_filter_n2'];
                  $overall_attend2 = $overall_att2['overall_attend2'];


                  // obtain church_attendance global
                  $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd5,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


                  // obtain salvation global
                  $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd5,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


                  /*** OVERALL CHURCH GLOBAL ***/
                  $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


                  if($overall_growth == $overall_growth_past){
                    $en_status = "It remained in the general growth chart";
                    $es_status = "Se mantuvo en la tabla de crecimiento general";
                  }else if ($overall_growth > $overall_growth_past) {
                    $en_status = "Went up in the Overall growth chart";
                    $es_status = "SubiÃ³ en la tabla de crecimiento general";
                  }else{
                    $en_status = "Down in the Overall growth chart";
                    $es_status = "BajÃ³ en la tabla de crecimiento general";
                  }

                  // Points earned in Overall growth
                  $en_point = $overall_growth . " points earned in overall growth";

                  $es_point = $overall_growth . " puntos ganados en crecimiento general";

                  $rec_points = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_point, :en_point,NULL,NULL,NULL,:cell_id,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_points = array(
                      ':en_point' => $en_point,
                      ':es_point' => $es_point,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_points = $rec_points->execute($val_rec_points);

                  // Went up or down in the Overall growth chart
                  $rec_status = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_status, :en_status,NULL,NULL,NULL,:cell_id,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_status = array(
                      ':en_status' => $en_status,
                      ':es_status' => $es_status,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_status = $rec_status->execute($val_rec_status);


                  // Record Cell: Went up or down in the Cell attendance growth chart (Leader)
                  if($overall_attend == $overall_attend2){
                    $en_statusc5 = "It remained in the cell attendance growth chart";
                    $es_statusc5 = "Se mantuvo en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else if ($overall_attend > $overall_attend2) {
                    $en_statusc5 = "Went up in the cell attendance growth chart";
                    $es_statusc5 = "SubiÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }else{
                    $en_statusc5 = "Down in the cell attendance growth chart";
                    $es_statusc5 = "BajÃ³ en la tabla de crecimiento de asistencia a cÃ©lula";
                  }

                  $rec_statusc5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusc5, :en_statusc5,NULL,NULL,NULL,:cell_id,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusc5 = array(
                      ':en_statusc5' => $en_statusc5,
                      ':es_statusc5' => $es_statusc5,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_statusc5 = $rec_statusc5->execute($val_rec_statusc5);

                  // Record Church: Went up or down in the Church attendance growth chart (Leader)
                  if($overall_church == $overall_church2){
                    $en_statusch5 = "It remained in the church attendance growth chart";
                    $es_statusch5 = "Se mantuvo en la tabla de crecimiento de asistencia a la iglesia";
                  }else if ($overall_church > $overall_church2) {
                    $en_statusch5 = "Went up in the church attendance growth chart";
                    $es_statusch5 = "SubiÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }else{
                    $en_statusch5 = "Down in the church attendance growth chart";
                    $es_statusch5 = "BajÃ³ en la tabla de crecimiento de asistencia a la iglesia";
                  }

                  $rec_statusch5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statusch5, :en_statusch5,NULL,NULL,NULL,:cell_id,NULL,'3',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statusch5 = array(
                      ':en_statusch5' => $en_statusch5,
                      ':es_statusch5' => $es_statusch5,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_statusch5 = $rec_statusch5->execute($val_rec_statusch5);

                  // Record Church: Went up or down in the performance growth chart
                  if($overall_perfomance == $overall_perfomance2){
                    $en_statuspr5 = "It remained in the performance growth chart";
                    $es_statuspr5 = "Se mantuvo en la tabla de crecimiento de rendimiento";
                  }else if ($overall_perfomance > $overall_perfomance2) {
                    $en_statuspr5 = "Went up in the performance growth chart";
                    $es_statuspr5 = "SubiÃ³ en la tabla de crecimiento de rendimiento";
                  }else{
                    $en_statuspr5 = "Down in the performance growth chart";
                    $es_statuspr5 = "BajÃ³ en la tabla de crecimiento de rendimiento";
                  }

                  $rec_statuspr5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_statuspr5, :en_statuspr5,NULL,NULL,NULL,:cell_id,NULL,'4',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $val_rec_statuspr5 = array(
                      ':en_statuspr5' => $en_statuspr5,
                      ':es_statuspr5' => $es_statuspr5,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_statuspr5 = $rec_statuspr5->execute($val_rec_statuspr5);


                  /********************** Top Cities Global ************************/
                  $result_cities = null;
                  $result_cities2 = null;

                  // Actual quarter
                  $sql = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 AND (members_cells.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top5 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql) as $row) {
                    $row['ranking'] = '1';
                    $result_cities[] = $row;
                  }

                  // Last quarter
                  $period_filter4 = "AND (members_cells.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                  $sql2 = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 $period_filter4 AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top5 group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

                  foreach ($con->query($sql2) as $row2) {
                    $result_cities2[] = $row2;
                  }

                  /*Obtain final ranking*/
                  if ($result_cities != null && $result_cities2 != null) {

                    // order array top cities actual
                    foreach ($result_cities as $key => $frow) {
                        $aux[$key] = $frow['crowd'];
                    }
                    
                    array_multisort($aux, SORT_DESC, $result_cities);

                    // order array top cities actual
                    foreach ($result_cities2 as $key2 => $frow2) {
                        $aux2[$key2] = $frow2['crowd'];
                    }
                    
                    array_multisort($aux2, SORT_DESC, $result_cities2);

                    for($i=0; $i<count($result_cities); $i++){
                        for($j=0; $j<count($result_cities2); $j++){
                            if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                /*Change of position in the top cities (records)*/
                                if ($i != $j) {

                                  if ($i == '0') {
                                    $position = "first";
                                    $es_pos = "primera";
                                  } else if ($i == '1') {
                                    $position = "second";
                                    $es_pos = "segunda";
                                  } else if ($i == '2') {
                                    $position = "third";
                                    $es_pos = "tercera";
                                  } else if ($i == '3') {
                                    $position = "fourth";
                                    $es_pos = "cuarta";
                                  } else if ($i == '4') {
                                    $position = "fifth";
                                    $es_pos = "quinta";
                                  }

                                  // Change of position in the top cities
                                  $en_top = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities";

                                  $es_top = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en las principales ciudades";

                                  $rec_top = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_top, :en_top,NULL,NULL,NULL,:cell_id,NULL,'1',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                  $val_rec_top = array(
                                      ':en_top' => $en_top,
                                      ':es_top' => $es_top,
                                      ':cell_id' => $cell_id,
                                      ':final_d' => $final_d);

                                  $result_top = $rec_top->execute($val_rec_top);
                                   
                                }

                                /*obatin ranking down or up*/
                                if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                  $ranking = '1';
                                  $result_cities[$i]['ranking'] = '1';
                                }else{
                                  $ranking = '0';
                                  $result_cities[$i]['ranking'] = '0';
                                }

                            }
                        }
                    }

                  }


                  /********************** Top Cities Cell Attendance ************************/
                   $result_cities = null;
                   $result_cities2 = null;

                   // Actual quarter
                   $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd5 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                   foreach ($con->query($sql) as $row) {
                     $row['ranking'] = '1';
                     $result_cities[] = $row;
                   }

                   // Last quarter
                   $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

                    // if date filter is sent
                   if ($initial_date && $final_date && empty($is_mobile)) {
                     $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                     
                   }else if ($initial_date && $is_mobile) {
                     $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
                   }

                   $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' $period_filter4 $filter_crowd5 group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

                   foreach ($con->query($sql2) as $row2) {
                     $result_cities2[] = $row2;
                   }

                   /*Obtain final ranking*/
                   if ($result_cities != null && $result_cities2 != null) {

                     // order array top cities actual
                     foreach ($result_cities as $key => $frow) {
                         $aux[$key] = $frow['crowd'];
                     } 
                     array_multisort($aux, SORT_DESC, $result_cities);

                     // order array top cities actual
                     foreach ($result_cities2 as $key2 => $frow2) {
                         $aux2[$key2] = $frow2['crowd'];
                     }
                     array_multisort($aux2, SORT_DESC, $result_cities2);

                     for($i=0; $i<count($result_cities); $i++){
                         for($j=0; $j<count($result_cities2); $j++){
                             if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                                 /*Change of position in the top cities (records)*/
                                 if ($i != $j) {

                                   if ($i == '0') {
                                     $position = "first";
                                     $es_pos = "primera";
                                   } else if ($i == '1') {
                                     $position = "second";
                                     $es_pos = "segunda";
                                   } else if ($i == '2') {
                                     $position = "third";
                                     $es_pos = "tercera";
                                   } else if ($i == '3') {
                                     $position = "fourth";
                                     $es_pos = "cuarta";
                                   } else if ($i == '4') {
                                     $position = "fifth";
                                     $es_pos = "quinta";
                                   }

                                   // Record Change of position in the top cities
                                   $en_topce5 = $result_cities[$i]['city'] . " has moved to the " . $position ." position in the top cities cell attendance";

                                   $es_topce5 = $result_cities[$i]['city'] . " se ha movido a la " . $es_pos ." posiciÃ³n en el top de ciudades por asistencia a cÃ©lula";

                                   $rec_topce5 = $con->prepare("INSERT INTO records (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`church_id`,`type_record`,`created_at`,`updated_at`) VALUES (:es_topce5, :en_topce5,NULL,NULL,NULL,:cell_id,NULL,'2',:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                                   $val_rec_topce5 = array(
                                       ':en_topce5' => $en_topce5,
                                       ':es_topce5' => $es_topce5,
                                       ':cell_id' => $cell_id,
                                       ':final_d' => $final_d);

                                   $result_topce5 = $rec_topce5->execute($val_rec_topce5);
                                    
                                 }

                                 if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                                   $ranking = '1';
                                   $result_cities[$i]['ranking'] = '1';
                                 }else{
                                   $ranking = '0';
                                   $result_cities[$i]['ranking'] = '0';
                                 }

                             }
                         }
                     }

                  }

                /*end if principal*/
                }



                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity impersonate Added a new report (Leader)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new report " . $report_name;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo reporte " . $report_name;

                  /*Activity Added a new report (Leader)*/
                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message,
                      ':id_m' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*Activity The leader added a new report (Cell Group)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new report " . $report_name;
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo reporte " . $report_name;

                  /*Activity The leader added a new report (Sector)*/
                  $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new report " . $report_name;
                  $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo reporte " . $report_name;

                }else{

                	/*Activity Added a new report (Leader)*/
                	$en_message = $first_name_leader . " " . $last_name_leader . " added a new report " . $report_name;
                	$es_message = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo reporte " . $report_name;

                  /*Activity The leader added a new report (Cell Group)*/
                  $en_message2 = $first_name_leader . " " . $last_name_leader . " added a new report " . $report_name;
                  $es_message2 = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo reporte " . $report_name;

                  /*Activity The leader added a new report (Sector)*/
                  $en_message3 = $first_name_leader . " " . $last_name_leader . " added a new report " . $report_name;
                  $es_message3 = $first_name_leader . " " . $last_name_leader . " agregÃ³ un nuevo reporte " . $report_name;
                }

                /*Activity Added a new report (Leader)*/
                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $user_id,
                    ':final_d' => $final_d);

                $result_act = $pre_act->execute($values_act);


                /*** ACTIVITY GROUPS ***/

                /*Activity The leader added a new report (Cell Group)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2,
                    ':en_message2' => $en_message2,
                    ':cell_id' => $cell_id,
                    ':final_d' => $final_d);

                $result_act2 = $pre_act2->execute($values_act2);


                /*Activity The leader added a new report (Sector)*/
                $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,NULL,NULL,:sector_ce,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act3 = array(
                    ':es_message3' => $es_message3,
                    ':en_message3' => $en_message3,
                    ':sector_ce' => $sector_ce,
                    ':final_d' => $final_d);

                $result_act3 = $pre_act3->execute($values_act3);

                return $response->withStatus(200)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('response' => array('message' => 'Your report has been saved successfully')));
                  
              }else{   
                  return $response->withStatus(422)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('error' => array(
                                        "message"=>"There was a problem, verify your parameters",
                                        "status"=>422)));
              }


          }else{
            return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"A report has already been created during this week",
                          "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell does not exist",
                      "status"=>422)));
        }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to create reports",
                  "status"=>422)));
    }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/get-report', function ($request,$response) {

  try{
   $con = $this->db;
   $report_id = $request->getParam('report_id');
   $cell_id = $request->getParam('cell_id');

   if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($report_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: report_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT reports.name, reports.creation_date, reports.donations_offering, reports.donations_events, reports.donations_transport, reports.total_member_assistance, reports.total_kids_assistance, reports.total_guest_assistance, reports.total_doctrine, reports.total_celebration, reports.total_salvation, reports.total_baptized, reports.total_schedule_visits, groups_cells.church_id FROM reports INNER JOIN groups_cells ON reports.cell_id = groups_cells.id WHERE reports.id = :report_id AND reports.cell_id = :cell_id",  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':report_id' => $report_id,':cell_id' => $cell_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $church_id = $result_i['church_id'];

    $sql = "SELECT members_cells.id AS member_id, members_cells.first_name, members_cells.last_name,members_cells.profile_picture,members_cells.role, reports_details.cell_group, reports_details.doctrine, reports_details.celebration, reports_details.salvations, reports_details.baptized, reports_details.scheduled_visits FROM reports_details INNER JOIN members_cells ON reports_details.member_id = members_cells.id WHERE reports_details.report_id = $report_id AND members_cells.cell_id = $cell_id AND members_cells.church_id = $church_id AND active = '1'";
    

    foreach ($con->query($sql) as $row) {
      $members[] = $row;
    }


    $jsonObject = array(
      "name" => $result_i['name'],
      "creation_date" => $result_i['creation_date'],
      "donations_offering" => $result_i['donations_offering'],
      "donations_events" => $result_i['donations_events'],
      "donations_transport" => $result_i['donations_transport'],
      "total_member_assistance" => $result_i['total_member_assistance'],
      "total_kids_assistance" => $result_i['total_kids_assistance'],
      "total_guest_assistance" => $result_i['total_guest_assistance'],
      "total_doctrine" => $result_i['total_doctrine'],
      "total_celebration" => $result_i['total_celebration'],
      "total_salvation" => $result_i['total_salvation'],
      "total_baptized" => $result_i['total_baptized'],
      "total_schedule_visits" => $result_i['total_schedule_visits'],
      "attendance" => $members
    );

    return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => $jsonObject));

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Report does not exist in this cell",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/cells/edit-report', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');
   $report_id = $request->getParam('report_id');

   $donations_offering = $request->getParam('donations_offering');
   $donations_events = $request->getParam('donations_events');
   $donations_transport = $request->getParam('donations_transport');

   $total_member_assistance = $request->getParam('total_member_assistance');
   $total_kids_assistance = $request->getParam('total_kids_assistance');
   $total_guest_assistance = $request->getParam('total_guest_assistance');
   $total_doctrine = $request->getParam('total_doctrine');
   $total_celebration = $request->getParam('total_celebration');
   $total_salvation = $request->getParam('total_salvation');
   $total_baptized = $request->getParam('total_baptized');
   $total_schedule_visits = $request->getParam('total_schedule_visits');

   $attendance = $request->getParam('attendance');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!is_numeric($donations_offering)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: donations_offering",
               "status"=>500)));
   } else if(!is_numeric($donations_events)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: donations_events",
               "status"=>500)));
   } else if(!is_numeric($donations_transport)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: donations_transport",
               "status"=>500)));
   }else if(!preg_match("/^[0-9]+$/i", $total_member_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_member_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_kids_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_kids_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_guest_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_guest_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_doctrine)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_doctrine",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_celebration)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_celebration",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_salvation)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_salvation",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_baptized)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_baptized",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_schedule_visits)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: total_schedule_visits",
               "status"=>500)));
   } else if(empty($attendance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: attendance",
               "status"=>500)));
   } else if(empty($report_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: report_id",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

   $err_member = 0;
   $err_cell = 0;
   $err_doctrine = 0;
   $err_celebration = 0;
   $err_salvation = 0;
   $err_baptized = 0;
   $err_scheduled = 0;
   $err_val_member = 0;

   for($i = 0; $i < count($attendance); $i++) {

    $pre_mem = $con->prepare("SELECT *
                          FROM members_cells
                          WHERE id = :member_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_mem  = array(':member_id' => $attendance[$i]['member_id']);
    $pre_mem->execute($values_mem);
    $result_mem = $pre_mem->fetch();

     if(empty($attendance[$i]['member_id'])){
       $err_member += 1;
       $err_id = $i;
       $arr[] = $err_id;
     }else if(!preg_match("/^[0-1]+$/i", $attendance[$i]['cell_group'])){
       $err_cell += 1;
       $err_id1 = $i;
       $arr1[] = $err_id1;
     } else if(!preg_match("/^[0-1]+$/i", $attendance[$i]['doctrine'])){
       $err_doctrine += 1;
       $err_id2 = $i;
       $arr2[] = $err_id2;
     } else if(!preg_match("/^[0-1]+$/i",$attendance[$i]['celebration'])){
       $err_celebration += 1;
       $err_id3 = $i;
       $arr3[] = $err_id3;
     } else if(!preg_match("/^[0-1]+$/i",$attendance[$i]['salvations'])){
       $err_salvation += 1;
       $err_id4 = $i;
       $arr4[] = $err_id4;
     } else if(!preg_match("/^[0-1]+$/i",$attendance[$i]['baptized'])){
       $err_baptized += 1;
       $err_id5 = $i;
       $arr5[] = $err_id5;
     } else if(!preg_match("/^[0-1]+$/i", $attendance[$i]['scheduled_visits'])){
       $err_scheduled += 1;
       $err_id6 = $i;
       $arr6[] = $err_id6;
     } else if(empty($result_mem)){
       $err_val_member += 1;
       $err_id7 = $i;
       $arr7[] = $err_id7;
     }

   }


   if($err_member > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "err_id"=>$arr,
               "status"=>500)));

   } else if($err_cell > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: cell_group",
               "err_id"=>$arr1,
               "status"=>500)));

   } else if($err_doctrine > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: doctrine",
               "err_id"=>$arr2,
               "status"=>500)));

   } else if($err_celebration > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: celebration",
               "err_id"=>$arr3,
               "status"=>500)));

   }else if($err_salvation > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: salvations",
               "err_id"=>$arr4,
               "status"=>500)));

   } else if($err_baptized > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: baptized",
               "err_id"=>$arr5,
               "status"=>500)));

   } else if($err_scheduled > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: scheduled_visits",
               "err_id"=>$arr6,
               "status"=>500)));

   } else if($err_val_member > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Member does not exists",
               "err_id"=>$arr7,
               "status"=>500)));

   }


  if ($role_id == '5' || $role_id == '1' || $role_id == '6' || $role_id == '7') {
      
      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND church_id = :church_id AND rol = :role_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if ($result_s) {

      	$first_name_leader = $result_s['first_name'];
      	$last_name_leader = $result_s['last_name'];

        $pre_r = $con->prepare("SELECT *
                                 FROM reports
                                 WHERE id = :report_id AND cell_id = :cell_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_r = array(':report_id' => $report_id, ':cell_id' => $cell_id);
        $pre_r->execute($values_r);
        $result_r = $pre_r->fetch();

        if ($result_r) {

          /*report name activity*/
          $report_n = $result_r['name'];

          $pre_cell = $con->prepare("SELECT *
                                   FROM groups_cells
                                   WHERE id = :cell_id AND church_id = :church_id AND active = '1'", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cell = array(':cell_id' => $cell_id, ':church_id' => $church_id);
          $pre_cell->execute($values_cell);
          $result_cell = $pre_cell->fetch();


          $pre_se = $con->prepare("SELECT user.id, user.first_name FROM groups_cells INNER JOIN user ON groups_cells.church_id = user.church_id WHERE groups_cells.id = :cell_id AND groups_cells.church_id = :church_id AND user.id = :user_id AND user.rol = :role_id AND groups_cells.active = '1'", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':cell_id' => $cell_id, ':church_id' => $church_id, ':user_id' => $user_id, ':role_id' => $role_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          /*verified cell*/
          if ($result_cell || $result_se) {

            $actual_d = date("Y-m-d");


            $pre_em = $con->prepare("SELECT *
                                     FROM reports
                                     WHERE id = :report_id AND end_date >= :actual_d", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_em = array(':report_id' => $report_id,':actual_d' => $actual_d);
            $pre_em->execute($values_em);
            $result_em = $pre_em->fetch();

            /*verified report name*/
            if ($result_em) {

                $final_d = date("Y-m-d H:i:s");

                /*edit report*/
                $pre = $con->prepare("UPDATE reports SET donations_offering = :donations_offering,
                                       donations_transport = :donations_transport,
                                       donations_events = :donations_events,
                                       total_member_assistance = :total_member_assistance,
                                       total_kids_assistance = :total_kids_assistance,
                                       total_guest_assistance = :total_guest_assistance,
                                       total_doctrine = :total_doctrine,
                                       total_celebration = :total_celebration,
                                       total_salvation = :total_salvation,
                                       total_baptized = :total_baptized,
                                       total_schedule_visits = :total_schedule_visits,
                                       updated_at = :updated_at
                                       WHERE id = :report_id AND cell_id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values = array(
                  ':donations_offering' => $donations_offering,
                  ':donations_transport' => $donations_transport,
                  ':donations_events' => $donations_events,
                  ':total_member_assistance' => $total_member_assistance,
                  ':total_kids_assistance' => $total_kids_assistance,
                  ':total_guest_assistance' => $total_guest_assistance,
                  ':total_doctrine' => $total_doctrine,
                  ':total_celebration' => $total_celebration,
                  ':total_salvation' => $total_salvation,
                  ':total_baptized' => $total_baptized,
                  ':total_schedule_visits' => $total_schedule_visits,
                  ':report_id' => $report_id,
                  ':cell_id' => $cell_id,
                  ':updated_at' => $final_d
                  );

                $result = $pre->execute($values);


                $pre2 = $con->prepare("DELETE FROM reports_details WHERE `report_id` = :report_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values2 = array(
                  ':report_id' => $report_id
                  );

                $result2 = $pre2->execute($values2);



                for($j = 0; $j < count($attendance); $j++) {

                  $pre3 = $con->prepare("INSERT INTO reports_details (`cell_group`, `doctrine`, `celebration`,`salvations`,`baptized`,`scheduled_visits`,`report_id`,`member_id`,`created_at`, `updated_at`) VALUES (:cell_group, :doctrine,:celebration,:salvations,:baptized,:scheduled_visits,:report_id,:member_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values3 = array(
                    ':cell_group' => $attendance[$j]['cell_group'],
                    ':doctrine' => $attendance[$j]['doctrine'],
                    ':celebration' => $attendance[$j]['celebration'],
                    ':salvations' => $attendance[$j]['salvations'],
                    ':baptized' => $attendance[$j]['baptized'],
                    ':scheduled_visits' => $attendance[$j]['scheduled_visits'],
                    ':report_id' => $report_id,
                    ':member_id' => $attendance[$j]['member_id']
                    );

                  $result3 = $pre3->execute($values3);

                }

                if($result){

                  if ($impersonate) {
                   
                    $roles = getRole($impersonate_role);

                    $role_name = $roles['role_name'];
                    $role_name_es = $roles['role_name_es'];

                    $imperson = " (Impersonate)";
                    $imperson_es = " (Impersonado)";

                    /*Activity Edited a report (Leader)*/
                    $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited report " . $report_n;
                    $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edito el reporte " . $report_n;

                    $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                    $values_actm = array(
                        ':es_message' => $es_message,
                        ':en_message' => $en_message,
                        ':id_m' => $impersonate_id,
                        ':final_d' => $final_d);

                    $result_actm = $pre_actm->execute($values_actm);

                    /*** ACTIVITY GROUPS ***/

                    /*Activity The leader edited a report (Cell Group)*/
                    $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited report " . $report_n;
                    $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edito el reporte " . $report_n;

                  }else{

                    /*Activity Edited a report (Leader)*/
                    $en_message = $first_name_leader . " " . $last_name_leader . " edited report " . $report_n;
                    $es_message = $first_name_leader . " " . $last_name_leader . " edito el reporte " . $report_n;

                    /*** ACTIVITY GROUPS ***/

                    /*Activity The leader edited a report (Cell Group)*/
                    $en_message2 = $first_name_leader . " " . $last_name_leader . " edited report " . $report_n;
                    $es_message2 = $first_name_leader . " " . $last_name_leader . " edito el reporte " . $report_n;
                  }

                  /*Activity Edited a report (Leader)*/
                  $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act = array(
                      ':es_message' => $es_message,
                      ':en_message' => $en_message,
                      ':id_m' => $user_id,
                      ':final_d' => $final_d);

                  $result_act = $pre_act->execute($values_act);


                  /*** ACTIVITY GROUPS ***/

                  /*Activity The leader edited a report (Cell Group)*/
                  $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_act2 = array(
                      ':es_message2' => $es_message2,
                      ':en_message2' => $en_message2,
                      ':cell_id' => $cell_id,
                      ':final_d' => $final_d);

                  $result_act2 = $pre_act2->execute($values_act2);

                  return $response->withStatus(200)
                                    ->withHeader('Content-Type', 'application/json')
                                    ->withJson(array('response' => array('message' => 'Your report has been saved successfully')));
                    
                }else{   
                    return $response->withStatus(422)
                                      ->withHeader('Content-Type', 'application/json')
                                      ->withJson(array('error' => array(
                                          "message"=>"There was a problem, verify your parameters",
                                          "status"=>422)));
                }


            }else{
              return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                            "message"=>"The time to edit this report has expired",
                            "status"=>422)));
            }


          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Don't have permission to edit this report",
                        "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Cell not associated with this report",
                      "status"=>422)));
        }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"User with this role does not exist",
                    "status"=>422)));
      }

  }else{

    return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to edit this report",
                  "status"=>422)));
  }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/****************** GENERAL MEMBERS *******************/

/*Lists*/

$app->post('/members/list-cell-members', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($active == '0' || $active == '1') {

      $filter_list = '';
      
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        /*if select filter list*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_list = "AND groups_zones.district_id = $filter_district";


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone";

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";
          
        }

        $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code,members_cells.is_complete, (SELECT MAX(DATE(reports_details.created_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = $church_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = $active AND members_cells.role != 1 $filter_list";
        

      }else if ($role_id == '2') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_list = "AND groups_sectors.zone_id = $filter_zone";

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

          }

          $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.created_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = 1 AND groups_zones.district_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = $active AND members_cells.role != 1 $filter_list";
          
      } else if ($role_id == '3') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_sector && empty($filter_cell)) {

            $filter_list = "AND groups_cells.sector_id = $filter_sector";

          } else if ($filter_sector && $filter_cell) {

            $filter_list = "AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

          } 

          $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.created_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_sectors, groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_sectors.zone_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = $active AND members_cells.role != 1 $filter_list";
          
      } else if ($role_id == '4') {

        if(empty($parent_id)){
              return $response->withStatus(500)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                       "message"=>"Missing parameter: parent_id",
                       "status"=>500)));
        }

        /*if select filter list*/
        if ($filter_cell) {
          $filter_list = "AND groups_cells.id = $filter_cell";
        }
          
        $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.created_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = $active AND members_cells.role != 1 $filter_list";

      } else if ($role_id == '5') {

        if(empty($parent_id)){
              return $response->withStatus(500)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                       "message"=>"Missing parameter: parent_id",
                       "status"=>500)));
        }
          
        $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.created_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = $active AND members_cells.role != 1";


      }else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Role does not exist",
                      "status"=>422)));
      }

      foreach ($con->query($sql) as $row) {
        $guest[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $guest));

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Filter active does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/members/list-leaders', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($active == '0' || $active == '1') {

      $filter_list = '';
      
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        /*if select filter list*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector)) {

          $filter_list = "AND user_groups.district_id = $filter_district";


        } else if ($filter_district && $filter_zone && empty($filter_sector)) {

          $filter_list = "AND user_groups.district_id = $filter_district AND user_groups.zone_id = $filter_zone";

        } else if ($filter_district && $filter_zone && $filter_sector) {

          $filter_list = "AND user_groups.district_id = $filter_district AND user_groups.zone_id = $filter_zone AND user_groups.sector_id = $filter_sector";

        }

        // if cell_id exist, else sector_id
        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), '0') as cell_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as sector_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as zone_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as district_code, IF(user_groups.cell_id != 'NULL', (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";

      }else if ($role_id == '2') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_zone && empty($filter_sector)) {

            $filter_list = "AND user_groups.zone_id = $filter_zone";


          } else if ($filter_zone && $filter_sector) {

            $filter_list = "AND user_groups.zone_id = $filter_zone AND user_groups.sector_id = $filter_sector";

          }

          $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), '0') as cell_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as sector_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as zone_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as district_code, IF(user_groups.cell_id != 'NULL', (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
          
      } else if ($role_id == '3') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_sector) {
            $filter_list = "AND user_groups.sector_id = $filter_sector";

          }

          $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), '0') as cell_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as sector_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as zone_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as district_code, IF(user_groups.cell_id != 'NULL', (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.zone_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
          
          
      } else if ($role_id == '4') {

        if(empty($parent_id)){
              return $response->withStatus(500)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                       "message"=>"Missing parameter: parent_id",
                       "status"=>500)));
        }
          
        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id), '0') as cell_code, user.is_complete, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as sector_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as zone_code, IF(user_groups.cell_id != 'NULL', (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)) as district_code, IF(user_groups.cell_id != 'NULL', (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups  WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.sector_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active";


      } else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Role does not exist",
                      "status"=>422)));
      }

      foreach ($con->query($sql) as $row) {
        $leaders[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $leaders));

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Filter active does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/members/list-supervisors', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($active == '0' || $active == '1') {

      $filter_list = '';
      
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        /*if select filter list*/
        if ($filter_district && empty($filter_zone)) {

          $filter_list = "AND user_groups.district_id = $filter_district";

        } else if ($filter_district && $filter_zone) {

          $filter_list = "AND user_groups.district_id = $filter_district AND user_groups.zone_id = $filter_zone";

        }

        // if sector_id exist, else zone_id

        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), '0') as sector_code, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id)) as zone_code, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id)) as district_code, IF(user_groups.sector_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells where groups_cells.sector_id = user_groups.sector_id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.sector_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = user_groups.sector_id AND groups_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";

      }else if ($role_id == '2') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_zone) {

            $filter_list = "AND user_groups.zone_id = $filter_zone";

          } 

          $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), '0') as sector_code, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id)) as zone_code, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id)) as district_code, IF(user_groups.sector_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells where groups_cells.sector_id = user_groups.sector_id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.sector_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = user_groups.sector_id AND groups_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
          
          
      } else if ($role_id == '3') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), '0') as sector_code, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id)) as zone_code, IF(user_groups.sector_id != 'NULL', (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id AND groups_sectors.church_id = $church_id), (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id)) as district_code, IF(user_groups.sector_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells where groups_cells.sector_id = user_groups.sector_id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.sector_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = user_groups.sector_id AND groups_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user_groups.zone_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active";

          
      } else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Role does not exist",
                      "status"=>422)));
      }

      foreach ($con->query($sql) as $row) {
        $supervisors[] = $row;
      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $supervisors));

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Filter active does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/members/list-zone-pastors', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $filter_district = $request->getParam('filter_district');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($active == '0' || $active == '1') {

      $filter_list = '';
      
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        /*if select filter list*/
        if ($filter_district) {
          $filter_list = "AND user_groups.district_id = $filter_district";
        }

        // if sector_id exist, else zone_id
        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.zone_id != 'NULL', (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id), '0') as zone_code, IF(user_groups.zone_id != 'NULL', (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id), (SELECT groups_districts.district_code FROM groups_districts where groups_districts.id = user_groups.district_id AND groups_districts.church_id = $church_id)) as district_code, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_sectors.supervisor) from groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_sectors.church_id = $church_id), '0') as supervisors, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells, groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_cells.sector_id = groups_sectors.id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.zone_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells, groups_sectors WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = groups_sectors.id AND groups_sectors.zone_id = user_groups.zone_id AND groups_cells.church_id = $church_id AND groups_sectors.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 3 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
        

      }else if ($role_id == '2') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.zone_id != 'NULL', (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id), '0') as zone_code, IF(user_groups.zone_id != 'NULL', (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id AND groups_zones.church_id = $church_id), (SELECT groups_districts.district_code FROM groups_districts where groups_districts.id = user_groups.district_id AND groups_districts.church_id = $church_id)) as district_code, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_sectors.supervisor) from groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_sectors.church_id = $church_id), '0') as supervisors, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells, groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_cells.sector_id = groups_sectors.id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.zone_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells, groups_sectors WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = groups_sectors.id AND groups_sectors.zone_id = user_groups.zone_id AND groups_cells.church_id = $church_id AND groups_sectors.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 3 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active";
          
      } else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Role does not exist",
                      "status"=>422)));
      }

      foreach ($con->query($sql) as $row) {
          $zone_pastors[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $zone_pastors));

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Filter active does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/members/list-district-pastors', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($active == '0' || $active == '1') {
      
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        // if sector_id exist, else zone_id
        $sql = "SELECT user.id as user_id, user.first_name, user.last_name, user.profile_picture, user.city, user.is_complete, IF(user_groups.district_id != 'NULL', (SELECT groups_districts.district_code FROM groups_districts where groups_districts.id = user_groups.district_id AND groups_districts.church_id = $church_id), null) as district_code, IF(user_groups.district_id != 'NULL', (SELECT count(groups_zones.zone_pastor) from groups_zones where groups_zones.district_id = user_groups.district_id and groups_zones.church_id = $church_id), '0') as zone_pastors, IF(user_groups.district_id != 'NULL', (SELECT count(groups_sectors.supervisor) from groups_sectors, groups_zones where groups_zones.district_id = user_groups.district_id and groups_sectors.zone_id = groups_zones.id and groups_sectors.church_id = $church_id), '0') as supervisors, IF(user_groups.district_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells, groups_sectors, groups_zones where groups_zones.district_id = user_groups.district_id and groups_sectors.zone_id = groups_zones.id and groups_cells.sector_id = groups_sectors.id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.district_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells, groups_sectors, groups_zones WHERE members_cells.church_id = $church_id AND groups_zones.district_id = user_groups.district_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = groups_sectors.id AND groups_sectors.zone_id = groups_zones.id AND groups_cells.church_id = $church_id AND groups_sectors.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 2 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active";

      } else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Role does not exist",
                      "status"=>422)));
      }

      foreach ($con->query($sql) as $row) {
          $zone_pastors[] = $row;
        }

        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $zone_pastors));

    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Filter active does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*PROFILE*/

$app->post('/members/guest-profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $guest_id = $request->getParam('guest_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($guest_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: guest_id",
               "status"=>500)));
   } 

   /*verify if user exist*/
   $pre_i = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if ($result_i) {

      $pre_gu = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE id = :guest_id AND role = '1' AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gu = array(':guest_id' => $guest_id, ':church_id' => $church_id);
      $pre_gu->execute($values_gu);
      $result_gu = $pre_gu->fetch();

      if ($result_gu) {

        $pre = $con->prepare("SELECT id, cell_id, CONCAT(first_name, ' ', last_name) AS full_name, email, phone, profile_picture, address, city, gender, birth_date, role, marital_status, married_since, guest_since,exelerate_id, active, is_complete FROM members_cells WHERE id = :guest_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':guest_id' => $guest_id);
        $pre->execute($values);
        $result = $pre->fetch();

        if ($result) {

          $cell_id = $result['cell_id'];

          // Select cell codes
          $sql_gro = "SELECT cell_code, sector_code, zone_code, district_code, (SELECT CONCAT(first_name, ' ', last_name) FROM user where id = groups_cells.leader) as leader FROM groups_cells WHERE id = :cell_id AND church_id = :church_id";
          $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(
            ':cell_id' => $cell_id,
            ':church_id' => $church_id
            );
          
          $result_gro = $pre_gro->execute($values_gro);
          $result_gro = $pre_gro->fetch();

          $finalObject = array(
            "guest_id" => $result['id'],
            "full_name" => $result['full_name'],
            "email" => $result['email'],
            "phone" => $result['phone'],
            "address" => $result['address'],
            "city" => $result['city'],
            "gender" => $result['gender'],
            "birth_date" => $result['birth_date'],
            "marital_status" => $result['marital_status'],
            "married_since" => $result['married_since'],
            "guest_since" => $result['guest_since'],
            "profile_picture" => $result['profile_picture'],
            "role_id" => $result['role'],
            "exelerate_id" => $result['exelerate_id'],
            "active" => $result['active'],
            "is_complete" => $result['is_complete'],
            'cell_code' => $result_gro['cell_code'],
            'sector_code' => $result_gro['sector_code'],
            'zone_code' => $result_gro['zone_code'],
            'district_code' => $result_gro['district_code'],
            'leader' => $result_gro['leader']
          );

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => $finalObject));
        }else{   
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"There was a problem, verify your parameters",
                                    "status"=>422)));
        }

      }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"Guest does not exist",
                   "status"=>422)));
     }

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "message"=>"User with this role does not exist",
                 "status"=>422)));
   }
 


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/members/cell-member-profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } 

   /*verify if user exist*/
   $pre_i = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if ($result_i) {

      $pre_gu = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE id = :member_id AND role != '1' AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gu = array(':member_id' => $member_id, ':church_id' => $church_id);
      $pre_gu->execute($values_gu);
      $result_gu = $pre_gu->fetch();

      if ($result_gu) {

        $pre = $con->prepare("SELECT id, cell_id, CONCAT(first_name, ' ', last_name) AS full_name, email, phone, profile_picture, address, city, gender, birth_date, role, marital_status, married_since, guest_since, member_since,exelerate_id, active, is_complete FROM members_cells WHERE id = :member_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(':member_id' => $member_id);
        $pre->execute($values);
        $result = $pre->fetch();

        if ($result) {

          $cell_id = $result['cell_id'];

          // Select cell codes
          $sql_gro = "SELECT cell_code, sector_code, zone_code, district_code, (SELECT CONCAT(first_name, ' ', last_name) FROM user where id = groups_cells.leader) as leader FROM groups_cells WHERE id = :cell_id AND church_id = :church_id";
          $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(
            ':cell_id' => $cell_id,
            ':church_id' => $church_id
            );
          
          $result_gro = $pre_gro->execute($values_gro);
          $result_gro = $pre_gro->fetch();


          /*Steps*/

          $sql = "SELECT step_id,name,step_date
                  FROM members_cells_steps
                  WHERE member_id = $member_id";

          $steps = null;

          foreach ($con->query($sql) as $row) {
            $steps[] = $row;
          }

          $finalObject = array(
            "guest_id" => $result['id'],
            "full_name" => $result['full_name'],
            "email" => $result['email'],
            "phone" => $result['phone'],
            "address" => $result['address'],
            "city" => $result['city'],
            "gender" => $result['gender'],
            "birth_date" => $result['birth_date'],
            "marital_status" => $result['marital_status'],
            "married_since" => $result['married_since'],
            "guest_since" => $result['guest_since'],
            "member_since" => $result['member_since'],
            "profile_picture" => $result['profile_picture'],
            "role_id" => $result['role'],
            "exelerate_id" => $result['exelerate_id'],
            "active" => $result['active'],
            "is_complete" => $result['is_complete'],
            'cell_code' => $result_gro['cell_code'],
            'sector_code' => $result_gro['sector_code'],
            'zone_code' => $result_gro['zone_code'],
            'district_code' => $result_gro['district_code'],
            'leader' => $result_gro['leader'],
            'steps' => $steps
          );

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => $finalObject));
        }else{   
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"There was a problem, verify your parameters",
                                    "status"=>422)));
        }

      }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"Cell Member does not exist",
                   "status"=>422)));
     }

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "message"=>"User with this role does not exist",
                 "status"=>422)));
   }
 


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*EDIT*/

/*Guest*/
$app->post('/members/edit-guest-profile', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');
   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $guest_since = $request->getParam('guest_since');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);
   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(!$valid_phone){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid phone",
               "status"=>500)));
   } else if(!$valid_email){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid email address",
               "status"=>500)));
   }else if(empty($gender)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: gender",
                 "status"=>500)));
   } else if(empty($marital_status)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: marital_status",
                 "status"=>500)));
   } else if($birth_date){

      if(!$valid_birthdate){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid birthdate",
                 "status"=>500)));
      }

   }else if($married_since){

      if(!$valid_married){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid married date",
                 "status"=>500)));
      }

   } else if(!$valid_guest){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid guest_since",
                 "status"=>500)));

   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


     /*verify if user exist*/
     $pre_i = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
     $pre_i->execute($values_i);
     $result_i = $pre_i->fetch();

     if ($result_i) {

      /*verify if role leader*/
      if ($role_id == '5') {

        $first_name_leader = $result_i['first_name'];
        $last_name_leader = $result_i['last_name'];

        /*verify if cell member exist*/
        $pre_gu = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :member_id AND role = '1' AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_gu = array(':member_id' => $member_id, ':church_id' => $church_id);
        $pre_gu->execute($values_gu);
        $result_gu = $pre_gu->fetch();

        if ($result_gu) {

          /*verify if status married*/
          if ($marital_status == 'Married') {
            if(empty($married_since)){
                 return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: married_since",
                           "status"=>500)));
            }else{
              if(!$valid_married){
               return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"You must enter a valid married date",
                         "status"=>500)));
              }
            }
          }else{
            $married_since = null;
          }

          /*verify if picture is null*/
          if ($profile_picture != null) {

            if (empty($guest_since)) {

              /*update member info*/
              $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                     last_name = :last_name,
                                     email = :email,
                                     phone = :phone,
                                     address = :address,
                                     city = :city,
                                     birth_date = :birth_date,
                                     profile_picture= :profile_picture,
                                     gender= :gender,
                                     marital_status= :marital_status,
                                     married_since= :married_since
                                     WHERE id = :member_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                ':member_id' => $member_id, 
                ':first_name' => $first_name,
                ':last_name' => $last_name,
                ':email' => $email,
                ':profile_picture' => $profile_picture,
                ':phone' => $phone,
                ':address' => $address,
                ':city' => $city,
                ':birth_date' => $birth_date,
                ':gender' => $gender,
                ':marital_status' => $marital_status,
                ':married_since' => $married_since);

              $result = $pre->execute($values);      

            }else{

                /*update member info*/
                $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                       last_name = :last_name,
                                       email = :email,
                                       phone = :phone,
                                       address = :address,
                                       city = :city,
                                       birth_date = :birth_date,
                                       profile_picture= :profile_picture,
                                       gender= :gender,
                                       marital_status= :marital_status,
                                       married_since= :married_since,
                                       guest_since= :guest_since
                                       WHERE id = :member_id",
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values = array(
                  ':member_id' => $member_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':profile_picture' => $profile_picture,
                  ':phone' => $phone,
                  ':address' => $address,
                  ':city' => $city,
                  ':birth_date' => $birth_date,
                  ':gender' => $gender,
                  ':marital_status' => $marital_status,
                  ':guest_since' => $guest_since,
                  ':married_since' => $married_since);

                $result = $pre->execute($values);

            }
          
          /*else profile_picture don't exist*/
          }else{

            if (empty($guest_since)) {

              /*update member info*/
              $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                     last_name = :last_name,
                                     email = :email,
                                     phone = :phone,
                                     address = :address,
                                     city = :city,
                                     birth_date = :birth_date,
                                     gender= :gender,
                                     marital_status= :marital_status,
                                     married_since= :married_since
                                     WHERE id = :member_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                ':member_id' => $member_id, 
                ':first_name' => $first_name,
                ':last_name' => $last_name,
                ':email' => $email,
                ':phone' => $phone,
                ':address' => $address,
                ':city' => $city,
                ':birth_date' => $birth_date,
                ':gender' => $gender,
                ':marital_status' => $marital_status,
                ':married_since' => $married_since);

              $result = $pre->execute($values);

            }else{

                /*update user info*/
                $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                       last_name = :last_name,
                                       email = :email,
                                       phone = :phone,
                                       address = :address,
                                       city = :city,
                                       birth_date = :birth_date,
                                       gender= :gender,
                                       marital_status= :marital_status,
                                       married_since= :married_since,
                                       guest_since= :guest_since
                                       WHERE id = :member_id",
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values = array(
                  ':member_id' => $member_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':phone' => $phone,
                  ':address' => $address,
                  ':city' => $city,
                  ':birth_date' => $birth_date,
                  ':gender' => $gender,
                  ':marital_status' => $marital_status,
                  ':guest_since' => $guest_since,
                  ':married_since' => $married_since);

                $result = $pre->execute($values);


            } /*else guest_since*/

          } /* else picture is null*/


          /*print result*/
          if($result){

            /*************** ACTIVITIES ***********************/
            $final_d = date("Y-m-d H:i:s");

            /*Activity Profile updates (Guest)*/
            $en_message = $first_name . " " . $last_name . " profile has been updated";
            $es_message = "El perfil de " . $first_name . " " . $last_name . " ha sido actualizado";

            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message, 
                ':en_message' => $en_message, 
                ':id_m' => $member_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);


            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity impersonate Edited a Cell member/guestâs profile (Leader)*/
              $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited a guest: " . $first_name . " " . $last_name;
              $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ un invitado: " . $first_name . " " . $last_name;

              $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_actm = array(
                  ':es_mess' => $es_mess,
                  ':en_mess' => $en_mess,
                  ':user_id' => $impersonate_id,
                  ':final_d' => $final_d);

              $result_actm = $pre_actm->execute($values_actm);

            }else{
              /*Activity Edited a Cell member/guestâs profile (Leader)*/
              $en_mess = $first_name_leader . " " . $last_name_leader . " edited a guest: " . $first_name . " " . $last_name;
              $es_mess = $first_name_leader . " " . $last_name_leader . " editÃ³ un invitado: " . $first_name . " " . $last_name;
            }

            /*Activity Edited a Cell member/guestâs profile (Leader)*/
            $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act_lead = array(
                ':es_mess' => $es_mess,
                ':en_mess' => $en_mess,
                ':user_id' => $user_id,
                ':final_d' => $final_d);

            $result_act_lead = $pre_act_lead->execute($values_act_lead);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Guest profile has been saved successfully'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }


        /*else verify cell member*/
        }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"Guest does not exist",
                     "status"=>422)));
       }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Don't have permission to perform this action",
                    "status"=>422)));
      }


     }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
     }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*cell members*/
$app->post('/members/edit-cell-group-profile', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');
   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $exelerate_id = $request->getParam('exelerate_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone);
   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(!$valid_phone){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid phone",
               "status"=>500)));
   } else if(!$valid_email){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"You must enter a valid email address",
               "status"=>500)));
   }else if(empty($gender)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: gender",
                 "status"=>500)));
   } else if(empty($marital_status)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: marital_status",
                 "status"=>500)));
   } else if($birth_date){

      if(!$valid_birthdate){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid birthdate",
                 "status"=>500)));
      }

   }else if($married_since){

      if(!$valid_married){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid married date",
                 "status"=>500)));
      }

   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


     /*verify if user exist*/
     $pre_i = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
     $pre_i->execute($values_i);
     $result_i = $pre_i->fetch();

     if ($result_i) {

      /*verify if role leader*/
      if ($role_id == '5') {

        $first_name_leader = $result_i['first_name'];
        $last_name_leader = $result_i['last_name'];

        /*verify if cell member exist*/
        $pre_gu = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :member_id AND role != '1' AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_gu = array(':member_id' => $member_id, ':church_id' => $church_id);
        $pre_gu->execute($values_gu);
        $result_gu = $pre_gu->fetch();

        if ($result_gu) {

          /*verify if status married*/
          if ($marital_status == 'Married') {
            if(empty($married_since)){
                 return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: married_since",
                           "status"=>500)));
            }else{
              if(!$valid_married){
               return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"You must enter a valid married date",
                         "status"=>500)));
              }
            }
          }else{
            $married_since = null;
          }

          /*verify if picture is null*/
          if ($profile_picture != null) {

            if (empty($exelerate_id)) {

              /*update member info*/
              $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                     last_name = :last_name,
                                     email = :email,
                                     phone = :phone,
                                     address = :address,
                                     city = :city,
                                     birth_date = :birth_date,
                                     profile_picture= :profile_picture,
                                     gender= :gender,
                                     marital_status= :marital_status,
                                     married_since= :married_since
                                     WHERE id = :member_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                ':member_id' => $member_id, 
                ':first_name' => $first_name,
                ':last_name' => $last_name,
                ':email' => $email,
                ':profile_picture' => $profile_picture,
                ':phone' => $phone,
                ':address' => $address,
                ':city' => $city,
                ':birth_date' => $birth_date,
                ':gender' => $gender,
                ':marital_status' => $marital_status,
                ':married_since' => $married_since);

              $result = $pre->execute($values);

            }else{

              $pre_ex = $con->prepare("SELECT *
                                       FROM members_cells
                                       WHERE exelerate_id = :exelerate_id AND id != :member_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ex = array(':exelerate_id' => $exelerate_id, ':member_id' => $member_id);
              $pre_ex->execute($values_ex);
              $result_ex = $pre_ex->fetch();

              if ($result_ex) {
                
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Exelerate ID already exists",
                                    "status"=>422)));

              }else{

                /*update member info*/
                $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                       last_name = :last_name,
                                       email = :email,
                                       phone = :phone,
                                       address = :address,
                                       city = :city,
                                       birth_date = :birth_date,
                                       profile_picture= :profile_picture,
                                       gender= :gender,
                                       marital_status= :marital_status,
                                       married_since= :married_since,
                                       exelerate_id= :exelerate_id
                                       WHERE id = :member_id",
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values = array(
                  ':member_id' => $member_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':profile_picture' => $profile_picture,
                  ':phone' => $phone,
                  ':address' => $address,
                  ':city' => $city,
                  ':birth_date' => $birth_date,
                  ':gender' => $gender,
                  ':marital_status' => $marital_status,
                  ':exelerate_id' => $exelerate_id,
                  ':married_since' => $married_since);

                $result = $pre->execute($values);
              }

            }
            
          }else{

            if (empty($exelerate_id)) {

              /*update member info*/
              $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                     last_name = :last_name,
                                     email = :email,
                                     phone = :phone,
                                     address = :address,
                                     city = :city,
                                     birth_date = :birth_date,
                                     gender= :gender,
                                     marital_status= :marital_status,
                                     married_since= :married_since
                                     WHERE id = :member_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                ':member_id' => $member_id, 
                ':first_name' => $first_name,
                ':last_name' => $last_name,
                ':email' => $email,
                ':phone' => $phone,
                ':address' => $address,
                ':city' => $city,
                ':birth_date' => $birth_date,
                ':gender' => $gender,
                ':marital_status' => $marital_status,
                ':married_since' => $married_since);

              $result = $pre->execute($values);

            }else{

              $pre_ex = $con->prepare("SELECT *
                                       FROM members_cells
                                       WHERE exelerate_id = :exelerate_id AND id != :member_id", 
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_ex = array(':exelerate_id' => $exelerate_id, ':member_id' => $member_id);
              $pre_ex->execute($values_ex);
              $result_ex = $pre_ex->fetch();

              if ($result_ex) {
                
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"Exelerate ID already exists",
                                    "status"=>422)));

              }else{

                /*update user info*/
                $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                                       last_name = :last_name,
                                       email = :email,
                                       phone = :phone,
                                       address = :address,
                                       city = :city,
                                       birth_date = :birth_date,
                                       gender= :gender,
                                       marital_status= :marital_status,
                                       married_since= :married_since,
                                       exelerate_id= :exelerate_id
                                       WHERE id = :member_id",
                                         array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values = array(
                  ':member_id' => $member_id, 
                  ':first_name' => $first_name,
                  ':last_name' => $last_name,
                  ':email' => $email,
                  ':phone' => $phone,
                  ':address' => $address,
                  ':city' => $city,
                  ':birth_date' => $birth_date,
                  ':gender' => $gender,
                  ':marital_status' => $marital_status,
                  ':exelerate_id' => $exelerate_id,
                  ':married_since' => $married_since);

                $result = $pre->execute($values);

              }

            } /*else exelerate_id*/

          } /* else picture is null*/


          /*print result*/
          if($result){

            $final_d = date("Y-m-d H:i:s");

            /*Activity Profile updates (Cell Member)*/
            $en_message = $first_name . " " . $last_name . " profile has been updated";
            $es_message = "El perfil de " . $first_name . " " . $last_name . " ha sido actualizado";

            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message, 
                ':en_message' => $en_message, 
                ':id_m' => $member_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);


            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity Edited a Cell member/guestâs profile (Leader)*/
              $en_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " edited a cell member: " . $first_name . " " . $last_name;
              $es_mess = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " editÃ³ un miembro de cÃ©lula: " . $first_name . " " . $last_name;

              $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_actm = array(
                  ':es_mess' => $es_mess,
                  ':en_mess' => $en_mess,
                  ':user_id' => $impersonate_id,
                  ':final_d' => $final_d);

              $result_actm = $pre_actm->execute($values_actm);

            }else{

              /*Activity Edited a Cell member/guestâs profile (Leader)*/
              $en_mess = $first_name_leader . " " . $last_name_leader . " edited a cell member: " . $first_name . " " . $last_name;
              $es_mess = $first_name_leader . " " . $last_name_leader . " editÃ³ un miembro de cÃ©lula: " . $first_name . " " . $last_name;
            }

            /*Activity Edited a Cell member/guestâs profile (Leader)*/
            $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act_lead = array(
                ':es_mess' => $es_mess,
                ':en_mess' => $en_mess,
                ':user_id' => $user_id,
                ':final_d' => $final_d);

            $result_act_lead = $pre_act_lead->execute($values_act_lead);


            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Cell Member profile has been saved successfully'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }


        /*else verify cell member*/
        }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"Cell Member does not exist",
                     "status"=>422)));
       }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Don't have permission to perform this action",
                    "status"=>422)));
      }


     }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
     }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/members/edit-cell-group-steps', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');
   $guest_since = $request->getParam('guest_since');
   $member_since = $request->getParam('member_since');
   $steps = $request->getParam('steps');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
   $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if(!$valid_guest){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid guest_since",
                 "status"=>500)));

   }else if(!$valid_member){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid member_since",
                 "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }

   $err_name = 0;
   $err_date = 0;
   $err_id = 0;
   $err_stepid = 0;

   for($i = 0; $i < count($steps); $i++) {

   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$steps[$i]['step_date']);

   $pre_step = $con->prepare("SELECT *
                            FROM steps
                            WHERE step_id = :step_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_step = array(':step_id' => $steps[$i]['step_id']);
   $pre_step->execute($values_step);
   $result_step = $pre_step->fetch();

     if(empty($steps[$i]['name'])){
       $err_name += 1;
       $err_id = $i;
       $arr[] = $err_id;
     } else if(empty($steps[$i]['step_id'])){
       $err_id += 1;
       $err_id1 = $i;
       $arr1[] = $err_id1;
     }else if(!$valid_date){
       $err_date += 1;
       $err_id2 = $i;
       $arr2[] = $err_id2;
     } else if(empty($result_step)){
       $err_stepid += 1;
       $err_id3 = $i;
       $arr3[] = $err_id3;
     }

   }

   if($err_name > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: name",
               "err_id"=>$arr,
               "status"=>500)));

   } else if($err_id > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: step_id",
               "err_id"=>$arr1,
               "status"=>500)));

   } else if($err_date > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: step_date",
               "err_id"=>$arr2,
               "status"=>500)));

   } else if($err_stepid > 0){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Step does not exists",
               "err_id"=>$arr3,
               "status"=>500)));

   }


     /*verify if user exist*/
     $pre_i = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
     $pre_i->execute($values_i);
     $result_i = $pre_i->fetch();

     if ($result_i) {

      $first_name_log = $result_i['first_name'];
      $last_name_log = $result_i['last_name'];

      /*verify if role leader*/
      if ($role_id == '5') {

        /*verify if cell member exist*/
        $pre_gu = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE id = :member_id AND role != '1' AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_gu = array(':member_id' => $member_id, ':church_id' => $church_id);
        $pre_gu->execute($values_gu);
        $result_gu = $pre_gu->fetch();

        if ($result_gu) {

          $first_name = $result_gu['first_name'];
          $last_name = $result_gu['last_name'];
          $cell_m = $result_gu['cell_id'];

          $pre = $con->prepare("UPDATE members_cells SET guest_since = :guest_since,
                                 member_since = :member_since
                                 WHERE id = :member_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':member_id' => $member_id, 
            ':guest_since' => $guest_since,
            ':member_since' => $member_since);

          $result = $pre->execute($values);


          /*STEPS*/

          $pre_co = $con->prepare("SELECT count(id) as count FROM members_cells_steps WHERE member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_co = array(
            ':member_id' => $member_id
            );

          $result_co = $pre_co->execute($values_co);

          $final_steps = $result_co['count'];


          $pre2 = $con->prepare("DELETE FROM members_cells_steps WHERE member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':member_id' => $member_id
            );

          $result2 = $pre2->execute($values2);


          $final_d = date("Y-m-d H:i:s"); 

          for($j = 0; $j < count($steps); $j++) {

            $pre3 = $con->prepare("INSERT INTO members_cells_steps (`member_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:member_id, :name,:step_date,:step_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values3 = array(
              ':member_id' => $member_id,
              ':name' => $steps[$j]['name'],
              ':step_date' => $steps[$j]['step_date'],
              ':step_id' => $steps[$j]['step_id']
              );

            $result3 = $pre3->execute($values3);


            if ($final_steps <= $j) {
              
              /*New step*/
              $step = $steps[$j]['name'];
              $step_id = $steps[$j]['step_id'];

              /*language*/
              if ($step_id == '1') {
                $es_step = 'SalvaciÃ³n';
              } else if ($step_id == '2') {
                $es_step = 'Bautismo de agua';
              } else if ($step_id == '3') {
                $es_step = 'Bautismo de agua';
              } else if ($step_id == '4') {
                $es_step = 'Servicio';
              } else if ($step_id == '5') {
                $es_step = 'LÃ­der';
              } else if ($step_id == '6') {
                $es_step = 'Supervisor';
              } else if ($step_id == '7') {
                $es_step = 'Pastor de zona';
              } else if ($step_id == '8') {
                $es_step = 'Pastor de distrito';
              } else if ($step_id == '9') {
                $es_step = 'Pastor principal';
              }
              
              $en_message = $first_name . " " . $last_name . " completed a new step: " . $step;
              $es_message = $first_name . " " . $last_name . " completÃ³ un nuevo paso: " . $es_step;

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $member_id,
                  ':final_d' => $final_d);

              $result_act = $pre_act->execute($values_act);


              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Cell Memberâs new step (Cell Group)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " added a new step: " . $step . " to " . $first_name . " " . $last_name;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo paso: " . $es_step . " a " . $first_name . " " . $last_name;

              }else{
                /*ACTIVITY GROUPS*/

                /*Activity Cell Memberâs new step (Cell Group)*/
                $en_message2 = $first_name_log . " " . $last_name_log . " added a new step: " . $step . " to " . $first_name . " " . $last_name;
                $es_message2 = $first_name_log . " " . $last_name_log . " agregÃ³ un nuevo paso: " . $es_step . " a " . $first_name . " " . $last_name;
              }

              /*ACTIVITY GROUPS*/

              /*Activity Cell Memberâs new step (Cell Group)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_m,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2, 
                  ':cell_m' => $cell_m,
                  ':final_d' => $final_d);

              $result_act2 = $pre_act2->execute($values_act2);

            }


          }

          if($result3){
            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Your steps has been saved successfully'));
          }else{
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }


        /*else verify cell member*/
        }else{
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                     "message"=>"Cell Member does not exist",
                     "status"=>422)));
       }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Don't have permission to perform this action",
                    "status"=>422)));
      }


     }else{
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                   "message"=>"User with this role does not exist",
                   "status"=>422)));
     }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*PROMOTE*/

$app->post('/members/promote', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $leader_id = $request->getParam('leader_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      $final_d = date("Y-m-d H:i:s");

      /*Obtain name of owner promotion*/
      $first_name = $$result_i['first_name'];
      $last_name = $$result_i['last_name'];

      if ($role_id == '2') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :leader_id AND church_id = :church_id AND rol = '3'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':leader_id' => $leader_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          // Select zone_id for stadistics
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $district_f = $result_se['district_id'];

          /*update if zone_pastor has associated zone*/
          $pre = $con->prepare("UPDATE groups_zones SET zone_pastor = NULL, is_complete = '0' WHERE zone_pastor = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result = $pre->execute($values);


          /*update zone_pastor in user_groups*/
          $pre2 = $con->prepare("UPDATE user_groups SET zone_id = NULL, district_id = NULL WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id
            );

          $result2 = $pre2->execute($values2);

          /*update zone_pastor to district_pastor*/
          $pre3 = $con->prepare("UPDATE user SET rol = '2', status = '1', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values3 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result3 = $pre3->execute($values3);

          /*Obtain name of confirmed person*/
          $first_name_c = $$result_fi['first_name'];
          $last_name_c = $$result_fi['last_name'];

          if($result3){

            /*Activity Promotion confirmation (District Pastor)*/
            $en_message = $first_name_c . " " . $last_name_c . " has been promoted to District Pastor";
            $es_message = $first_name_c . " " . $last_name_c . " ha sido promovido a Pastor de Distrito";

            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message,
                ':en_message' => $en_message, 
                ':leader_id' => $leader_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);

            /*************** ACTIVITIES ***********************/

            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity Promoted a Zone Pastor (District Pastor)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promote " . $first_name_c . " " . $last_name_c . " to District Pastor";
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Distrito";

              $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_actm = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':user_id' => $impersonate_id,
                  ':final_d' => $final_d);

              $result_actm = $pre_actm->execute($values_actm);

              /*ACTIVITY GROUPS*/

              /*Activity Promoted Zone pastorâs confirmation (District)*/
              $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promote " . $first_name_c . " " . $last_name_c . " to District Pastor";
              $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Distrito";

            }else{

              /*Activity Promoted a Zone Pastor (District Pastor)*/
              $en_message2 = $first_name . " " . $last_name . " promote " . $first_name_c . " " . $last_name_c . " to District Pastor";
              $es_message2 = $first_name . " " . $last_name . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Distrito";

              /*ACTIVITY GROUPS*/

              /*Activity Promoted Zone pastorâs confirmation (District)*/
              $en_message3 = $first_name . " " . $last_name . " promote " . $first_name_c . " " . $last_name_c . " to District Pastor";
              $es_message3 = $first_name . " " . $last_name . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Distrito";
            }

            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2,
                ':en_message2' => $en_message2, 
                ':user_id' => $user_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);


            /*ACTIVITY GROUPS*/

            /*Activity Promoted Zone pastorâs confirmation (District)*/
            $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,:district_f,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act3 = array(
                ':es_message3' => $es_message3,
                ':en_message3' => $en_message3, 
                ':district_f' => $district_f,
                ':final_d' => $final_d);

            $result_act3 = $pre_act3->execute($values_act3);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Zone Pastor has been successfully promoted to District Pastor'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }


        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Zone Pastor does not exist",
                      "status"=>422)));
        }
        
      } else if ($role_id == '3') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :leader_id AND church_id = :church_id AND rol = '4'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':leader_id' => $leader_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          // Select zone_id for stadistics
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $zone_f = $result_se['zone_id'];

          /*update if supervisor has associated sector*/
          $pre = $con->prepare("UPDATE groups_sectors SET supervisor = NULL, is_complete = '0' WHERE supervisor = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result = $pre->execute($values);


          /*update supervisor in user_groups*/
          $pre2 = $con->prepare("UPDATE user_groups SET sector_id = NULL, zone_id = NULL WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id
            );

          $result2 = $pre2->execute($values2);

          /*update supervisor to zone_pastor*/
          $pre3 = $con->prepare("UPDATE user SET rol = '3', status = '1', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values3 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result3 = $pre3->execute($values3);

          /*Obtain name of confirmed person*/
          $first_name_c = $$result_fi['first_name'];
          $last_name_c = $$result_fi['last_name'];

          if($result3){

            /*Activity Promotion confirmation (Zone Pastor)*/
            $en_message = $first_name_c . " " . $last_name_c . " has been promoted to Zone Pastor";
            $es_message = $first_name_c . " " . $last_name_c . " ha sido promovido a Pastor de Zona";

            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message,
                ':en_message' => $en_message, 
                ':leader_id' => $leader_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);


            /*************** ACTIVITIES ***********************/

            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity Promoted a Supervisor (Zone Pastor)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promote " . $first_name_c . " " . $last_name_c . " to Zone Pastor";
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Zona";

              $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_actm = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':user_id' => $impersonate_id,
                  ':final_d' => $final_d);

              $result_actm = $pre_actm->execute($values_actm);

              /*ACTIVITY GROUPS*/

              /*Activity Promoted Supervisorâs confirmation (Zone)*/
              $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promote " . $first_name_c . " " . $last_name_c . " to Zone Pastor";
              $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Zona";

            }else{

              /*Activity Promoted a Supervisor (Zone Pastor)*/
              $en_message2 = $first_name . " " . $last_name . " promote " . $first_name_c . " " . $last_name_c . " to Zone Pastor";
              $es_message2 = $first_name . " " . $last_name . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Zona";

              /*ACTIVITY GROUPS*/

              /*Activity Promoted Supervisorâs confirmation (Zone)*/
              $en_message3 = $first_name . " " . $last_name . " promote " . $first_name_c . " " . $last_name_c . " to Zone Pastor";
              $es_message3 = $first_name . " " . $last_name . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Pastor de Zona";
            }

            /*Activity Promoted a Supervisor (Zone Pastor)*/
            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2,
                ':en_message2' => $en_message2, 
                ':user_id' => $user_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);


            /*ACTIVITY GROUPS*/

            /*Activity Promoted Supervisorâs confirmation (Zone)*/
            $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,NULL,:zone_f,NULL,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act3 = array(
                ':es_message3' => $es_message3,
                ':en_message3' => $en_message3, 
                ':zone_f' => $zone_f,
                ':final_d' => $final_d);

            $result_act3 = $pre_act3->execute($values_act3);

            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Supervisor has been successfully promoted to Zone Pastor'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Supervisor does not exist",
                      "status"=>422)));
        }

        
      } else if ($role_id == '4') {

        $pre_fi = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :leader_id AND church_id = :church_id AND rol = '5'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fi = array(':leader_id' => $leader_id,':church_id' => $church_id);
        $pre_fi->execute($values_fi);
        $result_fi = $pre_fi->fetch();

        if ($result_fi) {

          // Select sector_id for stadistics
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $sector_f = $result_se['sector_id'];

          /*update if leader has associated cell*/
          $pre = $con->prepare("UPDATE groups_cells SET leader = NULL, is_complete = '0' WHERE leader = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result = $pre->execute($values);


          /*update leader in user_groups*/
          $pre2 = $con->prepare("UPDATE user_groups SET cell_id = NULL, sector_id = NULL WHERE user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id
            );

          $result2 = $pre2->execute($values2);

          /*update supervisor to zone_pastor*/
          $pre3 = $con->prepare("UPDATE user SET rol = '4', status = '1', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values3 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result3 = $pre3->execute($values3);


          /*Obtain name of confirmed person*/
          $first_name_c = $$result_fi['first_name'];
          $last_name_c = $$result_fi['last_name'];


          if($result3){

            /*Activity Promotion confirmation (Supervisor)*/
            $en_message = $first_name_c . " " . $last_name_c . " has been promoted to Supervisor";
            $es_message = $first_name_c . " " . $last_name_c . " ha sido promovido a Supervisor";

            $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:leader_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act = array(
                ':es_message' => $es_message,
                ':en_message' => $en_message, 
                ':leader_id' => $leader_id,
                ':final_d' => $final_d);

            $result_act = $pre_act->execute($values_act);


            if ($impersonate) {
             
              $roles = getRole($impersonate_role);

              $role_name = $roles['role_name'];
              $role_name_es = $roles['role_name_es'];

              $imperson = " (Impersonate)";
              $imperson_es = " (Impersonado)";

              /*Activity Promoted a Leader (Supervisor)*/
              $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promote " . $first_name_c . " " . $last_name_c . " to Supervisor";
              $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Supervisor";

              $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_actm = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':user_id' => $impersonate_id,
                  ':final_d' => $final_d);

              $result_actm = $pre_actm->execute($values_actm);

              /*ACTIVITY GROUPS*/

              /*Activity Promoted leader's confirmation (Sector)*/
              $en_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promote " . $first_name_c . " " . $last_name_c . " to Supervisor";
              $es_message3 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Supervisor";

            }else{

              /*Activity Promoted a Leader (Supervisor)*/
              $en_message2 = $first_name . " " . $last_name . " promote " . $first_name_c . " " . $last_name_c . " to Supervisor";
              $es_message2 = $first_name . " " . $last_name . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Supervisor";

              /*ACTIVITY GROUPS*/

              /*Activity Promoted leader's confirmation (Sector)*/
              $en_message3 = $first_name . " " . $last_name . " promote " . $first_name_c . " " . $last_name_c . " to Supervisor";
              $es_message3 = $first_name . " " . $last_name . " promoviÃ³ a " . $first_name_c . " " . $last_name_c . " a Supervisor";
            }

            /*Activity Promoted a Leader (Supervisor)*/
            $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act2 = array(
                ':es_message2' => $es_message2,
                ':en_message2' => $en_message2, 
                ':user_id' => $user_id,
                ':final_d' => $final_d);

            $result_act2 = $pre_act2->execute($values_act2);


            /*ACTIVITY GROUPS*/

            /*Activity Promoted leader's confirmation (Sector)*/
            $pre_act3 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message3, :en_message3,NULL,NULL,:sector_f,NULL,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_act3 = array(
                ':es_message3' => $es_message3,
                ':en_message3' => $en_message3, 
                ':sector_f' => $sector_f,
                ':final_d' => $final_d);

            $result_act3 = $pre_act3->execute($values_act3);


            return $response->withStatus(200)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('response' => 'Leader has been successfully promoted to Supervisor'));
          }else{   
              return $response->withStatus(422)
                              ->withHeader('Content-Type', 'application/json')
                              ->withJson(array('error' => array(
                                  "message"=>"There was a problem, verify your parameters",
                                  "status"=>422)));
          }

        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Leader does not exist",
                      "status"=>422)));
        }


      }else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Role does not exist",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/members/promote-guest-member', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');
   $is_guest = $request->getParam('is_guest');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_id",
               "status"=>500)));
   } else if($is_guest || $is_guest == '0'){

        if ($is_guest != '1') {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Guest parameter is not valid",
                    "status"=>500)));
        }

   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      if ($role_id == '5') {

        $first_name_log = $result_i['first_name'];
        $last_name_log = $result_i['last_name'];

        /*cell member action*/
        if (empty($is_guest)) {

          /*Cell Member*/
          $pre_fi = $con->prepare("SELECT *
                                   FROM members_cells
                                   WHERE id = :member_id AND church_id = :church_id AND role != '1'", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_fi = array(':member_id' => $member_id,':church_id' => $church_id);
          $pre_fi->execute($values_fi);
          $result_fi = $pre_fi->fetch();

          if ($result_fi) {

            /*Obtain member info*/

            $token = password_hash(microtime(), PASSWORD_BCRYPT);
            $token = substr($token, 7, strlen($token));
            $token = preg_replace("#[^a-z0-9._]#i", "", $token);

            /*verify_code*/
            $code = bin2hex(openssl_random_pseudo_bytes(3));

            /*dates*/
            $final_d = date("Y-m-d H:i:s");  

            $date_g = date("Y-m-d");

            /*exelerate_id*/
            $exe = rand(10000, 99999);

            /*password*/
            $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            $new_pass = substr(str_shuffle(str_repeat($chars,8)),0,8);

            $first_name = $result_fi['first_name'];
            $last_name = $result_fi['last_name'];
            $email = $result_fi['email'];
            $phone = $result_fi['phone'];
            $address = $result_fi['address'];
            $city = $result_fi['city'];
            $gender = $result_fi['gender'];
            $birth_date = $result_fi['birth_date'];
            $marital_status = $result_fi['marital_status'];
            $married_since = $result_fi['married_since'];
            $guest_since = $result_fi['guest_since'];
            $member_since = $result_fi['member_since'];
            $profile_picture = $result_fi['profile_picture'];

            $cell_id = $result_fi['cell_id'];

            /*obtain sector*/
            $pre_sec = $con->prepare("SELECT *
                                     FROM groups_cells
                                     WHERE id = :cell_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_sec = array(':cell_id' => $cell_id,':church_id' => $church_id);
            $pre_sec->execute($values_sec);
            $result_sec = $pre_sec->fetch();

            $sector_id = $result_sec['sector_id'];
            
            /*obtain zone*/
            $pre_zo = $con->prepare("SELECT *
                                     FROM groups_sectors
                                     WHERE id = :sector_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_zo = array(':sector_id' => $sector_id,':church_id' => $church_id);
            $pre_zo->execute($values_zo);
            $result_zo = $pre_zo->fetch();

            $zone_id = $result_zo['zone_id'];

            /*obtain district*/
            $pre_di = $con->prepare("SELECT *
                                     FROM groups_zones
                                     WHERE id = :zone_id AND church_id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_di = array(':zone_id' => $zone_id,':church_id' => $church_id);
            $pre_di->execute($values_di);
            $result_di = $pre_di->fetch();

            $district_id = $result_di['district_id'];

            /*obtain subdomain*/
            $pre_chu = $con->prepare("SELECT *
                                     FROM churches
                                     WHERE id = :church_id", 
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_chu = array(':church_id' => $church_id);
            $pre_chu->execute($values_chu);
            $result_chu = $pre_chu->fetch();

            $subdomain = $result_chu['subdomain'];


            /*obtain steps member*/
            $sql = "SELECT *
                    FROM members_cells_steps
                    WHERE member_id = $member_id";

            $steps = null;

            foreach ($con->query($sql) as $row) {
              $steps[] = $row;
            }


            /*send email with credentials*/
            $mail = new PHPMailer;
            //Enable SMTP debugging. 
            // $mail->SMTPDebug = 3;                               
            //Set PHPMailer to use SMTP.
            $mail->isSMTP();            
            //Set SMTP host name                          
            $mail->Host = "smtp.mailtrap.io";
            //Set this to true if SMTP host requires authentication to send email
            $mail->SMTPAuth = true;                          
            //Provide username and password
            // credentials Luis     
            $mail->Username = "1c2d44422b38c1";                 
            $mail->Password = "a0d4af94adb609";                         
            //If SMTP requires TLS encryption then set it
            $mail->SMTPSecure = "tls";                           
            //Set TCP port to connect to 
            $mail->Port = 25;                                   

            $mail->CharSet = "UTF-8";
            $mail->From = "dtobar@celulas.com";
            $mail->FromName = "CÃ©lulas";

            $mail->addAddress($email);

            $mail->isHTML(true);

            $mail->Subject = "You have been promoted to leader";
            $mail->Body = "<h2><strong>Â¡Hello!</strong></h2><p>You are receiving this email because you have been promoted cell member to leader.</p><p>Your credentials to enter the platform are:</p><p><strong>Subdomain of the church:</strong> $subdomain<br><strong>Username/email:</strong> $email <br><strong>Password:</strong> $new_pass</p><p>Regards.</p>";
            $mail->AltBody = "Signup Registration";

            if(!$mail->send()) {

              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"Message with new leader information could not be sent, please try again.",
                        "Mailer Error:"=>$mail->ErrorInfo,
                        "status"=>422)));
            } else {

              /*promote member to leader*/

              $pre = $con->prepare("INSERT INTO user (`church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`, `status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (:church_id, :token, :first_name, :last_name, :email, :new_pass,:phone,:address,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,:member_since,:profile_picture,'5', :exe, :code, '1', '1' , '1' , '1', '1', '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values = array(
                ':church_id' => $church_id,
                ':token' => $token,
                ':first_name' => $first_name,
                ':last_name' => $last_name,
                ':email' => $email,
                ':new_pass' => md5($new_pass),
                ':phone' => $phone,
                ':address' => $address,
                ':city' => $city,
                ':gender' => $gender,
                ':birth_date' => $birth_date,
                ':marital_status' => $marital_status,
                ':married_since' => $married_since,
                ':guest_since' => $guest_since,
                ':member_since' => $member_since,
                ':profile_picture' => $profile_picture,
                ':exe' => $exe,
                ':code' => $code
              );

              $result = $pre->execute($values);
              $leader_id = $con->lastInsertId();


              /*add leader to user_groups*/
              $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:leader_id, :district_id, :zone_id, :sector_id, NULL, '$date_d', '$date_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_us = array(
                ':leader_id' => $leader_id,
                ':district_id' => $district_id,
                ':zone_id' => $zone_id,
                ':sector_id' => $sector_id
                );

              $result_us = $pre_us->execute($values_us);


              /*promote steps to user_steps*/
              for($i = 0; $i < count($steps); $i++) {

                /*vars*/
                $member_id = $steps[$i]['member_id'];
                $name = $steps[$i]['name'];
                $step_date = $steps[$i]['step_date'];
                $step_id = $steps[$i]['step_id'];
                $created_at = $steps[$i]['created_at'];
                $updated_at = $steps[$i]['updated_at'];

                $pre3 = $con->prepare("INSERT INTO user_steps (`user_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:leader_id, :name,:step_date,:step_id, :created_at,:updated_at)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values3 = array(
                  ':leader_id' => $leader_id,
                  ':name' => $name,
                  ':step_date' => $step_date,
                  ':step_id' => $step_id,
                  ':created_at' => $created_at,
                  ':updated_at' => $updated_at
                  );

                $result3 = $pre3->execute($values3);

              }

              /*Inactivate member*/
              /*ask if it is deleted or only updated*/

              $pre2 = $con->prepare("DELETE FROM members_cells WHERE id = :member_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values2 = array(
                ':member_id' => $member_id,
                ':church_id' => $church_id
                );

              $result2 = $pre2->execute($values2);

              if($result){

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*ACTIVITY GROUPS*/

                  /*Activity Promoted cell member confirmation (Cell Group)*/
                  $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoted " . $first_name . " " . $last_name . " to leader";
                  $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " promoviÃ³ a " . $first_name . " " . $last_name . " a lÃ­der";

                }else{
                  /*ACTIVITY GROUPS*/

                  /*Activity Promoted cell member confirmation (Cell Group)*/
                  $en_message2 = $first_name_log . " " . $last_name_log . " promoted " . $first_name . " " . $last_name . " to leader";
                  $es_message2 = $first_name_log . " " . $last_name_log . " promoviÃ³ a " . $first_name . " " . $last_name . " a lÃ­der";
                }

                /*ACTIVITY GROUPS*/

                /*Activity Promoted cell member confirmation (Cell Group)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2, 
                    ':en_message2' => $en_message2, 
                    ':cell_id' => $cell_id,
                    ':final_d' => $final_d);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('response' => 'Cell member has been successfully promoted to Leader'));
              }else{   
                  return $response->withStatus(422)
                                  ->withHeader('Content-Type', 'application/json')
                                  ->withJson(array('error' => array(
                                      "message"=>"There was a problem, verify your parameters",
                                      "status"=>422)));
              }

            }


          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Cell Member does not exist",
                        "status"=>422)));
          }     


          /*guest action*/
        }else{

          /*Guest*/
          $pre_fi = $con->prepare("SELECT *
                                   FROM members_cells
                                   WHERE id = :member_id AND church_id = :church_id AND role = '1'", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_fi = array(':member_id' => $member_id,':church_id' => $church_id);
          $pre_fi->execute($values_fi);
          $result_fi = $pre_fi->fetch();

          if ($result_fi) {

            /*update guest to cell member*/
            $pre3 = $con->prepare("UPDATE members_cells SET role = '2', active = '1', is_complete = '0' WHERE id = :member_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values3 = array(
              ':member_id' => $member_id,
              ':church_id' => $church_id
            );

            $result3 = $pre3->execute($values3);

            if($result3){
              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => 'Guest has been successfully promoted to Cell Member'));
            }else{   
                return $response->withStatus(422)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('error' => array(
                                    "message"=>"There was a problem, verify your parameters",
                                    "status"=>422)));
            }

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Guest does not exist",
                        "status"=>422)));
          }

        }

        
      } else{

        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Don't have permission to perform this action",
                    "status"=>422)));
      }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/*Activate/inactivate*/

$app->post('/members/activate', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $leader_id = $request->getParam('leader_id');
   $active = $request->getParam('active');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }



  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $first_name = $result_i['first_name'];
    $last_name = $result_i['last_name'];

    if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '2'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {
        
        /*inactivate*/
        if ($active == '0') {

          /*inactivate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '0', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*inactivate user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_districts SET district_pastor = NULL, is_complete = '0' WHERE district_pastor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*inactivate user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET district_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);


          if($result_dpastor){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'District Pastor has been inactivated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

          // activate
        }else if ($active == '1'){

          /*activate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '1' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          if($result_dpastor){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'District Pastor has been activated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }
              

        } else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Filter active does not exist",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"District Pastor does not exist",
                    "status"=>422)));

      }


    }else if ($role_id == '2') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '3'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

        $first_name_l = $resul_le['first_name'];
        $last_name_l = $resul_le['last_name'];
      
        /*inactivate*/
        if ($active == '0') {

          /*inactivate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '0', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*inactivate user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_zones SET zone_pastor = NULL, is_complete = '0' WHERE zone_pastor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*inactivate user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET zone_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);


          /*Select district_id for statistics*/
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $district_f = $result_se['district_id'];

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Inactivated a Zone Pastor (District Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Zone pastor confirmation (District)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;

              }else{

                /*Activity Inactivated a Zone Pastor (District Pastor)*/
                $en_message = $first_name . " " . $last_name . " inactivated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message = $first_name . " " . $last_name . " inactivÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;

                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Zone pastor confirmation (District)*/
                $en_message2 = $first_name . " " . $last_name . " inactivated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $first_name . " " . $last_name . " inactivÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message,
                  ':en_message' => $en_message, 
                  ':id_m' => $user_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Inactivated Zone pastor confirmation (District)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_f,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':district_f' => $district_f,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone Pastor has been inactivated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

          // activate
        }else if ($active == '1'){

          /*activate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '1' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*Select district_id for statistics*/
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $district_f = $result_se['district_id'];

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Activated a Zone Pastor (District Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message,
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Activity Activated Zone pastor confirmation (District)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;

              }else{

                /*Activity Activated a Zone Pastor (District Pastor)*/
                $en_message = $first_name . " " . $last_name . " activated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message = $first_name . " " . $last_name . " activÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;

                /*ACTIVITY GROUPS*/

                /*Activity Activated Zone pastor confirmation (District)*/
                $en_message2 = $first_name . " " . $last_name . " activated zone pastor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $first_name . " " . $last_name . " activÃ³ al pastor de zona " . $first_name_l . " " . $last_name_l;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message,
                  ':en_message' => $en_message,
                  ':id_m' => $user_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Activated Zone pastor confirmation (District)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_f,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':district_f' => $district_f,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone Pastor has been activated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }
              

        } else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Filter active does not exist",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Zone Pastor does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '3') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '4'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

        $first_name_l = $resul_le['first_name'];
        $last_name_l = $resul_le['last_name'];
      
        /*inactivate*/
        if ($active == '0') {

          /*inactivate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '0', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*inactivate user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_sectors SET supervisor = NULL, is_complete = '0' WHERE supervisor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*inactivate user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET sector_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);


          /*Select zone_id for statistics*/
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $zone_f = $result_se['zone_id'];

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Inactivated a Supervisor (Zone Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ al supervisor " . $first_name_l . " " . $last_name_l;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Supervisor confirmation (Zone)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ al supervisor " . $first_name_l . " " . $last_name_l;

              }else{
                /*Activity Inactivated a Supervisor (Zone Pastor)*/
                $en_message = $first_name . " " . $last_name . " inactivated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message = $first_name . " " . $last_name . " inactivÃ³ al supervisor " . $first_name_l . " " . $last_name_l;

                /*ACTIVITY GROUPS*/

                /*Activity Inactivated Supervisor confirmation (Zone)*/
                $en_message2 = $first_name . " " . $last_name . " inactivated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $first_name . " " . $last_name . " inactivÃ³ al supervisor " . $first_name_l . " " . $last_name_l;
              }

              /*Activity Inactivated a Supervisor (Zone Pastor)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message,
                  ':en_message' => $en_message, 
                  ':id_m' => $user_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Inactivated Supervisor confirmation (Zone)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_f,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':zone_f' => $zone_f,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Supervisor has been inactivated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

          // activate
        }else if ($active == '1'){

          /*activate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '1' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*Select zone_id for statistics*/
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $zone_f = $result_se['zone_id'];

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Activated a Supervisor (Supervisor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ al supervisor " . $first_name_l . " " . $last_name_l;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Activity Activated Supervisor confirmation (Zone)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ al supervisor " . $first_name_l . " " . $last_name_l;

              }else{
                /*Activity Activated a Supervisor (Supervisor)*/
                $en_message = $first_name . " " . $last_name . " activated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message = $first_name . " " . $last_name . " activÃ³ al supervisor " . $first_name_l . " " . $last_name_l;

                /*ACTIVITY GROUPS*/

                /*Activity Activated Supervisor confirmation (Zone)*/
                $en_message2 = $first_name . " " . $last_name . " activated supervisor " . $first_name_l . " " . $last_name_l;
                $es_message2 = $first_name . " " . $last_name . " activÃ³ al supervisor " . $first_name_l . " " . $last_name_l;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message,
                  ':en_message' => $en_message, 
                  ':id_m' => $user_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Activated Supervisor confirmation (Zone)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_f,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':zone_f' => $zone_f,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Supervisor has been activated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }
              

        } else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Filter active does not exist",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Supervisor does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '4') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '5'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

        $first_name_l = $resul_le['first_name'];
        $last_name_l = $resul_le['last_name'];
      
        /*inactivate*/
        if ($active == '0') {

          /*inactivate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '0', is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*inactivate user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_cells SET leader = NULL, is_complete = '0' WHERE leader = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*inactivate user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET cell_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);


          /*Select sector_id for statistics*/
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $sector_f = $result_se['sector_id'];

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity impersonate Inactivated a Leader (Supervisor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated leader " . $first_name_l . " " . $last_name_l;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ al leader " . $first_name_l . " " . $last_name_l;

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_act = $pre_act->execute($values_act);

                /*ACTIVITY GROUPS*/

                /*Activity Inactivated leader confirmation (Sector)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivated leader " . $first_name_l . " " . $last_name_l;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " inactivÃ³ al leader " . $first_name_l . " " . $last_name_l;

              }else{

                /*Activity Inactivated a Leader (Supervisor)*/
                $en_message = $first_name . " " . $last_name . " inactivated leader " . $first_name_l . " " . $last_name_l;
                $es_message = $first_name . " " . $last_name . " inactivÃ³ al leader " . $first_name_l . " " . $last_name_l;

                /*ACTIVITY GROUPS*/

                /*Activity Inactivated leader confirmation (Sector)*/
                $en_message2 = $first_name . " " . $last_name . " inactivated leader " . $first_name_l . " " . $last_name_l;
                $es_message2 = $first_name . " " . $last_name . " inactivÃ³ al leader " . $first_name_l . " " . $last_name_l;
              }

              /*Activity Inactivated a Leader (Supervisor)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message,
                  ':en_message' => $en_message, 
                  ':id_m' => $user_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Inactivated leader confirmation (Sector)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_f,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':sector_f' => $sector_f,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Leader has been inactivated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

          // activate
        }else if ($active == '1'){

          /*activate user*/
          $pre_dpastor = $con->prepare("UPDATE user SET status = '1' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*Select sector_id for statistics*/
          $pre_se = $con->prepare("SELECT *
                                   FROM user_groups
                                   WHERE user_id = :leader_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_se = array(':leader_id' => $leader_id);
          $pre_se->execute($values_se);
          $result_se = $pre_se->fetch();

          $sector_f = $result_se['sector_id'];

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");


              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Activated a Leader (Supervisor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated leader " . $first_name_l . " " . $last_name_l;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ al leader " . $first_name_l . " " . $last_name_l;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message,
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Activity Activated leader confirmation (Sector)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activated leader" . $first_name_l . " " . $last_name_l;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " activÃ³ al leader" . $first_name_l . " " . $last_name_l;

              }else{

                /*Activity Activated a Leader (Supervisor)*/
                $en_message = $first_name . " " . $last_name . " activated leader " . $first_name_l . " " . $last_name_l;
                $es_message = $first_name . " " . $last_name . " activÃ³ al leader " . $first_name_l . " " . $last_name_l;

                /*ACTIVITY GROUPS*/

                /*Activity Activated leader confirmation (Sector)*/
                $en_message2 = $first_name . " " . $last_name . " activated leader" . $first_name_l . " " . $last_name_l;
                $es_message2 = $first_name . " " . $last_name . " activÃ³ al leader" . $first_name_l . " " . $last_name_l;
              }

              /*Activity Activated a Leader (Supervisor)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message,
                  ':en_message' => $en_message, 
                  ':id_m' => $user_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Activity Activated leader confirmation (Sector)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_f,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2,
                  ':en_message2' => $en_message2, 
                  ':sector_f' => $sector_f,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Leader has been activated'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }
              

        } else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Filter active does not exist",
                      "status"=>422)));
        }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Leader does not exist",
                    "status"=>422)));

      }

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*Remove members*/

$app->post('/members/remove', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $leader_id = $request->getParam('leader_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');


   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   }



   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Impersonate is not valid",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "message"=>"Impersonated user with this role does not exist",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $first_name_user = $result_i['first_name'];
    $last_name_user = $result_i['last_name'];

    if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '2'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          $first_name = $result_le['first_name'];
          $last_name = $result_le['last_name'];
        
          /*is_complete user*/
          $pre_dpastor = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*obtain district codes to activity*/
          $pre_zone = $con->prepare("SELECT *
                                   FROM groups_districts
                                   WHERE district_pastor = :leader_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_zone = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $pre_zone->execute($values_zone);
          $result_zone = $pre_zone->fetch();

          $final_d = $result_zone['district_code'];


          /*remove user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_districts SET district_pastor = NULL, is_complete = '0' WHERE district_pastor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*remove user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET district_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);


          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/
              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Removed from a District (District Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from district D" . $final_d;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " del distrito D" . $final_d;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $leader_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

              }else{

                /*Activity Removed from a District (District Pastor)*/
                $en_message = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from district D" . $final_d;
                $es_message = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " del distrito D" . $final_d;
              }

              /*Activity Removed from a District (District Pastor)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $leader_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'District Pastor has been removed successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"District Pastor does not exist",
                    "status"=>422)));

      }


    }else if ($role_id == '2') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '3'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          $first_name = $result_le['first_name'];
          $last_name = $result_le['last_name'];

          /*is_complete user*/
          $pre_dpastor = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);

          /*obtain zone codes to activity*/
          $pre_zone = $con->prepare("SELECT *
                                   FROM groups_zones
                                   WHERE zone_pastor = :leader_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_zone = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $pre_zone->execute($values_zone);
          $result_zone = $pre_zone->fetch();

          $final_d = $result_zone['district_code'];
          $final_z = $result_zone['zone_code'];

          $district_ce = $result_cell['district_id'];

          /*remove user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_zones SET zone_pastor = NULL, is_complete = '0' WHERE zone_pastor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*remove user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET zone_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/
              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Removed from a Zone (Zone Pastor)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from zone D" . $final_d . " Z" . $final_z;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " de la zona D" . $final_d . " Z" . $final_z;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Removed Zone pastor confirmation (District)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from zone D" . $final_d . " Z" . $final_z;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " de la zona D" . $final_d . " Z" . $final_z;

              }else{

                /*Activity Removed from a Zone (Zone Pastor)*/
                $en_message = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from zone D" . $final_d . " Z" . $final_z;
                $es_message = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " de la zona D" . $final_d . " Z" . $final_z;

                /*ACTIVITY GROUPS*/

                /*Removed Zone pastor confirmation (District)*/
                $en_message2 = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from zone D" . $final_d . " Z" . $final_z;
                $es_message2 = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " de la zona D" . $final_d . " Z" . $final_z;
              }

              /*Activity Removed from a Zone (Zone Pastor)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $leader_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Removed Zone pastor confirmation (District)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,:district_ce,NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2, 
                  ':district_ce' => $district_ce,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone Pastor has been removed successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Zone Pastor does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '3') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '4'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          $first_name = $result_le['first_name'];
          $last_name = $result_le['last_name'];

          /*is_complete user*/
          $pre_dpastor = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);


          /*obtain sector codes to activity*/
          $pre_sector = $con->prepare("SELECT *
                                   FROM groups_sectors
                                   WHERE supervisor = :leader_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_sector = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $pre_sector->execute($values_sector);
          $result_sector = $pre_sector->fetch();

          $final_d = $result_sector['district_code'];
          $final_z = $result_sector['zone_code'];
          $final_s = $result_sector['sector_code'];

          $zone_ce = $result_cell['zone_id'];

          /*remove user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_sectors SET supervisor = NULL, is_complete = '0' WHERE supervisor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*remove user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET sector_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);

          if($result_dpastor){

              $date_u = date("Y-m-d H:i:s");


              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity Removed from a Sector (Leader)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " del sector D" . $final_d . " Z" . $final_z . " S" . $final_s;

                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Removed Supervisor confirmation (Zone)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " del sector D" . $final_d . " Z" . $final_z . " S" . $final_s;

              }else{

                /*Activity Removed from a Sector (Leader)*/
                $en_message = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                $es_message = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " del sector D" . $final_d . " Z" . $final_z . " S" . $final_s;

                /*ACTIVITY GROUPS*/

                /*Removed Supervisor confirmation (Zone)*/
                $en_message2 = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
                $es_message2 = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " del sector D" . $final_d . " Z" . $final_z . " S" . $final_s;
              }

              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $leader_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Removed Supervisor confirmation (Zone)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,:zone_ce,NULL,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2, 
                  ':zone_ce' => $zone_ce,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);

              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Supervisor has been removed successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Supervisor does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '4') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '5'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

      	  $first_name = $result_le['first_name'];
      	  $last_name = $result_le['last_name'];

          /*is_complete user*/
          $pre_dpastor = $con->prepare("UPDATE user SET is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_dpastor = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_dpastor = $pre_dpastor->execute($values_dpastor);


          /*obtain cell codes to activity*/
          $pre_cell = $con->prepare("SELECT *
                                   FROM groups_cells
                                   WHERE leader = :leader_id AND church_id = :church_id", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cell = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $pre_cell->execute($values_cell);
          $result_cell = $pre_cell->fetch();

          $final_d = $result_cell['district_code'];
          $final_z = $result_cell['zone_code'];
          $final_s = $result_cell['sector_code'];
          $final_c = $result_cell['cell_code'];

          $sector_ce = $result_cell['sector_id'];


          /*remove user in group table*/
          $pre_gro = $con->prepare("UPDATE groups_cells SET leader = NULL, is_complete = '0' WHERE leader = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*remove user in user_groups table*/
          $pre_usg = $con->prepare("UPDATE user_groups SET cell_id = NULL WHERE user_id = :leader_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_usg = array(':leader_id' => $leader_id);
          $result_usg = $pre_usg->execute($values_usg);

          if($result_dpastor){

          	  $date_u = date("Y-m-d H:i:s");

              /*************** ACTIVITIES ***********************/

              if ($impersonate) {
               
                $roles = getRole($impersonate_role);

                $role_name = $roles['role_name'];
                $role_name_es = $roles['role_name_es'];

                $imperson = " (Impersonate)";
                $imperson_es = " (Impersonado)";

                /*Activity impersonate Removed from a cell group (Leader)*/
                $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " de la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                /*Activity Removed from a cell group (Leader)*/
                $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_actm = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $impersonate_id,
                    ':date_u' => $date_u);

                $result_actm = $pre_actm->execute($values_actm);

                /*ACTIVITY GROUPS*/

                /*Removed leader confirmation (Sector)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed " . $first_name . " " . $last_name . " from cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ a " . $first_name . " " . $last_name . " de la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

              }else{

            	  /*Activity Removed from a cell group (Leader)*/
            	  $en_message = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
            	  $es_message = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " de la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

                /*ACTIVITY GROUPS*/

                /*Removed leader confirmation (Sector)*/
                $en_message2 = $first_name_user . " " . $last_name_user . " removed " . $first_name . " " . $last_name . " from cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
                $es_message2 = $first_name_user . " " . $last_name_user . " removiÃ³ a " . $first_name . " " . $last_name . " de la cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
              }

              /*Activity Removed from a cell group (Leader)*/
              $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act = array(
                  ':es_message' => $es_message, 
                  ':en_message' => $en_message, 
                  ':id_m' => $leader_id,
                  ':date_u' => $date_u);

              $result_act = $pre_act->execute($values_act);


              /*ACTIVITY GROUPS*/

              /*Removed leader confirmation (Sector)*/
              $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,:sector_ce,NULL,NULL,NULL,'0',NULL,NULL,:date_u, :date_u)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

              $values_act2 = array(
                  ':es_message2' => $es_message2, 
                  ':en_message2' => $en_message2, 
                  ':sector_ce' => $sector_ce,
                  ':date_u' => $date_u);

              $result_act2 = $pre_act2->execute($values_act2);


              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Leader has been removed successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Leader does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '5') {

      /*verify if member/guest exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE id = :leader_id AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          $first_name = $result_le['first_name'];
          $last_name = $result_le['last_name'];

          $member_role = $result_le['role'];
          $member_cell = $result_le['cell_id'];

          /*update member*/
          $pre_me = $con->prepare("UPDATE members_cells SET cell_id = NULL, is_complete = '0' WHERE id = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_me = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_me = $pre_me->execute($values_me);

          if($result_me){

              $final_d = date("Y-m-d H:i:s");

              if ($member_role == '1') {

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Removed confirmation (Guest)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed guest " . $first_name . " " . $last_name;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ al invitado " . $first_name . " " . $last_name;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*Removed guest confirmation (Cell Group)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed guest " . $first_name . " " . $last_name;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ al invitado " . $first_name . " " . $last_name;

                }else{

                  /*Activity Removed confirmation (Guest)*/
                  $en_message = $first_name_user . $last_name_user . " removed guest " . $first_name . " " . $last_name;
                  $es_message = $first_name_user . $last_name_user . " removiÃ³ al invitado " . $first_name . " " . $last_name;

                  /*Removed guest confirmation (Cell Group)*/
                  $en_message2 = $first_name_user . $last_name_user . " removed guest " . $first_name . " " . $last_name;
                  $es_message2 = $first_name_user . $last_name_user . " removiÃ³ al invitado " . $first_name . " " . $last_name;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $leader_id,
                    ':final_d' => $final_d);

                $result_act = $pre_act->execute($values_act);

                /*ACTIVITY GROUPS*/

                /*Removed guest confirmation (Cell Group)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:member_cell,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2, 
                    ':en_message2' => $en_message2, 
                    ':member_cell' => $member_cell,
                    ':final_d' => $final_d);

                $result_act2 = $pre_act2->execute($values_act2);


                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Guest has been removed successfully'));
              }else{

                /*************** ACTIVITIES ***********************/

                if ($impersonate) {
                 
                  $roles = getRole($impersonate_role);

                  $role_name = $roles['role_name'];
                  $role_name_es = $roles['role_name_es'];

                  $imperson = " (Impersonate)";
                  $imperson_es = " (Impersonado)";

                  /*Activity Removed confirmation (Cell Member)*/
                  $en_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed cell member " . $first_name . " " . $last_name;
                  $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ al miembro de cÃ©lula " . $first_name . " " . $last_name;

                  $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                  $values_actm = array(
                      ':es_message' => $es_message, 
                      ':en_message' => $en_message, 
                      ':id_m' => $impersonate_id,
                      ':final_d' => $final_d);

                  $result_actm = $pre_actm->execute($values_actm);

                  /*ACTIVITY GROUPS*/

                /*Removed cell member confirmation (Cell Group)*/
                $en_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removed cell member " . $first_name . " " . $last_name;
                $es_message2 = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson . " removiÃ³ al miembro de cÃ©lula " . $first_name . " " . $last_name;

                }else{
                  /*Activity Removed confirmation (Cell Member)*/
                  $en_message = $first_name_user . $last_name_user . " removed cell member " . $first_name . " " . $last_name;
                  $es_message = $first_name_user . $last_name_user . " removiÃ³ al miembro de cÃ©lula " . $first_name . " " . $last_name;

                  /*ACTIVITY GROUPS*/

                  /*Removed cell member confirmation (Cell Group)*/
                  $en_message2 = $first_name_user . $last_name_user . " removed cell member " . $first_name . " " . $last_name;
                  $es_message2 = $first_name_user . $last_name_user . " removiÃ³ al miembro de cÃ©lula " . $first_name . " " . $last_name;
                }

                $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act = array(
                    ':es_message' => $es_message, 
                    ':en_message' => $en_message, 
                    ':id_m' => $leader_id,
                    ':final_d' => $final_d);

                $result_act = $pre_act->execute($values_act);


                /*ACTIVITY GROUPS*/

                /*Removed cell member confirmation (Cell Group)*/
                $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:member_cell,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

                $values_act2 = array(
                    ':es_message2' => $es_message2, 
                    ':en_message2' => $en_message2, 
                    ':member_cell' => $member_cell,
                    ':final_d' => $final_d);

                $result_act2 = $pre_act2->execute($values_act2);

                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Member has been removed successfully'));
              }
              
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Member does not exist",
                    "status"=>422)));

      }

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*Delete members*/

$app->post('/members/delete', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $leader_id = $request->getParam('leader_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($leader_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: leader_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '2'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          /*update group table*/
          $pre_gro = $con->prepare("UPDATE groups_districts SET is_complete = '0' WHERE district_pastor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*delete user*/
          $pre2 = $con->prepare("DELETE FROM user WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result2 = $pre2->execute($values2);


          if($result2){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'District Pastor has been deleted successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"District Pastor does not exist",
                    "status"=>422)));

      }


    }else if ($role_id == '2') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '3'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          /*update group table*/
          $pre_gro = $con->prepare("UPDATE groups_zones SET is_complete = '0' WHERE zone_pastor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*delete user*/
          $pre2 = $con->prepare("DELETE FROM user WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result2 = $pre2->execute($values2);

          if($result2){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Zone Pastor has been deleted successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Zone Pastor does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '3') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '4'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          /*update group table*/
          $pre_gro = $con->prepare("UPDATE groups_sectors SET is_complete = '0' WHERE supervisor = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*delete user*/
          $pre2 = $con->prepare("DELETE FROM user WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result2 = $pre2->execute($values2);

          if($result2){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Supervisor has been deleted successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }


      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Supervisor does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '4') {

      /*verify if leader exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :leader_id AND church_id = :church_id AND rol = '5'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          /*update group table*/
          $pre_gro = $con->prepare("UPDATE groups_cells SET is_complete = '0' WHERE leader = :leader_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_gro = array(':leader_id' => $leader_id, ':church_id' => $church_id);
          $result_gro = $pre_gro->execute($values_gro);

          /*delete user*/
          $pre2 = $con->prepare("DELETE FROM user WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result2 = $pre2->execute($values2);

          if($result2){
              return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => 'Leader has been deleted successfully'));
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Leader does not exist",
                    "status"=>422)));

      }

    } else if ($role_id == '5') {

      /*verify if member/guest exist*/
      $pre_le = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE id = :leader_id AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_le = array(':leader_id' => $leader_id, ':church_id' => $church_id);
      $pre_le->execute($values_le);
      $result_le = $pre_le->fetch();

      if ($result_le) {

          $member_role = $result_le['role'];

          /*delete member*/
          $pre2 = $con->prepare("DELETE FROM members_cells WHERE id = :leader_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values2 = array(
            ':leader_id' => $leader_id,
            ':church_id' => $church_id
            );

          $result2 = $pre2->execute($values2);

          if($result2){

              if ($member_role == '1') {
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Guest has been deleted successfully'));
              }else{
                return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Member has been deleted successfully'));
              }
              
          }else{
              return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                        "message"=>"There was a problem, verify your parameters",
                        "status"=>422)));
          }

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Member does not exist",
                    "status"=>422)));

      }

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Don't have permission to perform this action",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



/******************** MOBILE *************************/

/******* GENERAL ********/

$app->post('/general/full-list-groups', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   // $church_id = $request->getParam('church_id');
   // $active = $request->getParam('active');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

      /*Districts*/
      $sql = "SELECT id AS district_id, district_code
        FROM groups_districts
        WHERE church_id = $final_church";
      

      foreach ($con->query($sql) as $row) {
        $districts[] = $row;
      }

      /*Zones*/
      $sql2 = "SELECT id AS zone_id, zone_code
        FROM groups_zones
        WHERE church_id = $final_church";
      

      foreach ($con->query($sql2) as $row2) {
        $zones[] = $row2;
      }

      /*Sectores*/
      $sql3 = "SELECT id AS sector_id, sector_code
        FROM groups_sectors
        WHERE church_id = $final_church";
      

      foreach ($con->query($sql3) as $row3) {
        $sectors[] = $row3;
      }

      /*Cells*/
      $sql4 = "SELECT id AS cell_id, cell_code
        FROM groups_cells
        WHERE church_id = $final_church";
      

      foreach ($con->query($sql4) as $row4) {
        $cells[] = $row4;
      }


      $final_response = array("districts" => $districts,
                              "zones" => $zones,
                              "sectors" => $sectors,
                              "cells" => $cells);


      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_response));


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/full-list-users', function ($request,$response) {

  try{
   $con = $this->db;
   $church_id = $request->getParam('church_id');
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $member_table = $request->getParam('member_table');
   $role = $request->getParam('role');
   $active = $request->getParam('active');

   if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($member_table)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member_table",
               "status"=>500)));
   } else if(empty($role)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   }

  $pre = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values = array(':church_id' => $church_id);
  $pre->execute($values);
  $result = $pre->fetch();

  if ($result) {
    
    $pre_i = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if ($result_i) {

      // member_table (1 users and 2 members)
      if ($member_table == 1) {

        // filter active
        if ($active == 0) {

          if ($role == 2 || $role == 3 || $role == 4 || $role == 5) {

              if ($role == 2) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_districts WHERE groups_districts.district_pastor = user.id AND groups_districts.church_id = $church_id) as district_code FROM user WHERE user.church_id = $church_id AND user.rol = 2 AND user.status = 0";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }
                
              }else if ($role == 3) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.church_id = $church_id) as district_code, (SELECT zone_code from groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.church_id = $church_id) as zone_code FROM user WHERE user.church_id = $church_id AND user.rol = 3 AND user.status = 0";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }

              } else if ($role == 4) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.church_id = $church_id) as district_code, (SELECT zone_code from groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.church_id = $church_id) as zone_code, (SELECT sector_code from groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.church_id = $church_id) as sector_code FROM user WHERE user.church_id = $church_id AND user.rol = 4 AND user.status = 0";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }

              } else if ($role == 5) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as district_code, (SELECT zone_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as zone_code, (SELECT sector_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as sector_code, (SELECT cell_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as cell_code FROM user WHERE user.church_id = $church_id AND user.rol = 5 AND user.status = 0";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }

              }


              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => $users));

          }else{
            return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"role does not exist",
                      "status"=>422)));    
          }

        // filter active
        }else if ($active == 1) {
          
          if ($role == 2 || $role == 3 || $role == 4 || $role == 5) {

              if ($role == 2) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_districts WHERE groups_districts.district_pastor = user.id AND groups_districts.church_id = $church_id) as district_code FROM user WHERE user.church_id = $church_id AND user.rol = 2 AND user.status = 1";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }
                
              }else if ($role == 3) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.church_id = $church_id) as district_code, (SELECT zone_code from groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.church_id = $church_id) as zone_code FROM user WHERE user.church_id = $church_id AND user.rol = 3 AND user.status = 1";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }

              } else if ($role == 4) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.church_id = $church_id) as district_code, (SELECT zone_code from groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.church_id = $church_id) as zone_code, (SELECT sector_code from groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.church_id = $church_id) as sector_code FROM user WHERE user.church_id = $church_id AND user.rol = 4 AND user.status = 1";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }

              } else if ($role == 5) {

                $sql = "SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.address,user.is_complete, (SELECT district_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as district_code, (SELECT zone_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as zone_code, (SELECT sector_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as sector_code, (SELECT cell_code from groups_cells WHERE groups_cells.leader = user.id AND groups_cells.church_id = $church_id) as cell_code FROM user WHERE user.church_id = $church_id AND user.rol = 5 AND user.status = 1";

                $users = null;

                foreach ($con->query($sql) as $row) {
                  $users[] = $row;
                }

              }


              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => $users));

          }else{
            return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"role does not exist",
                      "status"=>422)));    
          }


        }else{
          return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"filter active does not exist",
                    "status"=>422)));
        }

      // member_table (1 users and 2 members)
      } else if ($member_table == 2) {

        // filter active
        if ($active == 0) {
          
          if ($role == 1 || $role == 2) {

              if ($role == 1) {

                $sql = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.address,members_cells.is_complete, (SELECT district_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as district_code, (SELECT zone_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as zone_code, (SELECT sector_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as sector_code, (SELECT cell_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as cell_code FROM members_cells WHERE members_cells.church_id = 1 AND members_cells.role = 1 AND members_cells.active = 0";

                $members = null;

                foreach ($con->query($sql) as $row) {
                  $members[] = $row;

                }
                
              }else if ($role == 2) {

                $sql = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.address,members_cells.is_complete, (SELECT district_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as district_code, (SELECT zone_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as zone_code, (SELECT sector_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as sector_code, (SELECT cell_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as cell_code FROM members_cells WHERE members_cells.church_id = 1 AND (members_cells.role = 2 OR members_cells.role = 3  OR members_cells.role = 4  OR members_cells.role = 5) AND members_cells.active = 0";

                $members = null;

                foreach ($con->query($sql) as $row) {
                  $members[] = $row;
                }

              }

              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => $members));

          }else{
            return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"role does not exist",
                      "status"=>422)));    
          }

        // filter active
        }else if ($active ==1) {

          if ($role == 1 || $role == 2) {

              if ($role == 1) {

                $sql = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.address,members_cells.is_complete, (SELECT district_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as district_code, (SELECT zone_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as zone_code, (SELECT sector_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as sector_code, (SELECT cell_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as cell_code FROM members_cells WHERE members_cells.church_id = 1 AND members_cells.role = 1 AND members_cells.active = 1";

                $members = null;

                foreach ($con->query($sql) as $row) {
                  $members[] = $row;
                }
                
              }else if ($role == 2) {

                $sql = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name, members_cells.profile_picture, members_cells.address,members_cells.is_complete, (SELECT district_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as district_code, (SELECT zone_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as zone_code, (SELECT sector_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as sector_code, (SELECT cell_code from groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.church_id = $church_id) as cell_code FROM members_cells WHERE members_cells.church_id = 1 AND (members_cells.role = 2 OR members_cells.role = 3  OR members_cells.role = 4  OR members_cells.role = 5) AND members_cells.active = 1";

                $members = null;

                foreach ($con->query($sql) as $row) {
                  $members[] = $row;
                }

              }

              return $response->withStatus(200)
                                ->withHeader('Content-Type', 'application/json')
                                ->withJson(array('response' => $members));

          }else{
            return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"role does not exist",
                      "status"=>422)));    
          }

        }else{
          return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"filter active does not exist",
                    "status"=>422)));
        }

      } else{

        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"member_table does not exist",
                  "status"=>422)));
      }

    }else{
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist in this church",
                "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"Church does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/************* GENERAL STATISTICS *******************/

$app->post('/statistics/global', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('5');
    $month_t = date('05');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }


    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i 
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i 
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i 
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    }


      /*General filters*/
      $filter_p = '';
      $filter_crowd = '';
      $filter_totalc = '';
      $filter_totals = '';
      $filter_totalz = '';
      $filter_le = '';
      $filter_graphc = '';
      $filter_graph_top = '';

      /*senior pastor*/
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
        
        /*verify empty filter members*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;
          $filter_totalc = "AND id " . $filter_p;
          $filter_le = "AND groups_cells.id " . $filter_p;

          $filter_totals = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_totalz = "AND groups_zones.id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id')";

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;
          $filter_totalc = "AND id " . $filter_p;
          $filter_le = "AND groups_cells.id " . $filter_p;

          $filter_totals = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;
          $filter_totalc = "AND id " . $filter_p;
          $filter_le = "AND groups_cells.id " . $filter_p;

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;
          
        }

      /*district pastor*/
      } else if ($role_id == '2') {

        /*verify empty filter members*/
        if (empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;
          $filter_totalc = "AND id " . $filter_p;
          $filter_le = "AND groups_cells.id " . $filter_p;

          $filter_totals = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_totalz = "AND groups_zones.id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND cell_id " . $filter_p;
            $filter_totalc = "AND id " . $filter_p;
            $filter_le = "AND groups_cells.id " . $filter_p;

            $filter_totals = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            /*graphs*/
            $filter_graphc = "AND id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND cell_id " . $filter_p;
            $filter_totalc = "AND id " . $filter_p;
            $filter_le = "AND groups_cells.id " . $filter_p;

            /*graphs*/
            $filter_graphc = "AND id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND cell_id " . $filter_p;

            /*graphs*/
            $filter_graphc = "AND id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;
          }


        }

        /*zone pastor*/
      } else if ($role_id == '3') {

        /*verify empty filter members*/
        if (empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;
          $filter_totalc = "AND id " . $filter_p;
          $filter_le = "AND groups_cells.id " . $filter_p;

          $filter_totals = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND cell_id " . $filter_p;
            $filter_totalc = "AND id " . $filter_p;
            $filter_le = "AND groups_cells.id " . $filter_p;

            /*graphs*/
            $filter_graphc = "AND id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND cell_id " . $filter_p;

            /*graphs*/
            $filter_graphc = "AND id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }

        }

      /*supervisor*/
      } else if ($role_id == '4') {

        /*verify empty filter members*/
        if (empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;
          $filter_totalc = "AND id " . $filter_p;
          $filter_le = "AND groups_cells.id " . $filter_p;

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND cell_id " . $filter_p;

          /*graphs*/
          $filter_graphc = "AND id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }

      /*leader*/
      } else if ($role_id == '5') {

        $filter_p = "= '$parent_id'";

        $filter_crowd = "AND cell_id " . $filter_p;

        /*graphs*/
        $filter_graphc = "AND id " . $filter_p;
        $filter_graph_top = "AND groups_cells.id " . $filter_p;

      }


      /*Obtain crowd (members/guest)*/
      $pre_cro = $con->prepare("SELECT count(id) as crowd
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd",
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cro = array(':church_id' => $church_id);
      $pre_cro->execute($values_cro);
      $result_cro = $pre_cro->fetch();

      $crowd = $result_cro['crowd'];


      /*Obtain total cell groups*/

      if($filter_district || $role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5'){
        $total_d = null;
      }else{
        $pre_d = $con->prepare("SELECT count(id) as total_d FROM groups_districts WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_d = array(':church_id' => $church_id);
        $pre_d->execute($values_d);
        $result_d = $pre_d->fetch();

        $total_d = $result_d['total_d'];
      }
      

      if($filter_zone || $role_id == '3' || $role_id == '4' || $role_id == '5'){
        $total_z = null;
      }else{
        $pre_z = $con->prepare("SELECT count(id) as total_z FROM groups_zones WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_totalz", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_z = array(':church_id' => $church_id);
        $pre_z->execute($values_z);
        $result_z = $pre_z->fetch();

        $total_z = $result_z['total_z'];
      }

      if($filter_sector || $role_id == '4' || $role_id == '5'){
        $total_s = null;
      }else{
        $pre_s = $con->prepare("SELECT count(id) as total_s FROM groups_sectors WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_totals", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_s = array(':church_id' => $church_id);
        $pre_s->execute($values_s);
        $result_s = $pre_s->fetch();

        $total_s = $result_s['total_s'];
      }

      if($filter_cell || $role_id == '5'){
        $total_c = null;
      }else{
        $pre_c = $con->prepare("SELECT count(id) as total_c FROM groups_cells WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_totalc", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_c = array(':church_id' => $church_id);
        $pre_c->execute($values_c);
        $result_c = $pre_c->fetch();

        $total_c = $result_c['total_c'];
      }


      /**** Totals leaders ****/

      if($filter_cell || $role_id == '5'){
        $total_lead = null;
      }else{

        if (empty($filter_le)){
          $pre_lead = $con->prepare("SELECT count(id) as total_lead FROM user WHERE status = 1 AND rol = '5' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        }else{
          $pre_lead = $con->prepare("SELECT count(user.id) as total_lead FROM user, groups_cells WHERE groups_cells.leader = user.id AND groups_cells.active = 1 AND user.status = 1 AND user.rol = '5' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND user.church_id = :church_id $filter_le", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        }
        
        $values_lead = array(':church_id' => $church_id);
        $pre_lead->execute($values_lead);
        $result_lead = $pre_lead->fetch();

        $total_lead = $result_lead['total_lead'];
      }


      /*percentage for month*/

      // actual month
      $actual_date = $year . "-" . $month_t;
      $period_filter = "AND (created_at LIKE '%$actual_date%')";
      $period_fil_s = "AND (user.created_at LIKE '%$actual_date%')";

      // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter = "AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
        $period_fil_s = "AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";

      }else if ($initial_date && $is_mobile) {
        $period_filter = "AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
      	$period_fil_s = "AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
      }


      $pre_ac = $con->prepare("SELECT count(id) as total_lead, (SELECT count(id) as total_sup FROM user WHERE status = 1 AND rol = '4' AND church_id = :church_id $period_filter) as total_sup, (SELECT count(id) as total_zone FROM user WHERE status = 1 AND rol = '3' AND church_id = :church_id $period_filter) as total_zone, (SELECT count(id) as total_dis FROM user WHERE status = 1 AND rol = '2' AND church_id = :church_id $period_filter) as total_dis FROM user WHERE status = 1 AND rol = '5' AND church_id = :church_id $period_filter", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_ac = array(':church_id' => $church_id);
      $pre_ac->execute($values_ac);
      $result_ac = $pre_ac->fetch();

      $total_ac = $result_ac['total_lead'];

      $total_ac2 = $result_ac['total_sup'];

      $total_ac3 = $result_ac['total_zone'];

      $total_ac4 = $result_ac['total_dis'];


      // validate filters
      if ($filter_le) {
        $pre_fil = $con->prepare("SELECT count(user.id) as total_lead FROM user, groups_cells WHERE groups_cells.leader = user.id AND groups_cells.active = 1 AND user.status = 1 AND user.rol = '5' $period_fil_s AND user.church_id = :church_id $filter_le", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fil = array(':church_id' => $church_id);
        $pre_fil->execute($values_fil);
        $result_fil = $pre_fil->fetch();

        $total_ac = $result_fil['total_lead'];

      }

      if ($filter_totals) {
        $pre_fil2 = $con->prepare("SELECT count(user.id) as total_sup FROM user, groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.active = 1 AND user.status = 1 AND user.rol = '4' $period_fil_s AND user.church_id = :church_id $filter_totals", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fil2 = array(':church_id' => $church_id);
        $pre_fil2->execute($values_fil2);
        $result_fil2 = $pre_fil2->fetch();

        $total_ac2 = $result_fil2['total_sup'];
      }

      if ($filter_totalz) {
        $pre_fil3 = $con->prepare("SELECT count(user.id) as total_zone FROM user, groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.active = 1 AND user.status = 1 AND user.rol = '3' $period_fil_s AND user.church_id = :church_id $filter_totalz", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fil3 = array(':church_id' => $church_id);
        $pre_fil3->execute($values_fil3);
        $result_fil3 = $pre_fil3->fetch();

        $total_ac3 = $result_fil3['total_zone'];
      }


      // last month
      $month_l = $month - 1;
      $last_y = $year -1;

      if ($month_l == 0) {
        $last_date = (string)$last_y . "-12";
      }else{
        $last_date = $year . "-0" . $month_l;
      }

      $period_filter2 = "AND (created_at LIKE '%$last_date%')";
      $period_fil_s2 = "AND (user.created_at LIKE '%$last_date%')";

      $period_i = '';
      $period_f = '';
      $sub_i = '';
      $sub_p = '';

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
      	/*count the days between two dates*/
	 	    $date1 = date_create($initial_date);
	  	  $date2 = date_create($final_date);

  	  	//difference between two dates
  	  	$diff = date_diff($date1,$date2)->format("%a");

	  	  $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
    	 	$period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
    	 	$sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
    	 	$period_f = $sub_p . " 23:59:59";

        $period_filter2 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
        $period_fil_s2 = "AND (user.created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
      	/*count the days between two dates*/
	 	    $date1 = date_create($initial_date);
	  	  $date2 = date_create($sub_m);

  	  	//difference between two dates
  	  	$diff = date_diff($date1,$date2)->format("%a");

	  	  $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
    	 	$period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
    	 	$sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
    	 	$period_f = $sub_p . " 23:59:59";

        $period_filter2 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
      	$period_fil_s2 = "AND (user.created_at BETWEEN '$period_i' AND '$period_f')";
      }
      
      $pre_last = $con->prepare("SELECT count(id) as total_lead FROM user WHERE status = 1 AND rol = '5' $period_filter2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($filter_le) {
        $pre_last = $con->prepare("SELECT count(user.id) as total_lead FROM user, groups_cells WHERE groups_cells.leader = user.id AND groups_cells.active = 1 AND user.status = 1 AND user.rol = '5' $period_fil_s2 AND user.church_id = :church_id $filter_le", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }

      $values_last = array(':church_id' => $church_id);
      $pre_last->execute($values_last);
      $result_last = $pre_last->fetch();

      $total_last = $result_last['total_lead'];

      if ($total_ac == 0 && $total_last == 0) {
      	$percentage_c = 0;
      }else if ($total_last == 0) {
        // $percentage_c = ($total_ac - $total_last) * 100;
        $percentage_c = 100;
      } else{
        $percentage_c = ($total_ac - $total_last) * 100 / $total_last;
      }

      $percentage_c = (string)$percentage_c;

      if($filter_cell || $role_id == '5'){
        $percentage_c = null;
      }


      /**** Totals supervisors ****/

      if($filter_sector || $role_id == '4' || $role_id == '5'){
        $total_sup = null;
      }else{
        if (empty($filter_totals)){
          $pre_sup = $con->prepare("SELECT count(id) as total_sup FROM user WHERE status = 1 AND rol = '4' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        }else{
          $pre_sup = $con->prepare("SELECT count(user.id) as total_sup FROM user, groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.active = 1 AND user.status = 1 AND user.rol = '4' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND user.church_id = :church_id $filter_totals", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        }

        $values_sup = array(':church_id' => $church_id);
        $pre_sup->execute($values_sup);
        $result_sup = $pre_sup->fetch();

        $total_sup = $result_sup['total_sup'];
      }
      
      /*percentage for month*/

      // last month

      $pre_last2 = $con->prepare("SELECT count(id) as total_sup FROM user WHERE status = 1 AND rol = '4' $period_filter2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($filter_totals) {
        $pre_last2 = $con->prepare("SELECT count(user.id) as total_sup FROM user, groups_sectors WHERE groups_sectors.supervisor = user.id AND groups_sectors.active = 1 AND user.status = 1 AND user.rol = '4' $period_fil_s2 AND user.church_id = :church_id $filter_totals", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }

      $values_last2 = array(':church_id' => $church_id);
      $pre_last2->execute($values_last2);
      $result_last2 = $pre_last2->fetch();

      $total_last2 = $result_last2['total_sup'];

      if ($total_ac2 == 0 && $total_last2 == 0) {
        $percentage_s = 0;
      }else if ($total_last2 == 0) {
        // $percentage_s = ($total_ac2 - $total_last2) * 100;
        $percentage_s = 100;
      } else{
        $percentage_s = ($total_ac2 - $total_last2) * 100 / $total_last2;
      }

      $percentage_s = (string)$percentage_s;

      if($filter_sector || $role_id == '4' || $role_id == '5'){
        $percentage_s = null;
      }

      /**** Totals zone pastors ****/

      if($filter_zone || $role_id == '3' || $role_id == '4' || $role_id == '5'){
        $total_zone = null;
      }else{

        if (empty($filter_totalz)){
          $pre_zone = $con->prepare("SELECT count(id) as total_zone FROM user WHERE status = 1 AND rol = '3' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        }else{
          $pre_zone = $con->prepare("SELECT count(user.id) as total_zone FROM user, groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.active = 1 AND user.status = 1 AND user.rol = '3' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND user.church_id = :church_id $filter_totalz", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        }

        $values_zone = array(':church_id' => $church_id);
        $pre_zone->execute($values_zone);
        $result_zone = $pre_zone->fetch();

        $total_zone = $result_zone['total_zone'];
      }

      /*percentage for month*/

      // last month
      $pre_last3 = $con->prepare("SELECT count(id) as total_zone FROM user WHERE status = 1 AND rol = '3' $period_filter2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($filter_totalz) {
        $pre_last3 = $con->prepare("SELECT count(user.id) as total_zone FROM user, groups_zones WHERE groups_zones.zone_pastor = user.id AND groups_zones.active = 1 AND user.status = 1 AND user.rol = '3' $period_fil_s2 AND user.church_id = :church_id $filter_totalz", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }

      $values_last3 = array(':church_id' => $church_id);
      $pre_last3->execute($values_last3);
      $result_last3 = $pre_last3->fetch();

      $total_last3 = $result_last3['total_zone'];

      if ($total_ac3 == 0 && $total_last3 == 0) {
        $percentage_z = 0;
      }else if ($total_last3 == 0) {
        // $percentage_z = ($total_ac3 - $total_last3) * 100;
        $percentage_z = 100;
      } else{
        $percentage_z = ($total_ac3 - $total_last3) * 100 / $total_last3;
      }

      $percentage_z = (string)$percentage_z;

      if($filter_zone || $role_id == '3' || $role_id == '4' || $role_id == '5'){
        $percentage_z = null;
      }


      /**** Totals district pastors ****/

      if($filter_district || $role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5'){
        $total_dis = null;
      }else{
        $pre_dis = $con->prepare("SELECT count(id) as total_dis FROM user WHERE status = 1 AND rol = '2' AND (user.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $total_dis = $result_dis['total_dis'];
      }

      /*percentage for month*/

      // last month
      $pre_last4 = $con->prepare("SELECT count(id) as total_dis FROM user WHERE status = 1 AND rol = '2' $period_filter2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_last4 = array(':church_id' => $church_id);
      $pre_last4->execute($values_last4);
      $result_last4 = $pre_last4->fetch();

      $total_last4 = $result_last4['total_dis'];

      if ($total_ac4 == 0 && $total_last4 == 0) {
        $percentage_d = 0;
      }else if ($total_last4 == 0) {
        // $percentage_d = ($total_ac4 - $total_last4) * 100;
        $percentage_d = 100;
      }else{
        $percentage_d = ($total_ac4 - $total_last4) * 100 / $total_last4;
      }

      $percentage_d = (string)$percentage_d;

      if($filter_district || $role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5'){
        $percentage_d = null;
      }

      /****** Members vs Guests vs Kids ******/

      // total members per quarter
      $pre_members = $con->prepare("SELECT count(id) as members, (SELECT count(id) as guests
                               FROM members_cells
                               WHERE active = 1 AND role = '1' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd) as guests, (SELECT count(id) as kids
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id AND (YEAR(CURDATE())-YEAR(birth_date)) <= 12 $filter_crowd) as kids
                               FROM members_cells
                               WHERE active = 1 AND role != '1' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd",
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_members = array(':church_id' => $church_id);
      $pre_members->execute($values_members);
      $result_members = $pre_members->fetch();

      $total_members = $result_members['members'];

      // total guests per quarter
      $total_guest = $result_members['guests'];

      // total kids per quarter
      $total_kids = $result_members['kids'];


      // Percentage for members

      // previous quarter
      $period_filter3 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
      	$period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
      }

      $pre_per = $con->prepare("SELECT count(id) as members
                               FROM members_cells
                               WHERE active = 1 AND role != '1' $period_filter3 AND church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per = array(':church_id' => $church_id);
      $pre_per->execute($values_per);
      $result_per = $pre_per->fetch();

      $total_per = $result_per['members'];

      if ($total_members == 0 && $total_per == 0) {
        $percentage_me = 0;
      }else if ($total_per == 0) {
        // $percentage_me = ($total_members - $total_per) * 100;
        $percentage_me = 100;
      }else{
        $percentage_me = ($total_members - $total_per) * 100 / $total_per;
      }

      // Percentage for guest

      // previous quarter
      $pre_per2 = $con->prepare("SELECT count(id) as guests
                               FROM members_cells
                               WHERE active = 1 AND role = '1' $period_filter3 AND church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per2 = array(':church_id' => $church_id);
      $pre_per2->execute($values_per2);
      $result_per2 = $pre_per2->fetch();

      $total_per2 = $result_per2['guests'];

      if ($total_guest == 0 && $total_per2 == 0) {
      	$percentage_guest = 0;
      }else if ($total_per2 == 0) {
        // $percentage_guest = ($total_guest - $total_per2) * 100;
        $percentage_guest = 100;
      } else{
        $percentage_guest = ($total_guest - $total_per2) * 100 / $total_per2;
      }

      // Percentage for kids

      // previous quarter
      $pre_per3 = $con->prepare("SELECT count(id) as kids
                               FROM members_cells
                               WHERE active = 1 $period_filter3 AND church_id = :church_id AND (YEAR(CURDATE())-YEAR(birth_date)) <= 12 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per3 = array(':church_id' => $church_id);
      $pre_per3->execute($values_per3);
      $result_per3 = $pre_per3->fetch();

      $total_per3 = $result_per3['kids'];

      if ($total_kids == 0 && $total_per3 == 0) {
        $percentage_kids = 0;
      } else if ($total_per3 == 0) {
        // $percentage_kids = ($total_kids - $total_per3) * 100;
        $percentage_kids = 100;
      } else{
        $percentage_kids = ($total_kids - $total_per3) * 100 / $total_per3;
      }


      /********* Graphic vs *********/

      $dates = null;
      $members_f = null;
      $guest_f = null;
      $kids_f = null;
      $cells_f = null;
      $members_fe = null;
      $members_ma = null;
      $members_fe2 = null;
      $members_ma2 = null;
      $members_fe3 = null;
      $members_ma3 = null;


      // $period_filter4 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {

      	$start_date = new DateTime($initial_date);
      	$end_date = new DateTime($final_date);
        
      }else if ($initial_date && $is_mobile) {
      	$start_date = new DateTime($initial_date);
      	$end_date = new DateTime($sub_m);
      }

      /*initial for (days)*/
      for($i = $start_date; $i <= $end_date; $i->modify('+1 day')){

        $dates[] = $i->format("Y-m-d");

        $date_val = $i->format("Y-m-d");

        /*members*/
        $pre_first = $con->prepare("SELECT count(id) as members, (SELECT count(id) as guests
                                 FROM members_cells
                                 WHERE active = 1 AND role = '1' AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd) as guests, (SELECT count(id) as kids
                               FROM members_cells
                               WHERE active = 1 AND created_at LIKE '%$date_val%' AND church_id = :church_id AND (YEAR(CURDATE())-YEAR(birth_date)) <= 12 $filter_crowd) as kids
                                 FROM members_cells
                                 WHERE active = 1 AND role != '1' AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        // if it will be ascending graph
        // AND (created_at >= '$dates[0]' AND created_at <= '$date_val')

        $values_first = array(':church_id' => $church_id);
        $pre_first->execute($values_first);
        $result_first = $pre_first->fetch();

        $total_first = $result_first['members'];

        $members_f[] = $total_first;

        /*guest*/
        $total_sec = $result_first['guests'];

        $guest_f[] = $total_sec;

        /*kids*/
        $total_th = $result_first['kids'];

        $kids_f[] = $total_th;


        /*cell groups*/
        $pre_all = $con->prepare("SELECT count(id) as cells
                               FROM groups_cells
                               WHERE active = 1 AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_graphc", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_all = array(':church_id' => $church_id);
        $pre_all->execute($values_all);
        $result_all = $pre_all->fetch();

        $total_all = $result_all['cells'];

        $cells_f[] = $total_all;


        /***** Members by gender *****/

        /*female all*/
        $pre_fe = $con->prepare("SELECT count(id) as female, (SELECT count(id) as male
                                 FROM members_cells
                                 WHERE active = 1 AND gender = 'm' AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd) as male
                                 FROM members_cells
                                 WHERE active = 1 AND gender = 'f' AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe = array(':church_id' => $church_id);
        $pre_fe->execute($values_fe);
        $result_fe = $pre_fe->fetch();

        $total_fe = $result_fe['female'];

        $members_fe[] = $total_fe;

        /*male all*/
        $total_male = $result_fe['male'];
        $members_ma[] = $total_male;


        /*female cell_members*/
        $pre_fe2 = $con->prepare("SELECT count(id) as female_c, (SELECT count(id) as male_c
                                 FROM members_cells
                                 WHERE active = 1 AND gender = 'm' AND role != 1 AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd) as male_c
                                 FROM members_cells
                                 WHERE active = 1 AND gender = 'f' AND role != 1 AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe2 = array(':church_id' => $church_id);
        $pre_fe2->execute($values_fe2);
        $result_fe2 = $pre_fe2->fetch();

        $total_fe2 = $result_fe2['female_c'];

        $members_fe2[] = $total_fe2;

        /*male cell_member*/
        $total_male2 = $result_fe2['male_c'];
        $members_ma2[] = $total_male2;


        /*female guests*/
        $pre_fe3 = $con->prepare("SELECT count(id) as female_g, (SELECT count(id) as male_g
                                 FROM members_cells
                                 WHERE active = 1 AND gender = 'm' AND role = 1 AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd) as male_g
                                 FROM members_cells
                                 WHERE active = 1 AND gender = 'f' AND role = 1 AND created_at LIKE '%$date_val%' AND church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe3 = array(':church_id' => $church_id);
        $pre_fe3->execute($values_fe3);
        $result_fe3 = $pre_fe3->fetch();

        $total_fe3 = $result_fe3['female_g'];

        $members_fe3[] = $total_fe3;

        /*male guests*/
        $total_male3 = $result_fe3['male_g'];
        $members_ma3[] = $total_male3;

      }


      /******* graphic cell groups ********/

      /*Cells today*/
      $pre_today = $con->prepare("SELECT count(id) as total_c FROM groups_cells WHERE active = 1 AND created_at LIKE '%$today%' AND church_id = :church_id $filter_graphc", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_today = array(':church_id' => $church_id);
      $pre_today->execute($values_today);
      $result_today = $pre_today->fetch();

      $total_to = $result_today['total_c'];


      /********** Age ranges **********/

      // general ages
      $pre_age = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_age = array(':church_id' => $church_id);
      $pre_age->execute($values_age);
      $result_age = $pre_age->fetch();

      $total_age1 = $result_age['age1'];
      $total_age2 = $result_age['age2'];
      $total_age3 = $result_age['age3'];
      $total_age4 = $result_age['age4'];
      $total_age5 = $result_age['age5'];
      $total_age6 = $result_age['age6'];

      // general female ages
      $pre_agef = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agef = array(':church_id' => $church_id);
      $pre_agef->execute($values_agef);
      $result_agef = $pre_agef->fetch();

      $total_agef1 = $result_agef['age1'];
      $total_agef2 = $result_agef['age2'];
      $total_agef3 = $result_agef['age3'];
      $total_agef4 = $result_agef['age4'];
      $total_agef5 = $result_agef['age5'];
      $total_agef6 = $result_agef['age6'];

      // general male ages
      $pre_agem = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agem = array(':church_id' => $church_id);
      $pre_agem->execute($values_agem);
      $result_agem = $pre_agem->fetch();

      $total_agem1 = $result_agem['age1'];
      $total_agem2 = $result_agem['age2'];
      $total_agem3 = $result_agem['age3'];
      $total_agem4 = $result_agem['age4'];
      $total_agem5 = $result_agem['age5'];
      $total_agem6 = $result_agem['age6'];


      // cell_member ages
      $pre_agec = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agec = array(':church_id' => $church_id);
      $pre_agec->execute($values_agec);
      $result_agec = $pre_agec->fetch();

      $total_agec1 = $result_agec['age1'];
      $total_agec2 = $result_agec['age2'];
      $total_agec3 = $result_agec['age3'];
      $total_agec4 = $result_agec['age4'];
      $total_agec5 = $result_agec['age5'];
      $total_agec6 = $result_agec['age6'];

      // cell_member female ages
      $pre_age_memberf = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberf = array(':church_id' => $church_id);
      $pre_age_memberf->execute($values_memberf);
      $result_memberf = $pre_age_memberf->fetch();

      $total_memberf1 = $result_memberf['age1'];
      $total_memberf2 = $result_memberf['age2'];
      $total_memberf3 = $result_memberf['age3'];
      $total_memberf4 = $result_memberf['age4'];
      $total_memberf5 = $result_memberf['age5'];
      $total_memberf6 = $result_memberf['age6'];

      // cell_member male ages
      $pre_age_memberm = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND role != 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberm = array(':church_id' => $church_id);
      $pre_age_memberm->execute($values_memberm);
      $result_memberm = $pre_age_memberm->fetch();

      $total_memberm1 = $result_memberm['age1'];
      $total_memberm2 = $result_memberm['age2'];
      $total_memberm3 = $result_memberm['age3'];
      $total_memberm4 = $result_memberm['age4'];
      $total_memberm5 = $result_memberm['age5'];
      $total_memberm6 = $result_memberm['age6'];

      // guests ages
      $pre_ageg = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_ageg = array(':church_id' => $church_id);
      $pre_ageg->execute($values_ageg);
      $result_ageg = $pre_ageg->fetch();

      $total_ageg1 = $result_ageg['age1'];
      $total_ageg2 = $result_ageg['age2'];
      $total_ageg3 = $result_ageg['age3'];
      $total_ageg4 = $result_ageg['age4'];
      $total_ageg5 = $result_ageg['age5'];
      $total_ageg6 = $result_ageg['age6'];

      // guests female ages
      $pre_age_guestf = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'f' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestf = array(':church_id' => $church_id);
      $pre_age_guestf->execute($values_guestf);
      $result_guestf = $pre_age_guestf->fetch();

      $total_guestf1 = $result_guestf['age1'];
      $total_guestf2 = $result_guestf['age2'];
      $total_guestf3 = $result_guestf['age3'];
      $total_guestf4 = $result_guestf['age4'];
      $total_guestf5 = $result_guestf['age5'];
      $total_guestf6 = $result_guestf['age6'];

      // guests male ages
      $pre_age_guestm = $con->prepare("SELECT count(id) as age1, (SELECT count(id) as age2
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 17)) as age2, (SELECT count(id) as age3
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 24)) as age3, (SELECT count(id) as age4
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 34)) as age4, (SELECT count(id) as age5
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND ((YEAR(CURDATE())-YEAR(birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(birth_date)) <= 54)) as age5, (SELECT count(id) as age6
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) >= 55) as age6
                               FROM members_cells
                               WHERE active = 1 AND role = 1 AND gender = 'm' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND church_id = :church_id $filter_crowd AND (YEAR(CURDATE())-YEAR(birth_date)) <= 11", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestm = array(':church_id' => $church_id);
      $pre_age_guestm->execute($values_guestm);
      $result_guestm = $pre_age_guestm->fetch();

      $total_guestm1 = $result_guestm['age1'];
      $total_guestm2 = $result_guestm['age2'];
      $total_guestm3 = $result_guestm['age3'];
      $total_guestm4 = $result_guestm['age4'];
      $total_guestm5 = $result_guestm['age5'];
      $total_guestm6 = $result_guestm['age6'];


      /********************** Top Cities ************************/
      $result_cities = null;
      $result_cities2 = null;

      // Actual quarter
      $sql = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 AND (members_cells.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

      foreach ($con->query($sql) as $row) {
        $row['ranking'] = '1';
        $result_cities[] = $row;
      }


      // Last quarter
      $period_filter4 = "AND (members_cells.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter4 = "AND (members_cells.created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
      	$period_filter4 = "AND (members_cells.created_at BETWEEN '$period_i' AND '$period_f')";
      }

      $sql2 = "SELECT count(members_cells.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM members_cells, groups_cells WHERE groups_cells.id = members_cells.cell_id AND groups_cells.active = 1 AND members_cells.active = 1 $period_filter4 AND groups_cells.church_id = '$church_id' AND members_cells.church_id = '$church_id' $filter_graph_top group by groups_cells.city order by count(members_cells.id) DESC LIMIT 5";

      foreach ($con->query($sql2) as $row2) {
        $result_cities2[] = $row2;
      }

      /*Obtain final ranking*/
      if ($result_cities != null && $result_cities2 != null) {

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        
        array_multisort($aux, SORT_DESC, $result_cities);

        // order array top cities actual
        foreach ($result_cities2 as $key2 => $frow2) {
            $aux2[$key2] = $frow2['crowd'];
        }
        
        array_multisort($aux2, SORT_DESC, $result_cities2);

      	for($i=0; $i<count($result_cities); $i++){
      	    for($j=0; $j<count($result_cities2); $j++){
      	        if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

      	            if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
      	              $ranking = '1';
      	              $result_cities[$i]['ranking'] = '1';
      	            }else{
      	              $ranking = '0';
      	              $result_cities[$i]['ranking'] = '0';
      	            }

      	        }
      	    }
      	}

      } else if($result_cities != null){

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        
        array_multisort($aux, SORT_DESC, $result_cities);

      }
      

      /************** Overall Growth Actual *****************/


      // obtain overall multiply global

      $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top,$period_filter3);

      $total_gen = $overall_mult['total_gen'];
      $w_percentage = $overall_mult['w_percentage'];
      $goal_f = $overall_mult['goal_f'];
      $overall_multiply = $overall_mult['overall_multiply'];


      // obtain cell_attendance global

      $overall_att = cellGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

      $period_filter5 = $overall_att['period_filter5'];
      $w_percentagekd = $overall_att['w_percentagekd'];
      $w_percentagead = $overall_att['w_percentagead'];
      $goal_f2 = $overall_att['goal_f2'];
      $goal_f3 = $overall_att['goal_f3'];
      $overall_attend = $overall_att['overall_attend'];


      // obtain church_attendance global
      $overall_ch = churchGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

      $w_percentagech = $overall_ch['w_percentagech'];
      $goal_f4 = $overall_ch['goal_f4'];
      $overall_church = $overall_ch['overall_church'];


      // obtain salvation global
      $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$total_gen);

      $w_percentagesv = $overall_pr['w_percentagesv'];
      $w_percentagebp = $overall_pr['w_percentagebp'];
      $w_per_sch = $overall_pr['w_per_sch'];
      $goal_f5 = $overall_pr['goal_f5'];
      $goal_f6 = $overall_pr['goal_f6'];
      $goal_f7 = $overall_pr['goal_f7'];
      // FINAL OVERALL PERFOMANCE
      $overall_perfomance = $overall_pr['overall_perfomance'];


      /*** OVERALL CHURCH GLOBAL ***/
      $overall_growth = $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;



      /*********************************** OVERALL PAST ******************************************/

      // obtain overall multiply global

      $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

      $period_filter6 = $overall_mult2['period_filter6'];
      $period_filter_n = $overall_mult2['period_filter_n'];
      $overall_multiply2 = $overall_mult2['overall_multiply2'];
      $past_i = $overall_mult2['past_i'];
      $past_f = $overall_mult2['past_f'];


      // obtain cell_attendance global
      $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

      $period_filter7 = $overall_att2['period_filter7'];
      $period_filter_n2 = $overall_att2['period_filter_n2'];
      $overall_attend2 = $overall_att2['overall_attend2'];


      // obtain church_attendance global
      $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


      // obtain salvation global
      $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


      /*** OVERALL CHURCH GLOBAL ***/
      $overall_growth_past =  $overall_multiply2 + $overall_attend2 + $overall_church2 + $overall_perfomance2;


      /**** OBTAIN PERCENTAGE FINAL (OVERALL GROWTH) *****/
      if ($overall_growth == 0 && $overall_growth_past == 0) {
        $percentage_overall = 0;
      } else if ($overall_growth_past == 0) {
        // $percentage_overall = ($overall_growth - $overall_growth_past) * 100;
        $percentage_overall = 100;
      } else{
        $percentage_overall = ($overall_growth - $overall_growth_past) * 100 / $overall_growth_past;
      }


      /***** final response *****/
      $final_res = array(
        "crowd" => $crowd,
        "total_cell_groups" => $total_c,
        "leaders" => array(
          "total_leaders" => $total_lead,
          "total_cells" => $total_c,
          "percentage" => $percentage_c
        ),
        "supervisors" => array(
          "total_supervisors" => $total_sup,
          "total_sectors" => $total_s,
          "percentage" => $percentage_s
        ),
        "zone_pastors" => array(
          "total_zone_pastors" => $total_zone,
          "total_zones" => $total_z,
          "percentage" => $percentage_z
        ),
        "district_pastors" => array(
          "total_district_pastors" => $total_dis,
          "total_districts" => $total_d,
          "percentage" => $percentage_d
        ),
        "vs" => array(
          "members_count" => $total_members,
          "guest_count" => $total_guest,
          "kids_count" => $total_kids,
          "members_percetage" => (string)round($percentage_me),
          "guest_percetage" => (string)round($percentage_guest),
          "kids_percetage" => (string)round($percentage_kids),
          "members" => $members_f,
          "guests" => $guest_f,
          "kids" => $kids_f,
          "dates" => $dates
        ),
        "cell_groups" => array(
          "total_cells" => $total_c,
          "cells_today" => $total_to,
          "period" => $cells_f,
          "dates" => $dates
        ),
        "members_gender" => array(
          "female" => $members_fe,
          "male" => $members_ma,
          "cell_members" => array(
            "female" => $members_fe2,
            "male" => $members_ma2
          ),
          "guests" => array(
            "female" => $members_fe3,
            "male" => $members_ma3
          )
        ),
        "age_ranges" => array(
          "first" => $total_age1,
          "second" => $total_age2,
          "third" => $total_age3,
          "fourth" => $total_age4,
          "fifth" => $total_age5,
          "sixth" => $total_age6,
          "female" => array(
            "first" => $total_agef1,
            "second" => $total_agef2,
            "third" => $total_agef3,
            "fourth" => $total_agef4,
            "fifth" => $total_agef5,
            "sixth" => $total_agef6
          ),
          "male" => array(
            "first" => $total_agem1,
            "second" => $total_agem2,
            "third" => $total_agem3,
            "fourth" => $total_agem4,
            "fifth" => $total_agem5,
            "sixth" => $total_agem6
          ),
          "cell_members" => array(
            "first" => $total_agec1,
            "second" => $total_agec2,
            "third" => $total_agec3,
            "fourth" => $total_agec4,
            "fifth" => $total_agec5,
            "sixth" => $total_agec6,
            "female" => array(
              "first" => $total_memberf1,
              "second" => $total_memberf2,
              "third" => $total_memberf3,
              "fourth" => $total_memberf4,
              "fifth" => $total_memberf5,
              "sixth" => $total_memberf6
            ),
            "male" => array(
              "first" => $total_memberm1,
              "second" => $total_memberm2,
              "third" => $total_memberm3,
              "fourth" => $total_memberm4,
              "fifth" => $total_memberm5,
              "sixth" => $total_memberm6
            )
          ),
          "guests" => array(
            "first" => $total_ageg1,
            "second" => $total_ageg2,
            "third" => $total_ageg3,
            "fourth" => $total_ageg4,
            "fifth" => $total_ageg5,
            "sixth" => $total_ageg6,
            "female" => array(
              "first" => $total_guestf1,
              "second" => $total_guestf2,
              "third" => $total_guestf3,
              "fourth" => $total_guestf4,
              "fifth" => $total_guestf5,
              "sixth" => $total_guestf6
            ),
            "male" => array(
              "first" => $total_guestm1,
              "second" => $total_guestm2,
              "third" => $total_guestm3,
              "fourth" => $total_guestm4,
              "fifth" => $total_guestm5,
              "sixth" => $total_guestm6
            )
          )
        ),
        "top_cities" => $result_cities,
        "points_overall" => (string)$overall_growth,
        "percentage_overall" => (string)round($percentage_overall)
      );


      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => $final_res));




  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


// Statistics cell attendance
$app->post('/statistics/cell-attendance', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      /************** If filter has not been selected, per quarter ******************/

      /*actual date*/
      $today = date("Y-m-d");
      $month = date('5');
      $month_t = date('05');
      $year = date ("Y");

      $prev_y = $year -1;

      /*function general dates*/
      $general_d = generalDates($month, $year, $prev_y);

      $initial_quarter = $general_d['initial_quarter'];
      $final_quarter = $general_d['final_quarter'];
      $initial_quarter2 = $general_d['initial_quarter2'];
      $final_quarter2 = $general_d['final_quarter2'];
      $start_date_lg = $general_d['start_date_lg'];
      $end_date_lg = $general_d['end_date_lg'];
      $start_date = $general_d['start_date'];
      $end_date = $general_d['end_date'];
      $start_date2 = $general_d['start_date2'];
      $end_date2 = $general_d['end_date2'];


      /*Note: If exist date filter, validate*/
      if ($initial_date && $final_date && empty($is_mobile)) {
        $initial_quarter = $initial_date . " 00:00:00";
        $final_quarter = $final_date . " 23:59:59";

      }else if ($initial_date && $is_mobile) {
      	$initial_quarter = $initial_date . " 00:00:00";
      	$add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      	$sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      	$final_quarter = $sub_m . " 23:59:59";
      }


      /*validate parent_id*/
      if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

        if(empty($parent_id)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Missing parameter: parent_id",
                    "status"=>500)));
        }
      }


      if ($role_id == '2') {
        $pre_dis = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        if(empty($result_dis)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '3') {
        $pre_dis = $con->prepare("SELECT id as zone_i 
                                 FROM groups_zones
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $zone = $result_dis['zone_i'];

        if(empty($zone)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '4') {
        $pre_dis = $con->prepare("SELECT id as sector_i 
                                 FROM groups_sectors
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $sec = $result_dis['sector_i'];

        if(empty($sec)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '5') {
        $pre_dis = $con->prepare("SELECT id as cell_i 
                                 FROM groups_cells
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $cell = $result_dis['cell_i'];

        if(empty($cell)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      }


      /*General filters*/
      $filter_p = '';
      $filter_crowd = '';
      $filter_graph_top = '';


      /*senior pastor*/
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
        
        /*verify empty filter members*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;
          
        }

      /*district pastor*/
      } else if ($role_id == '2') {

        /*verify empty filter members*/
        if (empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }


        }

        /*zone pastor*/
      } else if ($role_id == '3') {

        /*verify empty filter members*/
        if (empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }

        }

      /*supervisor*/
      } else if ($role_id == '4') {

        /*verify empty filter members*/
        if (empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }

      /*leader*/
      } else if ($role_id == '5') {

        $filter_p = "= '$parent_id'";

        $filter_crowd = "AND reports.cell_id " . $filter_p;
        $filter_graph_top = "AND groups_cells.id " . $filter_p;

      }


      /*Obtain crowd attendance (members/guest/kids)*/
      $pre_cro = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance + total_kids_assistance) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cro = array(':church_id' => $church_id);
      $pre_cro->execute($values_cro);
      $result_cro = $pre_cro->fetch();

      $crowd = $result_cro['crowd'];

      if ($crowd == null) {
      	$crowd = '0';
      }

      /*Obtain member attendance*/
      $pre_mem = $con->prepare("SELECT SUM(total_member_assistance) as member_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_mem = array(':church_id' => $church_id);
      $pre_mem->execute($values_mem);
      $result_mem = $pre_mem->fetch();

      $total_mem = $result_mem['member_attendance'];

      if ($total_mem == null) {
      	$total_mem = '0';
      }

      /*Obtain guests attendance*/
      $pre_gu = $con->prepare("SELECT SUM(total_guest_assistance) as guest_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gu = array(':church_id' => $church_id);
      $pre_gu->execute($values_gu);
      $result_gu = $pre_gu->fetch();

      $total_gu = $result_gu['guest_attendance'];

      if ($total_gu == null) {
      	$total_gu = '0';
      }

       /*Obtain kids attendance*/
      $pre_k = $con->prepare("SELECT SUM(total_kids_assistance) as kids_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_k = array(':church_id' => $church_id);
      $pre_k->execute($values_k);
      $result_k = $pre_k->fetch();

      $total_k = $result_k['kids_attendance'];

      if ($total_k == null) {
      	$total_k = '0';
      }

      /****** Cell Members vs Guests ******/

      // Percentage for members

      // previous period

      $period_i = '';
      $period_f = '';
      $sub_i = '';
      $sub_p = '';
      if ($initial_date && $final_date && empty($is_mobile)) {
      	/*count the days between two dates*/
	 	    $date1 = date_create($initial_date);
	  	  $date2 = date_create($final_date);

  	  	//difference between two dates
  	  	$diff = date_diff($date1,$date2)->format("%a");

  	  	$sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      	$period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      	$sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      	$period_f = $sub_p . " 23:59:59";

      	$initial_quarter2 = $period_i;
      	$final_quarter2 = $period_f;
        
      }else if ($initial_date && $is_mobile) {
      	/*count the days between two dates*/
	 	    $date1 = date_create($initial_date);
	  	  $date2 = date_create($sub_m);

  	  	//difference between two dates
  	  	$diff = date_diff($date1,$date2)->format("%a");

  	  	$sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      	$period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      	$sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      	$period_f = $sub_p . " 23:59:59";

      	$initial_quarter2 = $period_i;
      	$final_quarter2 = $period_f;
      }

      $pre_per = $con->prepare("SELECT SUM(total_member_assistance) as member_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per = array(':church_id' => $church_id);
      $pre_per->execute($values_per);
      $result_per = $pre_per->fetch();

      $total_per = $result_per['member_attendance'];

      if ($total_mem == 0 && $total_per == 0) {
        $percentage_me = 0;
      } else if ($total_per == 0) {
        $percentage_me = 100;
      } else{
        $percentage_me = ($total_mem - $total_per) * 100 / $total_per;
      }

      // Percentage for guest

      // previous quarter
      $pre_per2 = $con->prepare("SELECT SUM(total_guest_assistance) as guest_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per2 = array(':church_id' => $church_id);
      $pre_per2->execute($values_per2);
      $result_per2 = $pre_per2->fetch();

      $total_per2 = $result_per2['guest_attendance'];

      if ($total_gu == 0 && $total_per2 == 0) {
        $percentage_guest = 0;
      }else if ($total_per2 == 0) {
        $percentage_guest = 100;
      } else{
        $percentage_guest = ($total_gu - $total_per2) * 100 / $total_per2;
      }


      /********* Graphic vs *********/

      $dates = null;
      $members_f = null;
      $guest_f = null;
      $cells_f = null;
      $members_fe = null;
      $members_ma = null;
      $members_ma2 = null;
      $members_ma3 = null;


       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {

      	$start_date = new DateTime($initial_date);
      	$end_date = new DateTime($final_date);
        
      }else if ($initial_date && $is_mobile) {
      	$start_date = new DateTime($initial_date);
      	$end_date = new DateTime($sub_m);
      }

      /*initial for (days)*/
      for($i = $start_date; $i <= $end_date; $i->modify('+1 day')){

        $dates[] = $i->format("Y-m-d");

        $date_val = $i->format("Y-m-d");

        /*members*/
        $pre_first = $con->prepare("SELECT SUM(total_member_assistance) as member_attendance, (SELECT SUM(total_guest_assistance) as guests_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd) as guests_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_first = array(':church_id' => $church_id);
        $pre_first->execute($values_first);
        $result_first = $pre_first->fetch();

        $total_first = $result_first['member_attendance'];

        if ($total_first == null) {
        	$total_first = '0';
        }

        $members_f[] = $total_first;

        /*guest*/
        $total_sec = $result_first['guests_attendance'];

        if ($total_sec == null) {
        	$total_sec = '0';
        }

        $guest_f[] = $total_sec;


        /*kids cell attendance*/
        $pre_all = $con->prepare("SELECT SUM(total_kids_assistance) as kids_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_all = array(':church_id' => $church_id);
        $pre_all->execute($values_all);
        $result_all = $pre_all->fetch();

        $total_all = $result_all['kids_attendance'];

        if ($total_all == null) {
        	$total_all = '0';
        }

        $cells_f[] = $total_all;


        /***** Cell Attendance by gender *****/

        /*female all*/
        $pre_fe = $con->prepare("SELECT count(reports_details.id) as female, (SELECT count(reports_details.id) as male FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND reports_details.created_at LIKE '%$date_val%' $filter_crowd) as male FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND reports_details.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe = array(':church_id' => $church_id);
        $pre_fe->execute($values_fe);
        $result_fe = $pre_fe->fetch();

        $total_fe = $result_fe['female'];

        $members_fe[] = $total_fe;

        /*male all*/
        $total_male = $result_fe['male'];
        $members_ma[] = $total_male;


        /*female cell_members*/
        $pre_fe2 = $con->prepare("SELECT count(reports_details.id) as female_c, (SELECT count(reports_details.id) as male_c FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND members_cells.role != 1 AND reports_details.cell_group = '1' AND reports_details.created_at LIKE '%$date_val%' $filter_crowd) as male_c FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND members_cells.role != 1 AND reports_details.cell_group = '1' AND reports_details.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe2 = array(':church_id' => $church_id);
        $pre_fe2->execute($values_fe2);
        $result_fe2 = $pre_fe2->fetch();

        $total_fe2 = $result_fe2['female_c'];

        $members_fe2[] = $total_fe2;

        /*male cell_member*/
        $total_male2 = $result_fe2['male_c'];
        $members_ma2[] = $total_male2;


        /*female guests*/
        $pre_fe3 = $con->prepare("SELECT count(reports_details.id) as female_g, (SELECT count(reports_details.id) as male_g FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND members_cells.role = 1 AND reports_details.cell_group = '1' AND reports_details.created_at LIKE '%$date_val%' $filter_crowd) as male_g FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND members_cells.role = 1 AND reports_details.cell_group = '1' AND reports_details.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe3 = array(':church_id' => $church_id);
        $pre_fe3->execute($values_fe3);
        $result_fe3 = $pre_fe3->fetch();

        $total_fe3 = $result_fe3['female_g'];

        $members_fe3[] = $total_fe3;

        /*male guests*/
        $total_male3 = $result_fe3['male_g'];
        $members_ma3[] = $total_male3;

      }


      /******* graphic kids cell attendance ********/

      /*Cells today*/
      $pre_today = $con->prepare("SELECT SUM(total_kids_assistance) as kids_attendance FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$today%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_today = array(':church_id' => $church_id);
      $pre_today->execute($values_today);
      $result_today = $pre_today->fetch();

      $total_to = $result_today['kids_attendance'];

      if ($total_to == null) {
      	$total_to = '0';
      }

      /********** Age ranges **********/

      // general ages
      $pre_age = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1  AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_age = array(':church_id' => $church_id);
      $pre_age->execute($values_age);
      $result_age = $pre_age->fetch();

      $total_age1 = $result_age['age1'];
      $total_age2 = $result_age['age2'];
      $total_age3 = $result_age['age3'];
      $total_age4 = $result_age['age4'];
      $total_age5 = $result_age['age5'];
      $total_age6 = $result_age['age6'];

      // general female ages
      $pre_agef = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f'
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.gender = 'f' AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agef = array(':church_id' => $church_id);
      $pre_agef->execute($values_agef);
      $result_agef = $pre_agef->fetch();

      $total_agef1 = $result_agef['age1'];
      $total_agef2 = $result_agef['age2'];
      $total_agef3 = $result_agef['age3'];
      $total_agef4 = $result_agef['age4'];
      $total_agef5 = $result_agef['age5'];
      $total_agef6 = $result_agef['age6'];

      // general male ages
      $pre_agem = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm'
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.gender = 'm' AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agem = array(':church_id' => $church_id);
      $pre_agem->execute($values_agem);
      $result_agem = $pre_agem->fetch();

      $total_agem1 = $result_agem['age1'];
      $total_agem2 = $result_agem['age2'];
      $total_agem3 = $result_agem['age3'];
      $total_agem4 = $result_agem['age4'];
      $total_agem5 = $result_agem['age5'];
      $total_agem6 = $result_agem['age6'];


      // cell_member ages
      $pre_agec = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role != 1 AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agec = array(':church_id' => $church_id);
      $pre_agec->execute($values_agec);
      $result_agec = $pre_agec->fetch();

      $total_agec1 = $result_agec['age1'];
      $total_agec2 = $result_agec['age2'];
      $total_agec3 = $result_agec['age3'];
      $total_agec4 = $result_agec['age4'];
      $total_agec5 = $result_agec['age5'];
      $total_agec6 = $result_agec['age6'];

      // cell_member female ages
      $pre_age_memberf = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f'
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberf = array(':church_id' => $church_id);
      $pre_age_memberf->execute($values_memberf);
      $result_memberf = $pre_age_memberf->fetch();

      $total_memberf1 = $result_memberf['age1'];
      $total_memberf2 = $result_memberf['age2'];
      $total_memberf3 = $result_memberf['age3'];
      $total_memberf4 = $result_memberf['age4'];
      $total_memberf5 = $result_memberf['age5'];
      $total_memberf6 = $result_memberf['age6'];

      // cell_member male ages
      $pre_age_memberm = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm'
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberm = array(':church_id' => $church_id);
      $pre_age_memberm->execute($values_memberm);
      $result_memberm = $pre_age_memberm->fetch();

      $total_memberm1 = $result_memberm['age1'];
      $total_memberm2 = $result_memberm['age2'];
      $total_memberm3 = $result_memberm['age3'];
      $total_memberm4 = $result_memberm['age4'];
      $total_memberm5 = $result_memberm['age5'];
      $total_memberm6 = $result_memberm['age6'];

      // guests ages
      $pre_ageg = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role = 1 AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_ageg = array(':church_id' => $church_id);
      $pre_ageg->execute($values_ageg);
      $result_ageg = $pre_ageg->fetch();

      $total_ageg1 = $result_ageg['age1'];
      $total_ageg2 = $result_ageg['age2'];
      $total_ageg3 = $result_ageg['age3'];
      $total_ageg4 = $result_ageg['age4'];
      $total_ageg5 = $result_ageg['age5'];
      $total_ageg6 = $result_ageg['age6'];

      // guests female ages
      $pre_age_guestf = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f'
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestf = array(':church_id' => $church_id);
      $pre_age_guestf->execute($values_guestf);
      $result_guestf = $pre_age_guestf->fetch();

      $total_guestf1 = $result_guestf['age1'];
      $total_guestf2 = $result_guestf['age2'];
      $total_guestf3 = $result_guestf['age3'];
      $total_guestf4 = $result_guestf['age4'];
      $total_guestf5 = $result_guestf['age5'];
      $total_guestf6 = $result_guestf['age6'];

      // guests male ages
      $pre_age_guestm = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm'
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
      	  AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
      	  AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
      	  AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' AND reports_details.cell_group = '1' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestm = array(':church_id' => $church_id);
      $pre_age_guestm->execute($values_guestm);
      $result_guestm = $pre_age_guestm->fetch();

      $total_guestm1 = $result_guestm['age1'];
      $total_guestm2 = $result_guestm['age2'];
      $total_guestm3 = $result_guestm['age3'];
      $total_guestm4 = $result_guestm['age4'];
      $total_guestm5 = $result_guestm['age5'];
      $total_guestm6 = $result_guestm['age6'];


      /********************** Top Cities ************************/

      $result_cities = null;
      $result_cities2 = null;

      // Actual quarter
      $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

      foreach ($con->query($sql) as $row) {
        $row['ranking'] = '1';
        $result_cities[] = $row;
      }

      // Last quarter
      $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
      	$period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
      }

      $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND reports_details.cell_group = '1' $period_filter4 $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

      foreach ($con->query($sql2) as $row2) {
        $result_cities2[] = $row2;
      }

      /*Obtain final ranking*/
      if ($result_cities != null && $result_cities2 != null) {

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        } 
        array_multisort($aux, SORT_DESC, $result_cities);

        // order array top cities actual
        foreach ($result_cities2 as $key2 => $frow2) {
            $aux2[$key2] = $frow2['crowd'];
        }
        array_multisort($aux2, SORT_DESC, $result_cities2);

	      for($i=0; $i<count($result_cities); $i++){
	          for($j=0; $j<count($result_cities2); $j++){
	              if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

	                  if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
	                    $ranking = '1';
	                    $result_cities[$i]['ranking'] = '1';
	                  }else{
	                    $ranking = '0';
	                    $result_cities[$i]['ranking'] = '0';
	                  }

	              }
	          }
	      }

	   } else if($result_cities != null){

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        
        array_multisort($aux, SORT_DESC, $result_cities);

     }


      /************** Overall Growth Actual *****************/

      /*Total cell groups general*/

      $pre_gen_cell = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id $filter_graph_top", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gen_cell = array(':church_id' => $church_id);
      $pre_gen_cell->execute($values_gen_cell);
      $result_gen_cell = $pre_gen_cell->fetch();

      $total_gen = $result_gen_cell['total_cells'];

      $period_filter3 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
      }

      // obtain overall multiply global
      $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top,$period_filter3);

      $total_gen = $overall_mult['total_gen'];
      $w_percentage = $overall_mult['w_percentage'];
      $goal_f = $overall_mult['goal_f'];
      $overall_multiply = $overall_mult['overall_multiply'];

      // obtain cell_attendance global
      $overall_att = cellGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

      $period_filter5 = $overall_att['period_filter5'];
      $w_percentagekd = $overall_att['w_percentagekd'];
      $w_percentagead = $overall_att['w_percentagead'];
      $goal_f2 = $overall_att['goal_f2'];
      $goal_f3 = $overall_att['goal_f3'];
      $overall_attend = $overall_att['overall_attend'];



      /*********************************** OVERALL PAST ******************************************/

      // obtain overall multiply global

      $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

      $past_i = $overall_mult2['past_i'];
      $past_f = $overall_mult2['past_f'];
      

      // obtain cell_attendance global
      $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

      $period_filter7 = $overall_att2['period_filter7'];
      $period_filter_n2 = $overall_att2['period_filter_n2'];
      $overall_attend2 = $overall_att2['overall_attend2'];


      /**** OBTAIN PERCENTAGE FINAL (OVERALL GROWTH) *****/
      if ($overall_attend == 0 && $overall_attend2 == 0) {
        $percentage_overall = 0;
	  } else if ($overall_attend2 == 0) {
        $percentage_overall = 100;
      } else{
        $percentage_overall = ($overall_attend - $overall_attend2) * 100 / $overall_attend2;
      }


      /***** final response *****/
      $final_res = array(
        "crowd_attendance" => $crowd,
        "member_attendance" => $total_mem,
        "guests_attendance" => $total_gu,
        "kids_attendance" => $total_k,
        "vs" => array(
          "members_att" => $total_mem,
          "guest_att" => $total_gu,
          "members_percetage" => (string)round($percentage_me),
          "guest_percetage" => (string)round($percentage_guest),
          "members" => $members_f,
          "guests" => $guest_f,
          "dates" => $dates
        ),
        "kids_cell_attendance" => array(
          "total_kids" => $total_k,
          "kids_today" => $total_to,
          "period" => $cells_f,
          "dates" => $dates
        ),
        "attendance_gender" => array(
          "female" => $members_fe,
          "male" => $members_ma,
          "cell_members" => array(
            "female" => $members_fe2,
            "male" => $members_ma2
          ),
          "guests" => array(
            "female" => $members_fe3,
            "male" => $members_ma3
          )
        ),
        "age_ranges" => array(
          "first" => $total_age1,
          "second" => $total_age2,
          "third" => $total_age3,
          "fourth" => $total_age4,
          "fifth" => $total_age5,
          "sixth" => $total_age6,
          "female" => array(
            "first" => $total_agef1,
            "second" => $total_agef2,
            "third" => $total_agef3,
            "fourth" => $total_agef4,
            "fifth" => $total_agef5,
            "sixth" => $total_agef6
          ),
          "male" => array(
            "first" => $total_agem1,
            "second" => $total_agem2,
            "third" => $total_agem3,
            "fourth" => $total_agem4,
            "fifth" => $total_agem5,
            "sixth" => $total_agem6
          ),
          "cell_members" => array(
            "first" => $total_agec1,
            "second" => $total_agec2,
            "third" => $total_agec3,
            "fourth" => $total_agec4,
            "fifth" => $total_agec5,
            "sixth" => $total_agec6,
            "female" => array(
              "first" => $total_memberf1,
              "second" => $total_memberf2,
              "third" => $total_memberf3,
              "fourth" => $total_memberf4,
              "fifth" => $total_memberf5,
              "sixth" => $total_memberf6
            ),
            "male" => array(
              "first" => $total_memberm1,
              "second" => $total_memberm2,
              "third" => $total_memberm3,
              "fourth" => $total_memberm4,
              "fifth" => $total_memberm5,
              "sixth" => $total_memberm6
            )
          ),
          "guests" => array(
            "first" => $total_ageg1,
            "second" => $total_ageg2,
            "third" => $total_ageg3,
            "fourth" => $total_ageg4,
            "fifth" => $total_ageg5,
            "sixth" => $total_ageg6,
            "female" => array(
              "first" => $total_guestf1,
              "second" => $total_guestf2,
              "third" => $total_guestf3,
              "fourth" => $total_guestf4,
              "fifth" => $total_guestf5,
              "sixth" => $total_guestf6
            ),
            "male" => array(
              "first" => $total_guestm1,
              "second" => $total_guestm2,
              "third" => $total_guestm3,
              "fourth" => $total_guestm4,
              "fifth" => $total_guestm5,
              "sixth" => $total_guestm6
            )
          )
        ),
        "top_cities" => $result_cities,
        "points_overall" => (string)$overall_attend,
        "percentage_overall" => (string)round($percentage_overall)
      );


      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => $final_res));




  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


// Statistics church attendance
$app->post('/statistics/church-attendance', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      /************** If filter has not been selected, per quarter ******************/

      /*actual date*/
      $today = date("Y-m-d");
      $month = date('5');
      $month_t = date('05');
      $year = date ("Y");

      $prev_y = $year -1;


      /*function general dates*/
      $general_d = generalDates($month, $year, $prev_y);

      $initial_quarter = $general_d['initial_quarter'];
      $final_quarter = $general_d['final_quarter'];
      $initial_quarter2 = $general_d['initial_quarter2'];
      $final_quarter2 = $general_d['final_quarter2'];
      $start_date_lg = $general_d['start_date_lg'];
      $end_date_lg = $general_d['end_date_lg'];
      $start_date = $general_d['start_date'];
      $end_date = $general_d['end_date'];
      $start_date2 = $general_d['start_date2'];
      $end_date2 = $general_d['end_date2'];

      /*Note: If exist date filter, validate*/
      if ($initial_date && $final_date && empty($is_mobile)) {
        $initial_quarter = $initial_date . " 00:00:00";
        $final_quarter = $final_date . " 23:59:59";

      }else if ($initial_date && $is_mobile) {
      	$initial_quarter = $initial_date . " 00:00:00";
      	$add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      	$sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      	$final_quarter = $sub_m . " 23:59:59";
      }

      /*validate parent_id*/
      if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

        if(empty($parent_id)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Missing parameter: parent_id",
                    "status"=>500)));
        }
      }


      if ($role_id == '2') {
        $pre_dis = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        if(empty($result_dis)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '3') {
        $pre_dis = $con->prepare("SELECT id as zone_i 
                                 FROM groups_zones
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $zone = $result_dis['zone_i'];

        if(empty($zone)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '4') {
        $pre_dis = $con->prepare("SELECT id as sector_i 
                                 FROM groups_sectors
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $sec = $result_dis['sector_i'];

        if(empty($sec)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '5') {
        $pre_dis = $con->prepare("SELECT id as cell_i 
                                 FROM groups_cells
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $cell = $result_dis['cell_i'];

        if(empty($cell)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      }


      /*General filters*/
      $filter_p = '';
      $filter_crowd = '';
      $filter_graph_top = '';


      /*senior pastor*/
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
        
        /*verify empty filter members*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;
          
        }

      /*district pastor*/
      } else if ($role_id == '2') {

        /*verify empty filter members*/
        if (empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }


        }

        /*zone pastor*/
      } else if ($role_id == '3') {

        /*verify empty filter members*/
        if (empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }

        }

      /*supervisor*/
      } else if ($role_id == '4') {

        /*verify empty filter members*/
        if (empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }

      /*leader*/
      } else if ($role_id == '5') {

        $filter_p = "= '$parent_id'";

        $filter_crowd = "AND reports.cell_id " . $filter_p;
        $filter_graph_top = "AND groups_cells.id " . $filter_p;

      }

      /*Obtain crowd attendance (total doctrine/ total salvation)*/
      $pre_cro = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cro = array(':church_id' => $church_id);
      $pre_cro->execute($values_cro);
      $result_cro = $pre_cro->fetch();

      $crowd = $result_cro['crowd'];

      if ($crowd == null) {
        $crowd = '0';
      }

      /*Obtain member attendance*/
      $pre_mem = $con->prepare("SELECT count(reports_details.id) as member_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.role != 1 AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_mem = array(':church_id' => $church_id);
      $pre_mem->execute($values_mem);
      $result_mem = $pre_mem->fetch();

      $total_mem = $result_mem['member_att'];

      if ($total_mem == null) {
        $total_mem = '0';
      }

      /*Obtain guests attendance*/
      $pre_gu = $con->prepare("SELECT count(reports_details.id) as guest_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.role = 1 AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gu = array(':church_id' => $church_id);
      $pre_gu->execute($values_gu);
      $result_gu = $pre_gu->fetch();

      $total_gu = $result_gu['guest_att'];

      if ($total_gu == null) {
        $total_gu = '0';
      }

       /*Obtain kids attendance*/
      $pre_k = $con->prepare("SELECT count(reports_details.id) as kids_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 12 AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_k = array(':church_id' => $church_id);
      $pre_k->execute($values_k);
      $result_k = $pre_k->fetch();

      $total_k = $result_k['kids_att'];

      if ($total_k == null) {
        $total_k = '0';
      }


      /****** Cell Members vs Guests ******/

      // Percentage for members

      // previous period

      $period_i = '';
      $period_f = '';
      $sub_i = '';
      $sub_p = '';

      if ($initial_date && $final_date && empty($is_mobile)) {
       /*count the days between two dates*/
	 	   $date1 = date_create($initial_date);
	  	 $date2 = date_create($final_date);

	  	 //difference between two dates
	  	 $diff = date_diff($date1,$date2)->format("%a");

	  	 $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
	 	   $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
	 	   $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
	 	   $period_f = $sub_p . " 23:59:59";

  	 	 $initial_quarter2 = $period_i;
  	 	 $final_quarter2 = $period_f;
        
      }else if ($initial_date && $is_mobile) {
      	/*count the days between two dates*/
  	 	  $date1 = date_create($initial_date);
  	  	$date2 = date_create($sub_m);

  	  	//difference between two dates
  	  	$diff = date_diff($date1,$date2)->format("%a");

  	  	$sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
    	 	$period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
    	 	$sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
    	 	$period_f = $sub_p . " 23:59:59";

      	$initial_quarter2 = $period_i;
      	$final_quarter2 = $period_f;
      }

      $pre_per = $con->prepare("SELECT count(reports_details.id) as member_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.role != 1 AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per = array(':church_id' => $church_id);
      $pre_per->execute($values_per);
      $result_per = $pre_per->fetch();

      $total_per = $result_per['member_att'];

      if ($total_mem == 0 && $total_per == 0) {
        $percentage_me = 0;
      } else if ($total_per == 0) {
        $percentage_me = 100;
      } else{
        $percentage_me = ($total_mem - $total_per) * 100 / $total_per;
      }

      // Percentage for guest

      // previous quarter
      $pre_per2 = $con->prepare("SELECT count(reports_details.id) as guest_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.role = 1 AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per2 = array(':church_id' => $church_id);
      $pre_per2->execute($values_per2);
      $result_per2 = $pre_per2->fetch();

      $total_per2 = $result_per2['guest_att'];

      if ($total_gu == 0 && $total_per2 == 0) {
        $percentage_guest = 0;
      } else if ($total_per2 == 0) {
        $percentage_guest = 100;
      } else{
        $percentage_guest = ($total_gu - $total_per2) * 100 / $total_per2;
      }


      /********* Graphic vs *********/

      $dates = null;
      $members_f = null;
      $guest_f = null;
      $cells_f = null;
      $members_fe = null;
      $members_ma = null;
      $members_ma2 = null;
      $members_ma3 = null;


       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {

      	$start_date = new DateTime($initial_date);
      	$end_date = new DateTime($final_date);
        
      }else if ($initial_date && $is_mobile) {
      	$start_date = new DateTime($initial_date);
      	$end_date = new DateTime($sub_m);
      }

      /*initial for (days)*/
      for($i = $start_date; $i <= $end_date; $i->modify('+1 day')){

        $dates[] = $i->format("Y-m-d");

        $date_val = $i->format("Y-m-d");

        /*members*/
        $pre_first = $con->prepare("SELECT count(reports_details.id) as member_att, (SELECT count(reports_details.id) as guests_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.role = 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd) as guests_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.role != 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_first = array(':church_id' => $church_id);
        $pre_first->execute($values_first);
        $result_first = $pre_first->fetch();

        $total_first = $result_first['member_att'];

        if ($total_first == null) {
        	$total_first = '0';
        }

        $members_f[] = $total_first;

        /*guest*/
        $total_sec = $result_first['guests_att'];

        if ($total_sec == null) {
        	$total_sec = '0';
        }

        $guest_f[] = $total_sec;


        /*kids church attendance*/
        $pre_all = $con->prepare("SELECT count(reports_details.id) as kids_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 12 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_all = array(':church_id' => $church_id);
        $pre_all->execute($values_all);
        $result_all = $pre_all->fetch();

        $total_all = $result_all['kids_att'];

        if ($total_all == null) {
        	$total_all = '0';
        }

        $cells_f[] = $total_all;


        /***** Church Attendance by gender *****/

        /*female all*/
        $pre_fe = $con->prepare("SELECT count(reports_details.id) as female, (SELECT count(reports_details.id) as male FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd) as male FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe = array(':church_id' => $church_id);
        $pre_fe->execute($values_fe);
        $result_fe = $pre_fe->fetch();

        $total_fe = $result_fe['female'];

        $members_fe[] = $total_fe;

        /*male all*/
        $total_male = $result_fe['male'];
        $members_ma[] = $total_male;


        /*female cell_members*/
        $pre_fe2 = $con->prepare("SELECT count(reports_details.id) as female_c, (SELECT count(reports_details.id) as male_c FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND members_cells.role != 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd) as male_c FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND members_cells.role != 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe2 = array(':church_id' => $church_id);
        $pre_fe2->execute($values_fe2);
        $result_fe2 = $pre_fe2->fetch();

        $total_fe2 = $result_fe2['female_c'];

        $members_fe2[] = $total_fe2;

        /*male cell_member*/
        $total_male2 = $result_fe2['male_c'];
        $members_ma2[] = $total_male2;


        /*female guests*/
        $pre_fe3 = $con->prepare("SELECT count(reports_details.id) as female_g, (SELECT count(reports_details.id) as male_g FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND members_cells.role = 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd) as male_g FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND members_cells.role = 1 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe3 = array(':church_id' => $church_id);
        $pre_fe3->execute($values_fe3);
        $result_fe3 = $pre_fe3->fetch();

        $total_fe3 = $result_fe3['female_g'];

        $members_fe3[] = $total_fe3;

        /*male guests*/
        $total_male3 = $result_fe3['male_g'];
        $members_ma3[] = $total_male3;

      }


      /******* graphic kids church attendance ********/

      /*Kids today*/
      $pre_today = $con->prepare("SELECT count(reports_details.id) as kids_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 12 AND (reports_details.created_at LIKE '%$today%') AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_today = array(':church_id' => $church_id);
      $pre_today->execute($values_today);
      $result_today = $pre_today->fetch();

      $total_to = $result_today['kids_att'];

      if ($total_to == null) {
      	$total_to = '0';
      }

      /********** Age ranges **********/

      // general ages
      $pre_age = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
      	  (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
      	  (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
      	  (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
      	  AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
      	  (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
      	  AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_age = array(':church_id' => $church_id);
      $pre_age->execute($values_age);
      $result_age = $pre_age->fetch();

      $total_age1 = $result_age['age1'];
      $total_age2 = $result_age['age2'];
      $total_age3 = $result_age['age3'];
      $total_age4 = $result_age['age4'];
      $total_age5 = $result_age['age5'];
      $total_age6 = $result_age['age6'];

      // general female ages
      $pre_agef = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agef = array(':church_id' => $church_id);
      $pre_agef->execute($values_agef);
      $result_agef = $pre_agef->fetch();

      $total_agef1 = $result_agef['age1'];
      $total_agef2 = $result_agef['age2'];
      $total_agef3 = $result_agef['age3'];
      $total_agef4 = $result_agef['age4'];
      $total_agef5 = $result_agef['age5'];
      $total_agef6 = $result_agef['age6'];

      // general male ages
      $pre_agem = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agem = array(':church_id' => $church_id);
      $pre_agem->execute($values_agem);
      $result_agem = $pre_agem->fetch();

      $total_agem1 = $result_agem['age1'];
      $total_agem2 = $result_agem['age2'];
      $total_agem3 = $result_agem['age3'];
      $total_agem4 = $result_agem['age4'];
      $total_agem5 = $result_agem['age5'];
      $total_agem6 = $result_agem['age6'];


      // cell_member ages
      $pre_agec = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agec = array(':church_id' => $church_id);
      $pre_agec->execute($values_agec);
      $result_agec = $pre_agec->fetch();

      $total_agec1 = $result_agec['age1'];
      $total_agec2 = $result_agec['age2'];
      $total_agec3 = $result_agec['age3'];
      $total_agec4 = $result_agec['age4'];
      $total_agec5 = $result_agec['age5'];
      $total_agec6 = $result_agec['age6'];

      // cell_member female ages
      $pre_age_memberf = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberf = array(':church_id' => $church_id);
      $pre_age_memberf->execute($values_memberf);
      $result_memberf = $pre_age_memberf->fetch();

      $total_memberf1 = $result_memberf['age1'];
      $total_memberf2 = $result_memberf['age2'];
      $total_memberf3 = $result_memberf['age3'];
      $total_memberf4 = $result_memberf['age4'];
      $total_memberf5 = $result_memberf['age5'];
      $total_memberf6 = $result_memberf['age6'];

      // cell_member male ages
      $pre_age_memberm = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberm = array(':church_id' => $church_id);
      $pre_age_memberm->execute($values_memberm);
      $result_memberm = $pre_age_memberm->fetch();

      $total_memberm1 = $result_memberm['age1'];
      $total_memberm2 = $result_memberm['age2'];
      $total_memberm3 = $result_memberm['age3'];
      $total_memberm4 = $result_memberm['age4'];
      $total_memberm5 = $result_memberm['age5'];
      $total_memberm6 = $result_memberm['age6'];

      // guests ages
      $pre_ageg = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_ageg = array(':church_id' => $church_id);
      $pre_ageg->execute($values_ageg);
      $result_ageg = $pre_ageg->fetch();

      $total_ageg1 = $result_ageg['age1'];
      $total_ageg2 = $result_ageg['age2'];
      $total_ageg3 = $result_ageg['age3'];
      $total_ageg4 = $result_ageg['age4'];
      $total_ageg5 = $result_ageg['age5'];
      $total_ageg6 = $result_ageg['age6'];

      // guests female ages
      $pre_age_guestf = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestf = array(':church_id' => $church_id);
      $pre_age_guestf->execute($values_guestf);
      $result_guestf = $pre_age_guestf->fetch();

      $total_guestf1 = $result_guestf['age1'];
      $total_guestf2 = $result_guestf['age2'];
      $total_guestf3 = $result_guestf['age3'];
      $total_guestf4 = $result_guestf['age4'];
      $total_guestf5 = $result_guestf['age5'];
      $total_guestf6 = $result_guestf['age6'];

      // guests male ages
      $pre_age_guestm = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1)
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports,groups_cells,reports_details, members_cells 
          WHERE reports.id = reports_details.report_id 
          AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestm = array(':church_id' => $church_id);
      $pre_age_guestm->execute($values_guestm);
      $result_guestm = $pre_age_guestm->fetch();

      $total_guestm1 = $result_guestm['age1'];
      $total_guestm2 = $result_guestm['age2'];
      $total_guestm3 = $result_guestm['age3'];
      $total_guestm4 = $result_guestm['age4'];
      $total_guestm5 = $result_guestm['age5'];
      $total_guestm6 = $result_guestm['age6'];


      /********************** Top Cities ************************/

      $result_cities = null;
      $result_cities2 = null;

      // Actual quarter
      $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

      foreach ($con->query($sql) as $row) {
        $row['ranking'] = '1';
        $result_cities[] = $row;
      }

      // Last quarter
      $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
      	$period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
      }

      $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND (reports_details.doctrine = 1 OR reports_details.celebration = 1) $period_filter4 $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

      foreach ($con->query($sql2) as $row2) {
        $result_cities2[] = $row2;
      }

      /*Obtain final ranking*/
      if ($result_cities != null && $result_cities2 != null) {

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        array_multisort($aux, SORT_DESC, $result_cities);

        // order array top cities last
        foreach ($result_cities2 as $key2 => $frow2) {
            $aux2[$key2] = $frow2['crowd'];
        }
        array_multisort($aux2, SORT_DESC, $result_cities2);

	      for($i=0; $i<count($result_cities); $i++){
	          for($j=0; $j<count($result_cities2); $j++){
	              if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

	                  if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
	                    $ranking = '1';
	                    $result_cities[$i]['ranking'] = '1';
	                  }else{
	                    $ranking = '0';
	                    $result_cities[$i]['ranking'] = '0';
	                  }

	              }
	          }
	      }

	   } else if($result_cities != null){

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        
        array_multisort($aux, SORT_DESC, $result_cities);

     }


      /************** Church Attendance Growth Actual *****************/

      /*Total cell groups general*/

      $pre_gen_cell = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id $filter_graph_top", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gen_cell = array(':church_id' => $church_id);
      $pre_gen_cell->execute($values_gen_cell);
      $result_gen_cell = $pre_gen_cell->fetch();

      $total_gen = $result_gen_cell['total_cells'];


      $period_filter3 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

      // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
      }

      // obtain overall multiply global
      $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top,$period_filter3);

      $w_percentage = $overall_mult['w_percentage'];
      $goal_f = $overall_mult['goal_f'];

      // obtain cell_attendance global
      $overall_att = cellGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

      $period_filter5 = $overall_att['period_filter5'];
      $w_percentagekd = $overall_att['w_percentagekd'];
      $w_percentagead = $overall_att['w_percentagead'];
      $goal_f2 = $overall_att['goal_f2'];
      $goal_f3 = $overall_att['goal_f3'];

      // obtain church_attendance global
      $overall_ch = churchGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$period_filter5,$total_gen);

      $w_percentagech = $overall_ch['w_percentagech'];
      $goal_f4 = $overall_ch['goal_f4'];
      $overall_church = $overall_ch['overall_church'];



      /*********************************** OVERALL PAST ******************************************/

      // obtain overall multiply global

      $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

      $past_i = $overall_mult2['past_i'];
      $past_f = $overall_mult2['past_f'];

      // obtain cell_attendance global
      $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

      $period_filter7 = $overall_att2['period_filter7'];
      $period_filter_n2 = $overall_att2['period_filter_n2'];

      // obtain church_attendance global
      $overall_church2 = churchGeneral2($con,$church_id,$filter_crowd,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4);


      /**** OBTAIN PERCENTAGE FINAL (OVERALL GROWTH) *****/
      if ($overall_church == 0 && $overall_church2 == 0) {
        $percentage_overall = 0;
      }
      else if ($overall_church2 == 0) {
        $percentage_overall = 100;
      } else{
        $percentage_overall = ($overall_church - $overall_church2) * 100 / $overall_church2;
      }


      /***** final response *****/
      $final_res = array(
        "crowd_attendance" => $crowd,
        "member_attendance" => $total_mem,
        "guests_attendance" => $total_gu,
        "kids_attendance" => $total_k,
        "vs" => array(
          "members_att" => $total_mem,
          "guest_att" => $total_gu,
          "members_percetage" => (string)round($percentage_me),
          "guest_percetage" => (string)round($percentage_guest),
          "members" => $members_f,
          "guests" => $guest_f,
          "dates" => $dates
        ),
        "kids_cell_attendance" => array(
          "total_kids" => $total_k,
          "kids_today" => $total_to,
          "period" => $cells_f,
          "dates" => $dates
        ),
        "attendance_gender" => array(
          "female" => $members_fe,
          "male" => $members_ma,
          "cell_members" => array(
            "female" => $members_fe2,
            "male" => $members_ma2
          ),
          "guests" => array(
            "female" => $members_fe3,
            "male" => $members_ma3
          )
        ),
        "age_ranges" => array(
          "first" => $total_age1,
          "second" => $total_age2,
          "third" => $total_age3,
          "fourth" => $total_age4,
          "fifth" => $total_age5,
          "sixth" => $total_age6,
          "female" => array(
            "first" => $total_agef1,
            "second" => $total_agef2,
            "third" => $total_agef3,
            "fourth" => $total_agef4,
            "fifth" => $total_agef5,
            "sixth" => $total_agef6
          ),
          "male" => array(
            "first" => $total_agem1,
            "second" => $total_agem2,
            "third" => $total_agem3,
            "fourth" => $total_agem4,
            "fifth" => $total_agem5,
            "sixth" => $total_agem6
          ),
          "cell_members" => array(
            "first" => $total_agec1,
            "second" => $total_agec2,
            "third" => $total_agec3,
            "fourth" => $total_agec4,
            "fifth" => $total_agec5,
            "sixth" => $total_agec6,
            "female" => array(
              "first" => $total_memberf1,
              "second" => $total_memberf2,
              "third" => $total_memberf3,
              "fourth" => $total_memberf4,
              "fifth" => $total_memberf5,
              "sixth" => $total_memberf6
            ),
            "male" => array(
              "first" => $total_memberm1,
              "second" => $total_memberm2,
              "third" => $total_memberm3,
              "fourth" => $total_memberm4,
              "fifth" => $total_memberm5,
              "sixth" => $total_memberm6
            )
          ),
          "guests" => array(
            "first" => $total_ageg1,
            "second" => $total_ageg2,
            "third" => $total_ageg3,
            "fourth" => $total_ageg4,
            "fifth" => $total_ageg5,
            "sixth" => $total_ageg6,
            "female" => array(
              "first" => $total_guestf1,
              "second" => $total_guestf2,
              "third" => $total_guestf3,
              "fourth" => $total_guestf4,
              "fifth" => $total_guestf5,
              "sixth" => $total_guestf6
            ),
            "male" => array(
              "first" => $total_guestm1,
              "second" => $total_guestm2,
              "third" => $total_guestm3,
              "fourth" => $total_guestm4,
              "fifth" => $total_guestm5,
              "sixth" => $total_guestm6
            )
          )
        ),
        "top_cities" => $result_cities,
        "points_overall" => (string)$overall_church,
        "percentage_overall" => (string)round($percentage_overall)
      );


      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => $final_res));




  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


// Statistics perfomance
$app->post('/statistics/perfomance', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      /************** If filter has not been selected, per quarter ******************/

      /*actual date*/
      $today = date("Y-m-d");
      $month = date('5');
      $month_t = date('05');
      $year = date ("Y");

      $prev_y = $year -1;

      /*function general dates*/
      $general_d = generalDates($month, $year, $prev_y);

      $initial_quarter = $general_d['initial_quarter'];
      $final_quarter = $general_d['final_quarter'];
      $initial_quarter2 = $general_d['initial_quarter2'];
      $final_quarter2 = $general_d['final_quarter2'];
      $start_date_lg = $general_d['start_date_lg'];
      $end_date_lg = $general_d['end_date_lg'];
      $start_date = $general_d['start_date'];
      $end_date = $general_d['end_date'];
      $start_date2 = $general_d['start_date2'];
      $end_date2 = $general_d['end_date2'];


      /*Note: If exist date filter, validate*/
      if ($initial_date && $final_date && empty($is_mobile)) {
        $initial_quarter = $initial_date . " 00:00:00";
        $final_quarter = $final_date . " 23:59:59";

      }else if ($initial_date && $is_mobile) {
        $initial_quarter = $initial_date . " 00:00:00";
        $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
        $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
        $final_quarter = $sub_m . " 23:59:59";
      }

      /*validate parent_id*/
      if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

        if(empty($parent_id)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Missing parameter: parent_id",
                    "status"=>500)));
        }
      }


      if ($role_id == '2') {
        $pre_dis = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        if(empty($result_dis)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '3') {
        $pre_dis = $con->prepare("SELECT id as zone_i 
                                 FROM groups_zones
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $zone = $result_dis['zone_i'];

        if(empty($zone)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '4') {
        $pre_dis = $con->prepare("SELECT id as sector_i 
                                 FROM groups_sectors
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $sec = $result_dis['sector_i'];

        if(empty($sec)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '5') {
        $pre_dis = $con->prepare("SELECT id as cell_i 
                                 FROM groups_cells
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $cell = $result_dis['cell_i'];

        if(empty($cell)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      }


      /*General filters*/
      $filter_p = '';
      $filter_crowd = '';
      $filter_graph_top = '';


      /*senior pastor*/
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
        
        /*verify empty filter members*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;
          
        }

      /*district pastor*/
      } else if ($role_id == '2') {

        /*verify empty filter members*/
        if (empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }


        }

        /*zone pastor*/
      } else if ($role_id == '3') {

        /*verify empty filter members*/
        if (empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }

        }

      /*supervisor*/
      } else if ($role_id == '4') {

        /*verify empty filter members*/
        if (empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }

      /*leader*/
      } else if ($role_id == '5') {

        $filter_p = "= '$parent_id'";

        $filter_crowd = "AND reports.cell_id " . $filter_p;
        $filter_graph_top = "AND groups_cells.id " . $filter_p;

      }


      /*Obtain crowd attendance (total_salvation/ total_baptized/ total_schedule_visits)*/
      $pre_cro = $con->prepare("SELECT SUM(total_salvation + total_baptized + total_schedule_visits) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cro = array(':church_id' => $church_id);
      $pre_cro->execute($values_cro);
      $result_cro = $pre_cro->fetch();

      $crowd = $result_cro['crowd'];

      if ($crowd == null) {
        $crowd = '0';
      }

      /*Obtain salvations*/
      $pre_mem = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_mem = array(':church_id' => $church_id);
      $pre_mem->execute($values_mem);
      $result_mem = $pre_mem->fetch();

      $total_mem = $result_mem['total_salvation'];

      if ($total_mem == null) {
        $total_mem = '0';
      }

      /*Obtain baptized*/
      $pre_gu = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gu = array(':church_id' => $church_id);
      $pre_gu->execute($values_gu);
      $result_gu = $pre_gu->fetch();

      $total_gu = $result_gu['total_baptized'];

      if ($total_gu == null) {
        $total_gu = '0';
      }

       /*Obtain schedule visits*/
      $pre_k = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_k = array(':church_id' => $church_id);
      $pre_k->execute($values_k);
      $result_k = $pre_k->fetch();

      $total_k = $result_k['total_schedule_visits'];

      if ($total_k == null) {
        $total_k = '0';
      }


      /****** Salvation vs Baptized vs Visits ******/

      // Percentage for salvations

      // previous period

      $period_i = '';
      $period_f = '';
      $sub_i = '';
      $sub_p = '';

      if ($initial_date && $final_date && empty($is_mobile)) {
        /*count the days between two dates*/
        $date1 = date_create($initial_date);
        $date2 = date_create($final_date);

        //difference between two dates
        $diff = date_diff($date1,$date2)->format("%a");

        $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
        $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
        $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
        $period_f = $sub_p . " 23:59:59";

        $initial_quarter2 = $period_i;
        $final_quarter2 = $period_f;
        
      }else if ($initial_date && $is_mobile) {
        /*count the days between two dates*/
        $date1 = date_create($initial_date);
        $date2 = date_create($sub_m);

        //difference between two dates
        $diff = date_diff($date1,$date2)->format("%a");

        $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
        $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
        $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
        $period_f = $sub_p . " 23:59:59";

        $initial_quarter2 = $period_i;
        $final_quarter2 = $period_f;
      }

      $pre_per = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per = array(':church_id' => $church_id);
      $pre_per->execute($values_per);
      $result_per = $pre_per->fetch();

      $total_per = $result_per['total_salvation'];

      if ($total_per == null) {
        $total_per = '0';
      }

      if ($total_mem == 0 && $total_per == 0) {
        $percentage_sv = 0;
      }else if ($total_per == 0) {
        $percentage_sv = 100;
      }else{
        $percentage_sv = ($total_mem - $total_per) * 100 / $total_per;
      }

      // Percentage for baptized

      // previous quarter
      $pre_per2 = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per2 = array(':church_id' => $church_id);
      $pre_per2->execute($values_per2);
      $result_per2 = $pre_per2->fetch();

      $total_per2 = $result_per2['total_baptized'];

      if ($total_per2 == null) {
        $total_per2 = '0';
      }

      if ($total_gu == 0 && $total_per2 == 0) {
        $percentage_bap = 0;
      } else if ($total_per2 == 0) {
        $percentage_bap = 100;
      } else{
        $percentage_bap = ($total_gu - $total_per2) * 100 / $total_per2;
      }


      // Percentage for visits

      // previous quarter
      $pre_per3 = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per3 = array(':church_id' => $church_id);
      $pre_per3->execute($values_per3);
      $result_per3 = $pre_per3->fetch();

      $total_per3 = $result_per3['total_schedule_visits'];

      if ($total_per3 == null) {
        $total_per3 = '0';
      }

      if ($total_gu == 0 && $total_per3 == 0) {
        $percentage_visits = 0;
      }
      if ($total_per3 == 0) {
        $percentage_visits = 100;
      } else{
        $percentage_visits = ($total_k - $total_per3) * 100 / $total_per3;
      }


      /********* Graphic vs *********/

      $dates = null;
      $salvation_f = null;
      $baptized_f = null;
      $visits_f = null;
      $cells_f = null;
      $members_fe = null;
      $members_ma = null;
      $members_ma2 = null;
      $members_ma3 = null;


       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {

        $start_date = new DateTime($initial_date);
        $end_date = new DateTime($final_date);
        
      }else if ($initial_date && $is_mobile) {
        $start_date = new DateTime($initial_date);
        $end_date = new DateTime($sub_m);
      }

      /*initial for (days)*/
      for($i = $start_date; $i <= $end_date; $i->modify('+1 day')){

        $dates[] = $i->format("Y-m-d");

        $date_val = $i->format("Y-m-d");

        /*salvation*/
        $pre_first = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd) as total_baptized, (SELECT SUM(total_schedule_visits) FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd) as total_visits FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_first = array(':church_id' => $church_id);
        $pre_first->execute($values_first);
        $result_first = $pre_first->fetch();

        $total_first = $result_first['total_salvation'];

        if ($total_first == null) {
          $total_first = '0';
        }

        $salvation_f[] = $total_first;

        /*baptized*/
        $total_sec = $result_first['total_baptized'];

        if ($total_sec == null) {
          $total_sec = '0';
        }

        $baptized_f[] = $total_sec;

        /*visits*/
        $total_third = $result_first['total_visits'];

        if ($total_third == null) {
          $total_third = '0';
        }

        $visits_f[] = $total_third;


        /*kids perfomance*/
        $pre_all = $con->prepare("SELECT count(reports_details.id) as kids_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 12 AND (reports_details.created_at LIKE '%$date_val%') AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_all = array(':church_id' => $church_id);
        $pre_all->execute($values_all);
        $result_all = $pre_all->fetch();

        $total_all = $result_all['kids_att'];

        if ($total_all == null) {
          $total_all = '0';
        }

        $cells_f[] = $total_all;


        /***** Perfomance by gender *****/

        /*female all*/
        $pre_fe = $con->prepare("SELECT count(reports_details.id) as female, (SELECT count(reports_details.id) as male FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND reports_details.created_at LIKE '%$date_val%' $filter_crowd) as male FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND reports_details.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe = array(':church_id' => $church_id);
        $pre_fe->execute($values_fe);
        $result_fe = $pre_fe->fetch();

        $total_fe = $result_fe['female'];

        $members_fe[] = $total_fe;

        /*male all*/
        $total_male = $result_fe['male'];
        $members_ma[] = $total_male;


        /*female cell_members*/
        $pre_fe2 = $con->prepare("SELECT count(reports_details.id) as female_c, (SELECT count(reports_details.id) as male_c FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND members_cells.role != 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND reports_details.created_at LIKE '%$date_val%' $filter_crowd) as male_c FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND members_cells.role != 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND reports_details.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe2 = array(':church_id' => $church_id);
        $pre_fe2->execute($values_fe2);
        $result_fe2 = $pre_fe2->fetch();

        $total_fe2 = $result_fe2['female_c'];

        $members_fe2[] = $total_fe2;

        /*male cell_member*/
        $total_male2 = $result_fe2['male_c'];
        $members_ma2[] = $total_male2;


        /*female guests*/
        $pre_fe3 = $con->prepare("SELECT count(reports_details.id) as female_g, (SELECT count(reports_details.id) as male_g FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'm' AND members_cells.active = 1 AND members_cells.role = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND reports_details.created_at LIKE '%$date_val%' $filter_crowd) as male_g FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND members_cells.gender = 'f' AND members_cells.active = 1 AND members_cells.role = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND reports_details.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_fe3 = array(':church_id' => $church_id);
        $pre_fe3->execute($values_fe3);
        $result_fe3 = $pre_fe3->fetch();

        $total_fe3 = $result_fe3['female_g'];

        $members_fe3[] = $total_fe3;

        /*male guests*/
        $total_male3 = $result_fe3['male_g'];
        $members_ma3[] = $total_male3;

      }


      /******* graphic kids perfomance ********/

       /*Obtain total kids perfomance*/
      $pre_totkid = $con->prepare("SELECT count(reports_details.id) as kids_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 12 AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_totkid = array(':church_id' => $church_id);
      $pre_totkid->execute($values_totkid);
      $result_totkid = $pre_totkid->fetch();

      $totkid = $result_totkid['kids_att'];

      /*kids today*/
      $pre_today = $con->prepare("SELECT count(reports_details.id) as kids_att FROM reports,groups_cells,reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports.cell_id = groups_cells.id AND reports_details.member_id = members_cells.id AND groups_cells.church_id = :church_id AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 12 AND (reports_details.created_at LIKE '%$today%') AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_today = array(':church_id' => $church_id);
      $pre_today->execute($values_today);
      $result_today = $pre_today->fetch();

      $total_to = $result_today['kids_att'];

      if ($total_to == null) {
        $total_to = '0';
      }

      /********** Age ranges **********/

      // general ages
      $pre_age = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1  AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_age = array(':church_id' => $church_id);
      $pre_age->execute($values_age);
      $result_age = $pre_age->fetch();

      $total_age1 = $result_age['age1'];
      $total_age2 = $result_age['age2'];
      $total_age3 = $result_age['age3'];
      $total_age4 = $result_age['age4'];
      $total_age5 = $result_age['age5'];
      $total_age6 = $result_age['age6'];

      // general female ages
      $pre_agef = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f'
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.gender = 'f' AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agef = array(':church_id' => $church_id);
      $pre_agef->execute($values_agef);
      $result_agef = $pre_agef->fetch();

      $total_agef1 = $result_agef['age1'];
      $total_agef2 = $result_agef['age2'];
      $total_agef3 = $result_agef['age3'];
      $total_agef4 = $result_agef['age4'];
      $total_agef5 = $result_agef['age5'];
      $total_agef6 = $result_agef['age6'];

      // general male ages
      $pre_agem = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm'
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.gender = 'm' AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agem = array(':church_id' => $church_id);
      $pre_agem->execute($values_agem);
      $result_agem = $pre_agem->fetch();

      $total_agem1 = $result_agem['age1'];
      $total_agem2 = $result_agem['age2'];
      $total_agem3 = $result_agem['age3'];
      $total_agem4 = $result_agem['age4'];
      $total_agem5 = $result_agem['age5'];
      $total_agem6 = $result_agem['age6'];


      // cell_member ages
      $pre_agec = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role != 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_agec = array(':church_id' => $church_id);
      $pre_agec->execute($values_agec);
      $result_agec = $pre_agec->fetch();

      $total_agec1 = $result_agec['age1'];
      $total_agec2 = $result_agec['age2'];
      $total_agec3 = $result_agec['age3'];
      $total_agec4 = $result_agec['age4'];
      $total_agec5 = $result_agec['age5'];
      $total_agec6 = $result_agec['age6'];

      // cell_member female ages
      $pre_age_memberf = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f'
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'f' AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberf = array(':church_id' => $church_id);
      $pre_age_memberf->execute($values_memberf);
      $result_memberf = $pre_age_memberf->fetch();

      $total_memberf1 = $result_memberf['age1'];
      $total_memberf2 = $result_memberf['age2'];
      $total_memberf3 = $result_memberf['age3'];
      $total_memberf4 = $result_memberf['age4'];
      $total_memberf5 = $result_memberf['age5'];
      $total_memberf6 = $result_memberf['age6'];

      // cell_member male ages
      $pre_age_memberm = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm'
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role != 1 AND members_cells.gender = 'm' AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_memberm = array(':church_id' => $church_id);
      $pre_age_memberm->execute($values_memberm);
      $result_memberm = $pre_age_memberm->fetch();

      $total_memberm1 = $result_memberm['age1'];
      $total_memberm2 = $result_memberm['age2'];
      $total_memberm3 = $result_memberm['age3'];
      $total_memberm4 = $result_memberm['age4'];
      $total_memberm5 = $result_memberm['age5'];
      $total_memberm6 = $result_memberm['age6'];

      // guests ages
      $pre_ageg = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_ageg = array(':church_id' => $church_id);
      $pre_ageg->execute($values_ageg);
      $result_ageg = $pre_ageg->fetch();

      $total_ageg1 = $result_ageg['age1'];
      $total_ageg2 = $result_ageg['age2'];
      $total_ageg3 = $result_ageg['age3'];
      $total_ageg4 = $result_ageg['age4'];
      $total_ageg5 = $result_ageg['age5'];
      $total_ageg6 = $result_ageg['age6'];

      // guests female ages
      $pre_age_guestf = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f'
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'f' AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestf = array(':church_id' => $church_id);
      $pre_age_guestf->execute($values_guestf);
      $result_guestf = $pre_age_guestf->fetch();

      $total_guestf1 = $result_guestf['age1'];
      $total_guestf2 = $result_guestf['age2'];
      $total_guestf3 = $result_guestf['age3'];
      $total_guestf4 = $result_guestf['age4'];
      $total_guestf5 = $result_guestf['age5'];
      $total_guestf6 = $result_guestf['age6'];

      // guests male ages
      $pre_age_guestm = $con->prepare("SELECT count(reports_details.id) as age1, (SELECT count(reports_details.id) as age2 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm'
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 12 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 17) $filter_crowd) as age2, 
          (SELECT count(reports_details.id) as age3 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 18 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 24) $filter_crowd) as age3, 
          (SELECT count(reports_details.id) as age4 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 25 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 34) $filter_crowd) as age4, 
          (SELECT count(reports_details.id) as age5 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND ((YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 35 AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 54) $filter_crowd) as age5, 
          (SELECT count(reports_details.id) as age6 FROM reports, groups_cells, reports_details, members_cells WHERE reports.cell_id = groups_cells.id 
          AND reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id 
          AND groups_cells.church_id = :church_id AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' 
          AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) >= 55 $filter_crowd) as age6
          FROM reports, groups_cells, reports_details, members_cells 
          WHERE reports.cell_id = groups_cells.id  AND reports.id = reports_details.report_id 
          AND reports_details.member_id = members_cells.id  AND groups_cells.church_id = :church_id 
          AND members_cells.active = 1 AND members_cells.role = 1 AND members_cells.gender = 'm' AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) 
          AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') 
          AND (YEAR(CURDATE())-YEAR(members_cells.birth_date)) <= 11 $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guestm = array(':church_id' => $church_id);
      $pre_age_guestm->execute($values_guestm);
      $result_guestm = $pre_age_guestm->fetch();

      $total_guestm1 = $result_guestm['age1'];
      $total_guestm2 = $result_guestm['age2'];
      $total_guestm3 = $result_guestm['age3'];
      $total_guestm4 = $result_guestm['age4'];
      $total_guestm5 = $result_guestm['age5'];
      $total_guestm6 = $result_guestm['age6'];


      /********************** Top Cities ************************/

      $result_cities = null;
      $result_cities2 = null;

      // Actual quarter
      $sql = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) AND (reports_details.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

      foreach ($con->query($sql) as $row) {
        $row['ranking'] = '1';
        $result_cities[] = $row;
      }

      // Last quarter
      $period_filter4 = "AND (reports_details.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
        $period_filter4 = "AND (reports_details.created_at BETWEEN '$period_i' AND '$period_f')";
      }

      $sql2 = "SELECT count(reports_details.id) as crowd, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells, reports_details, members_cells WHERE reports.id = reports_details.report_id AND reports_details.member_id = members_cells.id AND groups_cells.id = members_cells.cell_id AND groups_cells.church_id = '$church_id' AND members_cells.active = 1 AND (reports_details.salvations = 1 OR reports_details.baptized = 1 OR reports_details.scheduled_visits = 1) $period_filter4 $filter_crowd group by groups_cells.city order by count(reports_details.id) DESC LIMIT 5";

      foreach ($con->query($sql2) as $row2) {
        $result_cities2[] = $row2;
      }

      /*Obtain final ranking*/
      if ($result_cities != null && $result_cities2 != null) {

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        array_multisort($aux, SORT_DESC, $result_cities);

        // order array top cities last
        foreach ($result_cities2 as $key2 => $frow2) {
            $aux2[$key2] = $frow2['crowd'];
        }
        array_multisort($aux2, SORT_DESC, $result_cities2);

        for($i=0; $i<count($result_cities); $i++){
            for($j=0; $j<count($result_cities2); $j++){
                if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                    if ($result_cities[$i]['crowd'] >= $result_cities2[$j]['crowd']) {
                      $ranking = '1';
                      $result_cities[$i]['ranking'] = '1';
                    }else{
                      $ranking = '0';
                      $result_cities[$i]['ranking'] = '0';
                    }

                }
            }
        }

     } else if($result_cities != null){

        // order array top cities actual
        foreach ($result_cities as $key => $frow) {
            $aux[$key] = $frow['crowd'];
        }
        
        array_multisort($aux, SORT_DESC, $result_cities);

     }


      /************** Overall Growth Actual *****************/

      /*Total cell groups general*/

      $pre_gen_cell = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id $filter_graph_top", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gen_cell = array(':church_id' => $church_id);
      $pre_gen_cell->execute($values_gen_cell);
      $result_gen_cell = $pre_gen_cell->fetch();

      $total_gen = $result_gen_cell['total_cells'];


      $period_filter3 = "AND (created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

      // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
        $period_filter3 = "AND (created_at BETWEEN '$period_i' AND '$period_f')";
      }

      // obtain overall multiply global
      $overall_mult = multiplyGeneral($con,$church_id,$filter_graph_top,$period_filter3);

      $w_percentage = $overall_mult['w_percentage'];
      $goal_f = $overall_mult['goal_f'];

      // obtain cell_attendance global
      $overall_att = cellGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$initial_date,$final_date,$is_mobile,$period_i,$period_f,$total_gen);

      $w_percentagekd = $overall_att['w_percentagekd'];
      $w_percentagead = $overall_att['w_percentagead'];
      $goal_f2 = $overall_att['goal_f2'];
      $goal_f3 = $overall_att['goal_f3'];

      // obtain salvation global
      $overall_pr = perfomanceGeneral($con,$church_id,$filter_crowd,$initial_quarter,$final_quarter,$total_gen);

      $w_percentagesv = $overall_pr['w_percentagesv'];
      $w_percentagebp = $overall_pr['w_percentagebp'];
      $w_per_sch = $overall_pr['w_per_sch'];
      $goal_f5 = $overall_pr['goal_f5'];
      $goal_f6 = $overall_pr['goal_f6'];
      $goal_f7 = $overall_pr['goal_f7'];
      // FINAL OVERALL PERFOMANCE
      $overall_perfomance = $overall_pr['overall_perfomance'];


      /*********************************** OVERALL PAST ******************************************/

      // obtain overall multiply global
      $overall_mult2 = MultiplyGeneral2($con,$church_id,$filter_graph_top,$initial_quarter,$final_quarter,$initial_quarter2,$final_quarter2,$period_i,$period_f,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f);

      $past_i = $overall_mult2['past_i'];
      $past_f = $overall_mult2['past_f'];

      // obtain cell_attendance global
      $overall_att2 = CellGeneral2($con,$church_id,$filter_crowd,$initial_quarter2,$final_quarter2,$period_i,$period_f,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3);

      $period_filter7 = $overall_att2['period_filter7'];

      // obtain salvation global
      $overall_perfomance2 = perfomanceGeneral2($con,$church_id,$filter_crowd,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7);


      /**** OBTAIN PERCENTAGE FINAL (OVERALL GROWTH) *****/
      if ($overall_perfomance == 0 && $overall_perfomance2 == 0) {
        $percentage_overall = 0;
      } else if ($overall_perfomance2 == 0) {
        $percentage_overall = 100;
      } else{
        $percentage_overall = ($overall_perfomance - $overall_perfomance2) * 100 / $overall_perfomance2;
      }


      /***** final response *****/
      $final_res = array(
        "crowd_perfomance" => $crowd,
        "salvations" => $total_mem,
        "baptized" => $total_gu,
        "visits" => $total_k,
        "vs" => array(
          "salvation_percetage" => (string)round($percentage_sv),
          "baptized_percetage" => (string)round($percentage_bap),
          "visits_percetage" => (string)round($percentage_visits),
          "salvations" => $salvation_f,
          "baptized" => $baptized_f,
          "visits" => $visits_f,
          "dates" => $dates
        ),
        "kids_perfomance" => array(
          "total_kids" => $totkid,
          "kids_today" => $total_to,
          "period" => $cells_f,
          "dates" => $dates
        ),
        "perfomance_gender" => array(
          "female" => $members_fe,
          "male" => $members_ma,
          "cell_members" => array(
            "female" => $members_fe2,
            "male" => $members_ma2
          ),
          "guests" => array(
            "female" => $members_fe3,
            "male" => $members_ma3
          )
        ),
        "age_ranges" => array(
          "first" => $total_age1,
          "second" => $total_age2,
          "third" => $total_age3,
          "fourth" => $total_age4,
          "fifth" => $total_age5,
          "sixth" => $total_age6,
          "female" => array(
            "first" => $total_agef1,
            "second" => $total_agef2,
            "third" => $total_agef3,
            "fourth" => $total_agef4,
            "fifth" => $total_agef5,
            "sixth" => $total_agef6
          ),
          "male" => array(
            "first" => $total_agem1,
            "second" => $total_agem2,
            "third" => $total_agem3,
            "fourth" => $total_agem4,
            "fifth" => $total_agem5,
            "sixth" => $total_agem6
          ),
          "cell_members" => array(
            "first" => $total_agec1,
            "second" => $total_agec2,
            "third" => $total_agec3,
            "fourth" => $total_agec4,
            "fifth" => $total_agec5,
            "sixth" => $total_agec6,
            "female" => array(
              "first" => $total_memberf1,
              "second" => $total_memberf2,
              "third" => $total_memberf3,
              "fourth" => $total_memberf4,
              "fifth" => $total_memberf5,
              "sixth" => $total_memberf6
            ),
            "male" => array(
              "first" => $total_memberm1,
              "second" => $total_memberm2,
              "third" => $total_memberm3,
              "fourth" => $total_memberm4,
              "fifth" => $total_memberm5,
              "sixth" => $total_memberm6
            )
          ),
          "guests" => array(
            "first" => $total_ageg1,
            "second" => $total_ageg2,
            "third" => $total_ageg3,
            "fourth" => $total_ageg4,
            "fifth" => $total_ageg5,
            "sixth" => $total_ageg6,
            "female" => array(
              "first" => $total_guestf1,
              "second" => $total_guestf2,
              "third" => $total_guestf3,
              "fourth" => $total_guestf4,
              "fifth" => $total_guestf5,
              "sixth" => $total_guestf6
            ),
            "male" => array(
              "first" => $total_guestm1,
              "second" => $total_guestm2,
              "third" => $total_guestm3,
              "fourth" => $total_guestm4,
              "fifth" => $total_guestm5,
              "sixth" => $total_guestm6
            )
          )
        ),
        "top_cities" => $result_cities,
        "points_overall" => (string)$overall_perfomance,
        "percentage_overall" => (string)round($percentage_overall)
      );


      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => $final_res));



  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


// Statistics donations
$app->post('/statistics/donations', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      /************** If filter has not been selected, per quarter ******************/

      /*actual date*/
      $today = date("Y-m-d");
      $month = date('5');
      $month_t = date('05');
      $year = date ("Y");

      $prev_y = $year -1;

      /*function general dates*/
      $general_d = generalDates($month, $year, $prev_y);

      $initial_quarter = $general_d['initial_quarter'];
      $final_quarter = $general_d['final_quarter'];
      $initial_quarter2 = $general_d['initial_quarter2'];
      $final_quarter2 = $general_d['final_quarter2'];
      $start_date_lg = $general_d['start_date_lg'];
      $end_date_lg = $general_d['end_date_lg'];
      $start_date = $general_d['start_date'];
      $end_date = $general_d['end_date'];
      $start_date2 = $general_d['start_date2'];
      $end_date2 = $general_d['end_date2'];

      /*Note: If exist date filter, validate*/
      if ($initial_date && $final_date && empty($is_mobile)) {
        $initial_quarter = $initial_date . " 00:00:00";
        $final_quarter = $final_date . " 23:59:59";

      }else if ($initial_date && $is_mobile) {
        $initial_quarter = $initial_date . " 00:00:00";
        $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
        $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
        $final_quarter = $sub_m . " 23:59:59";
      }

      /*validate parent_id*/
      if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

        if(empty($parent_id)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Missing parameter: parent_id",
                    "status"=>500)));
        }
      }


      if ($role_id == '2') {
        $pre_dis = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        if(empty($result_dis)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '3') {
        $pre_dis = $con->prepare("SELECT id as zone_i 
                                 FROM groups_zones
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $zone = $result_dis['zone_i'];

        if(empty($zone)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '4') {
        $pre_dis = $con->prepare("SELECT id as sector_i 
                                 FROM groups_sectors
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $sec = $result_dis['sector_i'];

        if(empty($sec)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '5') {
        $pre_dis = $con->prepare("SELECT id as cell_i 
                                 FROM groups_cells
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $cell = $result_dis['cell_i'];

        if(empty($cell)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      }

      /*General filters*/
      $filter_p = '';
      $filter_crowd = '';
      $filter_graph_top = '';


      /*senior pastor*/
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
        
        /*verify empty filter members*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;
          
        }

      /*district pastor*/
      } else if ($role_id == '2') {

        /*verify empty filter members*/
        if (empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }


        }

        /*zone pastor*/
      } else if ($role_id == '3') {

        /*verify empty filter members*/
        if (empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          if ($filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          } else if ($filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_crowd = "AND reports.cell_id " . $filter_p;
            $filter_graph_top = "AND groups_cells.id " . $filter_p;

          }

        }

      /*supervisor*/
      } else if ($role_id == '4') {

        /*verify empty filter members*/
        if (empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }else{

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id = '$parent_id' AND active = 1 AND church_id = '$church_id')";

          $filter_crowd = "AND reports.cell_id " . $filter_p;
          $filter_graph_top = "AND groups_cells.id " . $filter_p;

        }

      /*leader*/
      } else if ($role_id == '5') {

        $filter_p = "= '$parent_id'";

        $filter_crowd = "AND reports.cell_id " . $filter_p;
        $filter_graph_top = "AND groups_cells.id " . $filter_p;

      }


      /*Obtain total donations*/
      $pre_cro = $con->prepare("SELECT SUM(donations_offering + donations_events + donations_transport) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cro = array(':church_id' => $church_id);
      $pre_cro->execute($values_cro);
      $result_cro = $pre_cro->fetch();

      $crowd = $result_cro['crowd'];

      if ($crowd == null) {
        $crowd = '0';
      }

      /*Obtain offering*/
      $pre_mem = $con->prepare("SELECT SUM(donations_offering) as donations_offering FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_mem = array(':church_id' => $church_id);
      $pre_mem->execute($values_mem);
      $result_mem = $pre_mem->fetch();

      $total_mem = $result_mem['donations_offering'];

      if ($total_mem == null) {
        $total_mem = '0';
      }

      /*Obtain total events*/
      $pre_gu = $con->prepare("SELECT SUM(donations_events) as donations_events FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gu = array(':church_id' => $church_id);
      $pre_gu->execute($values_gu);
      $result_gu = $pre_gu->fetch();

      $total_gu = $result_gu['donations_events'];

      if ($total_gu == null) {
        $total_gu = '0';
      }

       /*Obtain total transport*/
      $pre_k = $con->prepare("SELECT SUM(donations_transport) as donations_transport FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_k = array(':church_id' => $church_id);
      $pre_k->execute($values_k);
      $result_k = $pre_k->fetch();

      $total_k = $result_k['donations_transport'];

      if ($total_k == null) {
        $total_k = '0';
      }


      /****** Offering vs Events vs Transport ******/

      // Percentage for offering

      // previous period

      if ($initial_date && $final_date && empty($is_mobile)) {
        /*count the days between two dates*/
        $date1 = date_create($initial_date);
        $date2 = date_create($final_date);

        //difference between two dates
        $diff = date_diff($date1,$date2)->format("%a");

        $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
        $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
        $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
        $period_f = $sub_p . " 23:59:59";

        $initial_quarter2 = $period_i;
        $final_quarter2 = $period_f;
        
      }else if ($initial_date && $is_mobile) {
        /*count the days between two dates*/
        $date1 = date_create($initial_date);
        $date2 = date_create($sub_m);

        //difference between two dates
        $diff = date_diff($date1,$date2)->format("%a");

        $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
        $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
        $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
        $period_f = $sub_p . " 23:59:59";

        $initial_quarter2 = $period_i;
        $final_quarter2 = $period_f;
      }

      $pre_per = $con->prepare("SELECT SUM(donations_offering) as donations_offering FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per = array(':church_id' => $church_id);
      $pre_per->execute($values_per);
      $result_per = $pre_per->fetch();

      $total_per = $result_per['donations_offering'];

      if ($total_mem == 0 && $total_per == 0) {
        $percentage_off = 0;
      } else if ($total_per == 0) {
        $percentage_off = 100;
      } else{
        $percentage_off = ($total_mem - $total_per) * 100 / $total_per;
      }

      // Percentage for events

      // previous quarter
      $pre_per2 = $con->prepare("SELECT SUM(donations_events) as donations_events FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per2 = array(':church_id' => $church_id);
      $pre_per2->execute($values_per2);
      $result_per2 = $pre_per2->fetch();

      $total_per2 = $result_per2['donations_events'];

      if ($total_gu == 0 && $total_per2 == 0) {
        $percentage_ev = 0;
      } else if ($total_per2 == 0) {
        $percentage_ev = 100;
      } else{
        $percentage_ev = ($total_gu - $total_per2) * 100 / $total_per2;
      }


      // Percentage for transport

      // previous quarter
      $pre_per3 = $con->prepare("SELECT SUM(donations_transport) as donations_transport FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_per3 = array(':church_id' => $church_id);
      $pre_per3->execute($values_per3);
      $result_per3 = $pre_per3->fetch();

      $total_per3 = $result_per3['donations_transport'];

      if ($total_gu == 0 && $total_per3 == 0) {
        $percentage_trans = 0;
      } else if ($total_per3 == 0) {
        $percentage_trans = 100;
      } else{
        $percentage_trans = ($total_k - $total_per3) * 100 / $total_per3;
      }


      /********* Graphic vs *********/

      $dates = null;
      $salvation_f = null;
      $baptized_f = null;
      $visits_f = null;
      $cells_f = null;
      $members_fe = null;
      $members_ma = null;
      $members_ma2 = null;
      $members_ma3 = null;


       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {

        $start_date = new DateTime($initial_date);
        $end_date = new DateTime($final_date);
        
      }else if ($initial_date && $is_mobile) {
        $start_date = new DateTime($initial_date);
        $end_date = new DateTime($sub_m);
      }

      /*initial for (days)*/
      for($i = $start_date; $i <= $end_date; $i->modify('+1 day')){

        $dates[] = $i->format("Y-m-d");

        $date_val = $i->format("Y-m-d");

        /*offering*/
        $pre_first = $con->prepare("SELECT SUM(donations_offering) as donations_offering, (SELECT SUM(donations_events) as donations_events FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd) as donations_events, (SELECT SUM(donations_transport) as donations_transport FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd) as donations_transport FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND reports.created_at LIKE '%$date_val%' $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_first = array(':church_id' => $church_id);
        $pre_first->execute($values_first);
        $result_first = $pre_first->fetch();

        $total_first = $result_first['donations_offering'];

        if ($total_first == null) {
          $total_first = '0.00';
        }

        $salvation_f[] = $total_first;

        /*events*/
        $total_sec = $result_first['donations_events'];

        if ($total_sec == null) {
          $total_sec = '0.00';
        }

        $baptized_f[] = $total_sec;

        /*transport*/
        $total_third = $result_first['donations_transport'];

        if ($total_third == null) {
          $total_third = '0.00';
        }

        $visits_f[] = $total_third;

      }


      /********************** Top Cities ************************/

      $result_cities = null;
      $result_cities2 = null;

      // Actual quarter
      $sql = "SELECT SUM(reports.donations_offering) as offering, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = '$church_id' AND groups_cells.active = 1 AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') $filter_crowd group by groups_cells.city order by SUM(reports.donations_offering) DESC LIMIT 5";

      foreach ($con->query($sql) as $row) {
        $row['ranking'] = '1';
        $result_cities[] = $row;
      }

      // Last quarter
      $period_filter4 = "AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2')";

       // if date filter is sent
      if ($initial_date && $final_date && empty($is_mobile)) {
        $period_filter4 = "AND (reports.created_at BETWEEN '$period_i' AND '$period_f')";
        
      }else if ($initial_date && $is_mobile) {
        $period_filter4 = "AND (reports.created_at BETWEEN '$period_i' AND '$period_f')";
      }

      $sql2 = "SELECT SUM(reports.donations_offering) as offering, groups_cells.city, groups_cells.leader, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = '$church_id' AND groups_cells.active = 1 $period_filter4 $filter_crowd group by groups_cells.city order by SUM(reports.donations_offering) DESC LIMIT 5";

      foreach ($con->query($sql2) as $row2) {
        $result_cities2[] = $row2;
      }

      /*Obtain final ranking*/
      if ($result_cities != null && $result_cities2 != null) {

        // order array top cities actual
        foreach ($result_cities as $key => $row) {
            $aux[$key] = $row['offering'];
        }
        array_multisort($aux, SORT_DESC, $result_cities);

        // order array top cities actual
        foreach ($result_cities2 as $key2 => $row2) {
            $aux2[$key2] = $row2['offering'];
        }
        array_multisort($aux2, SORT_DESC, $result_cities2);

        for($i=0; $i<count($result_cities); $i++){
            for($j=0; $j<count($result_cities2); $j++){
                if($result_cities[$i]['city'] == $result_cities2[$j]['city']){

                    if ($result_cities[$i]['offering'] >= $result_cities2[$j]['offering']) {
                      $ranking = '1';
                      $result_cities[$i]['ranking'] = '1';
                    }else{
                      $ranking = '0';
                      $result_cities[$i]['ranking'] = '0';
                    }

                }
            }
        }

     } else if($result_cities != null){

        // order array top cities actual
        foreach ($result_cities as $key => $row) {
            $aux[$key] = $row['offering'];
        }
        array_multisort($aux, SORT_DESC, $result_cities);

     }


      /*********************************** OVERALL PAST ******************************************/

      $pre_cro_ov = $con->prepare("SELECT SUM(donations_offering + donations_events + donations_transport) as donations FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cro_ov = array(':church_id' => $church_id);
      $pre_cro_ov->execute($values_cro_ov);
      $result_cro_ov = $pre_cro_ov->fetch();

      $donations_past = $result_cro_ov['donations'];

      if ($donations_past == null) {
      	$donations_past = '0';
      }


      /**** OBTAIN PERCENTAGE FINAL (OVERALL GROWTH) *****/
      if ($crowd == 0 && $donations_past == 0) {
        $percentage_overall = 0;
      } else if ($donations_past == 0) {
        $percentage_overall = 100;
      } else{
        $percentage_overall = ($crowd - $donations_past) * 100 / $donations_past;
      }


      /***** final response *****/
      $final_res = array(
        "total_donations" => $crowd,
        "total_offer" => $total_mem,
        "total_events" => $total_gu,
        "total_transport" => $total_k,
        "vs" => array(
          "offer_percetage" => (string)round($percentage_off),
          "events_percetage" => (string)round($percentage_ev),
          "transport_percetage" => (string)round($percentage_trans),
          "offering" => $salvation_f,
          "events" => $baptized_f,
          "transport" => $visits_f,
          "dates" => $dates
        ),
        "top_cities" => $result_cities,
        "points_overall" => (string)$crowd,
        "percentage_overall" => (string)round($percentage_overall)
      );


      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => $final_res));



  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/***************************** RANKINGS *********************************/

/*ranking global*/
$app->post('/statistics/global/ranking', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member = $request->getParam('member');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $gender = $request->getParam('gender');
   $parent_id = $request->getParam('parent_id');
   $child_id = $request->getParam('child_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('5');
    $month_t = date('05');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($final_date);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";

      $initial_quarter2 = $period_i;

      $final_quarter2 = $period_f;

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($sub_m);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    /*validate child_id*/
    if ($role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($child_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: child_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i, (SELECT id
                               FROM groups_districts
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as district_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $dis = $result_dis['district_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i, (SELECT id FROM groups_zones
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as zone_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i, (SELECT id FROM groups_sectors
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as sector_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];
      $sec = $result_dis['sector_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    }

    // if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
 
      /************** Points Ranking *****************/

      /*if the gender is sent*/
      $query_g = '';
      if ($gender) {
        if ($gender == 'm') {
          $query_g = "AND user.gender = 'm'";
          
        }else if($gender == 'f'){
          $query_g = "AND user.gender = 'f'";
        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"Gender does not exist",
                      "status"=>422)));
        }
      }

      if ($member == '1') {

        /*validate according to parent_id*/
        $filter_val = '';

        /*function filter leader*/
        $filter_l = filterLeader($role_id, $filter_district, $filter_zone, $filter_sector, $parent_id, $child_id, $church_id);

        if ($filter_l) {
          $filter_val = $filter_l;
        }



        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, groups_cells.id as cell_id, groups_cells.city FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id' $query_g $filter_val";
      	

        $final_points = null;

      	foreach ($con->query($sql_leader) as $row) {

      	  $leader_info = $row;

      	  // obtain overall multiply global

      	  $cell_id = $row['cell_id'];

      	  $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $values_ac_cell = array(':church_id' => $church_id);
      	  $pre_ac_cell->execute($values_ac_cell);
      	  $result_ac_cell = $pre_ac_cell->fetch();

      	  $total_cells = $result_ac_cell['total_cells'];

      	  // last quarter
      	  $total_last_cell = $result_ac_cell['last_cells'];

      	  // obtain advance
      	  $overall_advance = $total_cells - $total_last_cell;

      	  // obtain percentage and goal in church_goals
      	  $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $pre_percen->execute($values_ac_cell);
      	  $result_percen = $pre_percen->fetch();

      	  $percentage_gen = $result_percen['percentage'];
      	  $goal_gen = $result_percen['value'];

      	  // whole percentage
      	  $w_percentage = round($percentage_gen * 100);

      	  // obtain overall of multiply
      	  $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


      	  /*obtain cell_attendance global*/

      	  // obtain adult points

      	  // actual quarter
      	  $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $values_ac_adults = array(':church_id' => $church_id);
      	  $pre_ac_adults->execute($values_ac_adults);
      	  $result_ac_adults = $pre_ac_adults->fetch();

      	  $total_adults = $result_ac_adults['total_adults'];

      	  // last quarter
      	  $total_last_adults = $result_ac_adults['last_adults'];

      	  if ($total_adults == null) {
      	    $total_adults = '0';
      	  } else if ($total_last_adults == null) {
      	    $total_last_adults = '0';
      	  }

      	  // obtain advance
      	  $adults_advance = $total_adults - $total_last_adults;

      	  // obtain percentage and goal in church_goals
      	  $percentage_ad = $result_percen['percentage_ad'];
      	  $goal_ad = $result_percen['goal_ad'];

      	  // whole percentage
      	  $w_percentagead = round($percentage_ad * 100);

      	  // obtain points of adults
      	  $points_ad = $adults_advance * $w_percentagead / $goal_ad;


      	  /*now obtain kids points*/

      	  // actual quarter
      	  $total_kids2 = $result_ac_adults['total_kids'];

      	  // last quarter
      	  $total_last_kids = $result_ac_adults['last_kids'];

      	  if ($total_kids2 == null) {
      	    $total_kids2 = '0';
      	  } else if ($total_last_kids == null) {
      	    $total_last_kids = '0';
      	  }

      	  // obtain advance
      	  $kids_advance = $total_kids2 - $total_last_kids;

      	  // obtain percentage and goal in church_goals
      	  $percentage_kd = $result_percen['percentage_kd'];
      	  $goal_kd = $result_percen['goal_kd'];

      	  // whole percentage
      	  $w_percentagekd = round($percentage_kd * 100);

      	  // obtain points of kids
      	  $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

      	  // FINAL OVERALL CELL ATTENDANCE
      	  $overall_attend = $points_ad + $points_kd;



      	  // obtain church_attendance global

      	  // actual quarter
      	  $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $values_ac_church = array(':church_id' => $church_id);
      	  $pre_ac_church->execute($values_ac_church);
      	  $result_ac_church = $pre_ac_church->fetch();

      	  $total_doctrine = $result_ac_church['total_doctrine'];

      	  // last quarter
      	  $total_last_church = $result_ac_church['last_church'];

      	  if ($total_doctrine == null) {
      	    $total_doctrine = '0';
      	  } else if ($total_last_church == null) {
      	    $total_last_church = '0';
      	  }

      	  // obtain advance
      	  $church_advance = $total_doctrine - $total_last_church;

      	  // obtain percentage and goal in church_goals
      	  $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $pre_percen_ch->execute($values_ac_church);
      	  $result_percen_ch = $pre_percen_ch->fetch();

      	  $percentage_ch = $result_percen_ch['percentage'];
      	  $goal_ch = $result_percen_ch['value'];

      	  // whole percentage
      	  $w_percentagech = round($percentage_ch * 100);

      	  // obtain overall of church
      	  $overall_church = $church_advance * $w_percentagech / $goal_ch;


      	  // obtain salvation global

      	  // actual quarter
      	  $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $values_ac_salv = array(':church_id' => $church_id);
      	  $pre_ac_salv->execute($values_ac_salv);
      	  $result_ac_salv = $pre_ac_salv->fetch();

      	  $total_salvation = $result_ac_salv['total_salvation'];

      	  // obtain percentage and goal in church_goals
      	  $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      	  $pre_percen_sv->execute($values_ac_salv);
      	  $result_percen_sv = $pre_percen_sv->fetch();

      	  $percentage_sv = $result_percen_sv['percentage'];
      	  $goal_sv = $result_percen_sv['value'];

      	  // whole percentage
      	  $w_percentagesv = round($percentage_sv * 100);

      	  // obtain points of salvation
      	  $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


      	  // obtain baptized global

      	  // actual quarter
      	  $total_baptized = $result_ac_salv['total_baptized'];

      	  // obtain percentage and goal in church_goals
      	  $percentage_bp = $result_percen_sv['percentage_bp'];
      	  $goal_bp = $result_percen_sv['goal_bp'];

      	  // whole percentage
      	  $w_percentagebp = round($percentage_bp * 100);

      	  // obtain points of salvation
      	  $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


      	  // obtain scheduled global

      	  // actual quarter
      	  $total_schedule = $result_ac_salv['total_schedule_visits'];

      	  // obtain percentage and goal in church_goals
      	  $percentage_sch = $result_percen_sv['percentage_sch'];
      	  $goal_sch = $result_percen_sv['goal_sch'];

      	  // whole percentage
      	  $w_per_sch = round($percentage_sch * 100);

      	  // obtain points of schedule
      	  $points_sche = $total_schedule * $w_per_sch / $goal_sch;

      	  // FINAL OVERALL PERFOMANCE
      	  $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

      	  /*** OVERALL CHURCH GLOBAL ***/
      	  $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

      	  $leader_info['points'] = (string)$overall_growth;

      	  $final_points[] = $leader_info;

      	}

        if($final_points != null){

          // order array points
          foreach ($final_points as $key => $frow) {
              $aux[$key] = $frow['points'];
          }
          
          array_multisort($aux, SORT_DESC, $final_points);

        }

      	return $response->withStatus(200)
      	                  ->withHeader('Content-Type', 'application/json')
      	                  ->withJson(array('response' => $final_points));


      } else if ($member == '2') {

        /*validate according to parent_id*/
        $filter_val = '';

        /*function filter supervisor*/
        $filter_s = filterSupervisor($role_id, $filter_district, $filter_zone, $parent_id, $child_id, $church_id);

        if ($filter_s) {
          $filter_val = $filter_s;
        }


        /*Obtain general information supervisors*/
      	$sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_sectors.district_code, groups_sectors.zone_code, groups_sectors.sector_code, groups_sectors.id as sector_id, user.city FROM groups_sectors,user WHERE user.id = groups_sectors.supervisor AND groups_sectors.active = 1 AND groups_sectors.church_id = '$church_id' $query_g $filter_val";

        $result_info = null;

      	foreach ($con->query($sql_leader) as $row) {

      		$leader_info = $row;

      		$sector_id = $row['sector_id'];
      	 
          /*Obtain cells asociated with supervisors (sector)*/
      		$sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id = '$sector_id' AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

			    foreach ($con->query($sql_leader2) as $row2) {

            /*cells asociated*/
	      		$cell_id = $row2['cell_id'];

            // obtain overall multiply
            $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_cell = array(':church_id' => $church_id);
            $pre_ac_cell->execute($values_ac_cell);
            $result_ac_cell = $pre_ac_cell->fetch();

            $total_cells = $result_ac_cell['total_cells'];

            // last quarter
            $total_last_cell = $result_ac_cell['last_cells'];

            // obtain advance
            $overall_advance = $total_cells - $total_last_cell;

            // obtain percentage and goal in church_goals
            $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen->execute($values_ac_cell);
            $result_percen = $pre_percen->fetch();

            $percentage_gen = $result_percen['percentage'];
            $goal_gen = $result_percen['value'];

            // whole percentage
            $w_percentage = round($percentage_gen * 100);

            // obtain overall of multiply
            $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


            /*obtain cell_attendance global*/

            // obtain adult points

            // actual quarter
            $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_adults = array(':church_id' => $church_id);
            $pre_ac_adults->execute($values_ac_adults);
            $result_ac_adults = $pre_ac_adults->fetch();

            $total_adults = $result_ac_adults['total_adults'];

            // last quarter
            $total_last_adults = $result_ac_adults['last_adults'];

            if ($total_adults == null) {
              $total_adults = '0';
            } else if ($total_last_adults == null) {
              $total_last_adults = '0';
            }

            // obtain advance
            $adults_advance = $total_adults - $total_last_adults;

            // obtain percentage and goal in church_goals
            $percentage_ad = $result_percen['percentage_ad'];
            $goal_ad = $result_percen['goal_ad'];

            // whole percentage
            $w_percentagead = round($percentage_ad * 100);

            // obtain points of adults
            $points_ad = $adults_advance * $w_percentagead / $goal_ad;


            /*now obtain kids points*/

            // actual quarter
            $total_kids2 = $result_ac_adults['total_kids'];

            // last quarter
            $total_last_kids = $result_ac_adults['last_kids'];

            if ($total_kids2 == null) {
              $total_kids2 = '0';
            } else if ($total_last_kids == null) {
              $total_last_kids = '0';
            }

            // obtain advance
            $kids_advance = $total_kids2 - $total_last_kids;

            // obtain percentage and goal in church_goals
            $percentage_kd = $result_percen['percentage_kd'];
            $goal_kd = $result_percen['goal_kd'];

            // whole percentage
            $w_percentagekd = round($percentage_kd * 100);

            // obtain points of kids
            $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

            // FINAL OVERALL CELL ATTENDANCE
            $overall_attend = $points_ad + $points_kd;


            // obtain church_attendance global

            // actual quarter
            $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_church = array(':church_id' => $church_id);
            $pre_ac_church->execute($values_ac_church);
            $result_ac_church = $pre_ac_church->fetch();

            $total_doctrine = $result_ac_church['total_doctrine'];

            // last quarter
            $total_last_church = $result_ac_church['last_church'];

            if ($total_doctrine == null) {
              $total_doctrine = '0';
            } else if ($total_last_church == null) {
              $total_last_church = '0';
            }

            // obtain advance
            $church_advance = $total_doctrine - $total_last_church;

            // obtain percentage and goal in church_goals
            $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_ch->execute($values_ac_church);
            $result_percen_ch = $pre_percen_ch->fetch();

            $percentage_ch = $result_percen_ch['percentage'];
            $goal_ch = $result_percen_ch['value'];

            // whole percentage
            $w_percentagech = round($percentage_ch * 100);

            // obtain overall of church
            $overall_church = $church_advance * $w_percentagech / $goal_ch;


            // obtain salvation global

            // actual quarter
            $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_salv = array(':church_id' => $church_id);
            $pre_ac_salv->execute($values_ac_salv);
            $result_ac_salv = $pre_ac_salv->fetch();

            $total_salvation = $result_ac_salv['total_salvation'];

            // obtain percentage and goal in church_goals
            $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_sv->execute($values_ac_salv);
            $result_percen_sv = $pre_percen_sv->fetch();

            $percentage_sv = $result_percen_sv['percentage'];
            $goal_sv = $result_percen_sv['value'];

            // whole percentage
            $w_percentagesv = round($percentage_sv * 100);

            // obtain points of salvation
            $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


            // obtain baptized global

            // actual quarter
            $total_baptized = $result_ac_salv['total_baptized'];

            // obtain percentage and goal in church_goals
            $percentage_bp = $result_percen_sv['percentage_bp'];
            $goal_bp = $result_percen_sv['goal_bp'];

            // whole percentage
            $w_percentagebp = round($percentage_bp * 100);

            // obtain points of salvation
            $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


            // obtain scheduled global

            // actual quarter
            $total_schedule = $result_ac_salv['total_schedule_visits'];

            // obtain percentage and goal in church_goals
            $percentage_sch = $result_percen_sv['percentage_sch'];
            $goal_sch = $result_percen_sv['goal_sch'];

            // whole percentage
            $w_per_sch = round($percentage_sch * 100);

            // obtain points of schedule
            $points_sche = $total_schedule * $w_per_sch / $goal_sch;

            // FINAL OVERALL PERFOMANCE
            $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

            /*** OVERALL CELL ***/
            $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

            /*add points to array*/
            $leader_info['total'] = $overall_growth; 
	      		$leader_info['number_c'] = 1;

	      		$result_info[] = $leader_info;
	      	}

      	}

        /*validate result info is not null*/
        if ($result_info != null) {

          // add points from the cells with same sector
          $res  = array();
          foreach($result_info as $vals){
              if(array_key_exists($vals['sector_id'],$res)){
                  $res[$vals['sector_id']]['total'] += $vals['total'];
                  $res[$vals['sector_id']]['number_c'] += $vals['number_c'];
                  $res[$vals['sector_id']]['points'] = (string)round($res[$vals['sector_id']]['total'] / $res[$vals['sector_id']]['number_c']);
              }
              else{
                  $res[$vals['sector_id']]  = $vals;
                  $res[$vals['sector_id']]['points'] = (string)$res[$vals['sector_id']]['total'];
              }
          }

          // final array without indexes
          $newArray = [];
          foreach ($res as $key => $value) {
              $newArray[] = $value;
          }

          // order array points
          foreach ($newArray as $key => $frow) {
              $aux[$key] = $frow['points'];
          }
          
          array_multisort($aux, SORT_DESC, $newArray);

          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $newArray));

        }else{
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result_info));
        }
        


      	/*else member does not exist*/
      } else if ($member == '3') {
        
        /*validate according to parent_id*/
        $filter_val = '';

        /*function filter zone pastor*/
        $filter_z = filterZonepastor($role_id, $filter_district, $parent_id, $child_id, $church_id);

        if ($filter_z) {
          $filter_val = $filter_z;
        }


        /*Obtain general information zone pastors*/
        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_zones.district_code, groups_zones.zone_code, groups_zones.id as zone_id, user.city FROM groups_zones,user WHERE user.id = groups_zones.zone_pastor AND groups_zones.active = 1 AND groups_zones.church_id = '$church_id' $query_g $filter_val";

        $result_info = null;

        foreach ($con->query($sql_leader) as $row) {

          $leader_info = $row;

          $zone_id = $row['zone_id'];
         
          /*Obtain cells asociated with zone pastors (zone)*/
          $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id = '$zone_id' AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

          foreach ($con->query($sql_leader2) as $row2) {

            /*cells asociated*/
            $cell_id = $row2['cell_id'];

            // obtain overall multiply
            $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_cell = array(':church_id' => $church_id);
            $pre_ac_cell->execute($values_ac_cell);
            $result_ac_cell = $pre_ac_cell->fetch();

            $total_cells = $result_ac_cell['total_cells'];

            // last quarter
            $total_last_cell = $result_ac_cell['last_cells'];

            // obtain advance
            $overall_advance = $total_cells - $total_last_cell;

            // obtain percentage and goal in church_goals
            $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen->execute($values_ac_cell);
            $result_percen = $pre_percen->fetch();

            $percentage_gen = $result_percen['percentage'];
            $goal_gen = $result_percen['value'];

            // whole percentage
            $w_percentage = round($percentage_gen * 100);

            // obtain overall of multiply
            $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


            /*obtain cell_attendance global*/

            // obtain adult points

            // actual quarter
            $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_adults = array(':church_id' => $church_id);
            $pre_ac_adults->execute($values_ac_adults);
            $result_ac_adults = $pre_ac_adults->fetch();

            $total_adults = $result_ac_adults['total_adults'];

            // last quarter
            $total_last_adults = $result_ac_adults['last_adults'];

            if ($total_adults == null) {
              $total_adults = '0';
            } else if ($total_last_adults == null) {
              $total_last_adults = '0';
            }

            // obtain advance
            $adults_advance = $total_adults - $total_last_adults;

            // obtain percentage and goal in church_goals
            $percentage_ad = $result_percen['percentage_ad'];
            $goal_ad = $result_percen['goal_ad'];

            // whole percentage
            $w_percentagead = round($percentage_ad * 100);

            // obtain points of adults
            $points_ad = $adults_advance * $w_percentagead / $goal_ad;


            /*now obtain kids points*/

            // actual quarter
            $total_kids2 = $result_ac_adults['total_kids'];

            // last quarter
            $total_last_kids = $result_ac_adults['last_kids'];

            if ($total_kids2 == null) {
              $total_kids2 = '0';
            } else if ($total_last_kids == null) {
              $total_last_kids = '0';
            }

            // obtain advance
            $kids_advance = $total_kids2 - $total_last_kids;

            // obtain percentage and goal in church_goals
            $percentage_kd = $result_percen['percentage_kd'];
            $goal_kd = $result_percen['goal_kd'];

            // whole percentage
            $w_percentagekd = round($percentage_kd * 100);

            // obtain points of kids
            $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

            // FINAL OVERALL CELL ATTENDANCE
            $overall_attend = $points_ad + $points_kd;


            // obtain church_attendance global

            // actual quarter
            $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_church = array(':church_id' => $church_id);
            $pre_ac_church->execute($values_ac_church);
            $result_ac_church = $pre_ac_church->fetch();

            $total_doctrine = $result_ac_church['total_doctrine'];

            // last quarter
            $total_last_church = $result_ac_church['last_church'];

            if ($total_doctrine == null) {
              $total_doctrine = '0';
            } else if ($total_last_church == null) {
              $total_last_church = '0';
            }

            // obtain advance
            $church_advance = $total_doctrine - $total_last_church;

            // obtain percentage and goal in church_goals
            $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_ch->execute($values_ac_church);
            $result_percen_ch = $pre_percen_ch->fetch();

            $percentage_ch = $result_percen_ch['percentage'];
            $goal_ch = $result_percen_ch['value'];

            // whole percentage
            $w_percentagech = round($percentage_ch * 100);

            // obtain overall of church
            $overall_church = $church_advance * $w_percentagech / $goal_ch;


            // obtain salvation global

            // actual quarter
            $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_salv = array(':church_id' => $church_id);
            $pre_ac_salv->execute($values_ac_salv);
            $result_ac_salv = $pre_ac_salv->fetch();

            $total_salvation = $result_ac_salv['total_salvation'];

            // obtain percentage and goal in church_goals
            $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_sv->execute($values_ac_salv);
            $result_percen_sv = $pre_percen_sv->fetch();

            $percentage_sv = $result_percen_sv['percentage'];
            $goal_sv = $result_percen_sv['value'];

            // whole percentage
            $w_percentagesv = round($percentage_sv * 100);

            // obtain points of salvation
            $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


            // obtain baptized global

            // actual quarter
            $total_baptized = $result_ac_salv['total_baptized'];

            // obtain percentage and goal in church_goals
            $percentage_bp = $result_percen_sv['percentage_bp'];
            $goal_bp = $result_percen_sv['goal_bp'];

            // whole percentage
            $w_percentagebp = round($percentage_bp * 100);

            // obtain points of salvation
            $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


            // obtain scheduled global

            // actual quarter
            $total_schedule = $result_ac_salv['total_schedule_visits'];

            // obtain percentage and goal in church_goals
            $percentage_sch = $result_percen_sv['percentage_sch'];
            $goal_sch = $result_percen_sv['goal_sch'];

            // whole percentage
            $w_per_sch = round($percentage_sch * 100);

            // obtain points of schedule
            $points_sche = $total_schedule * $w_per_sch / $goal_sch;

            // FINAL OVERALL PERFOMANCE
            $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

            /*** OVERALL CELL ***/
            $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

            /*add points to array*/
            $leader_info['total'] = $overall_growth; 
            $leader_info['number_c'] = 1;

            $result_info[] = $leader_info;
          }

        }

        /*validate result info is not null*/
        if ($result_info != null) {

          // add points from the cells with same sector
          $res  = array();
          foreach($result_info as $vals){
              if(array_key_exists($vals['zone_id'],$res)){
                  $res[$vals['zone_id']]['total'] += $vals['total'];
                  $res[$vals['zone_id']]['number_c'] += $vals['number_c'];
                  $res[$vals['zone_id']]['points'] = (string)round($res[$vals['zone_id']]['total'] / $res[$vals['zone_id']]['number_c']);
              }
              else{
                  $res[$vals['zone_id']]  = $vals;
                  $res[$vals['zone_id']]['points'] = (string)$res[$vals['zone_id']]['total'];
              }
          }

          // final array without indexes
          $newArray = [];
          foreach ($res as $key => $value) {
              $newArray[] = $value;
          }

          // order array points
          foreach ($newArray as $key => $frow) {
              $aux[$key] = $frow['points'];
          }
          
          array_multisort($aux, SORT_DESC, $newArray);

          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $newArray));
        }else{
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result_info));
        }


        /*else member does not exist*/
      } else if ($member == '4') {

        /*Obtain general information district pastors*/
        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_districts.district_code, groups_districts.id as district_id, user.city FROM groups_districts,user WHERE user.id = groups_districts.district_pastor AND groups_districts.active = 1 AND groups_districts.church_id = '$church_id' $query_g";

        $result_info = null;

        foreach ($con->query($sql_leader) as $row) {

          $leader_info = $row;

          $district_id = $row['district_id'];
         
          /*Obtain cells asociated with district pastors (district)*/
          $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id IN (SELECT id from groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

          foreach ($con->query($sql_leader2) as $row2) {

            /*cells asociated*/
            $cell_id = $row2['cell_id'];

            // obtain overall multiply
            $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_cell = array(':church_id' => $church_id);
            $pre_ac_cell->execute($values_ac_cell);
            $result_ac_cell = $pre_ac_cell->fetch();

            $total_cells = $result_ac_cell['total_cells'];

            // last quarter
            $total_last_cell = $result_ac_cell['last_cells'];

            // obtain advance
            $overall_advance = $total_cells - $total_last_cell;

            // obtain percentage and goal in church_goals
            $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen->execute($values_ac_cell);
            $result_percen = $pre_percen->fetch();

            $percentage_gen = $result_percen['percentage'];
            $goal_gen = $result_percen['value'];

            // whole percentage
            $w_percentage = round($percentage_gen * 100);

            // obtain overall of multiply
            $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


            /*obtain cell_attendance global*/

            // obtain adult points

            // actual quarter
            $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_adults = array(':church_id' => $church_id);
            $pre_ac_adults->execute($values_ac_adults);
            $result_ac_adults = $pre_ac_adults->fetch();

            $total_adults = $result_ac_adults['total_adults'];

            // last quarter
            $total_last_adults = $result_ac_adults['last_adults'];

            if ($total_adults == null) {
              $total_adults = '0';
            } else if ($total_last_adults == null) {
              $total_last_adults = '0';
            }

            // obtain advance
            $adults_advance = $total_adults - $total_last_adults;

            // obtain percentage and goal in church_goals
            $percentage_ad = $result_percen['percentage_ad'];
            $goal_ad = $result_percen['goal_ad'];

            // whole percentage
            $w_percentagead = round($percentage_ad * 100);

            // obtain points of adults
            $points_ad = $adults_advance * $w_percentagead / $goal_ad;


            /*now obtain kids points*/

            // actual quarter
            $total_kids2 = $result_ac_adults['total_kids'];

            // last quarter
            $total_last_kids = $result_ac_adults['last_kids'];

            if ($total_kids2 == null) {
              $total_kids2 = '0';
            } else if ($total_last_kids == null) {
              $total_last_kids = '0';
            }

            // obtain advance
            $kids_advance = $total_kids2 - $total_last_kids;

            // obtain percentage and goal in church_goals
            $percentage_kd = $result_percen['percentage_kd'];
            $goal_kd = $result_percen['goal_kd'];

            // whole percentage
            $w_percentagekd = round($percentage_kd * 100);

            // obtain points of kids
            $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

            // FINAL OVERALL CELL ATTENDANCE
            $overall_attend = $points_ad + $points_kd;


            // obtain church_attendance global

            // actual quarter
            $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_church = array(':church_id' => $church_id);
            $pre_ac_church->execute($values_ac_church);
            $result_ac_church = $pre_ac_church->fetch();

            $total_doctrine = $result_ac_church['total_doctrine'];

            // last quarter
            $total_last_church = $result_ac_church['last_church'];

            if ($total_doctrine == null) {
              $total_doctrine = '0';
            } else if ($total_last_church == null) {
              $total_last_church = '0';
            }

            // obtain advance
            $church_advance = $total_doctrine - $total_last_church;

            // obtain percentage and goal in church_goals
            $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_ch->execute($values_ac_church);
            $result_percen_ch = $pre_percen_ch->fetch();

            $percentage_ch = $result_percen_ch['percentage'];
            $goal_ch = $result_percen_ch['value'];

            // whole percentage
            $w_percentagech = round($percentage_ch * 100);

            // obtain overall of church
            $overall_church = $church_advance * $w_percentagech / $goal_ch;


            // obtain salvation global

            // actual quarter
            $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_salv = array(':church_id' => $church_id);
            $pre_ac_salv->execute($values_ac_salv);
            $result_ac_salv = $pre_ac_salv->fetch();

            $total_salvation = $result_ac_salv['total_salvation'];

            // obtain percentage and goal in church_goals
            $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_sv->execute($values_ac_salv);
            $result_percen_sv = $pre_percen_sv->fetch();

            $percentage_sv = $result_percen_sv['percentage'];
            $goal_sv = $result_percen_sv['value'];

            // whole percentage
            $w_percentagesv = round($percentage_sv * 100);

            // obtain points of salvation
            $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


            // obtain baptized global

            // actual quarter
            $total_baptized = $result_ac_salv['total_baptized'];

            // obtain percentage and goal in church_goals
            $percentage_bp = $result_percen_sv['percentage_bp'];
            $goal_bp = $result_percen_sv['goal_bp'];

            // whole percentage
            $w_percentagebp = round($percentage_bp * 100);

            // obtain points of salvation
            $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


            // obtain scheduled global

            // actual quarter
            $total_schedule = $result_ac_salv['total_schedule_visits'];

            // obtain percentage and goal in church_goals
            $percentage_sch = $result_percen_sv['percentage_sch'];
            $goal_sch = $result_percen_sv['goal_sch'];

            // whole percentage
            $w_per_sch = round($percentage_sch * 100);

            // obtain points of schedule
            $points_sche = $total_schedule * $w_per_sch / $goal_sch;

            // FINAL OVERALL PERFOMANCE
            $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

            /*** OVERALL CELL ***/
            $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

            /*add points to array*/
            $leader_info['total'] = $overall_growth; 
            $leader_info['number_c'] = 1;

            $result_info[] = $leader_info;
          }

        }

        /*validate result info is not null*/
        if ($result_info != null) {

          // add points from the cells with same sector
          $res  = array();
          foreach($result_info as $vals){
              if(array_key_exists($vals['district_id'],$res)){
                  $res[$vals['district_id']]['total'] += $vals['total'];
                  $res[$vals['district_id']]['number_c'] += $vals['number_c'];
                  $res[$vals['district_id']]['points'] = (string)round($res[$vals['district_id']]['total'] / $res[$vals['district_id']]['number_c']);
              }
              else{
                  $res[$vals['district_id']]  = $vals;
                  $res[$vals['district_id']]['points'] = (string)$res[$vals['district_id']]['total'];
              }
          }

          // final array without indexes
          $newArray = [];
          foreach ($res as $key => $value) {
              $newArray[] = $value;
          }

          // order array points
          foreach ($newArray as $key => $frow) {
              $aux[$key] = $frow['points'];
          }
          
          array_multisort($aux, SORT_DESC, $newArray);

          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $newArray));
        }else{
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result_info));
        }


        /*else member does not exist*/
      } else{
      	return $response->withStatus(422)
      	        ->withHeader('Content-Type', 'application/json')
      	        ->withJson(array('error' => array(
      	            "message"=>"Member does not exist",
      	            "status"=>422)));
      }


    // }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*ranking cell attendance*/
$app->post('/statistics/cell-attendance/ranking', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member = $request->getParam('member');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $gender = $request->getParam('gender');
   $parent_id = $request->getParam('parent_id');
   $child_id = $request->getParam('child_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('5');
    $month_t = date('05');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($final_date);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";

      $initial_quarter2 = $period_i;

      $final_quarter2 = $period_f;

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($sub_m);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    /*validate child_id*/
    if ($role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($child_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: child_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i, (SELECT id
                               FROM groups_districts
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as district_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $dis = $result_dis['district_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i, (SELECT id FROM groups_zones
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as zone_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i, (SELECT id FROM groups_sectors
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as sector_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];
      $sec = $result_dis['sector_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    }

       
    /************** Points Ranking *****************/

    /*if the gender is sent*/
    $query_g = '';
    if ($gender) {
      if ($gender == 'm') {
        $query_g = "AND user.gender = 'm'";
        
      }else if($gender == 'f'){
        $query_g = "AND user.gender = 'f'";
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Gender does not exist",
                    "status"=>422)));
      }
    }

    if ($member == '1') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter leader*/
      $filter_l = filterLeader($role_id, $filter_district, $filter_zone, $filter_sector, $parent_id, $child_id, $church_id);

      if ($filter_l) {
        $filter_val = $filter_l;
      }

      
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, groups_cells.id as cell_id, groups_cells.city FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id' $query_g $filter_val";

      $final_points = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $cell_id = $row['cell_id'];

        // obtain percentage and goal in church_goals
        $pre_percen = $con->prepare("SELECT percentage as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_cell = array(':church_id' => $church_id);
        $pre_percen->execute($values_ac_cell);
        $result_percen = $pre_percen->fetch();


        /*obtain cell_attendance global*/

        // obtain adult points

        // actual quarter
        $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_adults = array(':church_id' => $church_id);
        $pre_ac_adults->execute($values_ac_adults);
        $result_ac_adults = $pre_ac_adults->fetch();

        $total_adults = $result_ac_adults['total_adults'];

        // last quarter
        $total_last_adults = $result_ac_adults['last_adults'];

        if ($total_adults == null) {
          $total_adults = '0';
        } else if ($total_last_adults == null) {
          $total_last_adults = '0';
        }

        // obtain advance
        $adults_advance = $total_adults - $total_last_adults;

        // obtain percentage and goal in church_goals
        $percentage_ad = $result_percen['percentage_ad'];
        $goal_ad = $result_percen['goal_ad'];

        // whole percentage
        $w_percentagead = round($percentage_ad * 100);

        // obtain points of adults
        $points_ad = $adults_advance * $w_percentagead / $goal_ad;


        /*now obtain kids points*/

        // actual quarter
        $total_kids2 = $result_ac_adults['total_kids'];

        // last quarter
        $total_last_kids = $result_ac_adults['last_kids'];

        if ($total_kids2 == null) {
          $total_kids2 = '0';
        } else if ($total_last_kids == null) {
          $total_last_kids = '0';
        }

        // obtain advance
        $kids_advance = $total_kids2 - $total_last_kids;

        // obtain percentage and goal in church_goals
        $percentage_kd = $result_percen['percentage_kd'];
        $goal_kd = $result_percen['goal_kd'];

        // whole percentage
        $w_percentagekd = round($percentage_kd * 100);

        // obtain points of kids
        $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

        // FINAL OVERALL CELL ATTENDANCE
        $overall_attend = $points_ad + $points_kd;


        $leader_info['points'] = (string)$overall_attend;

        $final_points[] = $leader_info;

      }

      if($final_points != null){

        // order array points
        foreach ($final_points as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $final_points);

      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_points));

    } else if ($member == '2') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter supervisor*/
      $filter_s = filterSupervisor($role_id, $filter_district, $filter_zone, $parent_id, $child_id, $church_id);

      if ($filter_s) {
        $filter_val = $filter_s;
      }
        
      /*Obtain general information supervisors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_sectors.district_code, groups_sectors.zone_code, groups_sectors.sector_code, groups_sectors.id as sector_id, user.city FROM groups_sectors,user WHERE user.id = groups_sectors.supervisor AND groups_sectors.active = 1 AND groups_sectors.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $sector_id = $row['sector_id'];
       
        /*Obtain cells asociated with supervisors (sector)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id = '$sector_id' AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];


          // obtain percentage and goal in church_goals
          $pre_percen = $con->prepare("SELECT percentage as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_cell = array(':church_id' => $church_id);
          $pre_percen->execute($values_ac_cell);
          $result_percen = $pre_percen->fetch();


          /*obtain cell_attendance global*/

          // obtain adult points

          // actual quarter
          $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_adults = array(':church_id' => $church_id);
          $pre_ac_adults->execute($values_ac_adults);
          $result_ac_adults = $pre_ac_adults->fetch();

          $total_adults = $result_ac_adults['total_adults'];

          // last quarter
          $total_last_adults = $result_ac_adults['last_adults'];

          if ($total_adults == null) {
            $total_adults = '0';
          } else if ($total_last_adults == null) {
            $total_last_adults = '0';
          }

          // obtain advance
          $adults_advance = $total_adults - $total_last_adults;

          // obtain percentage and goal in church_goals
          $percentage_ad = $result_percen['percentage_ad'];
          $goal_ad = $result_percen['goal_ad'];

          // whole percentage
          $w_percentagead = round($percentage_ad * 100);

          // obtain points of adults
          $points_ad = $adults_advance * $w_percentagead / $goal_ad;


          /*now obtain kids points*/

          // actual quarter
          $total_kids2 = $result_ac_adults['total_kids'];

          // last quarter
          $total_last_kids = $result_ac_adults['last_kids'];

          if ($total_kids2 == null) {
            $total_kids2 = '0';
          } else if ($total_last_kids == null) {
            $total_last_kids = '0';
          }

          // obtain advance
          $kids_advance = $total_kids2 - $total_last_kids;

          // obtain percentage and goal in church_goals
          $percentage_kd = $result_percen['percentage_kd'];
          $goal_kd = $result_percen['goal_kd'];

          // whole percentage
          $w_percentagekd = round($percentage_kd * 100);

          // obtain points of kids
          $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

          // FINAL OVERALL CELL ATTENDANCE
          $overall_attend = $points_ad + $points_kd;


          /*add points to array*/
          $leader_info['total'] = $overall_attend; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['sector_id'],$res)){
                $res[$vals['sector_id']]['total'] += $vals['total'];
                $res[$vals['sector_id']]['number_c'] += $vals['number_c'];
                $res[$vals['sector_id']]['points'] = (string)round($res[$vals['sector_id']]['total'] / $res[$vals['sector_id']]['number_c']);
            }
            else{
                $res[$vals['sector_id']]  = $vals;
                $res[$vals['sector_id']]['points'] = (string)$res[$vals['sector_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '3') {
      
      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter zone pastor*/
      $filter_z = filterZonepastor($role_id, $filter_district, $parent_id, $child_id, $church_id);

      if ($filter_z) {
        $filter_val = $filter_z;
      }

      /*Obtain general information zone pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_zones.district_code, groups_zones.zone_code, groups_zones.id as zone_id, user.city FROM groups_zones,user WHERE user.id = groups_zones.zone_pastor AND groups_zones.active = 1 AND groups_zones.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $zone_id = $row['zone_id'];
       
        /*Obtain cells asociated with zone pastors (zone)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id = '$zone_id' AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          // obtain percentage and goal in church_goals
          $pre_percen = $con->prepare("SELECT percentage as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_cell = array(':church_id' => $church_id);
          $pre_percen->execute($values_ac_cell);
          $result_percen = $pre_percen->fetch();


          /*obtain cell_attendance global*/

          // obtain adult points

          // actual quarter
          $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_adults = array(':church_id' => $church_id);
          $pre_ac_adults->execute($values_ac_adults);
          $result_ac_adults = $pre_ac_adults->fetch();

          $total_adults = $result_ac_adults['total_adults'];

          // last quarter
          $total_last_adults = $result_ac_adults['last_adults'];

          if ($total_adults == null) {
            $total_adults = '0';
          } else if ($total_last_adults == null) {
            $total_last_adults = '0';
          }

          // obtain advance
          $adults_advance = $total_adults - $total_last_adults;

          // obtain percentage and goal in church_goals
          $percentage_ad = $result_percen['percentage_ad'];
          $goal_ad = $result_percen['goal_ad'];

          // whole percentage
          $w_percentagead = round($percentage_ad * 100);

          // obtain points of adults
          $points_ad = $adults_advance * $w_percentagead / $goal_ad;


          /*now obtain kids points*/

          // actual quarter
          $total_kids2 = $result_ac_adults['total_kids'];

          // last quarter
          $total_last_kids = $result_ac_adults['last_kids'];

          if ($total_kids2 == null) {
            $total_kids2 = '0';
          } else if ($total_last_kids == null) {
            $total_last_kids = '0';
          }

          // obtain advance
          $kids_advance = $total_kids2 - $total_last_kids;

          // obtain percentage and goal in church_goals
          $percentage_kd = $result_percen['percentage_kd'];
          $goal_kd = $result_percen['goal_kd'];

          // whole percentage
          $w_percentagekd = round($percentage_kd * 100);

          // obtain points of kids
          $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

          // FINAL OVERALL CELL ATTENDANCE
          $overall_attend = $points_ad + $points_kd;


          /*add points to array*/
          $leader_info['total'] = $overall_attend; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['zone_id'],$res)){
                $res[$vals['zone_id']]['total'] += $vals['total'];
                $res[$vals['zone_id']]['number_c'] += $vals['number_c'];
                $res[$vals['zone_id']]['points'] = (string)round($res[$vals['zone_id']]['total'] / $res[$vals['zone_id']]['number_c']);
            }
            else{
                $res[$vals['zone_id']]  = $vals;
                $res[$vals['zone_id']]['points'] = (string)$res[$vals['zone_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '4') {
        
      /*Obtain general information district pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_districts.district_code, groups_districts.id as district_id, user.city FROM groups_districts,user WHERE user.id = groups_districts.district_pastor AND groups_districts.active = 1 AND groups_districts.church_id = '$church_id' $query_g";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $district_id = $row['district_id'];
       
        /*Obtain cells asociated with district pastors (district)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id IN (SELECT id from groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          // obtain percentage and goal in church_goals
          $pre_percen = $con->prepare("SELECT percentage as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_cell = array(':church_id' => $church_id);
          $pre_percen->execute($values_ac_cell);
          $result_percen = $pre_percen->fetch();


          /*obtain cell_attendance global*/

          // obtain adult points

          // actual quarter
          $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_adults = array(':church_id' => $church_id);
          $pre_ac_adults->execute($values_ac_adults);
          $result_ac_adults = $pre_ac_adults->fetch();

          $total_adults = $result_ac_adults['total_adults'];

          // last quarter
          $total_last_adults = $result_ac_adults['last_adults'];

          if ($total_adults == null) {
            $total_adults = '0';
          } else if ($total_last_adults == null) {
            $total_last_adults = '0';
          }

          // obtain advance
          $adults_advance = $total_adults - $total_last_adults;

          // obtain percentage and goal in church_goals
          $percentage_ad = $result_percen['percentage_ad'];
          $goal_ad = $result_percen['goal_ad'];

          // whole percentage
          $w_percentagead = round($percentage_ad * 100);

          // obtain points of adults
          $points_ad = $adults_advance * $w_percentagead / $goal_ad;


          /*now obtain kids points*/

          // actual quarter
          $total_kids2 = $result_ac_adults['total_kids'];

          // last quarter
          $total_last_kids = $result_ac_adults['last_kids'];

          if ($total_kids2 == null) {
            $total_kids2 = '0';
          } else if ($total_last_kids == null) {
            $total_last_kids = '0';
          }

          // obtain advance
          $kids_advance = $total_kids2 - $total_last_kids;

          // obtain percentage and goal in church_goals
          $percentage_kd = $result_percen['percentage_kd'];
          $goal_kd = $result_percen['goal_kd'];

          // whole percentage
          $w_percentagekd = round($percentage_kd * 100);

          // obtain points of kids
          $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

          // FINAL OVERALL CELL ATTENDANCE
          $overall_attend = $points_ad + $points_kd;


          /*add points to array*/
          $leader_info['total'] = $overall_attend; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }


      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['district_id'],$res)){
                $res[$vals['district_id']]['total'] += $vals['total'];
                $res[$vals['district_id']]['number_c'] += $vals['number_c'];
                $res[$vals['district_id']]['points'] = (string)round($res[$vals['district_id']]['total'] / $res[$vals['district_id']]['number_c']);
            }
            else{
                $res[$vals['district_id']]  = $vals;
                $res[$vals['district_id']]['points'] = (string)$res[$vals['district_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }

      /*else member does not exist*/
    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Member does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*ranking church attendance*/
$app->post('/statistics/church-attendance/ranking', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member = $request->getParam('member');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $gender = $request->getParam('gender');
   $parent_id = $request->getParam('parent_id');
   $child_id = $request->getParam('child_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('5');
    $month_t = date('05');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($final_date);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";

      $initial_quarter2 = $period_i;

      $final_quarter2 = $period_f;

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($sub_m);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    /*validate child_id*/
    if ($role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($child_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: child_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i, (SELECT id
                               FROM groups_districts
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as district_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $dis = $result_dis['district_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i, (SELECT id FROM groups_zones
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as zone_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i, (SELECT id FROM groups_sectors
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as sector_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];
      $sec = $result_dis['sector_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    }

 
    /************** Points Ranking *****************/

    /*if the gender is sent*/
    $query_g = '';
    if ($gender) {
      if ($gender == 'm') {
        $query_g = "AND user.gender = 'm'";
        
      }else if($gender == 'f'){
        $query_g = "AND user.gender = 'f'";
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Gender does not exist",
                    "status"=>422)));
      }
    }

    if ($member == '1') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter leader*/
      $filter_l = filterLeader($role_id, $filter_district, $filter_zone, $filter_sector, $parent_id, $child_id, $church_id);

      if ($filter_l) {
        $filter_val = $filter_l;
      }
      
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, groups_cells.id as cell_id, groups_cells.city FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id' $query_g $filter_val";

      $final_points = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $cell_id = $row['cell_id'];

        // obtain church_attendance global

        // actual quarter
        $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_church = array(':church_id' => $church_id);
        $pre_ac_church->execute($values_ac_church);
        $result_ac_church = $pre_ac_church->fetch();

        $total_doctrine = $result_ac_church['total_doctrine'];

        // last quarter
        $total_last_church = $result_ac_church['last_church'];

        if ($total_doctrine == null) {
          $total_doctrine = '0';
        } else if ($total_last_church == null) {
          $total_last_church = '0';
        }

        // obtain advance
        $church_advance = $total_doctrine - $total_last_church;

        // obtain percentage and goal in church_goals
        $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $pre_percen_ch->execute($values_ac_church);
        $result_percen_ch = $pre_percen_ch->fetch();

        $percentage_ch = $result_percen_ch['percentage'];
        $goal_ch = $result_percen_ch['value'];

        // whole percentage
        $w_percentagech = round($percentage_ch * 100);

        // obtain overall of church
        $overall_church = $church_advance * $w_percentagech / $goal_ch;


        $leader_info['points'] = (string)$overall_church;

        $final_points[] = $leader_info;

      }

      if($final_points != null){

        // order array points
        foreach ($final_points as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $final_points);

      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_points));

    } else if ($member == '2') {
      
      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter supervisor*/
      $filter_s = filterSupervisor($role_id, $filter_district, $filter_zone, $parent_id, $child_id, $church_id);

      if ($filter_s) {
        $filter_val = $filter_s;
      }

      /*Obtain general information supervisors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_sectors.district_code, groups_sectors.zone_code, groups_sectors.sector_code, groups_sectors.id as sector_id, user.city FROM groups_sectors,user WHERE user.id = groups_sectors.supervisor AND groups_sectors.active = 1 AND groups_sectors.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $sector_id = $row['sector_id'];
       
        /*Obtain cells asociated with supervisors (sector)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id = '$sector_id' AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];


          // obtain church_attendance global

          // actual quarter
          $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_church = array(':church_id' => $church_id);
          $pre_ac_church->execute($values_ac_church);
          $result_ac_church = $pre_ac_church->fetch();

          $total_doctrine = $result_ac_church['total_doctrine'];

          // last quarter
          $total_last_church = $result_ac_church['last_church'];

          if ($total_doctrine == null) {
            $total_doctrine = '0';
          } else if ($total_last_church == null) {
            $total_last_church = '0';
          }

          // obtain advance
          $church_advance = $total_doctrine - $total_last_church;

          // obtain percentage and goal in church_goals
          $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_ch->execute($values_ac_church);
          $result_percen_ch = $pre_percen_ch->fetch();

          $percentage_ch = $result_percen_ch['percentage'];
          $goal_ch = $result_percen_ch['value'];

          // whole percentage
          $w_percentagech = round($percentage_ch * 100);

          // obtain overall of church
          $overall_church = $church_advance * $w_percentagech / $goal_ch;


          /*add points to array*/
          $leader_info['total'] = $overall_church; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }


      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['sector_id'],$res)){
                $res[$vals['sector_id']]['total'] += $vals['total'];
                $res[$vals['sector_id']]['number_c'] += $vals['number_c'];
                $res[$vals['sector_id']]['points'] = (string)round($res[$vals['sector_id']]['total'] / $res[$vals['sector_id']]['number_c']);
            }
            else{
                $res[$vals['sector_id']]  = $vals;
                $res[$vals['sector_id']]['points'] = (string)$res[$vals['sector_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '3') {
      
      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter zone pastor*/
      $filter_z = filterZonepastor($role_id, $filter_district, $parent_id, $child_id, $church_id);

      if ($filter_z) {
        $filter_val = $filter_z;
      }

      /*Obtain general information zone pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_zones.district_code, groups_zones.zone_code, groups_zones.id as zone_id, user.city FROM groups_zones,user WHERE user.id = groups_zones.zone_pastor AND groups_zones.active = 1 AND groups_zones.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $zone_id = $row['zone_id'];
       
        /*Obtain cells asociated with zone pastors (zone)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id = '$zone_id' AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          // obtain church_attendance global

          // actual quarter
          $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_church = array(':church_id' => $church_id);
          $pre_ac_church->execute($values_ac_church);
          $result_ac_church = $pre_ac_church->fetch();

          $total_doctrine = $result_ac_church['total_doctrine'];

          // last quarter
          $total_last_church = $result_ac_church['last_church'];

          if ($total_doctrine == null) {
            $total_doctrine = '0';
          } else if ($total_last_church == null) {
            $total_last_church = '0';
          }

          // obtain advance
          $church_advance = $total_doctrine - $total_last_church;

          // obtain percentage and goal in church_goals
          $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_ch->execute($values_ac_church);
          $result_percen_ch = $pre_percen_ch->fetch();

          $percentage_ch = $result_percen_ch['percentage'];
          $goal_ch = $result_percen_ch['value'];

          // whole percentage
          $w_percentagech = round($percentage_ch * 100);

          // obtain overall of church
          $overall_church = $church_advance * $w_percentagech / $goal_ch;


          /*add points to array*/
          $leader_info['total'] = $overall_church; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }


      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['zone_id'],$res)){
                $res[$vals['zone_id']]['total'] += $vals['total'];
                $res[$vals['zone_id']]['number_c'] += $vals['number_c'];
                $res[$vals['zone_id']]['points'] = (string)round($res[$vals['zone_id']]['total'] / $res[$vals['zone_id']]['number_c']);
            }
            else{
                $res[$vals['zone_id']]  = $vals;
                $res[$vals['zone_id']]['points'] = (string)$res[$vals['zone_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '4') {
        
      /*Obtain general information district pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_districts.district_code, groups_districts.id as district_id, user.city FROM groups_districts,user WHERE user.id = groups_districts.district_pastor AND groups_districts.active = 1 AND groups_districts.church_id = '$church_id' $query_g";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $district_id = $row['district_id'];
       
        /*Obtain cells asociated with district pastors (district)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id IN (SELECT id from groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];


          // obtain church_attendance global

          // actual quarter
          $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_church = array(':church_id' => $church_id);
          $pre_ac_church->execute($values_ac_church);
          $result_ac_church = $pre_ac_church->fetch();

          $total_doctrine = $result_ac_church['total_doctrine'];

          // last quarter
          $total_last_church = $result_ac_church['last_church'];

          if ($total_doctrine == null) {
            $total_doctrine = '0';
          } else if ($total_last_church == null) {
            $total_last_church = '0';
          }

          // obtain advance
          $church_advance = $total_doctrine - $total_last_church;

          // obtain percentage and goal in church_goals
          $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_ch->execute($values_ac_church);
          $result_percen_ch = $pre_percen_ch->fetch();

          $percentage_ch = $result_percen_ch['percentage'];
          $goal_ch = $result_percen_ch['value'];

          // whole percentage
          $w_percentagech = round($percentage_ch * 100);

          // obtain overall of church
          $overall_church = $church_advance * $w_percentagech / $goal_ch;


          /*add points to array*/
          $leader_info['total'] = $overall_church; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['district_id'],$res)){
                $res[$vals['district_id']]['total'] += $vals['total'];
                $res[$vals['district_id']]['number_c'] += $vals['number_c'];
                $res[$vals['district_id']]['points'] = (string)round($res[$vals['district_id']]['total'] / $res[$vals['district_id']]['number_c']);
            }
            else{
                $res[$vals['district_id']]  = $vals;
                $res[$vals['district_id']]['points'] = (string)$res[$vals['district_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Member does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*ranking perfomance*/
$app->post('/statistics/perfomance/ranking', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member = $request->getParam('member');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $gender = $request->getParam('gender');
   $parent_id = $request->getParam('parent_id');
   $child_id = $request->getParam('child_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('5');
    $month_t = date('05');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($final_date);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";

      $initial_quarter2 = $period_i;

      $final_quarter2 = $period_f;

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($sub_m);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    /*validate child_id*/
    if ($role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($child_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: child_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i, (SELECT id
                               FROM groups_districts
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as district_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $dis = $result_dis['district_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i, (SELECT id FROM groups_zones
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as zone_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i, (SELECT id FROM groups_sectors
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as sector_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];
      $sec = $result_dis['sector_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    }

      
    /************** Points Ranking *****************/

    /*if the gender is sent*/
    $query_g = '';
    if ($gender) {
      if ($gender == 'm') {
        $query_g = "AND user.gender = 'm'";
        
      }else if($gender == 'f'){
        $query_g = "AND user.gender = 'f'";
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Gender does not exist",
                    "status"=>422)));
      }
    }

    if ($member == '1') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter leader*/
      $filter_l = filterLeader($role_id, $filter_district, $filter_zone, $filter_sector, $parent_id, $child_id, $church_id);

      if ($filter_l) {
        $filter_val = $filter_l;
      }
      
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, groups_cells.id as cell_id, groups_cells.city FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id' $query_g $filter_val";

      $final_points = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $cell_id = $row['cell_id'];

        // obtain salvation global

        // actual quarter
        $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ac_salv = array(':church_id' => $church_id);
        $pre_ac_salv->execute($values_ac_salv);
        $result_ac_salv = $pre_ac_salv->fetch();

        $total_salvation = $result_ac_salv['total_salvation'];

        // obtain percentage and goal in church_goals
        $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $pre_percen_sv->execute($values_ac_salv);
        $result_percen_sv = $pre_percen_sv->fetch();

        $percentage_sv = $result_percen_sv['percentage'];
        $goal_sv = $result_percen_sv['value'];

        // whole percentage
        $w_percentagesv = round($percentage_sv * 100);

        // obtain points of salvation
        $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


        // obtain baptized global

        // actual quarter
        $total_baptized = $result_ac_salv['total_baptized'];

        // obtain percentage and goal in church_goals
        $percentage_bp = $result_percen_sv['percentage_bp'];
        $goal_bp = $result_percen_sv['goal_bp'];

        // whole percentage
        $w_percentagebp = round($percentage_bp * 100);

        // obtain points of salvation
        $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


        // obtain scheduled global

        // actual quarter
        $total_schedule = $result_ac_salv['total_schedule_visits'];

        // obtain percentage and goal in church_goals
        $percentage_sch = $result_percen_sv['percentage_sch'];
        $goal_sch = $result_percen_sv['goal_sch'];

        // whole percentage
        $w_per_sch = round($percentage_sch * 100);

        // obtain points of schedule
        $points_sche = $total_schedule * $w_per_sch / $goal_sch;

        // FINAL OVERALL PERFOMANCE
        $overall_perfomance = $points_salvation + $points_baptized + $points_sche;


        $leader_info['points'] = (string)$overall_perfomance;

        $final_points[] = $leader_info;

      }

      if($final_points != null){

        // order array points
        foreach ($final_points as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $final_points);

      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_points));

    } else if ($member == '2') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter supervisor*/
      $filter_s = filterSupervisor($role_id, $filter_district, $filter_zone, $parent_id, $child_id, $church_id);

      if ($filter_s) {
        $filter_val = $filter_s;
      }
        
      /*Obtain general information supervisors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_sectors.district_code, groups_sectors.zone_code, groups_sectors.sector_code, groups_sectors.id as sector_id, user.city FROM groups_sectors,user WHERE user.id = groups_sectors.supervisor AND groups_sectors.active = 1 AND groups_sectors.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $sector_id = $row['sector_id'];
       
        /*Obtain cells asociated with supervisors (sector)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id = '$sector_id' AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          // obtain salvation global

          // actual quarter
          $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_salv = array(':church_id' => $church_id);
          $pre_ac_salv->execute($values_ac_salv);
          $result_ac_salv = $pre_ac_salv->fetch();

          $total_salvation = $result_ac_salv['total_salvation'];

          // obtain percentage and goal in church_goals
          $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_sv->execute($values_ac_salv);
          $result_percen_sv = $pre_percen_sv->fetch();

          $percentage_sv = $result_percen_sv['percentage'];
          $goal_sv = $result_percen_sv['value'];

          // whole percentage
          $w_percentagesv = round($percentage_sv * 100);

          // obtain points of salvation
          $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


          // obtain baptized global

          // actual quarter
          $total_baptized = $result_ac_salv['total_baptized'];

          // obtain percentage and goal in church_goals
          $percentage_bp = $result_percen_sv['percentage_bp'];
          $goal_bp = $result_percen_sv['goal_bp'];

          // whole percentage
          $w_percentagebp = round($percentage_bp * 100);

          // obtain points of salvation
          $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


          // obtain scheduled global

          // actual quarter
          $total_schedule = $result_ac_salv['total_schedule_visits'];

          // obtain percentage and goal in church_goals
          $percentage_sch = $result_percen_sv['percentage_sch'];
          $goal_sch = $result_percen_sv['goal_sch'];

          // whole percentage
          $w_per_sch = round($percentage_sch * 100);

          // obtain points of schedule
          $points_sche = $total_schedule * $w_per_sch / $goal_sch;

          // FINAL OVERALL PERFOMANCE
          $overall_perfomance = $points_salvation + $points_baptized + $points_sche;


          /*add points to array*/
          $leader_info['total'] = $overall_perfomance; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }


      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['sector_id'],$res)){
                $res[$vals['sector_id']]['total'] += $vals['total'];
                $res[$vals['sector_id']]['number_c'] += $vals['number_c'];
                $res[$vals['sector_id']]['points'] = (string)round($res[$vals['sector_id']]['total'] / $res[$vals['sector_id']]['number_c']);
            }
            else{
                $res[$vals['sector_id']]  = $vals;
                $res[$vals['sector_id']]['points'] = (string)$res[$vals['sector_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '3') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter zone pastor*/
      $filter_z = filterZonepastor($role_id, $filter_district, $parent_id, $child_id, $church_id);

      if ($filter_z) {
        $filter_val = $filter_z;
      }
        
      /*Obtain general information zone pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_zones.district_code, groups_zones.zone_code, groups_zones.id as zone_id, user.city FROM groups_zones,user WHERE user.id = groups_zones.zone_pastor AND groups_zones.active = 1 AND groups_zones.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $zone_id = $row['zone_id'];
       
        /*Obtain cells asociated with zone pastors (zone)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id = '$zone_id' AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";


        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          // obtain salvation global

          // actual quarter
          $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_salv = array(':church_id' => $church_id);
          $pre_ac_salv->execute($values_ac_salv);
          $result_ac_salv = $pre_ac_salv->fetch();

          $total_salvation = $result_ac_salv['total_salvation'];

          // obtain percentage and goal in church_goals
          $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_sv->execute($values_ac_salv);
          $result_percen_sv = $pre_percen_sv->fetch();

          $percentage_sv = $result_percen_sv['percentage'];
          $goal_sv = $result_percen_sv['value'];

          // whole percentage
          $w_percentagesv = round($percentage_sv * 100);

          // obtain points of salvation
          $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


          // obtain baptized global

          // actual quarter
          $total_baptized = $result_ac_salv['total_baptized'];

          // obtain percentage and goal in church_goals
          $percentage_bp = $result_percen_sv['percentage_bp'];
          $goal_bp = $result_percen_sv['goal_bp'];

          // whole percentage
          $w_percentagebp = round($percentage_bp * 100);

          // obtain points of salvation
          $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


          // obtain scheduled global

          // actual quarter
          $total_schedule = $result_ac_salv['total_schedule_visits'];

          // obtain percentage and goal in church_goals
          $percentage_sch = $result_percen_sv['percentage_sch'];
          $goal_sch = $result_percen_sv['goal_sch'];

          // whole percentage
          $w_per_sch = round($percentage_sch * 100);

          // obtain points of schedule
          $points_sche = $total_schedule * $w_per_sch / $goal_sch;

          // FINAL OVERALL PERFOMANCE
          $overall_perfomance = $points_salvation + $points_baptized + $points_sche;


          /*add points to array*/
          $leader_info['total'] = $overall_perfomance; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['zone_id'],$res)){
                $res[$vals['zone_id']]['total'] += $vals['total'];
                $res[$vals['zone_id']]['number_c'] += $vals['number_c'];
                $res[$vals['zone_id']]['points'] = (string)round($res[$vals['zone_id']]['total'] / $res[$vals['zone_id']]['number_c']);
            }
            else{
                $res[$vals['zone_id']]  = $vals;
                $res[$vals['zone_id']]['points'] = (string)$res[$vals['zone_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '4') {
        
      /*Obtain general information district pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_districts.district_code, groups_districts.id as district_id, user.city FROM groups_districts,user WHERE user.id = groups_districts.district_pastor AND groups_districts.active = 1 AND groups_districts.church_id = '$church_id' $query_g";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $district_id = $row['district_id'];
       
        /*Obtain cells asociated with district pastors (district)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id IN (SELECT id from groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          // obtain salvation global

          // actual quarter
          $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_salv = array(':church_id' => $church_id);
          $pre_ac_salv->execute($values_ac_salv);
          $result_ac_salv = $pre_ac_salv->fetch();

          $total_salvation = $result_ac_salv['total_salvation'];

          // obtain percentage and goal in church_goals
          $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_sv->execute($values_ac_salv);
          $result_percen_sv = $pre_percen_sv->fetch();

          $percentage_sv = $result_percen_sv['percentage'];
          $goal_sv = $result_percen_sv['value'];

          // whole percentage
          $w_percentagesv = round($percentage_sv * 100);

          // obtain points of salvation
          $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


          // obtain baptized global

          // actual quarter
          $total_baptized = $result_ac_salv['total_baptized'];

          // obtain percentage and goal in church_goals
          $percentage_bp = $result_percen_sv['percentage_bp'];
          $goal_bp = $result_percen_sv['goal_bp'];

          // whole percentage
          $w_percentagebp = round($percentage_bp * 100);

          // obtain points of salvation
          $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


          // obtain scheduled global

          // actual quarter
          $total_schedule = $result_ac_salv['total_schedule_visits'];

          // obtain percentage and goal in church_goals
          $percentage_sch = $result_percen_sv['percentage_sch'];
          $goal_sch = $result_percen_sv['goal_sch'];

          // whole percentage
          $w_per_sch = round($percentage_sch * 100);

          // obtain points of schedule
          $points_sche = $total_schedule * $w_per_sch / $goal_sch;

          // FINAL OVERALL PERFOMANCE
          $overall_perfomance = $points_salvation + $points_baptized + $points_sche;


          /*add points to array*/
          $leader_info['total'] = $overall_perfomance; 
          $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['district_id'],$res)){
                $res[$vals['district_id']]['total'] += $vals['total'];
                $res[$vals['district_id']]['number_c'] += $vals['number_c'];
                $res[$vals['district_id']]['points'] = (string)round($res[$vals['district_id']]['total'] / $res[$vals['district_id']]['number_c']);
            }
            else{
                $res[$vals['district_id']]  = $vals;
                $res[$vals['district_id']]['points'] = (string)$res[$vals['district_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['points'];
        }
        
        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Member does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/*ranking donations*/
$app->post('/statistics/donations/ranking', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member = $request->getParam('member');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $gender = $request->getParam('gender');

   $parent_id = $request->getParam('parent_id');
   $child_id = $request->getParam('child_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('5');
    $month_t = date('05');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($final_date);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";

      $initial_quarter2 = $period_i;

      $final_quarter2 = $period_f;

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($sub_m);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    /*validate child_id*/
    if ($role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($child_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: child_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i, (SELECT id
                               FROM groups_districts
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as district_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $dis = $result_dis['district_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i, (SELECT id FROM groups_zones
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as zone_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i, (SELECT id FROM groups_sectors
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as sector_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];
      $sec = $result_dis['sector_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    }

      
 
    /************** Points Ranking *****************/

    /*if the gender is sent*/
    $query_g = '';
    if ($gender) {
      if ($gender == 'm') {
        $query_g = "AND user.gender = 'm'";
        
      }else if($gender == 'f'){
        $query_g = "AND user.gender = 'f'";
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Gender does not exist",
                    "status"=>422)));
      }
    }

    if ($member == '1') {
      
      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter leader*/
      $filter_l = filterLeader($role_id, $filter_district, $filter_zone, $filter_sector, $parent_id, $child_id, $church_id);

      if ($filter_l) {
        $filter_val = $filter_l;
      }

      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, groups_cells.id as cell_id, groups_cells.city FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id' $query_g $filter_val";

      $final_points = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $cell_id = $row['cell_id'];

        /*Obtain total donations*/
        $pre_cro = $con->prepare("SELECT SUM(donations_offering + donations_events + donations_transport) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_cro = array(':church_id' => $church_id);
        $pre_cro->execute($values_cro);
        $result_cro = $pre_cro->fetch();

        $crowd = $result_cro['crowd'];


        $leader_info['donations'] = (string)$crowd;

        $final_points[] = $leader_info;

      }

      if($final_points != null){

        // order array points
        foreach ($final_points as $key => $frow) {
            $aux[$key] = $frow['donations'];
        }
        
        array_multisort($aux, SORT_DESC, $final_points);

      }

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $final_points));

    } else if ($member == '2') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter supervisor*/
      $filter_s = filterSupervisor($role_id, $filter_district, $filter_zone, $parent_id, $child_id, $church_id);

      if ($filter_s) {
        $filter_val = $filter_s;
      }

      /*Obtain general information supervisors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_sectors.district_code, groups_sectors.zone_code, groups_sectors.sector_code, groups_sectors.id as sector_id, user.city FROM groups_sectors,user WHERE user.id = groups_sectors.supervisor AND groups_sectors.active = 1 AND groups_sectors.church_id = '$church_id' $query_g $filter_val";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $sector_id = $row['sector_id'];
       
        /*Obtain cells asociated with supervisors (sector)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id = '$sector_id' AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          /*Obtain total donations*/
          $pre_cro = $con->prepare("SELECT SUM(donations_offering + donations_events + donations_transport) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cro = array(':church_id' => $church_id);
          $pre_cro->execute($values_cro);
          $result_cro = $pre_cro->fetch();

          $crowd = $result_cro['crowd'];

          /*add points to array*/
          $leader_info['donations'] = (string)$crowd; 
          // $leader_info['number_c'] = 1;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['sector_id'],$res)){
                $res[$vals['sector_id']]['donations'] += $vals['donations'];
                $res[$vals['sector_id']]['donations'] = (string)$res[$vals['sector_id']]['donations'];
                // $res[$vals['sector_id']]['number_c'] += $vals['number_c'];
                // $res[$vals['sector_id']]['donations'] = (string)round($res[$vals['sector_id']]['total'] / $res[$vals['sector_id']]['number_c']);
            }
            else{
                $res[$vals['sector_id']]  = $vals;
                // $res[$vals['sector_id']]['donations'] = (string)$res[$vals['sector_id']]['total'];
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['donations'];
        }

        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }

      /*else member does not exist*/
    } else if ($member == '3') {

      /*validate according to parent_id*/
      $filter_val = '';

      /*function filter zone pastor*/
      $filter_z = filterZonepastor($role_id, $filter_district, $parent_id, $child_id, $church_id);

      if ($filter_z) {
        $filter_val = $filter_z;
      }
        
      /*Obtain general information zone pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_zones.district_code, groups_zones.zone_code, groups_zones.id as zone_id, user.city FROM groups_zones,user WHERE user.id = groups_zones.zone_pastor AND groups_zones.active = 1 AND groups_zones.church_id = '$church_id' $query_g $filter_val";

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $zone_id = $row['zone_id'];
       
        /*Obtain cells asociated with zone pastors (zone)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id = '$zone_id' AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        $result_info = null;

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          /*Obtain total donations*/
          $pre_cro = $con->prepare("SELECT SUM(donations_offering + donations_events + donations_transport) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cro = array(':church_id' => $church_id);
          $pre_cro->execute($values_cro);
          $result_cro = $pre_cro->fetch();

          $crowd = $result_cro['crowd'];

          /*add points to array*/
          $leader_info['donations'] = $crowd;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['zone_id'],$res)){
                $res[$vals['zone_id']]['donations'] += $vals['donations'];
                $res[$vals['zone_id']]['donations'] = (string)$res[$vals['zone_id']]['donations'];
            }
            else{
                $res[$vals['zone_id']]  = $vals;
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['donations'];
        }

        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else if ($member == '4') {
        
      /*Obtain general information district pastors*/
      $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_districts.district_code, groups_districts.id as district_id, user.city FROM groups_districts,user WHERE user.id = groups_districts.district_pastor AND groups_districts.active = 1 AND groups_districts.church_id = '$church_id' $query_g";

      $result_info = null;

      foreach ($con->query($sql_leader) as $row) {

        $leader_info = $row;

        $district_id = $row['district_id'];
       
        /*Obtain cells asociated with district pastors (district)*/
        $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id IN (SELECT id from groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

        foreach ($con->query($sql_leader2) as $row2) {

          /*cells asociated*/
          $cell_id = $row2['cell_id'];

          /*Obtain total donations*/
          $pre_cro = $con->prepare("SELECT SUM(donations_offering + donations_events + donations_transport) as crowd FROM reports,groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = :church_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_cro = array(':church_id' => $church_id);
          $pre_cro->execute($values_cro);
          $result_cro = $pre_cro->fetch();

          $crowd = $result_cro['crowd'];

          /*add points to array*/
          $leader_info['donations'] = $crowd;

          $result_info[] = $leader_info;
        }

      }

      /*validate result info is not null*/
      if ($result_info != null) {

        // add points from the cells with same sector
        $res  = array();
        foreach($result_info as $vals){
            if(array_key_exists($vals['district_id'],$res)){
                $res[$vals['district_id']]['donations'] += $vals['donations'];
                $res[$vals['district_id']]['donations'] = (string)$res[$vals['district_id']]['donations'];
            }
            else{
                $res[$vals['district_id']]  = $vals;
            }
        }

        // final array without indexes
        $newArray = [];
        foreach ($res as $key => $value) {
            $newArray[] = $value;
        }

        // order array points
        foreach ($newArray as $key => $frow) {
            $aux[$key] = $frow['donations'];
        }

        array_multisort($aux, SORT_DESC, $newArray);

        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $newArray));
      }else{
        return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $result_info));
      }


      /*else member does not exist*/
    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Member does not exist",
                  "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/**** General Records ****/
$app->post('/statistics/records', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $type_record = $request->getParam('type_record');
   $parent_id = $request->getParam('parent_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $language = $request->getParam('language');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($type_record)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_record",
               "status"=>500)));
   } else if(empty($language)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: language",
               "status"=>500)));
   } else if ($initial_date || $final_date) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If date filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('n');
    $month_t = date('m');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];

    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '1') {

      $parent_f = "church_id";
      $parent_id = $church_id;

    } else if ($role_id == '2') {

      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      $parent_f = "district_id";

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      $parent_f = "zone_id";

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      $parent_f = "sector_id";

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

      $parent_f = "cell_id";

    }


    /*validate type_record*/
    if ($type_record == '1' || $type_record == '2' || $type_record == '3' || $type_record == '4') {
        
      if ($language == 'en') {
          
        $sql = "SELECT en_message as activity_msg, created_at FROM records WHERE type_record = '$type_record' AND $parent_f = '$parent_id' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') order by created_at";
        $result_f = null;

        foreach ($con->query($sql) as $row) {
          $result_f[] = $row;
        }

      }else if ($language == 'es') {

        $sql = "SELECT es_message as activity_msg, created_at FROM records WHERE type_record = '$type_record' AND $parent_f = '$parent_id' AND (created_at BETWEEN '$initial_quarter' AND '$final_quarter') order by created_at";
          $result_f = null;

        foreach ($con->query($sql) as $row) {
          $result_f[] = $row;
        }

      }else{
        return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Language does not exist",
                        "status"=>422)));
      }


      return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => $result_f));

    }else{
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Type record does not exist",
                "status"=>500)));
    }



  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


// General Reports List
$app->post('/statistics/reports-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

      /************** If filter has not been selected, per quarter ******************/

      /*actual date*/
      $today = date("Y-m-d");
      $month = date('n');
      $month_t = date('m');
      $year = date ("Y");

      $prev_y = $year -1;

      /*function general dates*/
      $general_d = generalDates($month, $year, $prev_y);

      $initial_quarter = $general_d['initial_quarter'];
      $final_quarter = $general_d['final_quarter'];

      $filter_date = '';

      /*Note: If exist date filter, validate*/
      if ($initial_date && $final_date && empty($is_mobile)) {
        $initial_quarter = $initial_date . " 00:00:00";
        $final_quarter = $final_date . " 23:59:59";

        $filter_date = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";

      }else if ($initial_date && $is_mobile) {
        $initial_quarter = $initial_date . " 00:00:00";
        $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
        $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
        $final_quarter = $sub_m . " 23:59:59";

        $filter_date = "AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter')";
      }

      /*validate parent_id*/
      if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

        if(empty($parent_id)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"Missing parameter: parent_id",
                    "status"=>500)));
        }
      }


      if ($role_id == '2') {
        $pre_dis = $con->prepare("SELECT *
                                 FROM groups_districts
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        if(empty($result_dis)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '3') {
        $pre_dis = $con->prepare("SELECT id as zone_i 
                                 FROM groups_zones
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $zone = $result_dis['zone_i'];

        if(empty($zone)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '4') {
        $pre_dis = $con->prepare("SELECT id as sector_i 
                                 FROM groups_sectors
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $sec = $result_dis['sector_i'];

        if(empty($sec)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      } else if ($role_id == '5') {
        $pre_dis = $con->prepare("SELECT id as cell_i 
                                 FROM groups_cells
                                 WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
        $pre_dis->execute($values_dis);
        $result_dis = $pre_dis->fetch();

        $cell = $result_dis['cell_i'];

        if(empty($cell)){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"parent_id does not exist",
                    "status"=>500)));
        }

      }

      /*General filters for groups*/
      $filter_p = '';
      $filter_group = '';

      /*senior pastor*/
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {
        
        /*verify empty filter members*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_group = "AND reports.cell_id " . $filter_p;


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_group = "AND reports.cell_id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_group = "AND reports.cell_id " . $filter_p;

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$filter_district' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_group = "AND reports.cell_id " . $filter_p;
          
        }

      /*district pastor*/
      } else if ($role_id == '2') {

        /*verify empty filter members*/
        if (empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

          $filter_group = "AND reports.cell_id " . $filter_p;

        }else{

          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_group = "AND reports.cell_id " . $filter_p;
            

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_group = "AND reports.cell_id " . $filter_p;
            

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_zone' AND district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

            $filter_group = "AND reports.cell_id " . $filter_p;

          }


        }

        /*zone pastor*/
      } else if ($role_id == '3') {

        /*verify empty filter members*/
        if (empty($filter_sector) && empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = $parent_id' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

          $filter_group = "AND reports.cell_id " . $filter_p;

        }else{

          if ($filter_sector && empty($filter_cell)) {

            $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id = '$parent_id' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

            $filter_group = "AND reports.cell_id " . $filter_p;

          } else if ($filter_sector && $filter_cell) {

            $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_sector' AND zone_id '$parent_id' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

            $filter_group = "AND reports.cell_id " . $filter_p;

          }

        }

      /*supervisor*/
      } else if ($role_id == '4') {

        /*verify empty filter members*/
        if (empty($filter_cell)) {
          $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_i')";

          $filter_group = "AND reports.cell_id " . $filter_p;
          

        }else{

          $filter_p = "IN (SELECT id from groups_cells WHERE id = '$filter_cell' AND sector_id = '$parent_id' AND active = 1 AND church_id = '$church_i')";

          $filter_group = "AND reports.cell_id " . $filter_p;

        }

      /*leader*/
      } else if ($role_id == '5') {

        $filter_p = "= '$parent_id'";

        $filter_group = "AND reports.cell_id " . $filter_p;

      }


      /*Obtain general list reports*/
      $sql = "SELECT reports.id as report_id, reports.name, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code, reports.creation_date as date, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = groups_cells.leader) AS leader, (SELECT user.profile_picture FROM user where user.id = groups_cells.leader) AS profile_picture FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = $church_id AND groups_cells.active = 1 $filter_date $filter_group ORDER BY reports.creation_date DESC ";

      $result_r = null;

      foreach ($con->query($sql) as $row) {
        $result_r[] = $row;
      }


      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => $result_r));



  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*FILE DOWNLOAD*/

$app->post('/download/group-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $rol_id = $request->getParam('rol_id');
   $active = $request->getParam('active');
   $district_code = $request->getParam('district_code');
   $zone_code = $request->getParam('zone_code');
   $sector_code = $request->getParam('sector_code');
   $type_group = $request->getParam('type_group'); // cell, sectors, zone, district
   $type_report = $request->getParam('type_report');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[1-9]+$/i", $rol_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: rol_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-1]+$/i", $active)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: active",
               "status"=>500)));
   } else if(empty($type_group)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_group",
               "status"=>500)));
   } else if(empty($type_report)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: type_report",
                "status"=>500)));

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :rol_id AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':rol_id' => $rol_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    $final_church = $result_i['church_id'];

    /*obtain church name and city*/
    $pre_ch = $con->prepare("SELECT *
                             FROM churches
                             WHERE id = :final_church", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_ch = array(':final_church' => $final_church);
    $pre_ch->execute($values_ch);
    $result_ch = $pre_ch->fetch();

    $church_name = $result_ch['name'];
    $church_city = $result_ch['city'];

    $filter_val = '';
    $final_date = date("Y-m-d H:i");

    // download list cells
    if ($type_group == 'cell'){
      
      /*validate filter logged*/
      if ($rol_id != '1' || $rol_id != '6' || $rol_id != '7') {

        /*obtain group id of the user logued*/
        $pre_gr = $con->prepare("SELECT *
                                 FROM user_groups
                                 WHERE user_id = :user_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_gr = array(':user_id' => $user_id);
        $pre_gr->execute($values_gr);
        $result_gr = $pre_gr->fetch();

        if ($rol_id == '2') {
            
          $district_id = $result_gr['district_id'];

          $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church')";

        } else if ($rol_id == '3') {
            
          $zone_id = $result_gr['zone_id'];

          $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = '$zone_id' AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church')";

        } else if ($rol_id == '4') {
            
          $sector_id = $result_gr['sector_id'];

          $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id = '$sector_id' AND active = 1 AND church_id = '$final_church')";

        }

      }

      if ($active == '0' || $active == '1') {

        $list_cells = null;

        /*filter district, sector and zone*/
        if($district_code && $sector_code && $zone_code){

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.district_code = $district_code AND groups_cells.sector_code = $sector_code AND groups_cells.zone_code = $zone_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

          /*filter district and sector*/
        } else if($district_code && $sector_code){

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.district_code = $district_code AND groups_cells.sector_code = $sector_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

          /*filter zone and sector*/
        } else if($zone_code && $sector_code){

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.zone_code = $zone_code AND groups_cells.sector_code = $sector_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

          /*filter zone and district*/
        } else if($zone_code && $district_code){

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.zone_code = $zone_code AND groups_cells.district_code = $district_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

          /*filter district*/
        } else if($district_code){
          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.district_code = $district_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

         /*filter zone*/
        } else if($zone_code){

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.zone_code = $zone_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

          /*filter sector*/
        } else if($sector_code){

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.sector_code = $sector_code AND groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";
          
        }
        else{

          $sql = "SELECT CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_cells.leader) AS leader, groups_cells.start_date,groups_cells.city, (SELECT count(id) from members_cells WHERE cell_id = groups_cells.id AND members_cells.role != 1 AND members_cells.active = 1) AS members FROM groups_cells WHERE groups_cells.church_id = $final_church AND groups_cells.active = $active $filter_val";

        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('CELL ID', 'LEADER','START DATE','CITY','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['leader'] == null) {
              $row['leader'] = '--';
            }
            if ($row['start_date'] == null) {
              $row['start_date'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $list_cells[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="cells_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        }else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Cell Groups List');
          $pdf->SetSubject('Cell Groups List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Cell Groups List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CELL ID</b></th>
          <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>LEADER</b></th>
          <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>START DATE</b></th>
          <th width= "130" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CITY</b></th>
          <th width="90" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['leader'] == null) {
              $row['leader'] = '--';
            }
            if ($row['start_date'] == null) {
              $row['start_date'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['cell_id'] . '</td>
                  <td style="height: 30px;">' . $row['leader'] . '</td>
                  <td style="height: 30px;">' . $row['start_date'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('cells_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"filter does not exist",
                      "status"=>422)));
      }

      // download list sectors
    } else if ($type_group == 'sector'){

      /*validate filter logged*/
      if ($rol_id != '1' || $rol_id != '6' || $rol_id != '7') {

        /*obtain group id of the user logued*/
        $pre_gr = $con->prepare("SELECT *
                                 FROM user_groups
                                 WHERE user_id = :user_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_gr = array(':user_id' => $user_id);
        $pre_gr->execute($values_gr);
        $result_gr = $pre_gr->fetch();

        if ($rol_id == '2') {
            
          $district_id = $result_gr['district_id'];

          $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$final_church') AND active = 1 AND church_id = '$final_church')";

        } else if ($rol_id == '3') {
            
          $zone_id = $result_gr['zone_id'];

          $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id = '$zone_id' AND active = 1 AND church_id = '$final_church')";

        }

      }

      /*valid active*/
      if ($active == '0' || $active == '1') {

        $list_sectors = null;

        /*filter zone and district*/
        if($zone_code && $district_code){
          $sql = "SELECT CONCAT('D',IF(groups_sectors.district_code IS NOT NULL,groups_sectors.district_code,''), ' Z',IF(groups_sectors.zone_code IS NOT NULL,groups_sectors.zone_code,''), ' S', IF(groups_sectors.sector_code IS NOT NULL,groups_sectors.sector_code,'')) as sector_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_code = $zone_code AND groups_sectors.district_code = $district_code AND groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";

          /*filter district*/
        }else if($district_code){
          $sql = "SELECT CONCAT('D',IF(groups_sectors.district_code IS NOT NULL,groups_sectors.district_code,''), ' Z',IF(groups_sectors.zone_code IS NOT NULL,groups_sectors.zone_code,''), ' S', IF(groups_sectors.sector_code IS NOT NULL,groups_sectors.sector_code,'')) as sector_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.district_code = $district_code AND groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";

         /*filter zone*/
        }else if($zone_code){
          $sql = "SELECT CONCAT('D',IF(groups_sectors.district_code IS NOT NULL,groups_sectors.district_code,''), ' Z',IF(groups_sectors.zone_code IS NOT NULL,groups_sectors.zone_code,''), ' S', IF(groups_sectors.sector_code IS NOT NULL,groups_sectors.sector_code,'')) as sector_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.zone_code = $zone_code AND groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";
          
        }
        else{
          $sql = "SELECT CONCAT('D',IF(groups_sectors.district_code IS NOT NULL,groups_sectors.district_code,''), ' Z',IF(groups_sectors.zone_code IS NOT NULL,groups_sectors.zone_code,''), ' S', IF(groups_sectors.sector_code IS NOT NULL,groups_sectors.sector_code,'')) as sector_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_sectors.supervisor) AS supervisor, (SELECT count(id) from groups_cells WHERE sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_sectors WHERE groups_sectors.church_id = $final_church AND groups_sectors.active = $active $filter_val";

        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('SECTOR ID', 'SUPERVISOR','CELLS','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['supervisor'] == null) {
              $row['supervisor'] = '--';
            }
            $list_sectors[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="sectors_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Sectors List');
          $pdf->SetSubject('Sectors List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Sectors List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SECTOR ID</b></th>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SUPERVISOR</b></th>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CELLS</b></th>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['supervisor'] == null) {
              $row['supervisor'] = '--';
            }

            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['sector_id'] . '</td>
                  <td style="height: 30px;">' . $row['supervisor'] . '</td>
                  <td style="height: 30px;">' . $row['cells'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('sectors_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }

         /*valid active*/
      }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "message"=>"filter does not exist",
                      "status"=>422)));
      }/*end valid active*/

      // download list zones
    } else if ($type_group == 'zone'){

      /*validate filter logged*/
      if ($rol_id != '1' || $rol_id != '6' || $rol_id != '7') {

        /*obtain group id of the user logued*/
        $pre_gr = $con->prepare("SELECT *
                                 FROM user_groups
                                 WHERE user_id = :user_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_gr = array(':user_id' => $user_id);
        $pre_gr->execute($values_gr);
        $result_gr = $pre_gr->fetch();

        if ($rol_id == '2') {
            
          $district_id = $result_gr['district_id'];

          $filter_val = "AND groups_zones.id IN (SELECT id from groups_zones WHERE district_id = '$district_id' AND active = 1 AND church_id = '$final_church')";

        } 

      }

      if ($active == '0' || $active == '1') {

        $list_zones = null;

        if($district_code){

          $pre = $con->prepare("SELECT *
                                   FROM groups_districts
                                   WHERE district_code = :district_code", 
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values = array(':district_code' => $district_code);
          $pre->execute($values);
          $result = $pre->fetch();

          if ($result) {
            
            $sql = "SELECT CONCAT('D',IF(groups_zones.district_code IS NOT NULL,groups_zones.district_code,''), ' Z',IF(groups_zones.zone_code IS NOT NULL,groups_zones.zone_code,'')) as zone_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.district_code = $district_code AND groups_zones.church_id = $final_church AND groups_zones.active = $active $filter_val";

          }else{
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"District code does not exist",
                        "status"=>422)));
          }

        }else{

          $sql = "SELECT CONCAT('D',IF(groups_zones.district_code IS NOT NULL,groups_zones.district_code,''), ' Z',IF(groups_zones.zone_code IS NOT NULL,groups_zones.zone_code,'')) as zone_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_zones.zone_pastor) AS zone_pastor, (SELECT count(id) from groups_sectors WHERE zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_cells,groups_sectors WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) AS cells, (SELECT count(members_cells.cell_id) from groups_sectors,groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members FROM groups_zones WHERE groups_zones.church_id = $final_church AND groups_zones.active = $active $filter_val";
          
        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('ZONE ID', 'ZONE PASTOR','SECTORS','CELLS','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['zone_pastor'] == null) {
              $row['zone_pastor'] = '--';
            }
            $list_zones[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="zones_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Zones List');
          $pdf->SetSubject('Zones List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Zones List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ZONE ID</b></th>
          <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ZONE PASTOR</b></th>
          <th width= "114" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SECTORS</b></th>
          <th width= "113" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CELLS</b></th>
          <th width= "113" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['zone_pastor'] == null) {
              $row['zone_pastor'] = '--';
            }

            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['zone_id'] . '</td>
                  <td style="height: 30px;">' . $row['zone_pastor'] . '</td>
                  <td style="height: 30px;">' . $row['sectors'] . '</td>
                  <td style="height: 30px;">' . $row['cells'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('zones_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


        foreach ($con->query($sql) as $row) {
          $list_zones[] = $row;
        }


        return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $list_zones));

      }else{
        return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                                  "message"=>"filter active does not exist",
                                  "status"=>422)));
      }

      // download list districts
    } else if ($type_group == 'district'){

      if ($active == '0' || $active == '1') {

        $list_districts = null;
        $sql = "SELECT CONCAT('D',IF(groups_districts.district_code IS NOT NULL,groups_districts.district_code,'')) as district_id,(SELECT CONCAT(user.first_name, ' ', user.last_name) from user WHERE user.id = groups_districts.district_pastor) AS district_pastor, (SELECT count(id) from groups_zones WHERE district_id = groups_districts.id AND groups_zones.active = 1) AS zones, (SELECT count(groups_sectors.id) from groups_sectors,groups_zones WHERE groups_zones.district_id = groups_districts.id AND groups_sectors.zone_id = groups_zones.id AND groups_sectors.active = 1) AS sectors, (SELECT count(groups_cells.id) from groups_zones,groups_sectors,groups_cells WHERE groups_zones.district_id = groups_districts.id AND groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND groups_cells.active = 1) as cells, (SELECT count(members_cells.cell_id) from groups_zones,groups_sectors,groups_cells, members_cells WHERE groups_zones.district_id = groups_districts.id AND groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id and members_cells.cell_id = groups_cells.id AND members_cells.active = 1 AND members_cells.role != 1) as members 
          FROM groups_districts
          WHERE groups_districts.church_id = $final_church AND groups_districts.active = $active";
        

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('DISTRICT ID', 'DISTRICT PASTOR','ZONES','SECTORS','CELLS','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['district_pastor'] == null) {
              $row['district_pastor'] = '--';
            }
            $list_districts[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="districts_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Districts List');
          $pdf->SetSubject('Districts List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Districts List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>DISTRICT ID</b></th>
          <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>DISTRICT PASTOR</b></th>
          <th width= "85" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ZONES</b></th>
          <th width= "85" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SECTORS</b></th>
          <th width= "85" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CELLS</b></th>
          <th width= "85" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['district_pastor'] == null) {
              $row['district_pastor'] = '--';
            }

            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['district_id'] . '</td>
                  <td style="height: 30px;">' . $row['district_pastor'] . '</td>
                  <td style="height: 30px;">' . $row['zones'] . '</td>
                  <td style="height: 30px;">' . $row['sectors'] . '</td>
                  <td style="height: 30px;">' . $row['cells'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('districts_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      }else{
        return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                                  "message"=>"filter does not exist",
                                  "status"=>422)));
      }

    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                    "message"=>"Type group does not exist",
                    "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/download/member-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $type_member = $request->getParam('type_member');
   $type_report = $request->getParam('type_report');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
              "type"=>"required",
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
              "type"=>"required",
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
              "type"=>"required",
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($type_member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
              "type"=>"required",
               "message"=>"Missing parameter: type_member",
               "status"=>500)));
   } else if(empty($type_report)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"Missing parameter: type_report",
                "status"=>500)));

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /*obtain church name and city*/
    $pre_ch = $con->prepare("SELECT *
                             FROM churches
                             WHERE id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_ch = array(':church_id' => $church_id);
    $pre_ch->execute($values_ch);
    $result_ch = $pre_ch->fetch();

    $church_name = $result_ch['name'];
    $church_city = $result_ch['city'];

    $final_date = date("Y-m-d H:i");

    // download list cells
    if ($type_member == 'guest'){

        $filter_list = '';
        
        if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

          /*if select filter list*/
          if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

            $filter_list = "AND groups_zones.district_id = $filter_district";


          } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone";

          } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

          } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

            $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";
            
          }

          $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = $church_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";
          

        }else if ($role_id == '2') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "type"=>"required",
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            }

            /*if select filter list*/
            if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

              $filter_list = "AND groups_sectors.zone_id = $filter_zone";

            } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

              $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

            } else if ($filter_zone && $filter_sector && $filter_cell) {

              $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

            }

            $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = 1 AND groups_zones.district_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";
            
            
        } else if ($role_id == '3') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "type"=>"required",
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            }

            /*if select filter list*/
            if ($filter_sector && empty($filter_cell)) {

              $filter_list = "AND groups_cells.sector_id = $filter_sector";

            } else if ($filter_sector && $filter_cell) {

              $filter_list = "AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

            } 

            $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_sectors, groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_sectors.zone_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";

            
        } else if ($role_id == '4') {
          
          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_cell) {

            $filter_list = "AND groups_cells.id = $filter_cell";

          }

          $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance 
          FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";


        } else if ($role_id == '5') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }
            
          $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1";


        }else{ // else role not exist

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "type"=>"role_doesnt_exist",
                        "message"=>"Role does not exist",
                        "status"=>422)));
        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('INVITADOS', 'ID', 'ÃLTIMA ASISTENCIA','CIUDAD','ASISTENCIA');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['last_assistance'] == null) {
              $row['last_assistance'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $guest[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="listado_invitados.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Listado Invitados');
          $pdf->SetSubject('Listado Invitados');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>Ciudad:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Listado de invitados</b><br>Exportado: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>INVITADOS</b></th>
          <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ID</b></th>
          <th width= "110" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ÃLTIMA ASISTENCIA</b></th>
          <th width= "130" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CIUDAD</b></th>
          <th width="100" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ASISTENCIA</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['last_assistance'] == null) {
              $row['last_assistance'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['full_name'] . '</td>
                  <td style="height: 30px;">' . $row['cell_id'] . '</td>
                  <td style="height: 30px;">' . $row['last_assistance'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['assistance'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('listado_invitados.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }




    } else if ($type_member == 'member'){


      $filter_list = '';

      /*agregar codigo de cell member list*/
      
      if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

        /*if select filter list*/
        if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

          $filter_list = "AND groups_zones.district_id = $filter_district";


        } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

          $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone";

        } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

          $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

        } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

          $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";
          
        }

        $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance,members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = $church_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";
        

      }else if ($role_id == '2') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

            $filter_list = "AND groups_sectors.zone_id = $filter_zone";

          } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

            $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

          } else if ($filter_zone && $filter_sector && $filter_cell) {

            $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

          }

          $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = 1 AND groups_zones.district_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";
          
          
      } else if ($role_id == '3') {

          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          /*if select filter list*/
          if ($filter_sector && empty($filter_cell)) {

            $filter_list = "AND groups_cells.sector_id = $filter_sector";

          } else if ($filter_sector && $filter_cell) {

            $filter_list = "AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

          } 

          $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_sectors, groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_sectors.zone_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";

          
      } else if ($role_id == '4') {
        
        if(empty($parent_id)){
              return $response->withStatus(500)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                       "type"=>"required",
                       "message"=>"Missing parameter: parent_id",
                       "status"=>500)));
        }

        /*if select filter list*/
        if ($filter_cell) {

          $filter_list = "AND groups_cells.id = $filter_cell";

        }

        $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance 
        FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";


      } else if ($role_id == '5') {

        if(empty($parent_id)){
              return $response->withStatus(500)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                       "type"=>"required",
                       "message"=>"Missing parameter: parent_id",
                       "status"=>500)));
        }
          
        $sql = "SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) as full_name, CONCAT('D',IF(groups_cells.district_code IS NOT NULL,groups_cells.district_code,''), ' Z',IF(groups_cells.zone_code IS NOT NULL,groups_cells.zone_code,''), ' S', IF(groups_cells.sector_code IS NOT NULL,groups_cells.sector_code,''), ' C', IF(groups_cells.cell_code IS NOT NULL,groups_cells.cell_code,'')) as cell_id, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, members_cells.city, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1";


      }else{ // else role not exist

          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"role_doesnt_exist",
                      "message"=>"Role does not exist",
                      "status"=>422)));
      }

      // DOWNLOADS
      if ($type_report == 'csv') {
        
        $stream = fopen('php://memory', 'w+');

        $row = array('MIEMBROS', 'ID', 'ÃLTIMA ASISTENCIA','CIUDAD','ASISTENCIA');
        fputcsv($stream, $row, ';');

        foreach ($con->query($sql) as $row) {
          if ($row['full_name'] == ' ') {
            $row['full_name'] = '--';
          }
          if ($row['last_assistance'] == null) {
            $row['last_assistance'] = '--';
          }
          if ($row['city'] == null) {
            $row['city'] = '--';
          }
          $guest[] = $row;
          fputcsv($stream, $row, ';');

        }
        
        rewind($stream);

        $response = $response->withHeader('Content-Type', 'text/csv');
        $response = $response->withHeader('Content-Disposition', 'attachment; filename="listado_miembros.csv"');

        return $response->withBody(new \Slim\Http\Stream($stream));

      } else if ($type_report == 'pdf'){

        // create new PDF document
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // set document information
        $pdf->SetCreator('PDF');
        $pdf->SetAuthor('C+');
        $pdf->SetTitle('Listado Miembros');
        $pdf->SetSubject('Listado Miembros');
        $pdf->SetKeywords('');

        // set default header data
        $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
        $pdf->setFooterData(array(0,64,0), array(0,64,128));

        // set header and footer fonts
        $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        // set margins
        $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

        // set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

        // set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // set default font subsetting mode
        $pdf->setFontSubsetting(true);

        // Set font
        $pdf->SetFont('helvetica', '', 12, '', true);

        // Add a page
        $pdf->AddPage();

        // Set some content to print
        $html ='
        <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>Ciudad:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Listado de miembros de cÃ©lula</b><br>Exportado: ' .$final_date. '</p>
        <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
        <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MIEMBROS</b></th>
        <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ID</b></th>
        <th width= "110" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ÃLTIMA ASISTENCIA</b></th>
        <th width= "130" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CIUDAD</b></th>
        <th width="100" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ASISTENCIA</b></th></tr>';

        foreach ($con->query($sql) as $row) {
          if ($row['full_name'] == ' ') {
            $row['full_name'] = '--';
          }
          if ($row['last_assistance'] == null) {
            $row['last_assistance'] = '--';
          }
          if ($row['city'] == null) {
            $row['city'] = '--';
          }
          $html.='
              <tr>
                <td style="height: 30px;">' . $row['full_name'] . '</td>
                <td style="height: 30px;">' . $row['cell_id'] . '</td>
                <td style="height: 30px;">' . $row['last_assistance'] . '</td>
                <td style="height: 30px;">' . $row['city'] . '</td>
                <td style="height: 30px;">' . $row['assistance'] . '</td>
              </tr>';
        }
        $html.='</table>';

        // Print text using writeHTML
        $pdf->writeHTML($html, true, false, false, false, '');

        // Close and output PDF document
        $pdf->Output('listado_miembros.pdf', 'D');

      }else{
        return $response->withStatus(422)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                                  "message"=>"Type report does not exist",
                                  "status"=>422)));
      }


    } else if ($type_member == 'leader'){

      if ($active == '0' || $active == '1') {

        $filter_list = '';
        
        if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

          /*if select filter list*/
          if ($filter_district && empty($filter_zone) && empty($filter_sector)) {

            $filter_list = "AND user_groups.district_id = $filter_district";


          } else if ($filter_district && $filter_zone && empty($filter_sector)) {

            $filter_list = "AND user_groups.district_id = $filter_district AND user_groups.zone_id = $filter_zone";

          } else if ($filter_district && $filter_zone && $filter_sector) {

            $filter_list = "AND user_groups.district_id = $filter_district AND user_groups.zone_id = $filter_zone AND user_groups.sector_id = $filter_sector";

          }

          // if cell_id exist, else sector_id
          $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' Z', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' S', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)),IF(user_groups.cell_id IS NOT NULL, CONCAT(' C',(SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id)), '')) as cell_group, user.city, IF(user_groups.cell_id IS NOT NULL, (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
          

        }else if ($role_id == '2') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            }

            /*if select filter list*/
            if ($filter_zone && empty($filter_sector)) {

              $filter_list = "AND user_groups.zone_id = $filter_zone";


            } else if ($filter_zone && $filter_sector) {

              $filter_list = "AND user_groups.zone_id = $filter_zone AND user_groups.sector_id = $filter_sector";

            }

            $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' Z', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' S', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)),IF(user_groups.cell_id IS NOT NULL, CONCAT(' C', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id)), '')) as cell_group, user.city, IF(user_groups.cell_id IS NOT NULL, (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
            
            
        } else if ($role_id == '3') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            }

            /*if select filter list*/
            if ($filter_sector) {
              $filter_list = "AND user_groups.sector_id = $filter_sector";

            }

            $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' Z', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' S', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)),IF(user_groups.cell_id IS NOT NULL, CONCAT(' C', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id)), '')) as cell_group, user.city, IF(user_groups.cell_id IS NOT NULL, (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.zone_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";

            
        } else if ($role_id == '4') {
          
          if(empty($parent_id)){
                return $response->withStatus(500)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "message"=>"Missing parameter: parent_id",
                         "status"=>500)));
          }

          $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.district_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' Z', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.zone_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), ' S', IF(user_groups.cell_id IS NOT NULL, (SELECT groups_cells.sector_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id), (SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)),IF(user_groups.cell_id IS NOT NULL, CONCAT(' C', (SELECT groups_cells.cell_code FROM groups_cells where groups_cells.id = user_groups.cell_id and groups_cells.church_id = $church_id)), '')) as cell_group, user.city, IF(user_groups.cell_id IS NOT NULL, (SELECT count(members_cells.id) FROM members_cells where members_cells.cell_id = user_groups.cell_id and members_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1'), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 5 AND user_groups.sector_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";


        } else{ // else role not exist

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Role does not exist",
                        "status"=>422)));
        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('LEADER', 'CELL GROUP','CITY','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $guest[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="leaders_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Leaders List');
          $pdf->SetSubject('Leaders List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Leaders List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>LEADER</b></th>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CELL GROUP</b></th>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CITY</b></th>
          <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['full_name'] . '</td>
                  <td style="height: 30px;">' . $row['cell_group'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('leaders_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Filter active does not exist",
                    "status"=>422)));
      }


    } else if ($type_member == 'supervisor'){

      if ($active == '0' || $active == '1') {

        $filter_list = '';
        
        if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

          /*if select filter list*/
          if ($filter_district && empty($filter_zone)) {

            $filter_list = "AND user_groups.district_id = $filter_district";

          } else if ($filter_district && $filter_zone) {

            $filter_list = "AND user_groups.district_id = $filter_district AND user_groups.zone_id = $filter_zone";

          }

          // if cell_id exist, else sector_id
          $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.sector_id IS NOT NULL, (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id), (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), ' Z', IF(user_groups.sector_id IS NOT NULL, (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id), (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), IF(user_groups.sector_id IS NOT NULL, CONCAT(' S',(SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), '')) as sector, user.city, IF(user_groups.sector_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells where groups_cells.sector_id = user_groups.sector_id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.sector_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = user_groups.sector_id AND groups_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
          

        }else if ($role_id == '2') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            }

            /*if select filter list*/
            if ($filter_zone) {

              $filter_list = "AND user_groups.zone_id = $filter_zone";

            } 

            $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.sector_id IS NOT NULL, (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id), (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), ' Z', IF(user_groups.sector_id IS NOT NULL, (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id), (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), IF(user_groups.sector_id IS NOT NULL, CONCAT(' S',(SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), '')) as sector, user.city, IF(user_groups.sector_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells where groups_cells.sector_id = user_groups.sector_id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.sector_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = user_groups.sector_id AND groups_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
            
            
        } else if ($role_id == '3') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            }


            $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.sector_id IS NOT NULL, (SELECT groups_sectors.district_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id), (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), ' Z', IF(user_groups.sector_id IS NOT NULL, (SELECT groups_sectors.zone_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id), (SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), IF(user_groups.sector_id IS NOT NULL, CONCAT(' S',(SELECT groups_sectors.sector_code FROM groups_sectors where groups_sectors.id = user_groups.sector_id and groups_sectors.church_id = $church_id)), '')) as sector, user.city, IF(user_groups.sector_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells where groups_cells.sector_id = user_groups.sector_id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.sector_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = user_groups.sector_id AND groups_cells.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 4 AND user_groups.zone_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active";

            
        } else{ // else role not exist

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Role does not exist",
                        "status"=>422)));
        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('SUPERVISOR', 'SECTOR','CITY','LEADERS','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $supervisors[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="supervisors_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Supervisors List');
          $pdf->SetSubject('Supervisors List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Supervisors List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SUPERVISOR</b></th>
          <th  width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SECTOR</b></th>
          <th width= "130" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CITY</b></th>
          <th width="110" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>LEADERS</b></th>
          <th width="100"style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['full_name'] . '</td>
                  <td style="height: 30px;">' . $row['sector'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['leaders'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('supervisors_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Filter active does not exist",
                    "status"=>422)));
      }


    } else if ($type_member == 'zone_pastor'){

      if ($active == '0' || $active == '1') {

        $filter_list = '';
        
        if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

          /*if select filter list*/
          if ($filter_district) {
            $filter_list = "AND user_groups.district_id = $filter_district";
          }

          // if cell_id exist, else sector_id
          $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.zone_id IS NOT NULL, (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id), (SELECT groups_districts.district_code FROM groups_districts where groups_districts.id = user_groups.district_id and groups_districts.church_id = $church_id)), IF(user_groups.zone_id IS NOT NULL, CONCAT(' Z',(SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), '')) as zone, user.city, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_sectors.supervisor) from groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_sectors.church_id = $church_id), '0') as supervisors, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells, groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_cells.sector_id = groups_sectors.id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.zone_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells, groups_sectors WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = groups_sectors.id AND groups_sectors.zone_id = user_groups.zone_id AND groups_cells.church_id = $church_id AND groups_sectors.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 3 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
          

        }else if ($role_id == '2') {

            if(empty($parent_id)){
                  return $response->withStatus(500)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                           "message"=>"Missing parameter: parent_id",
                           "status"=>500)));
            } 

            $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, CONCAT('D',IF(user_groups.zone_id IS NOT NULL, (SELECT groups_zones.district_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id), (SELECT groups_districts.district_code FROM groups_districts where groups_districts.id = user_groups.district_id and groups_districts.church_id = $church_id)), IF(user_groups.zone_id IS NOT NULL, CONCAT(' Z',(SELECT groups_zones.zone_code FROM groups_zones where groups_zones.id = user_groups.zone_id and groups_zones.church_id = $church_id)), '')) as zone, user.city, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_sectors.supervisor) from groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_sectors.church_id = $church_id), '0') as supervisors, IF(user_groups.zone_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells, groups_sectors where groups_sectors.zone_id = user_groups.zone_id and groups_cells.sector_id = groups_sectors.id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.zone_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells, groups_sectors WHERE members_cells.church_id = $church_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = groups_sectors.id AND groups_sectors.zone_id = user_groups.zone_id AND groups_cells.church_id = $church_id AND groups_sectors.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 3 AND user_groups.district_id = $parent_id AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active $filter_list";
            
            
        } else{ // else role not exist

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Role does not exist",
                        "status"=>422)));
        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('ZONE PASTOR', 'ZONE','CITY','SUPERVISORS','LEADERS','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $zone_pastors[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="zone_pastors_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Zone Pastors List');
          $pdf->SetSubject('Zone Pastors List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Zone Pastors List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "160" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ZONE PASTOR</b></th>
          <th  width= "90" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>ZONE</b></th>
          <th width= "125" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CITY</b></th>
          <th width="100" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>SUPERVISORS</b></th>
          <th width="75" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>LEADERS</b></th>
          <th width="80"style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['full_name'] . '</td>
                  <td style="height: 30px;">' . $row['zone'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['supervisors'] . '</td>
                  <td style="height: 30px;">' . $row['leaders'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('zone_pastors_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Filter active does not exist",
                    "status"=>422)));
      }


    } else if ($type_member == 'district_pastor'){

      if ($active == '0' || $active == '1') {

        $filter_list = '';
        
        if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

          // if cell_id exist, else sector_id
          $sql = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, IF(user_groups.district_id IS NOT NULL, CONCAT('D',(SELECT groups_districts.district_code FROM groups_districts where groups_districts.id = user_groups.district_id and groups_districts.church_id = $church_id)), '--') as district, user.city, IF(user_groups.district_id != 'NULL', (SELECT count(groups_zones.zone_pastor) from groups_zones where groups_zones.district_id = user_groups.district_id and groups_zones.church_id = $church_id), '0') as zone_pastors, IF(user_groups.district_id != 'NULL', (SELECT count(groups_sectors.supervisor) from groups_sectors, groups_zones where groups_zones.district_id = user_groups.district_id and groups_sectors.zone_id = groups_zones.id and groups_sectors.church_id = $church_id), '0') as supervisors, IF(user_groups.district_id != 'NULL', (SELECT count(groups_cells.leader) from groups_cells, groups_sectors, groups_zones where groups_zones.district_id = user_groups.district_id and groups_sectors.zone_id = groups_zones.id and groups_cells.sector_id = groups_sectors.id and groups_cells.church_id = $church_id), '0') as leaders, IF(user_groups.district_id != 'NULL', ((SELECT count(members_cells.id) from members_cells, groups_cells, groups_sectors, groups_zones WHERE members_cells.church_id = $church_id AND groups_zones.district_id = user_groups.district_id AND members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = groups_sectors.id AND groups_sectors.zone_id = groups_zones.id AND groups_cells.church_id = $church_id AND groups_sectors.church_id = $church_id AND members_cells.role !='1' AND members_cells.active = '1')), '0') as members FROM user, user_groups WHERE user.id=user_groups.user_id AND user.rol = 2 AND user.church_id = $church_id AND user.verified_account = '1' AND user.status = $active";
          

        } else{ // else role not exist

            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                        "message"=>"Role does not exist",
                        "status"=>422)));
        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('DISTRICT PASTOR', 'DISTRICT','CITY','ZONE PASTORS','SUPERVISORS','LEADERS','MEMBERS');
          fputcsv($stream, $row, ';');

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $district_pastors[] = $row;
            fputcsv($stream, $row, ';');

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="district_pastors_list.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('District Pastors List');
          $pdf->SetSubject('District Pastors List');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>District Pastors List</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "130" style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>DISTRICT PASTOR</b></th>
          <th  width= "70" style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>DISTRICT</b></th>
          <th width= "105" style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>CITY</b></th>
          <th width="70" style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>ZONE PASTORS</b></th>
          <th width="100" style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>SUPERVISORS</b></th>
          <th width="75" style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>LEADERS</b></th>
          <th width="80"style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>MEMBERS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['full_name'] == ' ') {
              $row['full_name'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['full_name'] . '</td>
                  <td style="height: 30px;">' . $row['district'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['zone_pastors'] . '</td>
                  <td style="height: 30px;">' . $row['supervisors'] . '</td>
                  <td style="height: 30px;">' . $row['leaders'] . '</td>
                  <td style="height: 30px;">' . $row['members'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('district_pastors_list.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Filter active does not exist",
                    "status"=>422)));
      }


    } else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                    "message"=>"Type member does not exist",
                    "status"=>422)));
    }

  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/download/report', function ($request,$response) {

  try{
     $con = $this->db;
     $report_id = $request->getParam('report_id');
     $cell_id = $request->getParam('cell_id');

     if(empty($cell_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: cell_id",
                 "status"=>500)));
     } else if(empty($report_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"Missing parameter: report_id",
                 "status"=>500)));
    }


    $pre_ini = $con->prepare("SELECT * FROM reports WHERE id = :report_id AND cell_id = :cell_id",  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_ini = array(':report_id' => $report_id,':cell_id' => $cell_id);
    $pre_ini->execute($values_ini);
    $result_ini = $pre_ini->fetch();

    if ($result_ini) {

      $pre_i = $con->prepare("SELECT reports.name, reports.creation_date, reports.donations_offering, reports.donations_events, reports.donations_transport, reports.total_member_assistance, reports.total_kids_assistance, reports.total_guest_assistance, reports.total_doctrine, reports.total_celebration, reports.total_salvation, reports.total_baptized, reports.total_schedule_visits, reports.district_code, reports.zone_code, reports.sector_code, reports.cell_code, groups_cells.church_id FROM reports INNER JOIN groups_cells ON reports.cell_id = groups_cells.id WHERE reports.id = :report_id AND reports.cell_id = :cell_id",  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_i = array(':report_id' => $report_id,':cell_id' => $cell_id);
      $pre_i->execute($values_i);
      $result_i = $pre_i->fetch();

      $church_id = $result_i['church_id'];

      /*obtain church name and city*/
      $pre_ch = $con->prepare("SELECT *
                               FROM churches
                               WHERE id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_ch = array(':church_id' => $church_id);
      $pre_ch->execute($values_ch);
      $result_ch = $pre_ch->fetch();

      $church_name = $result_ch['name'];
      $church_city = $result_ch['city'];

      $final_date = date("Y-m-d H:i");

      /*obtain cell codes*/
      if ($result_i['district_code'] && $result_i['zone_code'] && $result_i['sector_code'] && $result_i['cell_code']) {
        $final_cell = 'D'. $result_i['district_code'] . ' Z'. $result_i['zone_code'] . ' S'. $result_i['sector_code'] . ' C'. $result_i['cell_code'] ;
      } else if ($result_i['zone_code'] && $result_i['sector_code'] && $result_i['cell_code']) {
        $final_cell = ' Z'. $result_i['zone_code'] . ' S'. $result_i['sector_code'] . ' C'. $result_i['cell_code'] ;
      } else if ($result_i['sector_code'] && $result_i['cell_code']) {
        $final_cell = ' S'. $result_i['sector_code'] . ' C'. $result_i['cell_code'] ;
      } else if ($result_i['cell_code']) {
        $final_cell = ' C'. $result_i['cell_code'] ;
      }

      // obtain year, quarterly, week
      $exp = explode("Q", $result_i['name']);
      $year = $exp[0];
      $exp2 = explode("W", $exp[1]);
      $quar = $exp2[0];
      $week = $exp2[1];

      // Obtain totals in report
      $cell_at = $result_i['total_member_assistance'] + $result_i['total_kids_assistance'] + $result_i['total_guest_assistance'];
      $church_at = $result_i['total_doctrine'] + $result_i['total_celebration'];
      $performance = $result_i['total_salvation'] + $result_i['total_baptized'] + $result_i['total_schedule_visits'];
      $donations = number_format($result_i['donations_offering'] + $result_i['donations_transport'] + $result_i['donations_events'],2);


      /* Create new PDF document */
      $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

      // set document information
      $pdf->SetCreator('PDF');
      $pdf->SetAuthor('C+');
      $pdf->SetTitle('Detail Report');
      $pdf->SetSubject('Detail Report');
      $pdf->SetKeywords('');

      // set default header data
      $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
      $pdf->setFooterData(array(0,64,0), array(0,64,128));

      // set header and footer fonts
      $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
      $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

      // set default monospaced font
      $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

      // set margins
      $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
      $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
      $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

      // set auto page breaks
      $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

      // set image scale factor
      $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

      // set default font subsetting mode
      $pdf->setFontSubsetting(true);

      // Set font
      $pdf->SetFont('helvetica', '', 12, '', true);

      // Add a page
      $pdf->AddPage();

      // Set some content to print
      $html ='
      <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Report '. $result_i['name'] .' - '. $final_cell .'</b><br>Exported: ' .$final_date. '</p>
      <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
      <th width="35%" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Details</b></th>
      <th width="64%" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"></th></tr>
      <tr>
        <td style="height: 30px;"><b>Cell ID: </b>'.$final_cell.'</td>
        <td style="height: 30px;"><b>Year: </b>'.$year.'</td>
      </tr>
      <tr>
        <td style="height: 30px;"><b>Created: </b>'.$result_i['creation_date'].'</td>
        <td style="height: 30px;"><b>Quarterly: </b>'.$quar.'</td>
      </tr>
      <tr>
        <td style="height: 30px;"></td>
        <td style="height: 30px;"><b>Week: </b>'.$week.'</td>
      </tr></table><p></p>
      <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
      <th width="24%" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Cell attendance: '.$cell_at.'</b></th>
      <th width="26%" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Church attendance: '.$church_at.'</b></th>
      <th width="24%" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Performance: '.$performance.'</b></th>
      <th width="25%" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Donations: $'.$donations.'</b></th></tr>
      <tr>
        <td style="height: 30px;"><b>Members: </b>'.$result_i['total_member_assistance'].'</td>
        <td style="height: 30px;"><b>Doctrine: </b>'.$result_i['total_doctrine'].'</td>
        <td style="height: 30px;"><b>Salvations: </b>'.$result_i['total_salvation'].'</td>
        <td style="height: 30px;"><b>Oferring: $</b>'.$result_i['donations_offering'].'</td>
      </tr>
      <tr>
        <td style="height: 30px;"><b>Kids: </b>'.$result_i['total_kids_assistance'].'</td>
        <td style="height: 30px;"><b>Celebration: </b>'.$result_i['total_celebration'].'</td>
        <td style="height: 30px;"><b>Baptized: </b>'.$result_i['total_baptized'].'</td>
        <td style="height: 30px;"><b>Transport: $</b>'.$result_i['donations_transport'].'</td>
      </tr>
      <tr>
        <td style="height: 30px;"><b>Guest: </b>'.$result_i['total_guest_assistance'].'</td>
        <td style="height: 30px;"></td>
        <td style="height: 30px;"><b>Schedule visits: </b>'.$result_i['total_schedule_visits'].'</td>
        <td style="height: 30px;"><b>Events: $</b>'.$result_i['donations_events'].'</td>
      </tr>
      </table>';

      // Print text using writeHTML
      $pdf->writeHTML($html, true, false, false, false, '');

      // Close and output PDF document
      $pdf->Output('Report '.$result_i['name'] .'.pdf', 'D');


    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "message"=>"Report does not exist in this cell",
                  "status"=>422)));
    }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/download/ranking', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member = $request->getParam('member');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $gender = $request->getParam('gender');
   $parent_id = $request->getParam('parent_id');
   $child_id = $request->getParam('child_id');
   $type_ranking = $request->getParam('type_ranking');
   $type_report = $request->getParam('type_report');

   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }else if(empty($member)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: member",
               "status"=>500)));
   } else if(empty($type_ranking)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"Missing parameter: type_ranking",
               "status"=>500)));
   } else if(empty($type_report)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: type_report",
                "status"=>500)));

   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"You must enter a valid start date and end date",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "message"=>"End date must be greater than start date",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "message"=>"You must enter a valid start date",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if ($result_i) {

    /************** If filter has not been selected, per quarter ******************/

    /*actual date*/
    $today = date("Y-m-d");
    $month = date('n');
    $month_t = date('m');
    $year = date ("Y");

    $prev_y = $year -1;

    /*function general dates*/
    $general_d = generalDates($month, $year, $prev_y);

    $initial_quarter = $general_d['initial_quarter'];
    $final_quarter = $general_d['final_quarter'];
    $initial_quarter2 = $general_d['initial_quarter2'];
    $final_quarter2 = $general_d['final_quarter2'];
    $start_date_lg = $general_d['start_date_lg'];
    $end_date_lg = $general_d['end_date_lg'];
    $start_date = $general_d['start_date'];
    $end_date = $general_d['end_date'];
    $start_date2 = $general_d['start_date2'];
    $end_date2 = $general_d['end_date2'];


    /*Note: If exist date filter, validate*/
    if ($initial_date && $final_date && empty($is_mobile)) {
      $initial_quarter = $initial_date . " 00:00:00";
      $final_quarter = $final_date . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($final_date);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";

      $initial_quarter2 = $period_i;

      $final_quarter2 = $period_f;

    }else if ($initial_date && $is_mobile) {
      $initial_quarter = $initial_date . " 00:00:00";
      $add_m = date('Y-m-d', strtotime("+3 month", strtotime($initial_date)));
      $sub_m = date('Y-m-d', strtotime("-1 day", strtotime($add_m)));
      $final_quarter = $sub_m . " 23:59:59";

      // if date filter is sent
      /*count the days between two dates*/
      $date1 = date_create($initial_date);
      $date2 = date_create($sub_m);

      //difference between two dates
      $diff = date_diff($date1,$date2)->format("%a");

      $sub_i = date('Y-m-d', strtotime($initial_date. " - " . $diff . " days"));
      $period_i = date('Y-m-d H:i:s', strtotime($initial_date. " - " . $diff . " days"));
      $sub_p = date('Y-m-d', strtotime($initial_date. " - 1 days"));
      $period_f = $sub_p . " 23:59:59";
    }


    /*validate parent_id*/
    if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($parent_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: parent_id",
                  "status"=>500)));
      }
    }

    /*validate child_id*/
    if ($role_id == '3' || $role_id == '4' || $role_id == '5') {

      if(empty($child_id)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Missing parameter: child_id",
                  "status"=>500)));
      }
    }

    if ($role_id == '2') {
      $pre_dis = $con->prepare("SELECT *
                               FROM groups_districts
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if(empty($result_dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '3') {
      $pre_dis = $con->prepare("SELECT id as zone_i, (SELECT id
                               FROM groups_districts
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as district_i
                               FROM groups_zones
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $dis = $result_dis['district_i'];

      if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($dis)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '4') {
      $pre_dis = $con->prepare("SELECT id as sector_i, (SELECT id FROM groups_zones
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as zone_i
                               FROM groups_sectors
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $zone = $result_dis['zone_i'];
      $sec = $result_dis['sector_i'];

      if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($zone)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    } else if ($role_id == '5') {
      $pre_dis = $con->prepare("SELECT id as cell_i, (SELECT id FROM groups_sectors
                               WHERE id = :child_id AND church_id = :church_id AND active = '1') as sector_i
                               FROM groups_cells
                               WHERE id = :parent_id AND church_id = :church_id AND active = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis = array(':parent_id' => $parent_id, ':child_id' => $child_id, ':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      $cell = $result_dis['cell_i'];
      $sec = $result_dis['sector_i'];

      if(empty($cell)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"parent_id does not exist",
                  "status"=>500)));
      } else if(empty($sec)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"child_id does not exist",
                  "status"=>500)));
      }

    }

    /*if the gender is sent*/
    $query_g = '';
    if ($gender) {
      if ($gender == 'm') {
        $query_g = "AND user.gender = 'm'";
        
      }else if($gender == 'f'){
        $query_g = "AND user.gender = 'f'";
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Gender does not exist",
                    "status"=>422)));
      }
    }

    /*obtain church name and city*/
    $pre_ch = $con->prepare("SELECT *
                             FROM churches
                             WHERE id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_ch = array(':church_id' => $church_id);
    $pre_ch->execute($values_ch);
    $result_ch = $pre_ch->fetch();

    $church_name = $result_ch['name'];
    $church_city = $result_ch['city'];

    $final_date = date("Y-m-d H:i");

    /* Validate type ranking */
    if ($type_ranking == 'global') {
 
      /************** Points Ranking *****************/


      if ($member == '1') {

        /*validate according to parent_id*/
        $filter_val = '';

        /*function filter leader*/
        $filter_l = filterLeader($role_id, $filter_district, $filter_zone, $filter_sector, $parent_id, $child_id, $church_id);

        if ($filter_l) {
          $filter_val = $filter_l;
        }

        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as leader, CONCAT(IF(groups_cells.district_code IS NOT NULL, CONCAT(' D', groups_cells.district_code),''),IF(groups_cells.zone_code IS NOT NULL, CONCAT(' Z', groups_cells.zone_code),''), IF(groups_cells.sector_code IS NOT NULL, CONCAT(' S', groups_cells.sector_code),''), IF(groups_cells.cell_code IS NOT NULL, CONCAT(' C', groups_cells.cell_code),'')) as final_cell_id, groups_cells.city,groups_cells.id as cell_id FROM groups_cells,user WHERE user.id = groups_cells.leader AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id' $query_g $filter_val"; 

        $final_points = null;

        foreach ($con->query($sql_leader) as $row) {

          $leader_info = $row;

          // obtain overall multiply global

          $cell_id = $row['cell_id'];

          $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_cell = array(':church_id' => $church_id);
          $pre_ac_cell->execute($values_ac_cell);
          $result_ac_cell = $pre_ac_cell->fetch();

          $total_cells = $result_ac_cell['total_cells'];

          // last quarter
          $total_last_cell = $result_ac_cell['last_cells'];

          // obtain advance
          $overall_advance = $total_cells - $total_last_cell;

          // obtain percentage and goal in church_goals
          $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen->execute($values_ac_cell);
          $result_percen = $pre_percen->fetch();

          $percentage_gen = $result_percen['percentage'];
          $goal_gen = $result_percen['value'];

          // whole percentage
          $w_percentage = round($percentage_gen * 100);

          // obtain overall of multiply
          $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


          /*obtain cell_attendance global*/

          // obtain adult points

          // actual quarter
          $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_adults = array(':church_id' => $church_id);
          $pre_ac_adults->execute($values_ac_adults);
          $result_ac_adults = $pre_ac_adults->fetch();

          $total_adults = $result_ac_adults['total_adults'];

          // last quarter
          $total_last_adults = $result_ac_adults['last_adults'];

          if ($total_adults == null) {
            $total_adults = '0';
          } else if ($total_last_adults == null) {
            $total_last_adults = '0';
          }

          // obtain advance
          $adults_advance = $total_adults - $total_last_adults;

          // obtain percentage and goal in church_goals
          $percentage_ad = $result_percen['percentage_ad'];
          $goal_ad = $result_percen['goal_ad'];

          // whole percentage
          $w_percentagead = round($percentage_ad * 100);

          // obtain points of adults
          $points_ad = $adults_advance * $w_percentagead / $goal_ad;


          /*now obtain kids points*/

          // actual quarter
          $total_kids2 = $result_ac_adults['total_kids'];

          // last quarter
          $total_last_kids = $result_ac_adults['last_kids'];

          if ($total_kids2 == null) {
            $total_kids2 = '0';
          } else if ($total_last_kids == null) {
            $total_last_kids = '0';
          }

          // obtain advance
          $kids_advance = $total_kids2 - $total_last_kids;

          // obtain percentage and goal in church_goals
          $percentage_kd = $result_percen['percentage_kd'];
          $goal_kd = $result_percen['goal_kd'];

          // whole percentage
          $w_percentagekd = round($percentage_kd * 100);

          // obtain points of kids
          $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

          // FINAL OVERALL CELL ATTENDANCE
          $overall_attend = $points_ad + $points_kd;



          // obtain church_attendance global

          // actual quarter
          $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_church = array(':church_id' => $church_id);
          $pre_ac_church->execute($values_ac_church);
          $result_ac_church = $pre_ac_church->fetch();

          $total_doctrine = $result_ac_church['total_doctrine'];

          // last quarter
          $total_last_church = $result_ac_church['last_church'];

          if ($total_doctrine == null) {
            $total_doctrine = '0';
          } else if ($total_last_church == null) {
            $total_last_church = '0';
          }

          // obtain advance
          $church_advance = $total_doctrine - $total_last_church;

          // obtain percentage and goal in church_goals
          $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_ch->execute($values_ac_church);
          $result_percen_ch = $pre_percen_ch->fetch();

          $percentage_ch = $result_percen_ch['percentage'];
          $goal_ch = $result_percen_ch['value'];

          // whole percentage
          $w_percentagech = round($percentage_ch * 100);

          // obtain overall of church
          $overall_church = $church_advance * $w_percentagech / $goal_ch;


          // obtain salvation global

          // actual quarter
          $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_ac_salv = array(':church_id' => $church_id);
          $pre_ac_salv->execute($values_ac_salv);
          $result_ac_salv = $pre_ac_salv->fetch();

          $total_salvation = $result_ac_salv['total_salvation'];

          // obtain percentage and goal in church_goals
          $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $pre_percen_sv->execute($values_ac_salv);
          $result_percen_sv = $pre_percen_sv->fetch();

          $percentage_sv = $result_percen_sv['percentage'];
          $goal_sv = $result_percen_sv['value'];

          // whole percentage
          $w_percentagesv = round($percentage_sv * 100);

          // obtain points of salvation
          $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


          // obtain baptized global

          // actual quarter
          $total_baptized = $result_ac_salv['total_baptized'];

          // obtain percentage and goal in church_goals
          $percentage_bp = $result_percen_sv['percentage_bp'];
          $goal_bp = $result_percen_sv['goal_bp'];

          // whole percentage
          $w_percentagebp = round($percentage_bp * 100);

          // obtain points of salvation
          $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


          // obtain scheduled global

          // actual quarter
          $total_schedule = $result_ac_salv['total_schedule_visits'];

          // obtain percentage and goal in church_goals
          $percentage_sch = $result_percen_sv['percentage_sch'];
          $goal_sch = $result_percen_sv['goal_sch'];

          // whole percentage
          $w_per_sch = round($percentage_sch * 100);

          // obtain points of schedule
          $points_sche = $total_schedule * $w_per_sch / $goal_sch;

          // FINAL OVERALL PERFOMANCE
          $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

          /*** OVERALL CHURCH GLOBAL ***/
          $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

          $leader_info['points'] = (string)$overall_growth;

          $final_points[] = $leader_info;

        }

        if($final_points != null){

          // order array points
          foreach ($final_points as $key => $frow) {
            $aux[$key] = $frow['points'];
            unset($final_points[$key]['cell_id']);
          }
            
          array_multisort($aux, SORT_DESC, $final_points);

        }

        // DOWNLOADS
        if ($type_report == 'csv') {
          
          $stream = fopen('php://memory', 'w+');

          $row = array('LEADER', 'CELL ID','CITY','POINTS','POSITION');
          fputcsv($stream, $row, ';');

          $i = 1;


          foreach ($final_points as $row) {
            if ($row['leader'] == ' ') {
              $row['leader'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $guest[] = $row;
            fputcsv($stream, $row, ';');

            $i++;

          }
          
          rewind($stream);

          $response = $response->withHeader('Content-Type', 'text/csv');
          $response = $response->withHeader('Content-Disposition', 'attachment; filename="ranking_global_leaders.csv"');

          return $response->withBody(new \Slim\Http\Stream($stream));

        } else if ($type_report == 'pdf'){

          // create new PDF document
          $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

          // set document information
          $pdf->SetCreator('PDF');
          $pdf->SetAuthor('C+');
          $pdf->SetTitle('Ranking - Global - Leaders');
          $pdf->SetSubject('Ranking - Global - Leaders');
          $pdf->SetKeywords('');

          // set default header data
          $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
          $pdf->setFooterData(array(0,64,0), array(0,64,128));

          // set header and footer fonts
          $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
          $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

          // set default monospaced font
          $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

          // set margins
          $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
          $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
          $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

          // set auto page breaks
          $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

          // set image scale factor
          $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

          // set default font subsetting mode
          $pdf->setFontSubsetting(true);

          // Set font
          $pdf->SetFont('helvetica', '', 12, '', true);

          // Add a page
          $pdf->AddPage();

          // Set some content to print
          $html ='
          <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>City:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Ranking - Global - Leaders</b><br>Exported: ' .$final_date. '</p>
          <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
          <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>LEADER</b></th>
          <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CELL ID</b></th>
          <th width= "180" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>CITY</b></th>
          <th width="160" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>POINTS</b></th></tr>';

          foreach ($con->query($sql) as $row) {
            if ($row['leader'] == null) {
              $row['leader'] = '--';
            }
            if ($row['city'] == null) {
              $row['city'] = '--';
            }
            $html.='
                <tr>
                  <td style="height: 30px;">' . $row['leader'] . '</td>
                  <td style="height: 30px;">' . $row['cell_id'] . '</td>
                  <td style="height: 30px;">' . $row['city'] . '</td>
                  <td style="height: 30px;">' . $row['points'] . '</td>
                </tr>';
          }
          $html.='</table>';

          // Print text using writeHTML
          $pdf->writeHTML($html, true, false, false, false, '');

          // Close and output PDF document
          $pdf->Output('ranking_global_leaders.pdf', 'D');

        }else{
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                                    "message"=>"Type report does not exist",
                                    "status"=>422)));
        }


      } else if ($member == '2') {

        /*validate according to parent_id*/
        $filter_val = '';

        /*function filter supervisor*/
        $filter_s = filterSupervisor($role_id, $filter_district, $filter_zone, $parent_id, $child_id, $church_id);

        if ($filter_s) {
          $filter_val = $filter_s;
        }


        /*Obtain general information supervisors*/
        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as supervisor, CONCAT(IF(groups_sectors.district_code IS NOT NULL, CONCAT(' D', groups_sectors.district_code),''),IF(groups_sectors.zone_code IS NOT NULL, CONCAT(' Z', groups_sectors.zone_code),''), IF(groups_sectors.sector_code IS NOT NULL, CONCAT(' S', groups_sectors.sector_code),'')) as final_sector_id, user.city, groups_sectors.id as sector_id FROM groups_sectors,user WHERE user.id = groups_sectors.supervisor AND groups_sectors.active = 1 AND groups_sectors.church_id = '$church_id' $query_g $filter_val"; 

        $result_info = null;

        foreach ($con->query($sql_leader) as $row) {

          $leader_info = $row;

          $sector_id = $row['sector_id'];
         
          /*Obtain cells asociated with supervisors (sector)*/
          $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id = '$sector_id' AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

          foreach ($con->query($sql_leader2) as $row2) {

            /*cells asociated*/
            $cell_id = $row2['cell_id'];

            // obtain overall multiply
            $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_cell = array(':church_id' => $church_id);
            $pre_ac_cell->execute($values_ac_cell);
            $result_ac_cell = $pre_ac_cell->fetch();

            $total_cells = $result_ac_cell['total_cells'];

            // last quarter
            $total_last_cell = $result_ac_cell['last_cells'];

            // obtain advance
            $overall_advance = $total_cells - $total_last_cell;

            // obtain percentage and goal in church_goals
            $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen->execute($values_ac_cell);
            $result_percen = $pre_percen->fetch();

            $percentage_gen = $result_percen['percentage'];
            $goal_gen = $result_percen['value'];

            // whole percentage
            $w_percentage = round($percentage_gen * 100);

            // obtain overall of multiply
            $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


            /*obtain cell_attendance global*/

            // obtain adult points

            // actual quarter
            $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_adults = array(':church_id' => $church_id);
            $pre_ac_adults->execute($values_ac_adults);
            $result_ac_adults = $pre_ac_adults->fetch();

            $total_adults = $result_ac_adults['total_adults'];

            // last quarter
            $total_last_adults = $result_ac_adults['last_adults'];

            if ($total_adults == null) {
              $total_adults = '0';
            } else if ($total_last_adults == null) {
              $total_last_adults = '0';
            }

            // obtain advance
            $adults_advance = $total_adults - $total_last_adults;

            // obtain percentage and goal in church_goals
            $percentage_ad = $result_percen['percentage_ad'];
            $goal_ad = $result_percen['goal_ad'];

            // whole percentage
            $w_percentagead = round($percentage_ad * 100);

            // obtain points of adults
            $points_ad = $adults_advance * $w_percentagead / $goal_ad;


            /*now obtain kids points*/

            // actual quarter
            $total_kids2 = $result_ac_adults['total_kids'];

            // last quarter
            $total_last_kids = $result_ac_adults['last_kids'];

            if ($total_kids2 == null) {
              $total_kids2 = '0';
            } else if ($total_last_kids == null) {
              $total_last_kids = '0';
            }

            // obtain advance
            $kids_advance = $total_kids2 - $total_last_kids;

            // obtain percentage and goal in church_goals
            $percentage_kd = $result_percen['percentage_kd'];
            $goal_kd = $result_percen['goal_kd'];

            // whole percentage
            $w_percentagekd = round($percentage_kd * 100);

            // obtain points of kids
            $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

            // FINAL OVERALL CELL ATTENDANCE
            $overall_attend = $points_ad + $points_kd;


            // obtain church_attendance global

            // actual quarter
            $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_church = array(':church_id' => $church_id);
            $pre_ac_church->execute($values_ac_church);
            $result_ac_church = $pre_ac_church->fetch();

            $total_doctrine = $result_ac_church['total_doctrine'];

            // last quarter
            $total_last_church = $result_ac_church['last_church'];

            if ($total_doctrine == null) {
              $total_doctrine = '0';
            } else if ($total_last_church == null) {
              $total_last_church = '0';
            }

            // obtain advance
            $church_advance = $total_doctrine - $total_last_church;

            // obtain percentage and goal in church_goals
            $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_ch->execute($values_ac_church);
            $result_percen_ch = $pre_percen_ch->fetch();

            $percentage_ch = $result_percen_ch['percentage'];
            $goal_ch = $result_percen_ch['value'];

            // whole percentage
            $w_percentagech = round($percentage_ch * 100);

            // obtain overall of church
            $overall_church = $church_advance * $w_percentagech / $goal_ch;


            // obtain salvation global

            // actual quarter
            $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_salv = array(':church_id' => $church_id);
            $pre_ac_salv->execute($values_ac_salv);
            $result_ac_salv = $pre_ac_salv->fetch();

            $total_salvation = $result_ac_salv['total_salvation'];

            // obtain percentage and goal in church_goals
            $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_sv->execute($values_ac_salv);
            $result_percen_sv = $pre_percen_sv->fetch();

            $percentage_sv = $result_percen_sv['percentage'];
            $goal_sv = $result_percen_sv['value'];

            // whole percentage
            $w_percentagesv = round($percentage_sv * 100);

            // obtain points of salvation
            $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


            // obtain baptized global

            // actual quarter
            $total_baptized = $result_ac_salv['total_baptized'];

            // obtain percentage and goal in church_goals
            $percentage_bp = $result_percen_sv['percentage_bp'];
            $goal_bp = $result_percen_sv['goal_bp'];

            // whole percentage
            $w_percentagebp = round($percentage_bp * 100);

            // obtain points of salvation
            $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


            // obtain scheduled global

            // actual quarter
            $total_schedule = $result_ac_salv['total_schedule_visits'];

            // obtain percentage and goal in church_goals
            $percentage_sch = $result_percen_sv['percentage_sch'];
            $goal_sch = $result_percen_sv['goal_sch'];

            // whole percentage
            $w_per_sch = round($percentage_sch * 100);

            // obtain points of schedule
            $points_sche = $total_schedule * $w_per_sch / $goal_sch;

            // FINAL OVERALL PERFOMANCE
            $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

            /*** OVERALL CELL ***/
            $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

            /*add points to array*/
            $leader_info['total'] = $overall_growth; 
            $leader_info['number_c'] = 1;

            $result_info[] = $leader_info;
          }

        }

        /*validate result info is not null*/
        if ($result_info != null) {

          // add points from the cells with same sector
          $res  = array();
          foreach($result_info as $vals){
              if(array_key_exists($vals['sector_id'],$res)){
                  $res[$vals['sector_id']]['total'] += $vals['total'];
                  $res[$vals['sector_id']]['number_c'] += $vals['number_c'];
                  $res[$vals['sector_id']]['points'] = (string)round($res[$vals['sector_id']]['total'] / $res[$vals['sector_id']]['number_c']);
              }
              else{
                  $res[$vals['sector_id']]  = $vals;
                  $res[$vals['sector_id']]['points'] = (string)$res[$vals['sector_id']]['total'];
              }
          }

          // final array without indexes
          $newArray = [];
          foreach ($res as $key => $value) {
              $newArray[] = $value;
          }

          // order array points
          foreach ($newArray as $key => $frow) {
              $aux[$key] = $frow['points'];
              unset($final_points[$key]['sector_id']);
          }
          
          array_multisort($aux, SORT_DESC, $newArray);

          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $newArray));

        }else{
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result_info));
        }
        


        /*else member does not exist*/
      } else if ($member == '3') {
        
        /*validate according to parent_id*/
        $filter_val = '';

        /*function filter zone pastor*/
        $filter_z = filterZonepastor($role_id, $filter_district, $parent_id, $child_id, $church_id);

        if ($filter_z) {
          $filter_val = $filter_z;
        }


        /*Obtain general information zone pastors*/
        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_zones.district_code, groups_zones.zone_code, groups_zones.id as zone_id, user.city FROM groups_zones,user WHERE user.id = groups_zones.zone_pastor AND groups_zones.active = 1 AND groups_zones.church_id = '$church_id' $query_g $filter_val";

        $result_info = null;

        foreach ($con->query($sql_leader) as $row) {

          $leader_info = $row;

          $zone_id = $row['zone_id'];
         
          /*Obtain cells asociated with zone pastors (zone)*/
          $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id = '$zone_id' AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

          foreach ($con->query($sql_leader2) as $row2) {

            /*cells asociated*/
            $cell_id = $row2['cell_id'];

            // obtain overall multiply
            $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_cell = array(':church_id' => $church_id);
            $pre_ac_cell->execute($values_ac_cell);
            $result_ac_cell = $pre_ac_cell->fetch();

            $total_cells = $result_ac_cell['total_cells'];

            // last quarter
            $total_last_cell = $result_ac_cell['last_cells'];

            // obtain advance
            $overall_advance = $total_cells - $total_last_cell;

            // obtain percentage and goal in church_goals
            $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen->execute($values_ac_cell);
            $result_percen = $pre_percen->fetch();

            $percentage_gen = $result_percen['percentage'];
            $goal_gen = $result_percen['value'];

            // whole percentage
            $w_percentage = round($percentage_gen * 100);

            // obtain overall of multiply
            $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


            /*obtain cell_attendance global*/

            // obtain adult points

            // actual quarter
            $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_adults = array(':church_id' => $church_id);
            $pre_ac_adults->execute($values_ac_adults);
            $result_ac_adults = $pre_ac_adults->fetch();

            $total_adults = $result_ac_adults['total_adults'];

            // last quarter
            $total_last_adults = $result_ac_adults['last_adults'];

            if ($total_adults == null) {
              $total_adults = '0';
            } else if ($total_last_adults == null) {
              $total_last_adults = '0';
            }

            // obtain advance
            $adults_advance = $total_adults - $total_last_adults;

            // obtain percentage and goal in church_goals
            $percentage_ad = $result_percen['percentage_ad'];
            $goal_ad = $result_percen['goal_ad'];

            // whole percentage
            $w_percentagead = round($percentage_ad * 100);

            // obtain points of adults
            $points_ad = $adults_advance * $w_percentagead / $goal_ad;


            /*now obtain kids points*/

            // actual quarter
            $total_kids2 = $result_ac_adults['total_kids'];

            // last quarter
            $total_last_kids = $result_ac_adults['last_kids'];

            if ($total_kids2 == null) {
              $total_kids2 = '0';
            } else if ($total_last_kids == null) {
              $total_last_kids = '0';
            }

            // obtain advance
            $kids_advance = $total_kids2 - $total_last_kids;

            // obtain percentage and goal in church_goals
            $percentage_kd = $result_percen['percentage_kd'];
            $goal_kd = $result_percen['goal_kd'];

            // whole percentage
            $w_percentagekd = round($percentage_kd * 100);

            // obtain points of kids
            $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

            // FINAL OVERALL CELL ATTENDANCE
            $overall_attend = $points_ad + $points_kd;


            // obtain church_attendance global

            // actual quarter
            $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_church = array(':church_id' => $church_id);
            $pre_ac_church->execute($values_ac_church);
            $result_ac_church = $pre_ac_church->fetch();

            $total_doctrine = $result_ac_church['total_doctrine'];

            // last quarter
            $total_last_church = $result_ac_church['last_church'];

            if ($total_doctrine == null) {
              $total_doctrine = '0';
            } else if ($total_last_church == null) {
              $total_last_church = '0';
            }

            // obtain advance
            $church_advance = $total_doctrine - $total_last_church;

            // obtain percentage and goal in church_goals
            $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_ch->execute($values_ac_church);
            $result_percen_ch = $pre_percen_ch->fetch();

            $percentage_ch = $result_percen_ch['percentage'];
            $goal_ch = $result_percen_ch['value'];

            // whole percentage
            $w_percentagech = round($percentage_ch * 100);

            // obtain overall of church
            $overall_church = $church_advance * $w_percentagech / $goal_ch;


            // obtain salvation global

            // actual quarter
            $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_salv = array(':church_id' => $church_id);
            $pre_ac_salv->execute($values_ac_salv);
            $result_ac_salv = $pre_ac_salv->fetch();

            $total_salvation = $result_ac_salv['total_salvation'];

            // obtain percentage and goal in church_goals
            $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_sv->execute($values_ac_salv);
            $result_percen_sv = $pre_percen_sv->fetch();

            $percentage_sv = $result_percen_sv['percentage'];
            $goal_sv = $result_percen_sv['value'];

            // whole percentage
            $w_percentagesv = round($percentage_sv * 100);

            // obtain points of salvation
            $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


            // obtain baptized global

            // actual quarter
            $total_baptized = $result_ac_salv['total_baptized'];

            // obtain percentage and goal in church_goals
            $percentage_bp = $result_percen_sv['percentage_bp'];
            $goal_bp = $result_percen_sv['goal_bp'];

            // whole percentage
            $w_percentagebp = round($percentage_bp * 100);

            // obtain points of salvation
            $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


            // obtain scheduled global

            // actual quarter
            $total_schedule = $result_ac_salv['total_schedule_visits'];

            // obtain percentage and goal in church_goals
            $percentage_sch = $result_percen_sv['percentage_sch'];
            $goal_sch = $result_percen_sv['goal_sch'];

            // whole percentage
            $w_per_sch = round($percentage_sch * 100);

            // obtain points of schedule
            $points_sche = $total_schedule * $w_per_sch / $goal_sch;

            // FINAL OVERALL PERFOMANCE
            $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

            /*** OVERALL CELL ***/
            $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

            /*add points to array*/
            $leader_info['total'] = $overall_growth; 
            $leader_info['number_c'] = 1;

            $result_info[] = $leader_info;
          }

        }

        /*validate result info is not null*/
        if ($result_info != null) {

          // add points from the cells with same sector
          $res  = array();
          foreach($result_info as $vals){
              if(array_key_exists($vals['zone_id'],$res)){
                  $res[$vals['zone_id']]['total'] += $vals['total'];
                  $res[$vals['zone_id']]['number_c'] += $vals['number_c'];
                  $res[$vals['zone_id']]['points'] = (string)round($res[$vals['zone_id']]['total'] / $res[$vals['zone_id']]['number_c']);
              }
              else{
                  $res[$vals['zone_id']]  = $vals;
                  $res[$vals['zone_id']]['points'] = (string)$res[$vals['zone_id']]['total'];
              }
          }

          // final array without indexes
          $newArray = [];
          foreach ($res as $key => $value) {
              $newArray[] = $value;
          }

          // order array points
          foreach ($newArray as $key => $frow) {
              $aux[$key] = $frow['points'];
          }
          
          array_multisort($aux, SORT_DESC, $newArray);

          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $newArray));
        }else{
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result_info));
        }


        /*else member does not exist*/
      } else if ($member == '4') {

        /*Obtain general information district pastors*/
        $sql_leader = "SELECT CONCAT(user.first_name, ' ', user.last_name) as full_name, user.profile_picture, groups_districts.district_code, groups_districts.id as district_id, user.city FROM groups_districts,user WHERE user.id = groups_districts.district_pastor AND groups_districts.active = 1 AND groups_districts.church_id = '$church_id' $query_g";

        $result_info = null;

        foreach ($con->query($sql_leader) as $row) {

          $leader_info = $row;

          $district_id = $row['district_id'];
         
          /*Obtain cells asociated with district pastors (district)*/
          $sql_leader2 = "SELECT groups_cells.id as cell_id, groups_cells.sector_id as sec_id FROM groups_cells WHERE groups_cells.sector_id IN (SELECT id from groups_sectors where zone_id IN (SELECT id from groups_zones where district_id = '$district_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND groups_cells.active = 1 AND groups_cells.church_id = '$church_id'";

          foreach ($con->query($sql_leader2) as $row2) {

            /*cells asociated*/
            $cell_id = $row2['cell_id'];

            // obtain overall multiply
            $pre_ac_cell = $con->prepare("SELECT count(id) as total_cells, (SELECT count(id) as last_cells FROM groups_cells WHERE active = 1 AND (created_at NOT BETWEEN '$initial_quarter' AND '$final_quarter') AND parent_id = '$cell_id' AND church_id = :church_id) as last_cells FROM groups_cells WHERE active = 1 AND parent_id = '$cell_id' AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_cell = array(':church_id' => $church_id);
            $pre_ac_cell->execute($values_ac_cell);
            $result_ac_cell = $pre_ac_cell->fetch();

            $total_cells = $result_ac_cell['total_cells'];

            // last quarter
            $total_last_cell = $result_ac_cell['last_cells'];

            // obtain advance
            $overall_advance = $total_cells - $total_last_cell;

            // obtain percentage and goal in church_goals
            $pre_percen = $con->prepare("SELECT *,(SELECT percentage FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as percentage_ad, (SELECT value FROM `church_goals` WHERE goal = 2 AND church_id = :church_id) as goal_ad, (SELECT percentage FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as percentage_kd, (SELECT value FROM `church_goals` WHERE goal = 3 AND church_id = :church_id) as goal_kd FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen->execute($values_ac_cell);
            $result_percen = $pre_percen->fetch();

            $percentage_gen = $result_percen['percentage'];
            $goal_gen = $result_percen['value'];

            // whole percentage
            $w_percentage = round($percentage_gen * 100);

            // obtain overall of multiply
            $overall_multiply = $overall_advance * $w_percentage / $goal_gen;


            /*obtain cell_attendance global*/

            // obtain adult points

            // actual quarter
            $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults, (SELECT SUM(total_member_assistance + total_guest_assistance) as last_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_adults, (SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_kids, (SELECT SUM(total_kids_assistance) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.id = '$cell_id' AND groups_cells.church_id = :church_id) as last_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_adults = array(':church_id' => $church_id);
            $pre_ac_adults->execute($values_ac_adults);
            $result_ac_adults = $pre_ac_adults->fetch();

            $total_adults = $result_ac_adults['total_adults'];

            // last quarter
            $total_last_adults = $result_ac_adults['last_adults'];

            if ($total_adults == null) {
              $total_adults = '0';
            } else if ($total_last_adults == null) {
              $total_last_adults = '0';
            }

            // obtain advance
            $adults_advance = $total_adults - $total_last_adults;

            // obtain percentage and goal in church_goals
            $percentage_ad = $result_percen['percentage_ad'];
            $goal_ad = $result_percen['goal_ad'];

            // whole percentage
            $w_percentagead = round($percentage_ad * 100);

            // obtain points of adults
            $points_ad = $adults_advance * $w_percentagead / $goal_ad;


            /*now obtain kids points*/

            // actual quarter
            $total_kids2 = $result_ac_adults['total_kids'];

            // last quarter
            $total_last_kids = $result_ac_adults['last_kids'];

            if ($total_kids2 == null) {
              $total_kids2 = '0';
            } else if ($total_last_kids == null) {
              $total_last_kids = '0';
            }

            // obtain advance
            $kids_advance = $total_kids2 - $total_last_kids;

            // obtain percentage and goal in church_goals
            $percentage_kd = $result_percen['percentage_kd'];
            $goal_kd = $result_percen['goal_kd'];

            // whole percentage
            $w_percentagekd = round($percentage_kd * 100);

            // obtain points of kids
            $points_kd = $kids_advance * $w_percentagekd / $goal_kd;

            // FINAL OVERALL CELL ATTENDANCE
            $overall_attend = $points_ad + $points_kd;


            // obtain church_attendance global

            // actual quarter
            $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine, (SELECT SUM(total_doctrine + total_celebration) as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter2' AND '$final_quarter2') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as last_church FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_church = array(':church_id' => $church_id);
            $pre_ac_church->execute($values_ac_church);
            $result_ac_church = $pre_ac_church->fetch();

            $total_doctrine = $result_ac_church['total_doctrine'];

            // last quarter
            $total_last_church = $result_ac_church['last_church'];

            if ($total_doctrine == null) {
              $total_doctrine = '0';
            } else if ($total_last_church == null) {
              $total_last_church = '0';
            }

            // obtain advance
            $church_advance = $total_doctrine - $total_last_church;

            // obtain percentage and goal in church_goals
            $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_ch->execute($values_ac_church);
            $result_percen_ch = $pre_percen_ch->fetch();

            $percentage_ch = $result_percen_ch['percentage'];
            $goal_ch = $result_percen_ch['value'];

            // whole percentage
            $w_percentagech = round($percentage_ch * 100);

            // obtain overall of church
            $overall_church = $church_advance * $w_percentagech / $goal_ch;


            // obtain salvation global

            // actual quarter
            $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation, (SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_baptized, (SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id') as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_quarter' AND '$final_quarter') AND groups_cells.church_id = :church_id AND groups_cells.id = '$cell_id'", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_ac_salv = array(':church_id' => $church_id);
            $pre_ac_salv->execute($values_ac_salv);
            $result_ac_salv = $pre_ac_salv->fetch();

            $total_salvation = $result_ac_salv['total_salvation'];

            // obtain percentage and goal in church_goals
            $pre_percen_sv = $con->prepare("SELECT *, (SELECT percentage FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as percentage_bp, (SELECT value FROM `church_goals` WHERE goal = 6 AND church_id = :church_id) as goal_bp, (SELECT percentage FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as percentage_sch, (SELECT value FROM `church_goals` WHERE goal = 7 AND church_id = :church_id) as goal_sch FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $pre_percen_sv->execute($values_ac_salv);
            $result_percen_sv = $pre_percen_sv->fetch();

            $percentage_sv = $result_percen_sv['percentage'];
            $goal_sv = $result_percen_sv['value'];

            // whole percentage
            $w_percentagesv = round($percentage_sv * 100);

            // obtain points of salvation
            $points_salvation = $total_salvation * $w_percentagesv / $goal_sv;


            // obtain baptized global

            // actual quarter
            $total_baptized = $result_ac_salv['total_baptized'];

            // obtain percentage and goal in church_goals
            $percentage_bp = $result_percen_sv['percentage_bp'];
            $goal_bp = $result_percen_sv['goal_bp'];

            // whole percentage
            $w_percentagebp = round($percentage_bp * 100);

            // obtain points of salvation
            $points_baptized = $total_baptized * $w_percentagebp / $goal_bp;


            // obtain scheduled global

            // actual quarter
            $total_schedule = $result_ac_salv['total_schedule_visits'];

            // obtain percentage and goal in church_goals
            $percentage_sch = $result_percen_sv['percentage_sch'];
            $goal_sch = $result_percen_sv['goal_sch'];

            // whole percentage
            $w_per_sch = round($percentage_sch * 100);

            // obtain points of schedule
            $points_sche = $total_schedule * $w_per_sch / $goal_sch;

            // FINAL OVERALL PERFOMANCE
            $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

            /*** OVERALL CELL ***/
            $overall_growth=  $overall_multiply + $overall_attend + $overall_church + $overall_perfomance;

            /*add points to array*/
            $leader_info['total'] = $overall_growth; 
            $leader_info['number_c'] = 1;

            $result_info[] = $leader_info;
          }

        }

        /*validate result info is not null*/
        if ($result_info != null) {

          // add points from the cells with same sector
          $res  = array();
          foreach($result_info as $vals){
              if(array_key_exists($vals['district_id'],$res)){
                  $res[$vals['district_id']]['total'] += $vals['total'];
                  $res[$vals['district_id']]['number_c'] += $vals['number_c'];
                  $res[$vals['district_id']]['points'] = (string)round($res[$vals['district_id']]['total'] / $res[$vals['district_id']]['number_c']);
              }
              else{
                  $res[$vals['district_id']]  = $vals;
                  $res[$vals['district_id']]['points'] = (string)$res[$vals['district_id']]['total'];
              }
          }

          // final array without indexes
          $newArray = [];
          foreach ($res as $key => $value) {
              $newArray[] = $value;
          }

          // order array points
          foreach ($newArray as $key => $frow) {
              $aux[$key] = $frow['points'];
          }
          
          array_multisort($aux, SORT_DESC, $newArray);

          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $newArray));
        }else{
          return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => $result_info));
        }


        /*else member does not exist*/
      } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Member does not exist",
                    "status"=>422)));
      }


    } else if ($type_ranking == 'cell'){

    } else if ($type_ranking == 'church'){

    } else if ($type_ranking == 'performance'){

    } else if ($type_ranking == 'donations'){

    } else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "message"=>"Type ranking does not exist",
                    "status"=>422)));
    }


  }else{
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "message"=>"User with this role does not exist",
                "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});



$app->post('/function', function ($request,$response) {

  try{

    $con = $this->db;

    $type_report = $request->getParam('type_report');

    if(empty($type_report)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Missing parameter: type report",
                "status"=>500)));

    }

    if ($type_report == 'csv') {

      $sql = "SELECT id, name FROM news_categories";
      
      $stream = fopen('php://memory', 'w+');

      $row = array('Id', 'Name');
      fputcsv($stream, $row, ';');

      foreach ($con->query($sql) as $row) {
         $categories[] = $row;
         fputcsv($stream, $row, ';');
       }
      
      rewind($stream);

      $response = $response->withHeader('Content-Type', 'text/csv');
      $response = $response->withHeader('Content-Disposition', 'attachment; filename="file.csv"');

      return $response->withBody(new \Slim\Http\Stream($stream));

    }else if ($type_report == 'pdf'){

      $sql = "SELECT id, name FROM news_categories";

      // create new PDF document
      $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

      // set document information
      $pdf->SetCreator('PDF');
      $pdf->SetAuthor('C+');
      $pdf->SetTitle('List Cells');
      $pdf->SetSubject('List Cells');
      $pdf->SetKeywords('');

      // set default header data
      $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
      $pdf->setFooterData(array(0,64,0), array(0,64,128));

      // set header and footer fonts
      $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
      $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

      // set default monospaced font
      $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

      // set margins
      $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
      $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
      $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

      // set auto page breaks
      $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

      // set image scale factor
      $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

      // set default font subsetting mode
      $pdf->setFontSubsetting(true);

      // Set font
      $pdf->SetFont('helvetica', '', 12, '', true);

      // Add a page
      $pdf->AddPage();

      // Set some content to print

      $html ='
      <p style="font-size: 10px;"><b>iRest</b><br><b>City:</b> Reseda</p>
  <p style="color: #363636; font-size: 11px;"><b>Cell Groups List</b><br>Exported: 2018-10-03 14:12</p>
  <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10">
    <tr>
      <th width= "120"style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Cell ID</b></th>
      <th width= "170" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Leader</b></th>
      <th width= "120" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Start date</b></th>
      <th width= "130"style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>City</b></th>
      <th width="90" style="border-bottom: 1px solid rgb(0,64,128); height: 20px;"><b>Members</b></th>
    </tr>';

  foreach ($con->query($sql) as $row) {
    $name = $row['name'];

    $html.='
        <tr>
          <td style="height: 30px;">' . $name . '</td>
        </tr>';
  }
  $html.='</table>';

      // Print text using writeHTMLCell()
      $pdf->writeHTML($html, true, false, false, false, '');

      // ---------------------------------------------------------

      // Close and output PDF document
      // This method has several options, check the source code documentation for more information.
      $pdf->Output('list_cells.pdf', 'D');

    }else{
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                                "message"=>"Type report does not exist",
                                "status"=>422)));
    }

  }
  catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});


/************************ VERSION 1.0.1 LEADER *************************/

/*Temporal invitation*/
$app->post('/general/temporary-invitation-leader', function ($request,$response) use ($app) {

  try{

    $con = $this->db;

    // obtain parameters
    $church_id = $request->getParam('church_id');
    $district_code = $request->getParam('district_code');
    $zone_code = $request->getParam('zone_code');
    $sector_code = $request->getParam('sector_code');
    $cell_code = $request->getParam('cell_code');
    $name = $request->getParam('name');
    $last_name = $request->getParam('last_name');
    $email = $request->getParam('email');

    // All fields are required
    if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Id de iglesia",
                "status"=>500)));
    } else if (empty($zone_code)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: CÃ³digo de zona",
                "status"=>500)));
    } else if (empty($sector_code)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: CÃ³digo de sector",
                "status"=>500)));
    } else if (empty($cell_code)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: CÃ³digo de cÃ©lula",
                "status"=>500)));
    } else if (empty($name)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Nombre",
                "status"=>500)));
    } else if (empty($last_name)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Apellido",
                "status"=>500)));
    } else if (empty($email)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Email",
                "status"=>500)));
    }

    /************************** VALIDATIONS **************************/

   if(!preg_match("/^[0-9]+$/i", $zone_code) || !preg_match("/^[0-9]+$/i", $sector_code) || !preg_match("/^[0-9]+$/i", $cell_code)){
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "type"=>"only_numbers",
                      "message"=>"ID de cÃ©lula solo puede contener nÃºmeros",
                      "status"=>422)));
    }

    if ($district_code) {
      // verified if district exist
      $pre_dis = $con->prepare("SELECT *
                            FROM groups_districts
                            WHERE district_code = :district_code AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis  = array(':district_code' => $district_code,':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if (empty($result_dis)) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"district",
                  "message"=>"Este distrito no existe dentro de la iglesia",
                  "status"=>422))); 
      }

      $district_f = $result_dis['id'];

    }else{
      $district_code = '0';
      $district_f = null;
    }

    // verified if zone exist
    $pre_zone = $con->prepare("SELECT *
                          FROM groups_zones
                          WHERE zone_code = :zone_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_zone  = array(':zone_code' => $zone_code,':church_id' => $church_id);
    $pre_zone->execute($values_zone);
    $result_zone = $pre_zone->fetch();

    if (empty($result_zone)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"zone",
                "message"=>"Esta zona no existe dentro de la iglesia",
                "status"=>422))); 
    }

    // verified if sector exist
    $pre_sector = $con->prepare("SELECT *
                          FROM groups_sectors
                          WHERE sector_code = :sector_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_sector  = array(':sector_code' => $sector_code,':church_id' => $church_id);
    $pre_sector->execute($values_sector);
    $result_sector = $pre_sector->fetch();

    if (empty($result_sector)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"sector",
                "message"=>"Este sector no existe dentro de la iglesia",
                "status"=>422))); 
    }

    // verified if cell exist
    $pre_cell = $con->prepare("SELECT *
                          FROM groups_cells
                          WHERE cell_code = :cell_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell  = array(':cell_code' => $cell_code,':church_id' => $church_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    if (empty($result_cell)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"cell",
                "message"=>"Esta cÃ©lula no existe dentro de la iglesia",
                "status"=>422))); 
    }

    // verified if Cell ID exist
    $pre_cell = $con->prepare("SELECT *
                          FROM groups_cells
                          WHERE cell_code = :cell_code AND sector_code = :sector_code AND zone_code = :zone_code AND district_code = :district_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell  = array(':cell_code' => $cell_code, ':zone_code' => $zone_code, ':sector_code' => $sector_code,':district_code' => $district_code,':church_id' => $church_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    if (empty($result_cell)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"cell_id",
                "message"=>"ID de cÃ©lula no existe dentro de la iglesia",
                "status"=>422)));
    }

    $cell_id = $result_cell['id'];
    $cell_leader = $result_cell['leader'];
    $sector_f = $result_cell['sector_id'];
    $zone_f = $result_zone['id'];

    /*If leader is verified, a new one can not be assigned*/
    $pre_verify = $con->prepare("SELECT *
                          FROM user
                          WHERE id = :cell_leader AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_verify  = array(':cell_leader' => $cell_leader,':church_id' => $church_id);
    $pre_verify->execute($values_verify);
    $result_verify = $pre_verify->fetch();

    // verify if the cell already has an assigned leader
    if ($cell_leader && $result_verify) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"assigned_cell",
                  "message"=>"Esta cÃ©lula ya fue asignada",
                  "status"=>422)));

    }

    // validations email
    $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);

    if(!$valid_email) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"valid_email",
                "message"=>"El formato del correo no es vÃ¡lido",
                "status"=>422)));
    }

    $pre_email = $con->prepare("SELECT *
                          FROM user
                          WHERE email = :email AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_email  = array(':email' => $email,':church_id' => $church_id);
    $pre_email->execute($values_email);
    $result_email = $pre_email->fetch();

    if ($result_email) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"mail_exist",
                "message"=>"Este correo ya fue asignado",
                "status"=>422)));
    }

    // exelerate_id
    $exe = rand(10000, 99999);

    // token and code
    $token_c = password_hash(microtime(), PASSWORD_BCRYPT);
    $token_c = substr($token_c, 7, strlen($token_c));
    $token_c = preg_replace("#[^a-z0-9._]#i", "", $token_c);

    $code_c = bin2hex(openssl_random_pseudo_bytes(3));

    $today = date("Y-m-d H:i:s");
    $guest_since = date("Y-m-d");

    // create leader
    $pre_cell2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_id, '$token_c', :name, :last_name, :email, NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'5','$exe', '$code_c', '0' ,'0', '1' , '', '', '$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell2 = array(
      ':email' => $email,
      ':church_id' => $church_id,
      ':name' => $name,
      ':last_name' => $last_name
    );

    $result_cell2 = $pre_cell2->execute($values_cell2);
    $leader_created = $con->lastInsertId();

    if ($result_cell2) {

      // Update leader
      $pre_cell3 = $con->prepare("UPDATE groups_cells SET leader = :leader_created, active = '1', is_complete = '1', updated_at = '$today' WHERE id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cell3 = array(
        ':cell_id' => $cell_id,
        ':leader_created' => $leader_created
        );

      $result_cell3 = $pre_cell3->execute($values_cell3);

      // Add new user in user_groups
      $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:leader_created, :district_f, :zone_f, :sector_f, :cell_id, '$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_us = array(
        ':leader_created' => $leader_created,
        ':cell_id' => $cell_id,
        ':sector_f' => $sector_f,
        ':zone_f' => $zone_f,
        ':district_f' => $district_f
        );

      $result_us = $pre_us->execute($values_us);

      // Save invitation
      $invite = $con->prepare("INSERT INTO invitations (`token`, `user_id`, `used`, `created_at`, `updated_at`) VALUES (:token_c, :leader_created, '0', '$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $val_invite = array(
        ':token_c' => $token_c,
        ':leader_created' => $leader_created
        );

      $result_invite = $invite->execute($val_invite);


      /************ Actions when the cell is new ************/

      // You have to get the id when the new cell is created (this creation process is waiting)
      $pre_em = $con->prepare("SELECT *
                               FROM reports
                               WHERE cell_id = :cell_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_em = array(':cell_id' => $cell_id);
      $pre_em->execute($values_em);
      $result_em = $pre_em->fetch();

      if (empty($result_em)) {

        /*Name of report*/
        $report_y = date('Y');

        $month = date('n');
        $quarter = null;

        if($month < 4){
          $quarter = "1";
        } elseif($month > 3 && $month <7){
          $quarter = "2";
        } elseif($month >6 && $month < 10){
          $quarter = "3";
        } elseif($month >9){
          $quarter = "4";
        }

        $currentWeekNumber = date('W');

        $fweek = '0';
        $fweek = $currentWeekNumber;

        if($currentWeekNumber > '13'){
          if ($currentWeekNumber == '14') {
            $fweek = '1';
          } else if ($currentWeekNumber == '15') {
            $fweek = '2';
          } else if ($currentWeekNumber == '16') {
            $fweek = '3';
          } else if ($currentWeekNumber == '17') {
            $fweek = '4';
          } else if ($currentWeekNumber == '18') {
            $fweek = '5';
          } else if ($currentWeekNumber == '19') {
            $fweek = '6';
          } else if ($currentWeekNumber == '20') {
            $fweek = '6';
          } else if ($currentWeekNumber == '21') {
            $fweek = '7';
          } else if ($currentWeekNumber == '22') {
            $fweek = '8';
          }else if ($currentWeekNumber == '23') {
            $fweek = '9';
          } else if ($currentWeekNumber == '24') {
            $fweek = '10';
          } else if ($currentWeekNumber == '25') {
            $fweek = '11';
          } else if ($currentWeekNumber == '26') {
            $fweek = '12';
          } else if ($currentWeekNumber == '27') {
            $fweek = '1';
          } else if ($currentWeekNumber == '28') {
            $fweek = '2';
          } else if ($currentWeekNumber == '29') {
            $fweek = '3';
          } else if ($currentWeekNumber == '30') {
            $fweek = '4';
          }else if ($currentWeekNumber == '31') {
            $fweek = '5';
          }else if ($currentWeekNumber == '32') {
            $fweek = '6';
          }else if ($currentWeekNumber == '33') {
            $fweek = '7';
          }else if ($currentWeekNumber == '34') {
            $fweek = '8';
          }else if ($currentWeekNumber == '35') {
            $fweek = '9';
          }else if ($currentWeekNumber == '36') {
            $fweek = '10';
          }else if ($currentWeekNumber == '37') {
            $fweek = '11';
          }else if ($currentWeekNumber == '38') {
            $fweek = '12';
          }else if ($currentWeekNumber == '39') {
            $fweek = '13';
          }else if ($currentWeekNumber == '40') {
            $fweek = '1';
          }else if ($currentWeekNumber == '41') {
            $fweek = '2';
          }else if ($currentWeekNumber == '42') {
            $fweek = '3';
          }else if ($currentWeekNumber == '43') {
            $fweek = '4';
          }else if ($currentWeekNumber == '44') {
            $fweek = '5';
          }else if ($currentWeekNumber == '45') {
            $fweek = '6';
          }else if ($currentWeekNumber == '46') {
            $fweek = '7';
          }else if ($currentWeekNumber == '47') {
            $fweek = '8';
          }else if ($currentWeekNumber == '48') {
            $fweek = '9';
          }else if ($currentWeekNumber == '49') {
            $fweek = '10';
          }else if ($currentWeekNumber == '50') {
            $fweek = '11';
          }else if ($currentWeekNumber == '51') {
            $fweek = '12';
          }else if ($currentWeekNumber == '52') {
            $fweek = '13';
          }

        }

        $report_name = $district_code.$zone_code.$sector_code.$cell_code."-".$report_y."-".$quarter."-".$fweek;

        $end_date = date('Y-m-d', strtotime($today. 'next Saturday'));

        // add report with information to 0
        $pre_report = $con->prepare("INSERT INTO reports (`name`, `creation_date`,`end_date`, `donations_offering`,`donations_events`,`donations_transport`,`total_member_assistance`,`total_kids_assistance`,`total_guest_assistance`,`total_doctrine`,`total_celebration`,`total_salvation`,`total_baptized`,`total_schedule_visits`,`cell_id`,`district_code`,`zone_code`,`sector_code`,`cell_code`,`is_complete`,`created_by`,`year`,`quarter`,`week`,`created_at`, `updated_at`) VALUES ('$report_name', '$guest_since','$end_date', '0.00','0.00','0.00','0','0','0','0','0','0','0','0',:cell_id,$district_code,$zone_code,$sector_code,$cell_code,'0',$leader_created,$report_y,$quarter,$currentWeekNumber,'$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_report = array(
            ':cell_id' => $cell_id
        );

        $result_report = $pre_report->execute($values_report);

        $reportId = $con->lastInsertId();

      }


      // Verify if the last report of the cell has saved the field created_by
      $pre_lastr = $con->prepare("SELECT *
                               FROM reports
                               WHERE cell_id = :cell_id ORDER BY id DESC LIMIT 1", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_lastr = array(':cell_id' => $cell_id);
      $pre_lastr->execute($values_lastr);
      $result_lastr = $pre_lastr->fetch();

      if (empty($result_lastr['created_by'])) {

        $updater = $con->prepare("UPDATE reports SET created_by = :created_by
                               WHERE id = :report_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_updater = array(
          ':created_by' => $leader_created,
          ':report_id' => $result_lastr['id']
          );

        $res_updater = $updater->execute($values_updater);
      }


    }


    if ($result_cell2 && $result_cell3 && $result_us && $result_invite) {

        $subject = "InvitaciÃ³n de LÃ­der";

        $bodyMail = "
        <html>
        <head>
        <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet'>
        <style>
          p{
            font-family: 'Open Sans', sans-serif !important;
            font-size: 15px;
          }
          .invite{
            background-color: rgb(78, 206, 61);
            color: #fff !important;
            padding: 10px;
            border-radius: 5px;
            text-decoration: none;
          }
          .parag{
            text-align: center;
          }
          .part{
            margin-bottom: 40px;
          }
          .final{
            margin-top: 30px;
          }
        </style>
        </head>
        <body>
        <p>Hola, $name</p>
        <p>Tienes una invitaciÃ³n disponible para unirte a C+, una app designada para el manejo de tu grupo celular D$district_code Z$zone_code S$sector_code C$cell_code.</p>
        <p class='part'>Para poder ser parte solamente tienes que darle click al siguiente botÃ³n y completar tus datos de registro.</p>
        <p class='parag'><a class='invite' href='$app->host/invitation/?token=$token_c' target='_blank'>Aceptar invitaciÃ³n</a></p>
        <p class='final'>Con amor,<br>C+ Team.</p>
        </body></html>";

        if(sendEmail($bodyMail,$email,$subject)){
          return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => array('message' => 'InvitaciÃ³n enviada', 'leader_id' => $leader_created, 'name' => $name, 'last_name' => $last_name,'district_code' =>$district_code,'zone_code' =>$zone_code,'sector_code' =>$sector_code,'cell_code' =>$cell_code)));
        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type"=>"invitation_not_sent",
                    "message"=>"La invitaciÃ³n no pudo ser enviada, vuelva a intentarlo nuevamente",
                    // "Mailer Error:"=>$mail_c->ErrorInfo,
                    "status"=>422)));
        }
        
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                "status"=>422)));
    }


 } // end try
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->post('/general/temporary-invitation', function ($request,$response) use ($app) {

  try{

    $con = $this->db;

    // obtain parameters
    $church_id = $request->getParam('church_id');
    $district_code = $request->getParam('district_code');
    $zone_code = $request->getParam('zone_code');
    $sector_code = $request->getParam('sector_code');
    $cell_code = $request->getParam('cell_code');
    $name = $request->getParam('name');
    $last_name = $request->getParam('last_name');
    $email = $request->getParam('email');

    // All fields are required
    if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Id de iglesia",
                "status"=>500)));
    } else if (empty($zone_code)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: CÃ³digo de zona",
                "status"=>500)));
    } else if (empty($sector_code)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: CÃ³digo de sector",
                "status"=>500)));
    } else if (empty($cell_code)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: CÃ³digo de cÃ©lula",
                "status"=>500)));
    } else if (empty($name)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Nombre",
                "status"=>500)));
    } else if (empty($last_name)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Apellido",
                "status"=>500)));
    } else if (empty($email)) {
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: Email",
                "status"=>500)));
    }

    /************************** VALIDATIONS **************************/

   if(!preg_match("/^[0-9]+$/i", $zone_code) || !preg_match("/^[0-9]+$/i", $sector_code) || !preg_match("/^[0-9]+$/i", $cell_code)){
            return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "type"=>"only_numbers",
                      "message"=>"ID de cÃ©lula solo puede contener nÃºmeros",
                      "status"=>422)));
    }

    if ($district_code) {
      // verified if district exist
      $pre_dis = $con->prepare("SELECT *
                            FROM groups_districts
                            WHERE district_code = :district_code AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_dis  = array(':district_code' => $district_code,':church_id' => $church_id);
      $pre_dis->execute($values_dis);
      $result_dis = $pre_dis->fetch();

      if (empty($result_dis)) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"district",
                  "message"=>"Este distrito no existe dentro de la iglesia",
                  "status"=>422))); 
      }

      $district_f = $result_dis['id'];

    }else{
      $district_code = '0';
      $district_f = null;
    }

    // verified if zone exist
    $pre_zone = $con->prepare("SELECT *
                          FROM groups_zones
                          WHERE zone_code = :zone_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_zone  = array(':zone_code' => $zone_code,':church_id' => $church_id);
    $pre_zone->execute($values_zone);
    $result_zone = $pre_zone->fetch();

    if (empty($result_zone)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"zone",
                "message"=>"Esta zona no existe dentro de la iglesia",
                "status"=>422))); 
    }

    // verified if sector exist
    $pre_sector = $con->prepare("SELECT *
                          FROM groups_sectors
                          WHERE sector_code = :sector_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_sector  = array(':sector_code' => $sector_code,':church_id' => $church_id);
    $pre_sector->execute($values_sector);
    $result_sector = $pre_sector->fetch();

    if (empty($result_sector)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"sector",
                "message"=>"Este sector no existe dentro de la iglesia",
                "status"=>422))); 
    }

    // verified if cell exist
    $pre_cell = $con->prepare("SELECT *
                          FROM groups_cells
                          WHERE cell_code = :cell_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell  = array(':cell_code' => $cell_code,':church_id' => $church_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    if (empty($result_cell)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"cell",
                "message"=>"Esta cÃ©lula no existe dentro de la iglesia",
                "status"=>422))); 
    }

    // verified if Cell ID exist
    $pre_cell = $con->prepare("SELECT *
                          FROM groups_cells
                          WHERE cell_code = :cell_code AND sector_code = :sector_code AND zone_code = :zone_code AND district_code = :district_code AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell  = array(':cell_code' => $cell_code, ':zone_code' => $zone_code, ':sector_code' => $sector_code,':district_code' => $district_code,':church_id' => $church_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    if (empty($result_cell)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"cell_id",
                "message"=>"ID de cÃ©lula no existe dentro de la iglesia",
                "status"=>422)));
    }

    $cell_id = $result_cell['id'];
    $cell_leader = $result_cell['leader'];
    $sector_f = $result_cell['sector_id'];
    $zone_f = $result_zone['id'];

    /*If leader is verified, a new one can not be assigned*/
    $pre_verify = $con->prepare("SELECT *
                          FROM user
                          WHERE id = :cell_leader AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_verify  = array(':cell_leader' => $cell_leader,':church_id' => $church_id);
    $pre_verify->execute($values_verify);
    $result_verify = $pre_verify->fetch();

    // verify if the cell already has an assigned leader
    if ($cell_leader && $result_verify) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"assigned_cell",
                  "message"=>"Esta cÃ©lula ya fue asignada",
                  "status"=>422)));

    }

    // validations email
    $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);

    if(!$valid_email) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"valid_email",
                "message"=>"El formato del correo no es vÃ¡lido",
                "status"=>422)));
    }

    $pre_email = $con->prepare("SELECT *
                          FROM user
                          WHERE email = :email AND church_id = :church_id", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_email  = array(':email' => $email,':church_id' => $church_id);
    $pre_email->execute($values_email);
    $result_email = $pre_email->fetch();

    if ($result_email) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"mail_exist",
                "message"=>"Este correo ya fue asignado",
                "status"=>422)));
    }

    // exelerate_id
    $exe = rand(10000, 99999);

    // token and code
    $token_c = password_hash(microtime(), PASSWORD_BCRYPT);
    $token_c = substr($token_c, 7, strlen($token_c));
    $token_c = preg_replace("#[^a-z0-9._]#i", "", $token_c);

    $code_c = bin2hex(openssl_random_pseudo_bytes(3));

    $today = date("Y-m-d H:i:s");
    $guest_since = date("Y-m-d");

    // create leader
    $pre_cell2 = $con->prepare("INSERT INTO user (`id`, `church_id`, `token`, `first_name`, `last_name`, `email`, `password`, `phone`, `address`, `city`, `gender`, `birth_date`, `marital_status`, `married_since`, `guest_since`, `member_since`, `profile_picture`, `rol`, `exelerate_id`, `verify_code`, `verified_account`,`status`, `newsletter`, `review_terms`, `remember_me`, `created_at`, `updated_at`) VALUES (NULL, :church_id, '$token_c', :name, :last_name, :email, NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'5','$exe', '$code_c', '0' ,'0', '1' , '', '', '$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell2 = array(
      ':email' => $email,
      ':church_id' => $church_id,
      ':name' => $name,
      ':last_name' => $last_name
    );

    $result_cell2 = $pre_cell2->execute($values_cell2);
    $leader_created = $con->lastInsertId();

    if ($result_cell2) {
      // Update leader
      $pre_cell3 = $con->prepare("UPDATE groups_cells SET leader = :leader_created, active = '1', is_complete = '1', updated_at = '$today' WHERE id = :cell_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_cell3 = array(
        ':cell_id' => $cell_id,
        ':leader_created' => $leader_created
        );

      $result_cell3 = $pre_cell3->execute($values_cell3);

      // Add new user in user_groups
      $pre_us = $con->prepare("INSERT INTO user_groups (`user_id`, `district_id`, `zone_id`, `sector_id`, `cell_id`, `created_at`, `updated_at`) VALUES (:leader_created, :district_f, :zone_f, :sector_f, :cell_id, '$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_us = array(
        ':leader_created' => $leader_created,
        ':cell_id' => $cell_id,
        ':sector_f' => $sector_f,
        ':zone_f' => $zone_f,
        ':district_f' => $district_f
        );

      $result_us = $pre_us->execute($values_us);

      // Save invitation
      $invite = $con->prepare("INSERT INTO invitations (`token`, `user_id`, `used`, `created_at`, `updated_at`) VALUES (:token_c, :leader_created, '0', '$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $val_invite = array(
        ':token_c' => $token_c,
        ':leader_created' => $leader_created
        );

      $result_invite = $invite->execute($val_invite);
    }


    if ($result_cell2 && $result_cell3 && $result_us && $result_invite) {

        $subject = "InvitaciÃ³n de LÃ­der";

        $bodyMail = "
        <html>
        <head>
        <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet'>
        <style>
          body{
            font-family: 'Open Sans', sans-serif;
          }
          .invite{
            background-color: rgb(78, 206, 61);
            color: #fff;
            padding: 10px;
            border-radius: 5px;
            text-decoration: none;
            font-size: 14px;
          }
          .parag{
            text-align: center;
          }
          .part{
            margin-bottom: 40px;
          }
          .final{
            margin-top: 30px;
          }
        </style>
        </head>
        <body>
        <p>Hola, $name</p>
        <p>Tienes una invitaciÃ³n disponible para unirte a C+, una app designada para el manejo de tu grupo celular D$district_code Z$zone_code S$sector_code C$cell_code.</p>
        <p class='part'>Para poder ser parte solamente tienes que darle click al siguiente botÃ³n y completar tus datos de registro.</p>
        <p class='parag'><a class='invite' href='$app->host/invitation/?token=$token_c' target='_blank'>Aceptar invitaciÃ³n</a></p>
        <p class='final'>Con amor,<br>C+ Team.</p>
        </body></html>";

        if(sendEmail($bodyMail,$email,$subject)){
          return $response->withStatus(200)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('response' => array('message' => 'InvitaciÃ³n enviada', 'leader_id' => $leader_created, 'name' => $name, 'last_name' => $last_name,'district_code' =>$district_code,'zone_code' =>$zone_code,'sector_code' =>$sector_code,'cell_code' =>$cell_code)));
        }else{
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type"=>"invitation_not_sent",
                    "message"=>"La invitaciÃ³n no pudo ser enviada, vuelva a intentarlo nuevamente",
                    // "Mailer Error:"=>$mail_c->ErrorInfo,
                    "status"=>422)));
        }
        
    }else{

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "message"=>"Ha ocurrido un problema, vuelva a intentarlo nuevamente",
                "status"=>422)));
    }


 } // end try
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/* Validate status of invitation */
$app->post('/general/validate-invitation', function ($request,$response) {

  try{

    $con = $this->db;

    // obtain parameters
    $token = $request->getParam('token');

    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: token",
                "status"=>500)));
    }

    // obatin invitations
    $pre_invite = $con->prepare("SELECT *
                          FROM invitations
                          WHERE token = :token", 
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_invite  = array(':token' => $token);
    $pre_invite->execute($val_invite);
    $result_invite = $pre_invite->fetch();

    if (empty($result_invite)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"fake_invitation",
                "success"=>"false",
                "message"=>"La invitaciÃ³n no existe.",
                "status"=>422))); 
    }

    // expired invitation
    $invitation_date = date("Y-m-d",strtotime($result_invite['created_at']));
    $expiration_date = date('Y-m-d', strtotime($invitation_date. ' + 7 days'));

    $today = date("Y-m-d");

    if ($expiration_date < $today) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"expire_invitation",
                "success"=>"false",
                "message"=>"Â¡Ups! Lo siento, esta invitaciÃ³n ya venciÃ³.",
                "status"=>422)));
    }

    // invitation used
    if ($result_invite['used']) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"invitation_used",
                "success"=>"false",
                "message"=>"Â¡Ups! Lo siento, esta invitaciÃ³n ya se utilizÃ³.",
                "status"=>422)));
    }

    // check if leader is still assigned
    $pre_assign = $con->prepare("SELECT *
                          FROM groups_cells
                          WHERE leader = :user_id",
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign  = array(':user_id' => $result_invite['user_id']);
    $pre_assign->execute($val_assign);
    $result_assign = $pre_assign->fetch();

    if (empty($result_assign)) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"not_assigned",
                "success"=>"false",
                "message"=>"Â¡Ups! Lo siento, no puedes acceder.",
                "status"=>422))); 
    }

    // obtain user data
    $pre_leader = $con->prepare("SELECT *
                          FROM user
                          WHERE id = :user_id",
                          array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_leader  = array(':user_id' => $result_invite['user_id']);
    $pre_leader->execute($val_leader);
    $result_leader = $pre_leader->fetch();

    return $response->withStatus(200)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('response' => 
              array('success'=>'true', 'token' => $token,'name' => $result_leader['first_name'], 'last_name' => $result_leader['last_name'], 'email' => $result_leader['email'],'church_id' => $result_assign['church_id'],'cell_id' => $result_assign['id'],'district_code' =>$result_assign['district_code'],'zone_code' =>$result_assign['zone_code'],'sector_code' =>$result_assign['sector_code'],'cell_code' =>$result_assign['cell_code'])));


  } // end try
  catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});

/* Validate password leader register */
$app->get('/general/validate-leader-register', function ($request,$response) {

  try{

    $con = $this->db;

    // obtain parameters
    $email = $request->getParam('email');
    $password = $request->getParam('password');

    if(empty($email) || empty($password)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"Todos los campos son requeridos.",
                "status"=>500)));
    }

    if ((strlen($password) < '8') || (!preg_match("#[0-9]+#",$password)) || !preg_match("#[A-Z]+#",$password)) {
        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"weak_password",
                "success"=>"false",
                "message"=>"La contraseÃ±a es muy dÃ©bil.",
                "status"=>422))); 
    }

    return $response->withStatus(200)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('response' => 
              array("success"=>"true", 'email' => $email, 'password' => $password)));


  } // end try
  catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});

/* Leader and cell register */
$app->post('/general/leader-register', function ($request,$response) use ($app) {

  try{

    $con = $this->db;
    $token = $request->getParam('token');
    $email = $request->getParam('email');
    $password = $request->getParam('password');
    $church_id = $request->getParam('church_id');
    $cell_id = $request->getParam('cell_id');
    $image = $request->getParam('image');

    $meets = $request->getParam('meets');
    $meets_time = $request->getParam('meets_time');
    $address = $request->getParam('address');
    $latitude = $request->getParam('latitude');
    $longitude = $request->getParam('longitude');
    $zip_code = $request->getParam('zip_code');
    $city = $request->getParam('city');
    $phone_number = $request->getParam('phone_number');
    $since = $request->getParam('since');

    $uploadedFiles = $request->getUploadedFiles();
    $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$since);

    if(empty($token)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: token",
                "status"=>500)));

    } else if(empty($email)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: email",
                "status"=>500)));
    } else if(empty($password)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: password",
                "status"=>500)));
    } else if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: church_id",
                "status"=>500)));
    }else if(empty($cell_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: cell_id",
                "status"=>500)));
    }else if(empty($meets)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: meets",
                "status"=>500)));
    }else if(empty($meets_time)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: meets_time",
                "status"=>500)));
    }else if(empty($address)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: address",
                "status"=>500)));
    }else if(empty($zip_code)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: zip_code",
                "status"=>500)));
    }else if(empty($city)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: city",
                "status"=>500)));
    }else if(empty($phone_number)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: phone_number",
                "status"=>500)));
    }else if(empty($since)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: since",
                "status"=>500)));
    }else if(!$valid_date){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Fecha de inicio invÃ¡lida",
                  "status"=>500)));
    }

    // Validations leader and cell
    $pre = $con->prepare("SELECT *
                                 FROM user
                                 WHERE token = :token AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':token' => $token, ':church_id' => $church_id);
    $pre->execute($values);
    $result = $pre->fetch();

    if(!$result){
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"leader_doesnt_exist",
              "success"=>"false",
              "message"=>"El lÃ­der no existe.",
              "status"=>422)));
    }

    // verify if cell exists
    $pre_cell = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell = array(':cell_id' => $cell_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    if(!$result_cell){
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"cell_doesnt_exist",
              "success"=>"false",
              "message"=>"La cÃ©lula ingresada no existe.",
              "status"=>422)));
    }


    $directory = $this->get('upload_directory');
    $user_id = $result['id'];
    $name = $result['first_name'];
    $date_g = date("Y-m-d");
    $today = date("Y-m-d H:i:s");

    $pre_user = $con->prepare("UPDATE user SET password = :password,
                           verified_account = '1',
                           status = '1',
                           review_terms = '1',
                           updated_at = :today
                           WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(
      ':password' => md5($password),
      ':user_id' => $user_id,
      ':today' => $today
    );

    $result_user = $pre_user->execute($values_user);

    // if profile picture is sent
    if ($image) {

        $pre_user2 = $con->prepare("UPDATE user SET profile_picture = :image,updated_at = :today
                               WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_user2 = array(
          ':image' => $image,
          ':user_id' => $user_id,
          ':today' => $today
          );

        $result_user2 = $pre_user2->execute($values_user2);


      if (!$result_user2) {
        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"size_image",
                "success"=>"false",
                "message"=>"Verifique el tamaÃ±o de su imagen de perfil.",
                "status"=>422)));
      }

    }

    // if ($uploadedFiles) {

    // handle single input with single file upload
    //   $uploadedFile = $uploadedFiles['image'];

    //   if ($uploadedFile->getError() === UPLOAD_ERR_OK) {

    //     $user_dir = $app->user_directory;
    //     $filename = moveUploadedFile($user_dir, $uploadedFile);

    //     $url_p = $app->user_url;

    //     $url_final = $url_p . DIRECTORY_SEPARATOR . $filename;


    //     $pre_user2 = $con->prepare("UPDATE user SET profile_picture = :profile,updated_at = :today
    //                            WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    //     $values_user2 = array(
    //       ':profile' => $url_final,
    //       ':user_id' => $user_id,
    //       ':today' => $today
    //       );

    //     $result_user2 = $pre_user2->execute($values_user2);


    //   }else{
    //     return $response->withStatus(422)
    //           ->withHeader('Content-Type', 'application/json')
    //           ->withJson(array('error' => array(
    //             "type"=>"size_image",
    //             "success"=>"false",
    //             "message"=>"Verifique el tamaÃ±o de su imagen de perfil.",
    //             "status"=>422)));
    //   }

    // }

    // update group cell
    $update_cell = $con->prepare("UPDATE groups_cells SET is_complete = 1, meets_on = :meets, meets_time = :meets_time, address = :address,zip_code = :zip_code, city = :city, phone = :phone_number, start_date = :since, updated_at = :today WHERE id = :cell_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_update = array(
      ':cell_id' => $cell_id,
      ':church_id' => $church_id,
      ':meets' => $meets,
      ':meets_time' => $meets_time,
      ':address' => $address,
      ':zip_code' => $zip_code,
      ':city' => $city,
      ':phone_number' => $phone_number,
      ':since' => $since,
      ':today' => $today
    );

    $result_update = $update_cell->execute($values_update);

    // update invitation (used)
    $pre_invitate = $con->prepare("UPDATE invitations SET used = '1', updated_at = :today
                               WHERE user_id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_invitate = array(
      ':user_id' => $user_id,
      ':today' => $today
    );

    $result_invite = $pre_invitate->execute($values_invitate);

    // create user settings
    $pre_settings = $con->prepare("INSERT INTO user_settings (`user_id`, `reports_mail`, `reports_mobile`, `members_mail`, `members_mobile`, `news_mail`, `news_mobile`, `language`, `created_at`, `updated_at`) VALUES (:user_id, '0', '0', '0', '0', '0','0','es','$today', '$today')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_settings = array(
      ':user_id' => $user_id
    );

    $result_settings = $pre_settings->execute($values_settings);

    // obtain church info
    $pre_info = $con->prepare("SELECT *
                             FROM churches
                             WHERE id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_info = array(':church_id' => $church_id);
    $pre_info->execute($values_info);
    $result_info = $pre_info->fetch();


    if ($result_user && $result_update) {

      $subject = "Bienvenido a C+";

      $bodyMail = "
      <html>
      <head>
      <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet'>
      <style>
        body{
          font-family: 'Open Sans', sans-serif;
        }
        .invite{
          background-color: rgb(78, 206, 61);
          color: #fff;
          padding: 10px;
          border-radius: 5px;
          text-decoration: none;
          font-size: 14px;
        }
        .parag{
          text-align: center;
        }
        .part{
          margin-bottom: 40px;
        }
        .final{
          margin-top: 30px;
        }
      </style>
      </head>
      <body>
      <p>Hola, $name</p>
      <p>Bienvenido a C+ The easy way to expand. A continuaciÃ³n detallamos tus credenciales para ingresar a la plataforma.</p>
      <p>Correo: $email <br> ContraseÃ±a: $password</p>
      <p class='part'>No olvides guardar este correo para tener a la mano tus credenciales, si olvidas tu contraseÃ±a podrÃ¡s generar una nueva en âOlvidÃ© mi contraseÃ±aâ dentro de la plataforma.</p>
      <p class='parag'><a class='invite' href='$app->host/?type=login&church_id=$church_id' target='_blank'>Iniciar sesiÃ³n</a></p>
      <p class='final'>Con amor,<br>C+ Team.</p>
      </body></html>";

      if(sendEmail($bodyMail,$email,$subject)){

        $final_res = array('message' => 'Su registro se ha guardado con Ã©xito.',
                           'leader_id' => $result['id'],
                           'first_name' => $result['first_name'],
                           'last_name' => $result['last_name'],
                           'email' => $result['email'],
                           'leader_picture' => $result['profile_picture'],
                           'role' => $result['rol'],
                           "complete" => $result['is_complete'],
                           'church_id' => $result['church_id'],
                           'church_name' => $result_info['name'],
                           'church_city' => $result_info['city'],
                           'church_picture' => $result_info['profile_picture'],
                           'cell_id' => $cell_id,
                           'cell_code' => $result_cell['cell_code'],
                           'sector_id' => $result_cell['sector_id'],
                           'sector_code' => $result_cell['sector_code']
                         );

        return $response->withStatus(200)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('response' => $final_res));
      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"invitation_not_sent",
                  "message"=>"Su registro fue guardado, pero el correo de bienvenida no pudo ser enviado.",
                  // "Mailer Error:"=>$mail_c->ErrorInfo,
                  "status"=>422)));
      }

    }else{      
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
              "status"=>422)));
    }


  }catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});

/********************** LOGIN **************************/

// verify email exist
$app->get('/login/validate-email', function ($request,$response) {

  try{

     $con = $this->db; 
     $email = $request->getParam('email');

     if(empty($email)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: email",
                 "status"=>500)));
     }

     $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);

     if (!$valid_email) {
      return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "type"=>"mail_format",
                      'success'=>'false',
                      "message"=>"Â¡Ups! ingresa un correo electrÃ³nico vÃ¡lido.",
                      "status"=>422)));
     }

      // verify if email exist
      $pre_em = $con->prepare("SELECT *
                               FROM user
                               WHERE email = :email",
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_em = array(':email' => $email);
      $pre_em->execute($values_em);
      $result_em = $pre_em->fetch();

      if (!$result_em) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"wrong_mail",
                    'success'=>'false',
                    "message"=>"Â¡Ups! el correo es incorrecto.",
                    "status"=>422)));
      }

      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => 
                array('success'=>'true', 'email' => $email)));   

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// verify if password and mail match
$app->get('/login/validate-password', function ($request,$response) {

  try{

     $con = $this->db; 
     $email = $request->getParam('email');
     $password = md5($request->getParam('password'));

     if(empty($email)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: email",
                 "status"=>500)));
     }  else if(empty($password)){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"required",
                  "message"=>"ParÃ¡metro faltante: password",
                  "status"=>500)));
    }
    
    $pre_pass = $con->prepare("SELECT *
                             FROM user
                             WHERE email = :email
                             AND password = :password", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_pass = array(':email' => $email, ':password' => $password);
    $pre_pass->execute($values_pass);
    $result_pass = $pre_pass->fetch();

    if (!$result_pass) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"wrong_password",
                  'success'=>'false',
                  "message"=>"Â¡Ups! la contraseÃ±a no coincide.",
                  "status"=>422)));
    }

    return $response->withStatus(200)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('response' => 
              array('success'=>'true', 'email' => $email)));   

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// assign new password
$app->post('/add-new-password', function ($request,$response) use ($app){

  try{

    $con = $this->db;

    // obtain parameters
    $email = $request->getParam('email');
    $password = $request->getParam('password');

    if(empty($email) || empty($password)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"Todos los campos son requeridos.",
                "status"=>500)));
    }

    // if exist user
    $pre = $con->prepare("SELECT *
                                 FROM user
                                 WHERE email = :email AND verified_account = 1 AND status = 1", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':email' => $email);
    $pre->execute($values);
    $result = $pre->fetch();

    if (!$result) {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"user_doesnt_exist",
              "success"=>"false",
              "message"=>"El usuario al que se intenta cambiar contraseÃ±a no existe.",
              "status"=>422)));
    }

    $user_id = $result['id'];
    $name = $result['first_name'];
    $church_id = $result['church_id'];
    $today = date("Y-m-d H:i:s");

    if ((strlen($password) < '8') || (!preg_match("#[0-9]+#",$password)) || !preg_match("#[A-Z]+#",$password)) {
        return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"weak_password",
                "success"=>"false",
                "message"=>"La contraseÃ±a es muy dÃ©bil.",
                "status"=>422))); 
    }

    $pre_user = $con->prepare("UPDATE user SET password = :password, updated_at = :today
                           WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(
      ':password' => md5($password),
      ':user_id' => $user_id,
      ':today' => $today
    );

    $result_user = $pre_user->execute($values_user);

    if (!$result_user) {
      return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "success"=>"false",
                      "message"=>"No se pudo guardar la contraseÃ±a, verifique todos sus parÃ¡metros.",
                      "status"=>422)));
    }

    // Send email with new credentials

    $subject = "Nuevas credenciales";

    $bodyMail = "
    <html>
    <head>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet'>
    <style>
      body{
        font-family: 'Open Sans', sans-serif;
      }
      .invite{
        background-color: rgb(78, 206, 61);
        color: #fff;
        padding: 10px;
        border-radius: 5px;
        text-decoration: none;
        font-size: 14px;
      }
      .parag{
        text-align: center;
      }
      .part{
        margin-bottom: 40px;
      }
      .final{
        margin-top: 30px;
      }
    </style>
    </head>
    <body>
    <p>Hola, $name</p>
    <p><b>Â¡Ya tienes tu nueva contraseÃ±a!</b></p>
    <p>Acabas de cambiar la contraseÃ±a para conectarte a C+. A continuaciÃ³n detallamos tus credenciales para ingresar a la plataforma.</p>
    <p>Correo: $email <br> ContraseÃ±a: $password</p>
    <p class='part'>No olvides guardar este correo para tener a la mano tus credenciales, si olvidas tu contraseÃ±a podrÃ¡s generar una nueva en âOlvidÃ© mi contraseÃ±aâ dentro de la plataforma.</p>
    <p class='parag'><a class='invite' href='$app->host/?type=login&church_id=$church_id' target='_blank'>Iniciar sesiÃ³n</a></p>
    <p class='final'>Con amor,<br>C+ Team.</p>
    </body></html>";

    if(sendEmail($bodyMail,$email,$subject)){

      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => 
                array("message"=>"Â¡ContraseseÃ±a actualizada!", 'email' => $email)));
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"emai_new_password",
                "message"=>"Su contraseÃ±a fue guardada, pero el correo con nuevas credenciales no pudo ser enviado.",
                // "Mailer Error:"=>$mail_c->ErrorInfo,
                "status"=>422)));
    }

  } // end try
  catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});


/********************** CONFIGURATIONS AND NOTIFICATIONS **********************/

// change principal email
$app->post('/settings/change-email', function ($request,$response) use ($app){

  try{

    $con = $this->db;

    // obtain parameters
    $user_id = $request->getParam('user_id');
    $church_id = $request->getParam('church_id');
    $email = $request->getParam('email');

    if(empty($user_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: user id",
                "status"=>500)));
    } else if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: church id",
                "status"=>500)));
    } else if(empty($email)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: email",
                "status"=>500)));
    }

    // if exist user
    $pre = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :user_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':user_id' => $user_id, ':church_id' => $church_id);
    $pre->execute($values);
    $result = $pre->fetch();

    if (!$result) {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"user_doesnt_exist",
              "success"=>"false",
              "message"=>"El usuario al que se intenta cambiar correo, no existe.",
              "status"=>422)));
    }

    // validations email
    $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);

    if(!$valid_email) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"valid_email",
                "message"=>"El formato del correo no es vÃ¡lido",
                "status"=>422)));
    }

    // verify that the mail does not exist
    $pre_email = $con->prepare("SELECT *
                                 FROM user
                                 WHERE email = :email AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_email = array(':email' => $email, ':church_id' => $church_id);
    $pre_email->execute($values_email);
    $result_email = $pre_email->fetch();

    if ($result_email) {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"mail_already_exists",
              "success"=>"false",
              "message"=>"Correo ya ha sido utilizado.",
              "status"=>422)));
    }

    $today = date("Y-m-d H:i:s");

    $pre_user = $con->prepare("UPDATE user SET email = :email, updated_at = :today
                           WHERE id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(
      ':email' => $email,
      ':user_id' => $user_id,
      ':today' => $today
    );

    $result_user = $pre_user->execute($values_user);

    if (!$result_user) {
      return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "success"=>"false",
                      "message"=>"No se pudo guardar el correo, verifique todos sus parÃ¡metros.",
                      "status"=>422)));
    }

    return $response->withStatus(200)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('response' => 
              array("message"=>"Correo cambiado satisfactoriamente.", 'email' => $email)));

  } // end try
  catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});

$app->post('/settings/notifications', function ($request,$response){

  try{

    $con = $this->db;

    // obtain parameters
    $user_id = $request->getParam('user_id');
    $church_id = $request->getParam('church_id');
    $notification_type = $request->getParam('notification_type');
    $active = $request->getParam('active');

    if(empty($user_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: user id",
                "status"=>500)));
    } else if(empty($church_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: church id",
                "status"=>500)));
    } else if(empty($notification_type)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: notification_type",
                "status"=>500)));
    } else if(!preg_match("/^[0-1]+$/i", $active)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: active",
                "status"=>500)));
    }

    // if exist user
    $pre = $con->prepare("SELECT *
                                 FROM user
                                 WHERE id = :user_id AND church_id = :church_id AND status = 1", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':user_id' => $user_id, ':church_id' => $church_id);
    $pre->execute($values);
    $result = $pre->fetch();

    if (!$result) {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"user_doesnt_exist",
              "success"=>"false",
              "message"=>"El usuario al que se intenta cambiar notificaciones, no existe.",
              "status"=>422)));
    }

    // verify active
    if ($active != '0' && $active != '1') {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"active",
              "success"=>"false",
              "message"=>"ParÃ¡metro activo no existe",
              "status"=>422)));
    }

    // verify active
    if ($notification_type != 'reports_mail' && $notification_type != 'reports_mobile' && $notification_type != 'members_mail' && $notification_type != 'members_mobile' && $notification_type != 'news_mail' && $notification_type != 'news_mobile') {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"notification_type",
              "success"=>"false",
              "message"=>"Tipo de notificaciÃ³n no existe",
              "status"=>422)));
    }

    $today = date("Y-m-d H:i:s");

    $pre_user = $con->prepare("UPDATE user_settings SET $notification_type = :active, updated_at = :today
                           WHERE user_id = :user_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(
      ':user_id' => $user_id,
      ':active' => $active,
      ':today' => $today
    );

    $result_user = $pre_user->execute($values_user);

    if (!$result_user) {
      return $response->withStatus(422)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('error' => array(
                      "success"=>"false",
                      "message"=>"No se pudo guardar, verifique todos sus parÃ¡metros.",
                      "status"=>422)));
    }

    return $response->withStatus(200)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('response' => 
              array("message"=>"OpciÃ³n guardada satisfactoriamente.")));


  } // end try
  catch(\Exception $ex){
    return $response->withJson(array('error' => array(
                 "message"=> $ex->getMessage(),
                 "status"=>422)),422);
  }

});

$app->post('/settings/contact-us', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $church_id = $request->getParam('church_id');
   $subject = $request->getParam('subject');
   $message = $request->getParam('message');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"ParÃ¡metro faltante: id de usuario",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"ParÃ¡metro faltante: id de iglesia",
               "status"=>500)));
   } else if(empty($subject)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"ParÃ¡metro faltante: asunto",
               "status"=>500)));
   }else if(empty($message)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "message"=>"ParÃ¡metro faltante: mensaje",
               "status"=>500)));
   }

   // if exist user
   $pre = $con->prepare("SELECT *
                                FROM user
                                WHERE id = :user_id AND church_id = :church_id AND status = 1", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values = array(':user_id' => $user_id, ':church_id' => $church_id);
   $pre->execute($values);
   $result = $pre->fetch();

   if (!$result) {
     return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
             "type"=>"user_doesnt_exist",
             "success"=>"false",
             "message"=>"El usuario que intenta enviar el correo, no existe.",
             "status"=>422)));
   }

   $name = $result['first_name'];
   $email = $result['email'];

   if(contactMail($email,$name,$subject,$message)){
      return $response->withStatus(200)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('response' => 
               array("message"=>"Â¡Mensaje enviado!", 'email' => $email)));
   }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"help_mail",
                "message"=>"El correo no pudo ser enviado.",
                "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// notification list

$app->get('/notifications/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $language = $request->getParam('language');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($language)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: language",
               "status"=>500)));
   }

   // if exist user
   $pre = $con->prepare("SELECT *
                                FROM user
                                WHERE id = :user_id AND church_id = :church_id AND rol = :role_id AND status = 1", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values = array(':user_id' => $user_id, ':role_id' => $role_id,':church_id' => $church_id);
   $pre->execute($values);
   $result = $pre->fetch();

   if (!$result) {
     return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
             "type"=>"user_doesnt_exist",
             "message"=>"El usuario no existe.",
             "status"=>422)));
   }

   // verify active
   if ($language != 'es' && $language != 'en') {
     return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
             "type"=>"active",
             "message"=>"Lenguaje no existe",
             "status"=>422)));
   }

   if ($language == 'en') {
     /*sql of complete activity en*/
     $sql_gro = "SELECT en_message as activity_msg, created_at as activity_date FROM activity WHERE user_id = $user_id ORDER BY created_at DESC LIMIT 10";

   }else if ($language == 'es'){
     /*sql of complete activity es*/
     $sql_gro = "SELECT es_message as activity_msg, created_at as activity_date FROM activity WHERE user_id = $user_id ORDER BY created_at DESC LIMIT 10";

   }

   $activity = null;

   foreach ($con->query($sql_gro) as $row) {
     $activity[] = $row;
   }

   return $response->withStatus(200)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('response' => $activity));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

/********************** LEADER PROFILE **********************/

$app->post('/users/profile', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $church_id = $request->getParam('church_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   }
    
   $pre_i = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':user_id' => $user_id, ':church_id' => $church_id);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if ($result_i) {

     // Roles
     $user_rol = null;

     $pre = $con->prepare("SELECT user.id, CONCAT(user.first_name, ' ', user.last_name) AS full_name, user.first_name, user.last_name, user.email, user.phone, user.address,user.postal_code, user.city, user.gender, user.birth_date, user.marital_status, user.married_since, user.guest_since, user.member_since, user.profile_picture,user.rol, user.exelerate_id, user.is_complete, churches.name AS church_name, churches.id AS church_id FROM user INNER JOIN churches ON user.church_id = churches.id  WHERE user.id = :user_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values = array(':user_id' => $user_id);
     $pre->execute($values);
     $result = $pre->fetch();

     $sql = "SELECT user_steps.step_id,steps.step_name,user_steps.step_date
             FROM user_steps, steps
             WHERE user_steps.step_id = steps.step_id AND user_id = $user_id ORDER BY step_id";

     $steps = null;

     foreach ($con->query($sql) as $row) {
       $steps[] = $row;
     }

     $final_gro = null;


     if ($result['rol'] == '1') {
       $user_rol = 'Senior Pastor';
       $responsible = null;

       // total steps
       $total_steps = '9';
     } else if ($result['rol'] == '2') {
       $user_rol = 'District Pastor';

       // Select group id and codes
       $sql_gro = "SELECT district_code, id as district_id FROM `groups_districts` WHERE `district_pastor` = :user_id AND church_id = :church_id";
       $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_gro = array(
         ':user_id' => $user_id,
         ':church_id' => $church_id
         );
       
       $result_gro = $pre_gro->execute($values_gro);
       $result_gro = $pre_gro->fetch();

       $final_gro = array(
         'district_code' => $result_gro['district_code'],
         'parent_id' => $result_gro['district_id']
       );

       $responsible = null;

       // total steps
       $total_steps = '8';

     } else if ($result['rol'] == '3') {
       $user_rol = 'Zone Pastor';

       // Select group id and codes
       $sql_gro = "SELECT zone_code, district_code, id as zone_id, district_id FROM `groups_zones` WHERE `zone_pastor` = :user_id AND church_id = :church_id";
       $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_gro = array(
         ':user_id' => $user_id,
         ':church_id' => $church_id
         );
       
       $result_gro = $pre_gro->execute($values_gro);
       $result_gro = $pre_gro->fetch();

       $final_gro = array(
         'parent_id' => $result_gro['zone_id'],
         'zone_code' => $result_gro['zone_code'],
         'district_id' => $result_gro['district_id'],
         'district_code' => $result_gro['district_code']
       );

       $responsible = null;

       // total steps
       $total_steps = '7';

     } else if ($result['rol'] == '4') {
       $user_rol = 'Supervisor';

       // Select group id and codes
       $sql_gro = "SELECT sector_code, zone_code, district_code, id as sector_id, zone_id, (SELECT district_id from groups_zones WHERE groups_zones.id = groups_sectors.zone_id AND groups_zones.church_id = :church_id) as district_id FROM `groups_sectors` WHERE `supervisor` = :user_id AND church_id = :church_id";
       $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_gro = array(
         ':user_id' => $user_id,
         ':church_id' => $church_id
         );
       
       $result_gro = $pre_gro->execute($values_gro);
       $result_gro = $pre_gro->fetch();

       $final_gro = array(
         'parent_id' => $result_gro['sector_id'],
         'sector_code' => $result_gro['sector_code'],
         'zone_id' => $result_gro['zone_id'],
         'zone_code' => $result_gro['zone_code'],
         'district_id' => $result_gro['district_id'],
         'district_code' => $result_gro['district_code']
       );

       $responsible = null;

       // total steps
       $total_steps = '6';

     } else if ($result['rol'] == '5') {
       $user_rol = 'Leader';

       // Select group id and codes
       $sql_gro = "SELECT cell_code, sector_code, zone_code, district_code, id as cell_id, sector_id, (SELECT zone_id from groups_sectors WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.church_id = :church_id) as zone_id,(SELECT supervisor from groups_sectors WHERE groups_sectors.id = groups_cells.sector_id AND groups_sectors.church_id = :church_id) as supervisor, (SELECT district_id from groups_zones WHERE groups_zones.id = zone_id AND groups_zones.church_id = :church_id) as district_id FROM `groups_cells` WHERE `leader` = :user_id AND church_id = :church_id";
       $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_gro = array(
         ':user_id' => $user_id,
         ':church_id' => $church_id
         );
       
       $result_gro = $pre_gro->execute($values_gro);
       $result_gro = $pre_gro->fetch();

       $final_gro = array(
         'parent_id' => $result_gro['cell_id'],
         'cell_code' => $result_gro['cell_code'],
         'sector_id' => $result_gro['sector_id'],
         'sector_code' => $result_gro['sector_code'],
         'zone_id' => $result_gro['zone_id'],
         'zone_code' => $result_gro['zone_code'],
         'district_id' => $result_gro['district_id'],
         'district_code' => $result_gro['district_code']
       );

       // obtain name of supervisor
       $pre_sup = $con->prepare("SELECT CONCAT(user.first_name, ' ', user.last_name) AS full_name
                                FROM user
                                WHERE id = :user AND status = '1'", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_sup = array(':user' => $result_gro['supervisor']);
       $pre_sup->execute($values_sup);
       $result_sup = $pre_sup->fetch();

       $responsible = $result_sup['full_name'];

       // total steps
       $total_steps = '5';

     } else if ($result['rol'] == '6') {
       $user_rol = 'Administrator';
       $responsible = null;

       // total steps
       $total_steps = '9';
     } else if ($result['rol'] == '7') {
       $user_rol = 'Owner';
       $responsible = null;

       // total steps
       $total_steps = '9';
     }

     // obtain settings and notifications for user
     $pre_sett = $con->prepare("SELECT reports_mail, reports_mobile,members_mail,members_mobile,
     		                      news_mail, news_mobile
                                  FROM user_settings
                                  WHERE user_id = :user_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_sett = array(':user_id' => $user_id);
     $pre_sett->execute($values_sett);
     $result_sett = $pre_sett->fetch();

     if (!$result_sett) {
     	$result_sett = null;
     }


     $jsonObject = array(
       "user_id" => $result['id'],
       "full_name" => $result['full_name'],
       "first_name" => $result['first_name'],
       "last_name" => $result['last_name'],
       "email" => $result['email'],
       "phone" => $result['phone'],
       "address" => $result['address'],
       "postal_code" => $result['postal_code'],
       "city" => $result['city'],
       "gender" => $result['gender'],
       "birth_date" => $result['birth_date'],
       "marital_status" => $result['marital_status'],
       "married_since" => $result['married_since'],
       "guest_since" => $result['guest_since'],
       "member_since" => $result['member_since'],
       "profile_picture" => $result['profile_picture'],
       "role_id" => $result['rol'],
       "exelerate_id" => $result['exelerate_id'],
       "is_complete" => $result['is_complete'],
       "role" => $user_rol,
       "notifications" => $result_sett,
       "church_id" => $result['church_id'],
       "church" => $result['church_name'],
       "responsible" => $responsible,
       "group" => $final_gro,
       "steps" => $steps,
       "total_steps" => $total_steps
     );

     return $response->withStatus(200)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('response' => $jsonObject));

   }else{
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "type"=>"user_doesnt_exist",
                 "message"=>"El usuario no existe.",
                 "status"=>422)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->put('/users/edit-profile', function ($request,$response) {

  try{

   $con = $this->db;
   $parent_user_id = $request->getParam('parent_user_id');
   $parent_role_id = $request->getParam('parent_role_id');
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $postal_code = $request->getParam('postal_code');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $exelerate_id = $request->getParam('exelerate_id');
   $guest_since = $request->getParam('guest_since');
   $member_since = $request->getParam('member_since');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);
   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
   $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

   if(empty($parent_user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: parent_user_id",
               "status"=>500)));
   } else if(empty($parent_role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: parent_role_id",
               "status"=>500)));
   } else if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   }

    // Validations depending on the parameters sent
    if($gender){

     if($gender != 'm' && $gender != 'f'){
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type" => "gender",
                 "message"=>"Debe ingresar un gÃ©nero vÃ¡lido",
                 "status"=>422)));
     }

    }
    if($birth_date){

       if(!$valid_birthdate){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"You must enter a valid birthdate",
                  "status"=>422)));
       }

    }
    if($marital_status){

     if($marital_status != 'M' && $marital_status != 'S'){
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type" => "marital_status",
                 "message"=>"Debe ingresar un estado civil vÃ¡lido",
                 "status"=>422)));
     }

    } 
    if($married_since){
       if(!$valid_married){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_married",
                  "message"=>"Debes ingresar una fecha de casado vÃ¡lida",
                  "status"=>422)));
       }
    }
    if ($guest_since) {
       if(!$valid_guest){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_guest",
                  "message"=>"Debes ingresar una fecha de invitado vÃ¡lida",
                  "status"=>422)));
       }
    }
    if ($member_since) {
       if(!$valid_member){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_member",
                  "message"=>"Debes ingresar una fecha de miembro vÃ¡lida",
                  "status"=>422)));
       }
    }

    /*Impersonate*/
    if ($impersonate) {
      
      if ($impersonate != '1') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"impersonate_not_valid",
                  "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                  "status"=>422)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_role",
                 "status"=>500)));
     }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

     }

     // validate parent_user
     $pre_i = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :parent_user_id AND rol = :parent_role_id AND church_id = :church_id AND status = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_i = array(':parent_user_id' => $parent_user_id,':parent_role_id' => $parent_role_id, ':church_id' => $church_id);
     $pre_i->execute($values_i);
     $result_i = $pre_i->fetch();

     if (!$result_i) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"parent_user",
                  "message"=>"Usuario padre con este rol no existe",
                  "status"=>422)));

     }

      $first_name_l = $result_i['first_name'];
      $last_name_l = $result_i['last_name'];
     
      // validate user to edit
      $pre_s = $con->prepare("SELECT *
                               FROM user
                               WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
      $pre_s->execute($values_s);
      $result_s = $pre_s->fetch();

      if (!$result_s) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"user_doesnt_exist",
                    "message"=>"El usuario no existe.",
                    "status"=>422)));
      }

      $name_edited = $result_s['first_name'];
      $last_name_edited = $result_s['last_name'];

      // validate exelerate_id
      if ($exelerate_id) {
        $pre_ex = $con->prepare("SELECT *
                                 FROM user
                                 WHERE exelerate_id = :exelerate_id AND id != :user_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ex = array(':exelerate_id' => $exelerate_id, ':user_id' => $user_id, ':church_id' => $church_id);
        $pre_ex->execute($values_ex);
        $result_ex = $pre_ex->fetch();

        if ($result_ex) {
          
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "type"=>"exelerate_id",
                              "message"=>"El Exelerate ID ya existe, favor ingrese uno nuevo.",
                              "status"=>422)));

        }
      }

      $final_d = date("Y-m-d H:i:s");

      // update user info
      $pre = $con->prepare("UPDATE user SET first_name = :first_name,
                             last_name = :last_name,
                             phone = :phone,
                             address = :address,
                             postal_code = :postal_code,
                             city = :city,
                             gender= :gender,
                             birth_date = :birth_date,
                             marital_status= :marital_status,
                             married_since= :married_since,
                             guest_since= :guest_since,
                             member_since= :member_since,
                             profile_picture= :profile_picture,
                             exelerate_id= :exelerate_id,
                             updated_at= :updated_at
                             WHERE id = :user_id",
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values = array(
        ':user_id' => $user_id, 
        ':first_name' => $first_name,
        ':last_name' => $last_name,
        ':phone' => $phone,
        ':address' => $address,
        ':postal_code' => $postal_code,
        ':city' => $city,
        ':gender' => $gender,
        ':birth_date' => $birth_date,
        ':marital_status' => $marital_status,
        ':married_since' => $married_since,
        ':guest_since' => $guest_since,
        ':member_since' => $member_since,
        ':profile_picture' => $profile_picture,
        ':updated_at' => $final_d,
        ':exelerate_id' => $exelerate_id);

      $result = $pre->execute($values);

      // check if have all steps
      $pre_steps = $con->prepare("SELECT count(step_id) as steps FROM user_steps WHERE user_id = :user_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_steps = array(':user_id' => $user_id);
      $pre_steps->execute($values_steps);
      $result_ex = $pre_steps->fetch();

      $total_steps = null;

      if ($result_s['rol'] == '5') {
        if ($result_ex['steps'] == '5') {
          $total_steps = '5';
        }
      }

      if ($result) {
        // check if have all the complete information
        if ($marital_status == 'M') {
          $pre_complete = $con->prepare("UPDATE user SET is_complete = '0', updated_at= :updated_at
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $married_since && $guest_since && $member_since && $profile_picture && $gender && $exelerate_id && $total_steps) {
            // update complete
            $pre_complete = $con->prepare("UPDATE user SET is_complete = '1', updated_at= :updated_at
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          }
        }else{
          $pre_complete = $con->prepare("UPDATE user SET is_complete = '0', updated_at= :updated_at
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $guest_since && $member_since && $profile_picture && $gender && $exelerate_id && $total_steps) {
            // update complete
            $pre_complete = $con->prepare("UPDATE user SET is_complete = '1', updated_at= :updated_at
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
          }
        }

        $values_complete = array(
          ':user_id' => $user_id,
          ':updated_at' => $final_d);

        $result_complete = $pre_complete->execute($values_complete);

        /*************** ACTIVITIES ***********************/

        if ($impersonate) {
         
          $roles = getRole($impersonate_role);

          $role_name = $roles['role_name'];
          $role_name_es = $roles['role_name_es'];

          $imperson = "* (Impersonate)";
          $imperson_es = "* (Impersonado)";

          /*Activity profile updates (all members)*/
          $en_message = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited profile of " . $name_edited . " " . $last_name_edited;
          $es_message = $role_name . " " . $name_imper . " " . $last_name_imper . $imperson_es . " editÃ³ el perfil de " . $name_edited . " " . $last_name_edited;

          $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act = array(
              ':es_message' => $es_message,
              ':en_message' => $en_message, 
              ':id_m' => $impersonate_id,
              ':final_d' => $final_d);

          $result_act = $pre_act->execute($values_act);

          /*Activity Edited a Leaderâs profile (Supervisor and other members)*/
          $en_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited " . $name_edited . " " . $last_name_edited . " profile";
          $es_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " editÃ³ el perfil de " . $name_edited . " " . $last_name_edited;

        }else{

          if ($parent_user_id == $user_id) {
            /*Activity profile updates (all members)*/
            $en_message = " *". $name_edited . " " . $last_name_edited . "* edited his profile";
            $es_message = " *". $first_name_l . " " . $last_name_l . "* editÃ³ su perfil";
          }else{
            /*Activity profile updates (all members)*/
            $en_message = " *". $first_name_l . " " . $last_name_l . "* edited profile of " . $name_edited . " " . $last_name_edited;
            $es_message = " *". $first_name_l . " " . $last_name_l . "* editÃ³ el perfil de " . $name_edited . " " . $last_name_edited;

            /*Activity Edited a Leaderâs profile (Supervisor and other members)*/
            $en_mess = " *". $first_name_l . " " . $last_name_l . "* edited " . $name_edited . " " . $last_name_edited . " profile";
            $es_mess = " *". $first_name_l . " " . $last_name_l . "* editÃ³ el perfil de " . $name_edited . " " . $last_name_edited;
          }
          
        }

        /*Activity profile updates (all members)*/
        $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_act = array(
            ':es_message' => $es_message,
            ':en_message' => $en_message, 
            ':id_m' => $user_id,
            ':final_d' => $final_d);

        $result_act = $pre_act->execute($values_act);

        if ($parent_user_id != $user_id){
          /*Activity Edited a Leaderâs profile (Supervisor and other members)*/
          $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:parent_user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act_lead = array(
              ':es_mess' => $es_mess,
              ':en_mess' => $en_mess,
              ':parent_user_id' => $parent_user_id,
              ':final_d' => $final_d);

          $result_act_lead = $pre_act_lead->execute($values_act_lead);
        }

        return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => array('message' => 'Perfil guardado con Ã©xito.', 
                          ':user_id' => $user_id, 
                          ':first_name' => $first_name,
                          ':last_name' => $last_name,
                          ':phone' => $phone,
                          ':address' => $address,
                          ':postal_code' => $postal_code,
                          ':city' => $city,
                          ':gender' => $gender,
                          ':birth_date' => $birth_date,
                          ':marital_status' => $marital_status,
                          ':married_since' => $married_since,
                          ':guest_since' => $guest_since,
                          ':member_since' => $member_since,
                          ':profile_picture' => $profile_picture,
                          ':updated_at' => $final_d,
                          ':exelerate_id' => $exelerate_id)));

      }else{
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                  "status"=>422)));
      }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

$app->post('/users/assign-steps', function ($request,$response) {

  try{

    $con = $this->db;
    $user_id = $request->getParam('user_id');
    $role_id = $request->getParam('role_id');
    $church_id = $request->getParam('church_id');
    $step_id = $request->getParam('step_id');
    $step_name = $request->getParam('step_name');
    $step_date = $request->getParam('step_date');

    if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church id",
               "status"=>500)));
   } else if(empty($step_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step id",
               "status"=>500)));
   }else if(empty($step_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step name",
               "status"=>500)));
   }else if(empty($step_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step date",
               "status"=>500)));
   }

   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$step_date);

   // if user exists
   $pre_s = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
   $pre_s->execute($values_s);
   $result_s = $pre_s->fetch();

   if (!$result_s) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
   }

   // if step exists
   $pre_step = $con->prepare("SELECT *
                            FROM steps
                            WHERE step_id = :step_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_step = array(':step_id' => $step_id);
   $pre_step->execute($values_step);
   $result_step = $pre_step->fetch();

   if(empty($result_step)){
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"step_doesnt_exist",
              "message"=>"El paso que intenta ingresar no existe.",
              "status"=>422)));
   }

   if(!$valid_date){
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"invalid_date",
              "message"=>"Ingrese una fecha vÃ¡lida.",
              "status"=>422)));
   }

   if ($step_id != '1') {
    $previous_step = $step_id - 1;

    $user_prev = $con->prepare("SELECT *
                             FROM user_steps
                             WHERE step_id = :step_id AND user_id = :user_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_prev = array(':step_id' => $previous_step,':user_id' => $user_id);
    $user_prev->execute($values_prev);
    $result_prev = $user_prev->fetch();

    if (!$result_prev) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"previous_step",
                  "message"=>"Debe completar su paso previo, para poder ingresar este nuevo paso.",
                  "status"=>422)));
    }

   }

   // verify if user is already assigned the step
   $user_steps = $con->prepare("SELECT *
                            FROM user_steps
                            WHERE step_id = :step_id AND user_id = :user_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_user = array(':step_id' => $step_id,':user_id' => $user_id);
   $user_steps->execute($values_user);
   $result_user = $user_steps->fetch();

   $final_d = date("Y-m-d H:i:s");

   if ($result_user) {
    // if already have it, it will only be edited
    $assign_step = $con->prepare("UPDATE user_steps SET step_date = :step_date, updated_at = :final_d
                           WHERE step_id = :step_id AND user_id = :user_id",
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign = array(
      ':user_id' => $user_id, 
      ':step_id' => $step_id,
      ':final_d' => $final_d,
      ':step_date' => $step_date);

    $result_assign = $assign_step->execute($val_assign);

   }else{
    // new step will be created
    $assign_step = $con->prepare("INSERT INTO user_steps (`user_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:user_id, :name,:step_date,:step_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign = array(
      ':user_id' => $user_id,
      ':name' => $step_name,
      ':step_date' => $step_date,
      ':step_id' => $step_id
      );

    $result_assign = $assign_step->execute($val_assign);
   }


   if ($result_assign) {

    // check if have all steps
    $pre_steps = $con->prepare("SELECT count(step_id) as steps FROM user_steps WHERE user_id = :user_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_steps = array(':user_id' => $user_id);
    $pre_steps->execute($values_steps);
    $result_ex = $pre_steps->fetch();

    $total_steps = null;

    if ($result_s['rol'] == '5') {
      if ($result_ex['steps'] == '5') {
        $total_steps = '5';
      }
    }

    // check if have all the complete information
    if ($result_s['marital_status'] == 'M') {
      $pre_complete = $con->prepare("UPDATE user SET is_complete = '0', updated_at= :updated_at
                             WHERE id = :user_id",
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($result_s['first_name'] && $result_s['last_name'] && $result_s['phone'] && $result_s['address'] && $result_s['postal_code'] && $result_s['city'] && $result_s['birth_date'] && $result_s['marital_status'] && $result_s['married_since'] && $result_s['guest_since'] && $result_s['member_since'] && $result_s['profile_picture'] && $result_s['gender'] && $result_s['email'] && $result_s['exelerate_id'] && $total_steps) {
        // update complete
        $pre_complete = $con->prepare("UPDATE user SET is_complete = '1', updated_at= :updated_at
                               WHERE id = :user_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }
    }else{
      $pre_complete = $con->prepare("UPDATE user SET is_complete = '0', updated_at= :updated_at
                             WHERE id = :user_id",
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($result_s['first_name'] && $result_s['last_name'] && $result_s['phone'] && $result_s['address'] && $result_s['postal_code'] && $result_s['city'] && $result_s['birth_date'] && $result_s['marital_status'] && $result_s['guest_since'] && $result_s['member_since'] && $result_s['profile_picture'] && $result_s['gender'] && $result_s['email'] && $result_s['exelerate_id'] && $total_steps) {
        // update complete
        $pre_complete = $con->prepare("UPDATE user SET is_complete = '1', updated_at= :updated_at
                               WHERE id = :user_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }
    }

    $values_complete = array(
      ':user_id' => $user_id,
      ':updated_at' => $final_d);

    $result_complete = $pre_complete->execute($values_complete);

    // obtain next step
    $next_step = $step_id + 1;
    
    return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => array( 'message' =>'Su paso ha sido guardado con Ã©xito.','next_step' => (string)$next_step)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/******************** GROUP CELL PROFILE ********************/

$app->post('/cells/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $cell_id = $request->getParam('cell_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: cell_id",
               "status"=>500)));
   }
      
    $pre_user = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id 
                             AND verified_account = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
    $pre_user->execute($values_user);
    $result_user = $pre_user->fetch();

    if (!$result_user) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"user_doesnt_exist",
                  "message"=>"El usuario no existe.",
                  "status"=>422)));
    }

    $pre_i = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':cell_id' => $cell_id);
    $pre_i->execute($values_i);
    $result_i = $pre_i->fetch();

    if (!$result_i) {
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "type"=>"cell_doesnt_exist",
                 "message"=>"La cÃ©lula no existe.",
                 "status"=>422)));
    }

    // obtain general information
    $pre = $con->prepare("SELECT groups_cells.id AS cell_id, groups_cells.cell_code AS cell_code, groups_cells.sector_code AS sector_code, groups_cells.zone_code AS zone_code, groups_cells.district_code AS district_code, groups_cells.parent_id, (SELECT id from members_cells WHERE members_cells.id = groups_cells.host) AS host_id, groups_cells.start_date AS since, groups_cells.city, groups_cells.address AS location, groups_cells.phone,groups_cells.zip_code, groups_cells.meets_on AS meets, groups_cells.meets_time, groups_cells.groups_type FROM groups_cells WHERE groups_cells.church_id = :church_id AND groups_cells.id = :cell_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':church_id' => $church_id, ':cell_id' => $cell_id);
    $pre->execute($values);
    $result = $pre->fetch();

    // obtain host information
    $host_name = null;
    $host_picture = null;

    if ($result['host_id']) {
      $pre_host = $con->prepare("SELECT CONCAT(first_name, ' ', last_name) as full_name, profile_picture
                               FROM members_cells
                               WHERE id = :host_id AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $val_host = array(':host_id' => $result['host_id'], ':church_id' => $church_id);
      $pre_host->execute($val_host);
      $result_host = $pre_host->fetch();

      $host_name = $result_host['full_name'];
      $host_picture = $result_host['profile_picture'];
    }

    // obtain parent code for parent cell
    $parent_code = null;

    if ($result['parent_id']) {
      $pre_cell2 = $con->prepare("SELECT *
                               FROM groups_cells
                               WHERE id = :parent_cell AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $val_cell2 = array(':parent_cell' => $result['parent_id'], ':church_id' => $church_id);
      $pre_cell2->execute($val_cell2);
      $result_cell2 = $pre_cell2->fetch();

      $parent_code = $result_cell2['cell_code'];
    }

    /*Total members*/
    $pre2 = $con->prepare("SELECT count(id) AS members_count FROM members_cells WHERE church_id = :church_id AND cell_id = :cell_id AND role !='1' AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values2 = array(':church_id' => $church_id, ':cell_id' => $cell_id);
    $pre2->execute($values2);
    $result2 = $pre2->fetch();

    $pre3 = $con->prepare("SELECT count(id) AS guest_count FROM members_cells WHERE church_id = :church_id AND cell_id = :cell_id AND role ='1' AND active = '1'",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values3 = array(':church_id' => $church_id, ':cell_id' => $cell_id);
    $pre3->execute($values3);
    $result3 = $pre3->fetch();

    $pre_kids = $con->prepare("SELECT count(id) AS kids_count FROM members_cells WHERE church_id = :church_id AND cell_id = :cell_id AND active = '1' AND (YEAR(CURDATE())-YEAR(birth_date)) <= 12",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_kids = array(':church_id' => $church_id, ':cell_id' => $cell_id);
    $pre_kids->execute($values_kids);
    $result_kids = $pre_kids->fetch();

    /*Cell Team*/

    // Leader
    $pre4 = $con->prepare("SELECT (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user WHERE user.id = groups_cells.leader) AS name, (SELECT user.profile_picture FROM user WHERE user.id = groups_cells.leader) as profile_picture, (SELECT user.rol FROM user WHERE user.id = groups_cells.leader) AS role FROM groups_cells WHERE groups_cells.id = :cell_id AND groups_cells.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values4 = array(':church_id' => $church_id, ':cell_id' => $cell_id);
    $pre4->execute($values4);
    $result4 = $pre4->fetch();

    $leader = array("name" => $result4['name'],
               "profile_picture" => $result4['profile_picture'],
               "role" => $result4['role'],
               "member_role" => 'Leader');

    $cell_team = null;

    $cell_team[] = $leader;


     // Host
     $pre5 = $con->prepare("SELECT (SELECT CONCAT(members_cells.first_name, ' ', members_cells.last_name) FROM members_cells WHERE members_cells.id = groups_cells.host) AS name, (SELECT profile_picture FROM members_cells WHERE members_cells.id = groups_cells.host) as profile_picture, (SELECT role FROM members_cells WHERE members_cells.id = groups_cells.host) AS role FROM groups_cells WHERE groups_cells.id = :cell_id AND groups_cells.church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values5 = array(':church_id' => $church_id, ':cell_id' => $cell_id);
     $pre5->execute($values5);
     $result5 = $pre5->fetch();

     $host = array("name" => $result5['name'],
               "profile_picture" => $result5['profile_picture'],
               "role" => $result5['role'],
               "member_role" => 'Host');

     $cell_team[] = $host;

    $res = array("cell_id" => $result['cell_id'],
           "cell_code" => $result['cell_code'],
           "sector_code" => $result['sector_code'],
           "zone_code" => $result['zone_code'],
           "district_code" => $result['district_code'],
           'parent_cell' => $result['parent_id'],
           'parent_code' => $parent_code,
           "host_id" => $result['host_id'],
           "host_name" => $host_name,
           "host_picture" => $host_picture,
           "since" => $result['since'],
           "city" => $result['city'],
           "address" => $result['location'],
           "phone_number" => $result['phone'],
           "zip_code" => $result['zip_code'],
           "meets" => $result['meets'],
           "meets_time" => $result['meets_time'],
           "members_count" => $result2['members_count'],
           "guest_count" => $result3['guest_count'],
           "kids_count" => $result_kids['kids_count'],
           "cell_team" => $cell_team,
           "church_team" => null, // add in future version
         );

    return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $res));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


$app->put('/cells/edit', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $cell_id = $request->getParam('cell_id');

   $meets = $request->getParam('meets');
   $meets_time = $request->getParam('meets_time');
   $address = $request->getParam('address');
   $zip_code = $request->getParam('zip_code');
   $city = $request->getParam('city');
   $phone_number = $request->getParam('phone_number');
   $since = $request->getParam('since');
   $host_id = $request->getParam('host_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_phone = preg_match("/^[0-9\-\(\)\/\+\s]*$/", $phone_number);
   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   }else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: cell_id",
               "status"=>500)));
   } else if(empty($meets)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: meets",
               "status"=>500)));
   } else if(empty($meets_time)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: meets_time",
               "status"=>500)));
   } else if(empty($address)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: address",
               "status"=>500)));
   } else if(empty($zip_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: zip_code",
               "status"=>500)));
   } else if(empty($city)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: city",
               "status"=>500)));
   } else if(empty($phone_number)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: phone_number",
               "status"=>500)));
   } else if(empty($since)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: since",
               "status"=>500)));
   } else if (!$valid_phone) {
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Invalid phone number",
               "status"=>500)));
   } else if(!$valid_date){
        return $response->withStatus(500)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                   "type"=>"required",
                  "message"=>"Invalid date",
                  "status"=>500)));
  }

  /*Impersonate*/
  if ($impersonate) {
    
    if ($impersonate != '1') {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"impersonate_not_valid",
                "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                "status"=>422)));
    }else if(empty($impersonate_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: impersonate_id",
               "status"=>500)));
   } else if(empty($impersonate_role)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: impersonate_role",
               "status"=>500)));
   }

   $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
   $pre_imper->execute($values_imper);
   $result_imper = $pre_imper->fetch();

   if (empty($result_imper)) {

    return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
                      "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
   }


   $name_imper = $result_imper['first_name'];
   $last_name_imper = $result_imper['last_name'];

  }

  // verify if the logged in user exists
  $pre_user = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_user = array(':user_id' => $user_id,':role_id' => $role_id,':church_id' => $church_id);
  $pre_user->execute($values_user);
  $result_user = $pre_user->fetch();

  if (!$result_user) {
   return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
               "type"=>"user_doesnt_exist",
               "message"=>"El usuario no existe.",
               "status"=>422)));
  }


  $first_name = $result_user['first_name'];
  $last_name = $result_user['last_name'];

  $final_church = $result_user['church_id'];

  // verify if cell exists
  $pre_i = $con->prepare("SELECT *
                           FROM groups_cells
                           WHERE id = :cell_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':cell_id' => $cell_id);

  if ($role_id == '5') {
    $pre_i = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id AND leader = :user_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_i = array(':cell_id' => $cell_id, ':user_id' => $user_id);
  }
  
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
          ->withHeader('Content-Type', 'application/json')
          ->withJson(array('error' => array(
              "type"=>"cell_doesnt_exist",
              "message"=>"La cÃ©lula no existe.",
              "status"=>422)));
  }

  $cell_code = $result_i['cell_code'];


  // if host exists
  if ($host_id) {

    $pre_host = $con->prepare("SELECT *
                             FROM members_cells
                             WHERE id = :host_id AND church_id = :church_id AND cell_id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_host = array(':host_id' => $host_id, ':church_id' => $church_id, ':cell_id' => $cell_id);
    $pre_host->execute($values_host);
    $result_host = $pre_host->fetch();

    if (!$result_host) {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"host_doesnt_exist",
                "message"=>"El anfitriÃ³n ingresado no existe.",
                "status"=>422)));
    }

    $pre_host2 = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE host = :host_id AND church_id = :church_id AND id != :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_host2 = array(':host_id' => $host_id, ':church_id' => $church_id,':cell_id' => $cell_id);
    $pre_host2->execute($values_host2);
    $result_host2 = $pre_host2->fetch();

    if ($result_host2) {
      return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"assigned_host",
                "message"=>"El anfitriÃ³n ya se encuentra asignado a una cÃ©lula.",
                "status"=>422)));
    }

  }else{
    $host_id = null;
  }


  $final_d = date("Y-m-d H:i:s");

  // update group cell
  $pre_dis3 = $con->prepare("UPDATE groups_cells SET meets_on = :meets, meets_time = :meets_time, address = :address, zip_code = :zip_code, city = :city, phone = :phone_number, start_date = :since ,updated_at = :final_d WHERE id = :cell_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_dis3 = array(
    ':cell_id' => $cell_id,
    ':church_id' => $church_id,
    ':meets' => $meets,
    ':meets_time' => $meets_time,
    ':address' => $address,
    ':zip_code' => $zip_code,
    ':city' => $city,
    ':phone_number' => $phone_number,
    ':since' => $since,
    ':final_d' => $final_d
    );

  $result_dis3 = $pre_dis3->execute($values_dis3);

  // update host
  // if ($host_id) {
    $updte_host = $con->prepare("UPDATE groups_cells SET host = :host_id WHERE id = :cell_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_updh = array(
      ':cell_id' => $cell_id,
      ':church_id' => $church_id,
      ':host_id' => $host_id
      );

    $result_updh = $updte_host->execute($values_updh);
  // }


  if ($result_dis3) {

    /*************** ACTIVITIES ***********************/
    if ($impersonate) {
     
      $roles = getRole($impersonate_role);

      $role_name = $roles['role_name'];
      $role_name_es = $roles['role_name_es'];

      $imperson = "* (Impersonate)";
      $imperson_es = "* (Impersonado)";

      /*Activity Edited a Cell groupâs profile (Supervisor)*/
      $en_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the cell group C" . $cell_code;
      $es_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " editÃ³ el perfil de la cÃ©lula C" . $cell_code;

      $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_actm = array(
          ':es_mess' => $es_mess,
          ':en_mess' => $en_mess,
          ':user_id' => $impersonate_id,
          ':final_d' => $final_d);

      $result_actm = $pre_actm->execute($values_actm);

      /*ACTIVITY GROUPS*/

      /*Activity Profile updates (Cell Group)*/
      $en_mess2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited profile of the cell group C" . $cell_code;
      $es_mess2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " editÃ³ el perfil de la cÃ©lula C" . $cell_code;

    }else{

      /*Activity Edited a Cell groupâs profile (Supervisor)*/
      $en_mess = " *". $first_name . " " . $last_name . "* edited profile of the cell group C" . $cell_code;
      $es_mess = " *". $first_name . " " . $last_name . "* editÃ³ el perfil de la cÃ©lula C" . $cell_code;

      /*ACTIVITY GROUPS*/

      /*Activity Profile updates (Cell Group)*/
      $en_mess2 = " *". $first_name . " " . $last_name . "* edited profile of the cell group C" . $cell_code;
      $es_mess2 = " *". $first_name . " " . $last_name . "* editÃ³ el perfil de la cÃ©lula C" . $cell_code;
    }

    /*Activity Edited a Cell groupâs profile (Supervisor)*/
    $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_act_lead = array(
        ':es_mess' => $es_mess,
        ':en_mess' => $en_mess,
        ':user_id' => $user_id,
        ':final_d' => $final_d);

    $result_act_lead = $pre_act_lead->execute($values_act_lead);


    /*ACTIVITY GROUPS*/

    /*Activity Profile updates (Cell Group)*/
    $pre_act_lead2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess2, :en_mess2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_act_lead2 = array(
        ':es_mess2' => $es_mess2,
        ':en_mess2' => $en_mess2,
        ':cell_id' => $cell_id,
        ':final_d' => $final_d);

    $result_act_lead2 = $pre_act_lead2->execute($values_act_lead2);
    
    return $response->withStatus(200)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('response' => 'CÃ©lula guardada con Ã©xito.'));
  }else{
    return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                  "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// get members for hosts
$app->get('/cells/member-list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $cell_id = $request->getParam('cell_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: cell_id",
               "status"=>500)));
   }

   // if exist user
   $pre = $con->prepare("SELECT *
                                FROM user
                                WHERE id = :user_id AND church_id = :church_id AND rol = :role_id AND status = 1", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values = array(':user_id' => $user_id, ':role_id' => $role_id,':church_id' => $church_id);
   $pre->execute($values);
   $result = $pre->fetch();

   if (!$result) {
     return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
             "type"=>"user_doesnt_exist",
             "message"=>"El usuario no existe.",
             "status"=>422)));
   }

   // if exist cell
   $pre_cell = $con->prepare("SELECT *
                                FROM groups_cells
                                WHERE id = :cell_id AND church_id = :church_id AND active = 1", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_cell = array(':cell_id' => $cell_id,':church_id' => $church_id);
   $pre_cell->execute($values_cell);
   $result_cell = $pre_cell->fetch();

   if (!$result_cell) {
     return $response->withStatus(422)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('error' => array(
             "type"=>"cell_doesnt_exist",
             "message"=>"La cÃ©lula no existe.",
             "status"=>422)));
   }

   $sql_gro = "SELECT id, CONCAT(first_name, ' ', last_name) AS full_name, profile_picture FROM members_cells WHERE role = 2 AND active = 1 AND cell_id = $cell_id AND church_id = $church_id";

   $members = null;

   foreach ($con->query($sql_gro) as $row) {
     $members[] = $row;
   }

   return $response->withStatus(200)
           ->withHeader('Content-Type', 'application/json')
           ->withJson(array('response' => $members));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*********************** REPORTS ****************************/

$app->get('/reports/list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type"=>"valid_filter_date",
                    "message"=>"Debe ingresar una fecha inicial y fecha final vÃ¡lidas para poder filtrar.",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type"=>"validate_final_date",
                    "message"=>"La fecha final debe ser mayor que la fecha inicial.",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"validate_mobile",
                 "message"=>"Debes ingresar una fecha inicial vÃ¡lida",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }

  /*validate parent_id*/
  if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

    if(empty($parent_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: parent_id",
                "status"=>500)));
    }
  }


  if ($role_id == '2') {
    $pre_dis = $con->prepare("SELECT *
                             FROM groups_districts
                             WHERE id = :parent_id AND church_id = :church_id AND district_pastor = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    if(empty($result_dis)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  } else if ($role_id == '3') {
    $pre_dis = $con->prepare("SELECT id as zone_i 
                             FROM groups_zones
                             WHERE id = :parent_id AND church_id = :church_id AND zone_pastor = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    $zone = $result_dis['zone_i'];

    if(empty($zone)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  } else if ($role_id == '4') {
    $pre_dis = $con->prepare("SELECT id as sector_i 
                             FROM groups_sectors
                             WHERE id = :parent_id AND church_id = :church_id AND supervisor = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    $sec = $result_dis['sector_i'];

    if(empty($sec)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  } else if ($role_id == '5') {
    $pre_dis = $con->prepare("SELECT id as cell_i 
                             FROM groups_cells
                             WHERE id = :parent_id AND church_id = :church_id AND leader = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    $cell = $result_dis['cell_i'];

    if(empty($cell)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  }


  $filter_date = '';

  /*Note: If exist date filter, validate*/
  if ($initial_date && $final_date && empty($is_mobile)) {

    $filter_date = "AND (reports.creation_date LIKE '%$initial_date%' OR reports.creation_date LIKE '%$final_date%')";

  }else if ($initial_date && $is_mobile) {
    $filter_date = "AND reports.creation_date LIKE '%$initial_date%'";
  }

  /*General filters for groups*/
  $filter_p = '';
  $filter_group = '';

  if ($role_id == '2') {

    $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

    $filter_group = "AND reports.cell_id " . $filter_p;

  } else if($role_id == '3'){
    $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = $parent_id' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    $filter_group = "AND reports.cell_id " . $filter_p;
  } else if($role_id == '4'){
    $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_i')";

    $filter_group = "AND reports.cell_id " . $filter_p;
  } else if($role_id == '5'){
    $filter_p = "= '$parent_id'";

    $filter_group = "AND reports.cell_id " . $filter_p;
  }

  $today = date("Y-m-d");

  /*Obtain general list reports*/
  $sql = "SELECT reports.id as report_id, reports.name, reports.creation_date as date, reports.end_date, reports.is_complete, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = reports.created_by) AS created_by, (SELECT user.profile_picture FROM user where user.id = reports.created_by) AS profile_picture FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = $church_id AND groups_cells.active = 1 $filter_date $filter_group ORDER BY reports.creation_date DESC";

  $result_r = null;

  foreach ($con->query($sql) as $row) {
    if ($role_id == '5' || $role_id == '1' || $role_id == '6' || $role_id == '7'){
      if ($row['end_date'] > $today) {
        $row['principal'] = '1';
      }
    }
    $result_r[] = $row;
    
  }


  return $response->withStatus(200)
          ->withHeader('Content-Type', 'application/json')
          ->withJson(array('response' => $result_r));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// download list reports
$app->post('/download/report-list', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $initial_date = $request->getParam('start_date');
   $final_date = $request->getParam('end_date');
   $is_mobile = $request->getParam('is_mobile');
   $parent_id = $request->getParam('parent_id');

   $valid_initial_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/",$initial_date);
   $valid_end_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/",$final_date);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if (($initial_date || $final_date) && empty($is_mobile)) {

        if (!$valid_initial_date || !$valid_end_date) {
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type"=>"valid_filter_date",
                    "message"=>"Debe ingresar una fecha inicial y fecha final vÃ¡lidas para poder filtrar.",
                    "status"=>500)));
        } else if($initial_date > $final_date){
          return $response->withStatus(500)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type"=>"validate_final_date",
                    "message"=>"La fecha final debe ser mayor que la fecha inicial.",
                    "status"=>500)));
        }
    }else if($is_mobile){
     if (!$valid_initial_date) {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"validate_mobile",
                 "message"=>"Debes ingresar una fecha inicial vÃ¡lida",
                 "status"=>500)));
     }
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }

  /*validate parent_id*/
  if ($role_id == '2' || $role_id == '3' || $role_id == '4' || $role_id == '5') {

    if(empty($parent_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: parent_id",
                "status"=>500)));
    }
  }


  if ($role_id == '2') {
    $pre_dis = $con->prepare("SELECT *
                             FROM groups_districts
                             WHERE id = :parent_id AND church_id = :church_id AND district_pastor = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    if(empty($result_dis)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  } else if ($role_id == '3') {
    $pre_dis = $con->prepare("SELECT id as zone_i 
                             FROM groups_zones
                             WHERE id = :parent_id AND church_id = :church_id AND zone_pastor = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    $zone = $result_dis['zone_i'];

    if(empty($zone)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  } else if ($role_id == '4') {
    $pre_dis = $con->prepare("SELECT id as sector_i 
                             FROM groups_sectors
                             WHERE id = :parent_id AND church_id = :church_id AND supervisor = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    $sec = $result_dis['sector_i'];

    if(empty($sec)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  } else if ($role_id == '5') {
    $pre_dis = $con->prepare("SELECT id as cell_i 
                             FROM groups_cells
                             WHERE id = :parent_id AND church_id = :church_id AND leader = :user_id AND active = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_dis = array(':parent_id' => $parent_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_dis->execute($values_dis);
    $result_dis = $pre_dis->fetch();

    $cell = $result_dis['cell_i'];

    if(empty($cell)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"parent_doesnt_exist",
                "message"=>"El id del grupo padre no coincide con el usuario.",
                "status"=>500)));
    }

  }

  /*obtain church name and city*/
  $pre_ch = $con->prepare("SELECT *
                           FROM churches
                           WHERE id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ch = array(':church_id' => $church_id);
  $pre_ch->execute($values_ch);
  $result_ch = $pre_ch->fetch();

  $church_name = $result_ch['name'];
  $church_city = $result_ch['city'];


  $filter_date = '';

  /*Note: If exist date filter, validate*/
  if ($initial_date && $final_date && empty($is_mobile)) {

    $filter_date = "AND (reports.creation_date LIKE '%$initial_date%' OR reports.creation_date LIKE '%$final_date%')";

  }else if ($initial_date && $is_mobile) {
    $filter_date = "AND reports.creation_date LIKE '%$initial_date%'";
  }

  /*General filters for groups*/
  $filter_p = '';
  $filter_group = '';

  if ($role_id == '2') {

    $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_id' AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id') AND active = 1 AND church_id = '$church_id')";

    $filter_group = "AND reports.cell_id " . $filter_p;

  } else if($role_id == '3'){
    $filter_p = "IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id = $parent_id' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    $filter_group = "AND reports.cell_id " . $filter_p;
  } else if($role_id == '4'){
    $filter_p = "IN (SELECT id from groups_cells WHERE sector_id = '$parent_id' AND active = 1 AND church_id = '$church_i')";

    $filter_group = "AND reports.cell_id " . $filter_p;
  } else if($role_id == '5'){
    $filter_p = "= '$parent_id'";

    $filter_group = "AND reports.cell_id " . $filter_p;
  }

  $final_date = date("Y-m-d H:i");

  /*Obtain general list reports*/
  $sql = "SELECT reports.name, reports.creation_date as date, (SELECT CONCAT(user.first_name, ' ', user.last_name) FROM user where user.id = reports.created_by) AS leader FROM reports, groups_cells WHERE reports.cell_id = groups_cells.id AND groups_cells.church_id = $church_id AND groups_cells.active = 1 $filter_date $filter_group ORDER BY reports.creation_date DESC";

  // create new PDF document
  $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

  // set document information
  $pdf->SetCreator('PDF');
  $pdf->SetAuthor('C+');
  $pdf->SetTitle('Listado de reportes');
  $pdf->SetSubject('Listado de reportes');
  $pdf->SetKeywords('');

  // set default header data
  $pdf->SetHeaderData('cells.png', '10', "", "", array(0,64,255), array(0,64,128));
  $pdf->setFooterData(array(0,64,0), array(0,64,128));

  // set header and footer fonts
  $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
  $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

  // set default monospaced font
  $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

  // set margins
  $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
  $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
  $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

  // set auto page breaks
  $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

  // set image scale factor
  $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

  // set default font subsetting mode
  $pdf->setFontSubsetting(true);

  // Set font
  $pdf->SetFont('helvetica', '', 12, '', true);

  // Add a page
  $pdf->AddPage();

  // Set some content to print
  $html ='
  <p style="font-size: 10px;"><b>' .$church_name. '</b><br><b>Ciudad:</b> ' .$church_city. '</p><p style="color: #363636; font-size: 11px;"><b>Listado de reportes</b><br>Exportado: ' .$final_date. '</p>
  <table style="font-size: 11px; width: 100%;" cellspacing="0" cellpadding="10"><tr>
  <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>ID</b></th>
  <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>FECHA</b></th>
  <th style="border-bottom: 1px solid rgb(0,64,128); height: 20px; font-size: 10px;"><b>CREADO POR</b></th></tr>';

  foreach ($con->query($sql) as $row) {
    if ($row['leader'] == ' ') {
      $row['leader'] = '--';
    }
    if ($row['date'] == null) {
      $row['date'] = '--';
    }
    if ($row['name'] == null) {
      $row['name'] = '--';
    }
    $html.='
        <tr>
          <td style="height: 30px;">' . $row['name'] . '</td>
          <td style="height: 30px;">' . $row['date'] . '</td>
          <td style="height: 30px;">' . $row['leader'] . '</td>
        </tr>';
  }
  $html.='</table>';

  // Print text using writeHTML
  $pdf->writeHTML($html, true, false, false, false, '');

  // Close and output PDF document
  $pdf->Output('listado_reportes.pdf', 'D');

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// report details
$app->get('/reports/detail', function ($request,$response) {

  try{

   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $report_id = $request->getParam('report_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($report_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: report_id",
               "status"=>500)));
   }

  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }

  $pre_report = $con->prepare("SELECT *
                           FROM reports
                           WHERE id = :report_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_report = array(':report_id' => $report_id);
  $pre_report->execute($values_report);
  $result_report = $pre_report->fetch();

  if (!$result_report) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"report_doesnt_exist",
                "message"=>"El reporte no existe.",
                "status"=>422)));
  }

  $today = date("Y-m-d");

  // obtain principal info
  $pre_detail = $con->prepare("SELECT reports.name, reports.creation_date, reports.donations_offering, reports.donations_events, reports.donations_transport, reports.total_member_assistance, reports.total_kids_assistance, reports.total_guest_assistance, reports.total_doctrine, reports.total_celebration, reports.total_salvation, reports.total_baptized, reports.total_schedule_visits, reports.is_complete, reports.created_by, reports.year, reports.quarter, reports.week FROM reports WHERE reports.id = :report_id",  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_detail = array(':report_id' => $report_id);
  $pre_detail->execute($values_detail);
  $result_detail = $pre_detail->fetch();

  // obtain name of report creator
  $pre_created = $con->prepare("SELECT first_name, last_name, CONCAT(first_name, ' ', last_name) AS full_name FROM user WHERE id = :user_id AND church_id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_created = array(':user_id' => $result_detail['created_by'], ':church_id' => $church_id);
  $pre_created->execute($values_created);
  $result_created = $pre_created->fetch();

  $creator_name = $result_created['first_name'];
  $creator_last_name = $result_created['last_name'];
  $creator_full = $result_created['full_name'];

  // obtain active members
  $members_att = [];

  $select_members = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name,members_cells.profile_picture,members_cells.role, members_cells.birth_date, reports_details.cell_group, reports_details.doctrine, reports_details.celebration FROM reports_details,members_cells WHERE reports_details.member_id = members_cells.id AND reports_details.report_id = $report_id AND members_cells.role = 2 AND members_cells.active = 1 AND members_cells.church_id = $church_id";
  
  foreach ($con->query($select_members) as $row) {
    $members_att[] = $row;
  }

  // obtain cell leader
  $pre_lead = $con->prepare("SELECT user_id FROM reports_details WHERE report_id = :report_id AND member_id IS NULL AND user_id IS NOT NULL",  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_lead = array(':report_id' => $report_id);
  $pre_lead->execute($values_lead);
  $result_lead = $pre_lead->fetch();

  if ($result_lead) {

    $leader_id = $result_lead['user_id'];

    $info_lead = $con->prepare("SELECT user.id, user.first_name, user.last_name, user.profile_picture, user.rol as role,user.birth_date, reports_details.cell_group, reports_details.doctrine, reports_details.celebration FROM user,reports_details WHERE user.id = reports_details.user_id AND reports_details.report_id = $report_id AND user.id = :leader_id AND user.church_id = $church_id",  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_info = array(':leader_id' => $leader_id);
    $info_lead->execute($values_info);
    $result_info = $info_lead->fetch();

    array_unshift($members_att, $result_info);
  }

  if (!$members_att) {
    $members_att = null;
  }

  // obtain active guest
  $guest_att = [];

  $select_guest = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name,members_cells.profile_picture,members_cells.role,members_cells.birth_date, reports_details.cell_group, reports_details.doctrine, reports_details.celebration FROM reports_details,members_cells WHERE reports_details.member_id = members_cells.id AND reports_details.report_id = $report_id AND members_cells.role = 1 AND members_cells.active = 1 AND members_cells.church_id = $church_id";
  
  foreach ($con->query($select_guest) as $row) {
    $guest_att[] = $row;
  }

  if (!$guest_att) {
    $guest_att = null;
  }

  // obtain salvations guest
  $salvations = null;

  $sel_salvation = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name,members_cells.profile_picture,members_cells.role,members_cells.birth_date, reports_details.salvations FROM members_cells,reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.report_id = $report_id AND members_cells.role = 1 AND members_cells.active = 1 AND members_cells.church_id = $church_id AND members_cells.id NOT IN (SELECT member_id from members_cells_steps where step_id = 1)";
  
  foreach ($con->query($sel_salvation) as $sel) {
    $salvations[] = $sel;
  }

  // obtain baptized guest
  $baptized = null;

  $sel_baptized = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name,members_cells.profile_picture,members_cells.role,members_cells.birth_date, reports_details.baptized FROM members_cells,reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.report_id = $report_id AND members_cells.role = 1 AND members_cells.active = 1 AND members_cells.church_id = $church_id AND members_cells.id IN (SELECT member_id from members_cells_steps where step_id = 1) AND members_cells.id NOT IN (SELECT member_id from members_cells_steps where step_id = 2)";
  
  foreach ($con->query($sel_baptized) as $sel2) {
    $baptized[] = $sel2;
  }

  // obtain visits guest
  $visits = null;

  $sel_visits = "SELECT members_cells.id, members_cells.first_name, members_cells.last_name,members_cells.profile_picture,members_cells.role,members_cells.birth_date, reports_details.scheduled_visits FROM members_cells, members_cells_steps,reports_details WHERE members_cells.id = members_cells_steps.member_id AND reports_details.member_id = members_cells.id AND reports_details.report_id = $report_id AND members_cells.role = 1 AND members_cells.active = 1 AND members_cells.church_id = $church_id AND members_cells_steps.step_id = 1 AND members_cells_steps.step_date >= now()-interval 3 month";
  
  foreach ($con->query($sel_visits) as $sel3) {
    $visits[] = $sel3;
  }


  $finalDetail = array(
    "report_id" => $report_id,
    "name" => $result_detail['name'],
    "created_by" => $result_detail['created_by'],
    "creator_name" => $creator_name,
    "creator_last_name" => $creator_last_name,
    "creation_date" => $result_detail['creation_date'],
    "year" => $result_detail['year'],
    "quarter" => $result_detail['quarter'],
    "week" => $result_detail['week'],
    "total_member_assistance" => $result_detail['total_member_assistance'],
    "total_kids_assistance" => $result_detail['total_kids_assistance'],
    "total_guest_assistance" => $result_detail['total_guest_assistance'],
    "total_doctrine" => $result_detail['total_doctrine'],
    "total_celebration" => $result_detail['total_celebration'],
    "total_salvation" => $result_detail['total_salvation'],
    "total_baptized" => $result_detail['total_baptized'],
    "total_schedule_visits" => $result_detail['total_schedule_visits'],
    "donations_offering" => $result_detail['donations_offering'],
    "donations_events" => $result_detail['donations_events'],
    "donations_transport" => $result_detail['donations_transport'],
    "is_complete" => $result_detail['is_complete'],
    "members" => $members_att,
    "guests" => $guest_att,
    "salvation" => $salvations,
    "baptized" => $baptized,
    "visits" => $visits
  );

  return $response->withStatus(200)
          ->withHeader('Content-Type', 'application/json')
          ->withJson(array('response' => $finalDetail));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// edit report
$app->put('/reports/edit', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $report_id = $request->getParam('report_id');

   $donations_offering = $request->getParam('donations_offering');
   $donations_events = $request->getParam('donations_events');
   $donations_transport = $request->getParam('donations_transport');

   $total_member_assistance = $request->getParam('total_member_assistance');
   $total_kids_assistance = $request->getParam('total_kids_assistance');
   $total_guest_assistance = $request->getParam('total_guest_assistance');
   $total_doctrine = $request->getParam('total_doctrine');
   $total_celebration = $request->getParam('total_celebration');
   $total_salvation = $request->getParam('total_salvation');
   $total_baptized = $request->getParam('total_baptized');
   $total_schedule_visits = $request->getParam('total_schedule_visits');

   // reports details
   $members = $request->getParam('members');
   $guests = $request->getParam('guests');
   $salvation = $request->getParam('salvation');
   $baptized = $request->getParam('baptized');
   $visits = $request->getParam('visits');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($report_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: report_id",
               "status"=>500)));
   } else if(!is_numeric($donations_offering)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: donations_offering",
               "status"=>500)));
   } else if(!is_numeric($donations_events)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: donations_events",
               "status"=>500)));
   } else if(!is_numeric($donations_transport)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: donations_transport",
               "status"=>500)));
   }else if(!preg_match("/^[0-9]+$/i", $total_member_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_member_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_kids_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_kids_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_guest_assistance)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_guest_assistance",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_doctrine)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_doctrine",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_celebration)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_celebration",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_salvation)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_salvation",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_baptized)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_baptized",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $total_schedule_visits)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: total_schedule_visits",
               "status"=>500)));
   }

   // Validate role (only leader, senior pastor, admin, owner)
   if ($role_id != '5' && $role_id != '1' && $role_id != '6' && $role_id != '7') {
    return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"without_permission",
                  "message"=>"No posee permisos para editar este reporte.",
                  "status"=>422)));
   }

   // validate user
   $pre_s = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND church_id = :church_id AND rol = :role_id AND verified_account = '1' AND status = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
   $pre_s->execute($values_s);
   $result_s = $pre_s->fetch();

   if (!$result_s) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
   }

   $first_name_leader = $result_s['first_name'];
   $last_name_leader = $result_s['last_name'];

   if ($role_id == '5') {
    // Obtain cell_id of user
    $pre_cell = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE leader = :user_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell = array(':user_id' => $user_id,':church_id' => $church_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    if (!$result_cell) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"doesnt_have_cell",
                  "message"=>"No posee una cÃ©lula asignada.",
                  "status"=>422)));
    }

    $principal_cell = $result_cell['id'];
   }

   // validate report
   $pre_r = $con->prepare("SELECT *
                            FROM reports
                            WHERE id = :report_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_r = array(':report_id' => $report_id);

   if ($role_id == '5') {
     $pre_r = $con->prepare("SELECT *
                              FROM reports
                              WHERE id = :report_id AND cell_id = :principal_cell", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_r = array(':report_id' => $report_id, ':principal_cell' => $principal_cell);
   }

   $pre_r->execute($values_r);
   $result_r = $pre_r->fetch();

   if (!$result_r) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"report_doesnt_exist",
                "message"=>"El reporte no existe.",
                "status"=>422)));
   }

   /*report name activity*/
   $report_n = $result_r['name'];
   $cell_id = $result_r['cell_id'];

   // validate report end_date
   $actual_d = date("Y-m-d");

   $pre_em = $con->prepare("SELECT *
                            FROM reports
                            WHERE id = :report_id AND end_date >= :actual_d", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_em = array(':report_id' => $report_id,':actual_d' => $actual_d);
   $pre_em->execute($values_em);
   $result_em = $pre_em->fetch();

   if (!$result_em) {
    return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"time_expired",
                  "message"=>"El tiempo para editar este reporte ha expirado.",
                  "status"=>422)));
   }

   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"impersonate_not_valid",
                 "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                 "status"=>500)));
     }else if(empty($impersonate_id)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: impersonate_id",
                "status"=>500)));
    } else if(empty($impersonate_role)){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required",
                "message"=>"ParÃ¡metro faltante: impersonate_role",
                "status"=>500)));
    }

    $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
    $pre_imper->execute($values_imper);
    $result_imper = $pre_imper->fetch();

    if (empty($result_imper)) {

     return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                       "type"=>"impersonate_not_exist",
                       "message"=>"Usuario impersonado con este rol no existe",
                       "status"=>422)));
    }


    $name_imper = $result_imper['first_name'];
    $last_name_imper = $result_imper['last_name'];

   }


   // validate members info
   if ($members) {

    $err_member = 0;
    $err_role = 0;
    $err_cell = 0;
    $err_doctrine = 0;
    $err_celebration = 0;

    for($i = 0; $i < count($members); $i++) {
      if(empty($members[$i]['id'])){
        $err_member += 1;
      }else if(empty($members[$i]['role'])){
        $err_role += 1;
      } else if(!preg_match("/^[0-1]+$/i", $members[$i]['cell_group'])){
       $err_cell += 1;
     } else if(!preg_match("/^[0-1]+$/i", $members[$i]['doctrine'])){
       $err_doctrine += 1;
     } else if(!preg_match("/^[0-1]+$/i",$members[$i]['celebration'])){
       $err_celebration += 1;
     }

    }

    if($err_member > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_member_id",
                "message"=>"ParÃ¡metro faltante: id",
                "status"=>500)));

    } else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_member_role",
                "message"=>"ParÃ¡metro faltante: role",
                "status"=>500)));

    } else if($err_cell > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_member_cell",
                "message"=>"ParÃ¡metro faltante: cell group",
                "status"=>500)));

    } else if($err_doctrine > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_member_doctrine",
                "message"=>"ParÃ¡metro faltante: doctrine",
                "status"=>500)));

    } else if($err_celebration > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_member_celebrate",
                "message"=>"ParÃ¡metro faltante: celebration",
                "status"=>500)));

    }
   }

   // validate guest info
   if ($guests) {

    $err_member = 0;
    $err_role = 0;
    $err_cell = 0;
    $err_doctrine = 0;
    $err_celebration = 0;

    for($i = 0; $i < count($guests); $i++) {
      if(empty($guests[$i]['id'])){
        $err_member += 1;
      }else if(empty($guests[$i]['role'])){
        $err_role += 1;
      } else if(!preg_match("/^[0-1]+$/i", $guests[$i]['cell_group'])){
       $err_cell += 1;
     } else if(!preg_match("/^[0-1]+$/i", $guests[$i]['doctrine'])){
       $err_doctrine += 1;
     } else if(!preg_match("/^[0-1]+$/i",$guests[$i]['celebration'])){
       $err_celebration += 1;
     }

    }

    if($err_member > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_guest_id",
                "message"=>"ParÃ¡metro faltante: id",
                "status"=>500)));

    } else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_guest_role",
                "message"=>"ParÃ¡metro faltante: role",
                "status"=>500)));

    } else if($err_cell > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_guest_cell",
                "message"=>"ParÃ¡metro faltante: cell group",
                "status"=>500)));

    } else if($err_doctrine > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_guest_doctrine",
                "message"=>"ParÃ¡metro faltante: doctrine",
                "status"=>500)));

    } else if($err_celebration > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_guest_celebrate",
                "message"=>"ParÃ¡metro faltante: celebration",
                "status"=>500)));

    }
   }

   // validate salvation info
   if ($salvation) {

    $err_member = 0;
    $err_role = 0;
    $err_salva = 0;

    for($i = 0; $i < count($salvation); $i++) {
      if(empty($salvation[$i]['id'])){
        $err_member += 1;
      }else if(empty($salvation[$i]['role'])){
        $err_role += 1;
      } else if(!preg_match("/^[0-1]+$/i", $salvation[$i]['salvations'])){
       $err_salva += 1;
     }

    }

    if($err_member > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_salvation_id",
                "message"=>"ParÃ¡metro faltante: id",
                "status"=>500)));

    } else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_salvation_role",
                "message"=>"ParÃ¡metro faltante: role",
                "status"=>500)));

    } else if($err_salva > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_salvation",
                "message"=>"ParÃ¡metro faltante: salvations",
                "status"=>500)));

    }
   }

   // validate baptized info
   if ($baptized) {

    $err_member = 0;
    $err_role = 0;
    $err_baptized = 0;

    for($i = 0; $i < count($baptized); $i++) {
      if(empty($baptized[$i]['id'])){
        $err_member += 1;
      }else if(empty($baptized[$i]['role'])){
        $err_role += 1;
      } else if(!preg_match("/^[0-1]+$/i", $baptized[$i]['baptized'])){
       $err_baptized += 1;
     }

    }

    if($err_member > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_baptized_id",
                "message"=>"ParÃ¡metro faltante: id",
                "status"=>500)));

    } else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_baptized_role",
                "message"=>"ParÃ¡metro faltante: role",
                "status"=>500)));

    } else if($err_baptized > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_baptized",
                "message"=>"ParÃ¡metro faltante: baptized",
                "status"=>500)));

    }
   }

   // validate visits info
   if ($visits) {

    $err_member = 0;
    $err_role = 0;
    $err_visits = 0;

    for($i = 0; $i < count($visits); $i++) {
      if(empty($visits[$i]['id'])){
        $err_member += 1;
      }else if(empty($visits[$i]['role'])){
        $err_role += 1;
      } else if(!preg_match("/^[0-1]+$/i", $visits[$i]['scheduled_visits'])){
       $err_visits += 1;
     }

    }

    if($err_member > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_visits_id",
                "message"=>"ParÃ¡metro faltante: id",
                "status"=>500)));

    } else if($err_role > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_visits_role",
                "message"=>"ParÃ¡metro faltante: role",
                "status"=>500)));

    } else if($err_visits > 0){
      return $response->withStatus(500)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type"=>"required_visits",
                "message"=>"ParÃ¡metro faltante: scheduled visits",
                "status"=>500)));

    }
   }

   // General process (update report)
   $final_d = date("Y-m-d H:i:s");

   $pre = $con->prepare("UPDATE reports SET donations_offering = :donations_offering,
                          donations_transport = :donations_transport,
                          donations_events = :donations_events,
                          total_member_assistance = :total_member_assistance,
                          total_kids_assistance = :total_kids_assistance,
                          total_guest_assistance = :total_guest_assistance,
                          total_doctrine = :total_doctrine,
                          total_celebration = :total_celebration,
                          total_salvation = :total_salvation,
                          total_baptized = :total_baptized,
                          total_schedule_visits = :total_schedule_visits,
                          is_complete = '1',
                          creation_date = :actual_d,
                          updated_at = :updated_at
                          WHERE id = :report_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values = array(
     ':donations_offering' => $donations_offering,
     ':donations_transport' => $donations_transport,
     ':donations_events' => $donations_events,
     ':total_member_assistance' => $total_member_assistance,
     ':total_kids_assistance' => $total_kids_assistance,
     ':total_guest_assistance' => $total_guest_assistance,
     ':total_doctrine' => $total_doctrine,
     ':total_celebration' => $total_celebration,
     ':total_salvation' => $total_salvation,
     ':total_baptized' => $total_baptized,
     ':total_schedule_visits' => $total_schedule_visits,
     ':report_id' => $report_id,
     ':updated_at' => $final_d,
     ':actual_d' => $actual_d
     );

   $result = $pre->execute($values);

   // update details (members)
   if ($members) {
    for($i = 0; $i < count($members); $i++) {

      if ($members[$i]['role'] == '5') {
        $update_lead = $con->prepare("UPDATE reports_details SET cell_group = :cell_group,
                               doctrine = :doctrine,
                               celebration = :celebration,
                               updated_at = :updated_at
                               WHERE report_id = :report_id AND user_id = :leader_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_lead = array(
          ':cell_group' => $members[$i]['cell_group'],
          ':doctrine' => $members[$i]['doctrine'],
          ':celebration' => $members[$i]['celebration'],
          ':leader_id' => $members[$i]['id'],
          ':report_id' => $report_id,
          ':updated_at' => $final_d
          );

        $result_lead = $update_lead->execute($values_lead);
      }else{
        $update_member = $con->prepare("UPDATE reports_details SET cell_group = :cell_group,
                               doctrine = :doctrine,
                               celebration = :celebration,
                               updated_at = :updated_at
                               WHERE report_id = :report_id AND member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_member = array(
          ':cell_group' => $members[$i]['cell_group'],
          ':doctrine' => $members[$i]['doctrine'],
          ':celebration' => $members[$i]['celebration'],
          ':member_id' => $members[$i]['id'],
          ':report_id' => $report_id,
          ':updated_at' => $final_d
          );

        $result_member = $update_member->execute($values_member);
      }

    } // end for
   } // end if member

   // update details (guests)
   if ($guests) {
    for($j = 0; $j < count($guests); $j++) {

      $update_guest = $con->prepare("UPDATE reports_details SET cell_group = :cell_group,
                             doctrine = :doctrine,
                             celebration = :celebration,
                             updated_at = :updated_at
                             WHERE report_id = :report_id AND member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_guest = array(
        ':cell_group' => $guests[$j]['cell_group'],
        ':doctrine' => $guests[$j]['doctrine'],
        ':celebration' => $guests[$j]['celebration'],
        ':member_id' => $guests[$j]['id'],
        ':report_id' => $report_id,
        ':updated_at' => $final_d
        );

      $result_guest = $update_guest->execute($values_guest);

    } // end for
   } // end if guests

   // update details (salvation)
   if ($salvation) {
    for($p = 0; $p < count($salvation); $p++) {

      $assigned = '0';
      $block = '0';
      if ($salvation[$p]['salvations'] == '1') {
        $assigned = '1';
        $block = '1';
      }

      $update_salvation = $con->prepare("UPDATE reports_details SET salvations = :salvations,
                             assigned = :assigned,
                             updated_at = :updated_at
                             WHERE report_id = :report_id AND member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_salvation = array(
        ':salvations' => $salvation[$p]['salvations'],
        ':assigned' => $assigned,
        ':member_id' => $salvation[$p]['id'],
        ':report_id' => $report_id,
        ':updated_at' => $final_d
        );

      $result_salvation = $update_salvation->execute($values_salvation);

      // update block member
      $update_block = $con->prepare("UPDATE members_cells SET block = :block,
                             updated_at = :updated_at
                             WHERE id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_block = array(
        ':block' => $block,
        ':member_id' => $salvation[$p]['id'],
        ':updated_at' => $final_d
        );

      $result_block = $update_block->execute($values_block);

    } // end for
   } // end if salvation

   // update details (baptized)
   if ($baptized) {
    for($q = 0; $q < count($baptized); $q++) {
      
      if ($baptized[$q]['baptized'] == '1') {
        $assigned = '1';
        $block = '1';
      }else{
        $assigned = '0';
        $block = '0';
      }

      $update_bap = $con->prepare("UPDATE reports_details SET baptized = :baptized,
                             assigned = :assigned,
                             updated_at = :updated_at
                             WHERE report_id = :report_id AND member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_bap = array(
        ':baptized' => $baptized[$q]['baptized'],
        ':assigned' => $assigned,
        ':member_id' => $baptized[$q]['id'],
        ':report_id' => $report_id,
        ':updated_at' => $final_d
        );

      $result_bap = $update_bap->execute($values_bap);

      // update block member
      $update_block = $con->prepare("UPDATE members_cells SET block = :block,
                             updated_at = :updated_at
                             WHERE id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_block = array(
        ':block' => $block,
        ':member_id' => $baptized[$q]['id'],
        ':updated_at' => $final_d
        );

      $result_block = $update_block->execute($values_block);

    } // end for
   } // end if baptized

   // update details (visits)
   if ($visits) {
    for($r = 0; $r < count($visits); $r++) {

      $update_visit = $con->prepare("UPDATE reports_details SET scheduled_visits = :scheduled_visits,
                             updated_at = :updated_at
                             WHERE report_id = :report_id AND member_id = :member_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_visit = array(
        ':scheduled_visits' => $visits[$r]['scheduled_visits'],
        ':member_id' => $visits[$r]['id'],
        ':report_id' => $report_id,
        ':updated_at' => $final_d
        );

      $result_visit = $update_visit->execute($values_visit);


    } // end for
   } // end if visits

   if($result){

     if ($impersonate) {
      
       $roles = getRole($impersonate_role);

       $role_name = $roles['role_name'];
       $role_name_es = $roles['role_name_es'];

       $imperson = "* (Impersonate)";
       $imperson_es = "* (Impersonado)";

       /*Activity Edited a report (Leader)*/
       $en_message = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited report " . $report_n;
       $es_message = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " edito el reporte " . $report_n;

       $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_actm = array(
           ':es_message' => $es_message,
           ':en_message' => $en_message,
           ':id_m' => $impersonate_id,
           ':final_d' => $final_d);

       $result_actm = $pre_actm->execute($values_actm);

       /*** ACTIVITY GROUPS ***/

       /*Activity The leader edited a report (Cell Group)*/
       $en_message2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited report " . $report_n;
       $es_message2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " edito el reporte " . $report_n;

     }else{

       /*Activity Edited a report (Leader)*/
       $en_message = " *" . $first_name_leader . " " . $last_name_leader . "* edited report " . $report_n;
       $es_message = " *" . $first_name_leader . " " . $last_name_leader . "* edito el reporte " . $report_n;

       /*** ACTIVITY GROUPS ***/

       /*Activity The leader edited a report (Cell Group)*/
       $en_message2 = " *" . $first_name_leader . " " . $last_name_leader . "* edited report " . $report_n;
       $es_message2 = " *" . $first_name_leader . " " . $last_name_leader . "* edito el reporte " . $report_n;
     }

     /*Activity Edited a report (Leader)*/
     $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:id_m,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_act = array(
         ':es_message' => $es_message,
         ':en_message' => $en_message,
         ':id_m' => $user_id,
         ':final_d' => $final_d);

     $result_act = $pre_act->execute($values_act);


     /*** ACTIVITY GROUPS ***/

     /*Activity The leader edited a report (Cell Group)*/
     $pre_act2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message2, :en_message2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_act2 = array(
         ':es_message2' => $es_message2,
         ':en_message2' => $en_message2,
         ':cell_id' => $cell_id,
         ':final_d' => $final_d);

     $result_act2 = $pre_act2->execute($values_act2);

     return $response->withStatus(200)
                       ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('response' => 'Su reporte ha sido guardado con Ã©xito.'));
       
   }else{   
       return $response->withStatus(422)
                         ->withHeader('Content-Type', 'application/json')
                         ->withJson(array('error' => array(
                             "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                             "status"=>422)));
   }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/********************** GENERAL MEMBERS **********************/

/****** GUEST ******/

// guests list
$app->get('/members/guests/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }

  $filter_list = '';
  
  if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

    /*if select filter list*/
    if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

      $filter_list = "AND groups_zones.district_id = $filter_district";


    } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

      $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone";

    } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

      $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

    } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

      $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";
      
    }

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = $church_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";
    

  }else if ($role_id == '2') {

    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }

    /*if select filter list*/
    if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

      $filter_list = "AND groups_sectors.zone_id = $filter_zone";

    } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

      $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

    } else if ($filter_zone && $filter_sector && $filter_cell) {

      $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

    }

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = 1 AND groups_zones.district_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";
      
      
  } else if ($role_id == '3') {

    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }

    /*if select filter list*/
    if ($filter_sector && empty($filter_cell)) {

      $filter_list = "AND groups_cells.sector_id = $filter_sector";

    } else if ($filter_sector && $filter_cell) {

      $filter_list = "AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

    } 

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_sectors, groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_sectors.zone_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";

      
  } else if ($role_id == '4') {
    
    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }

    /*if select filter list*/
    if ($filter_cell) {

      $filter_list = "AND groups_cells.id = $filter_cell";

    }

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code,members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance 
    FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1 $filter_list";


  } else if ($role_id == '5') {

    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }
      
    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role = 1";


  }else{ // else role not exist

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"role_doesnt_exist",
                  "message"=>"Role does not exist",
                  "status"=>422)));
  }

  $guest = null;
  foreach ($con->query($sql) as $row) {
    if ($role_id == '5'){
      // verified if have steps
      $pre_steps = $con->prepare("SELECT count(member_id) as step_count FROM members_cells_steps WHERE member_id = :member_id AND step_id in (1, 2)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_steps = array(':member_id' => $row['member_id']);
      $pre_steps->execute($values_steps);
      $result_steps = $pre_steps->fetch();

      if ($result_steps['step_count'] == '2') {
        $row['promote'] = '1';
      }else{
        $row['promote'] = '0';
      }

    }
    $guest[] = $row;
  }

  return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => $guest));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// add guests
$app->post('/members/guests/add', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');

   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $postal_code = $request->getParam('postal_code');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $guest_since = $request->getParam('guest_since');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($birth_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: birth_date",
               "status"=>500)));
     } else if(empty($valid_guest)){
      return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                          "message"=>"Missing parameter: valid_guest",
                          "status"=>500)));
    }

    // Validations depending on the parameters sent
    if($gender){

     if($gender != 'm' && $gender != 'f'){
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type" => "gender",
                 "message"=>"Debe ingresar un gÃ©nero vÃ¡lido",
                 "status"=>422)));
     }

    }
    if($birth_date){

       if(!$valid_birthdate){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_birthdate",
                  "message"=>"Debes ingresar una fecha de nacimiento vÃ¡lida.",
                  "status"=>422)));
       }

    }
    if($marital_status){

     if($marital_status != 'M' && $marital_status != 'S'){
       return $response->withStatus(422)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type" => "marital_status",
                 "message"=>"Debe ingresar un estado civil vÃ¡lido",
                 "status"=>422)));
     }

    } 
    if($married_since){
       if(!$valid_married){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_married",
                  "message"=>"Debes ingresar una fecha de casado vÃ¡lida",
                  "status"=>422)));
       }
    }
    if ($guest_since) {
       if(!$valid_guest){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_guest",
                  "message"=>"Debes ingresar una fecha de invitado vÃ¡lida",
                  "status"=>422)));
       }
    }

    /*Impersonate*/
    if ($impersonate) {
      
      if ($impersonate != '1') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"impersonate_not_valid",
                  "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                  "status"=>422)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_role",
                 "status"=>500)));
     }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

    }

    // validate user
    $pre_s = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND verified_account = '1' AND status = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_s = array(':user_id' => $user_id, ':role_id' => $role_id);
    $pre_s->execute($values_s);
    $result_s = $pre_s->fetch();

    if (!$result_s) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"user_doesnt_exist",
                  "message"=>"El usuario no existe.",
                  "status"=>422)));
    }

    if ($role_id != '5') {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"without_permission",
                  "message"=>"No posee permisos para agregar invitado.",
                  "status"=>422)));
    }


    $first_name_leader = $result_s['first_name'];
    $last_name_leader = $result_s['last_name'];

    $pre_cell = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id AND church_id = :church_id AND leader = :user_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell = array(':cell_id' => $cell_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    /*verified cell*/
    if (!$result_cell) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"cell_doesnt_exist",
                  "message"=>"La cÃ©lula no existe.",
                  "status"=>422)));
    }

    $final_d = $result_cell['district_code'];
    $final_z = $result_cell['zone_code'];
    $final_s = $result_cell['sector_code'];
    $final_c = $result_cell['cell_code'];
    $sector_idf = $result_cell['sector_id'];

    // validate email
    if ($email) {
      $pre_em = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE email = :email AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_em = array(':email' => $email, ':church_id' => $church_id);
      $pre_em->execute($values_em);
      $result_em = $pre_em->fetch();

      if ($result_em) {
        return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"email_already_exists",
                      "message"=>"El correo ingresado ya existe.",
                      "status"=>422)));
      }
    }
    

    /*obtain zone id for records*/
    $pre_sec = $con->prepare("SELECT *
                             FROM groups_sectors  
                             WHERE id = :sector_idf AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_sec = array(':sector_idf' => $sector_idf, ':church_id' => $church_id);
    $pre_sec->execute($values_sec);
    $result_sec = $pre_sec->fetch();

    $zone_idf = $result_sec['zone_id'];

    /*obtain district id for records*/
    $pre_zon = $con->prepare("SELECT *
                             FROM groups_zones  
                             WHERE id = :zone_idf AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_zon = array(':zone_idf' => $zone_idf, ':church_id' => $church_id);
    $pre_zon->execute($values_zon);
    $result_zon = $pre_zon->fetch();

    $dis_idf = $result_zon['district_id'];

    /*General process to add guest*/

    $final_date = date("Y-m-d H:i:s");

    /*insert member*/
    $pre = $con->prepare("INSERT INTO members_cells (`cell_id`, `church_id`, `first_name`,`last_name`,`email`,`phone`,`profile_picture`,`address`,`postal_code`,`city`,`gender`,`birth_date`,`marital_status`,`married_since`,`guest_since`,`exelerate_id`,`member_since`,`role`,`active`,`is_complete`,`block`,`created_at`, `updated_at`) VALUES (:cell_id, :church_id,:first_name,:last_name,:email,:phone,:profile_picture,:address,:postal_code,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,NULL,NULL,'1','1','0','0','$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(
        ':cell_id' => $cell_id, 
        ':church_id' => $church_id, 
        ':first_name' => $first_name,
        ':last_name' => $last_name,
        ':email' => $email,
        ':phone' => $phone,
        ':profile_picture' => $profile_picture,
        ':address' => $address,
        ':postal_code' => $postal_code,
        ':city' => $city,
        ':gender' => $gender,
        ':birth_date' => $birth_date,
        ':marital_status' => $marital_status,
        ':guest_since' => $guest_since,
        ':married_since' => $married_since);

    $result = $pre->execute($values);

    $id_m = $con->lastInsertId();

    /*Cell Codes*/

    if($result){

      // check if have all the complete information
      if ($marital_status == 'M') {
        $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                               WHERE id = :user_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $married_since && $guest_since && $profile_picture && $gender && $email) {
          // update complete
          $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        }
      }else{
        $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                               WHERE id = :user_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
        if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $guest_since && $profile_picture && $gender && $email) {
          // update complete
          $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                 WHERE id = :user_id",
                                   array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        }
      }

      $values_complete = array(
        ':user_id' => $id_m);

      $result_complete = $pre_complete->execute($values_complete);

      // get active report this week to save the record of the new guest
      $pre_report = $con->prepare("SELECT id, name, creation_date FROM reports WHERE YEARWEEK(creation_date)=YEARWEEK(NOW()) AND cell_id = :cell_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_report = array(':cell_id' => $cell_id);
      $pre_report->execute($values_report);
      $result_report = $pre_report->fetch();

      if ($result_report) {
        $pre_details = $con->prepare("INSERT INTO reports_details (`cell_group`, `doctrine`, `celebration`,`salvations`,`baptized`,`scheduled_visits`,`report_id`,`member_id`,`user_id`,`assigned`,`created_at`, `updated_at`) VALUES ('0', '0','0','0','0','0',:report_id,:id_m,NULL,'0', '$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_details = array(
          ':report_id' => $result_report['id'],
          ':id_m' => $id_m
          );

        $result_details = $pre_details->execute($values_details);
      }
      

      /*************** ACTIVITIES ***********************/

      $en_message = " *" . $first_name . " " . $last_name . "* became a guest";
      $es_message = " *" . $first_name . " " . $last_name . "* se convirtiÃ³ en un invitado";

      /*Activity Became a guest (Guest)*/ 
      $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_act = array(
          ':es_message' => $es_message, 
          ':en_message' => $en_message, 
          ':id_m' => $id_m,
          ':final_date' => $final_date);

      $result_act = $pre_act->execute($values_act);


      /*Activity Added to a cell group (Guest)*/
      $en_me = " *". $first_name . " " . $last_name . "* added to a cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
      $es_me= " *". $first_name . " " . $last_name . "* agregado a cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

      $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_add = array(
          ':es_me' => $es_me, 
          ':en_me' => $en_me,
          ':id_m' => $id_m,
          ':final_date' => $final_date);

      $result_add = $pre_add->execute($values_add);


      if ($impersonate) {
       
        $roles = getRole($impersonate_role);

        $role_name = $roles['role_name'];
        $role_name_es = $roles['role_name_es'];

        $imperson = "* (Impersonate)";
        $imperson_es = "* (Impersonado)";

        /*Activity Added a new guest (Leader)*/
        $en_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " added a new guest: " . $first_name . " " . $last_name;
        $es_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

        $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_actm = array(
            ':es_mess' => $es_mess,
            ':en_mess' => $en_mess,
            ':user_id' => $impersonate_id,
            ':final_date' => $final_date);

        $result_actm = $pre_actm->execute($values_actm);

        /*** ACTIVITY GROUPS ***/

        /*Activity The leader added a new guest (Cell Group)*/
        $en_me2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " added a new guest: " . $first_name . " " . $last_name;
        $es_me2= $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

      }else{

        /*Activity Added a new guest (Leader)*/
        $en_mess = " *" . $first_name_leader . " " . $last_name_leader . "* added a new guest: " . $first_name . " " . $last_name;
        $es_mess = " *" . $first_name_leader . " " . $last_name_leader . "* agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;

        /*** ACTIVITY GROUPS ***/

        /*Activity The leader added a new guest (Cell Group)*/
        $en_me2 = " *" . $first_name_leader . " " . $last_name_leader . "* added a new guest: " . $first_name . " " . $last_name;
        $es_me2= " *" . $first_name_leader . " " . $last_name_leader . "* agregÃ³ un nuevo invitado: " . $first_name . " " . $last_name;
      }

      /*Activity leader added a new guest*/
      $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_act_lead = array(
          ':es_mess' => $es_mess,
          ':en_mess' => $en_mess,
          ':user_id' => $user_id,
          ':final_date' => $final_date);

      $result_act_lead = $pre_act_lead->execute($values_act_lead);


      /*** ACTIVITY GROUPS ***/

      /*Activity The leader added a new guest (Cell Group)*/
      $pre_add2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me2, :en_me2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_add2 = array(
          ':es_me2' => $es_me2, 
          ':en_me2' => $en_me2,
          ':cell_id' => $cell_id,
          ':final_d' => $final_date);

      $result_add2 = $pre_add2->execute($values_add2);

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Invitado guardado con Ã©xito'));
        
    }else{   
        return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                              "status"=>422)));
    }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// guest profile
$app->get('/members/guests/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $guest_id = $request->getParam('guest_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($guest_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: guest_id",
               "status"=>500)));
   } 

   /*verify if user exist*/
   $pre_i = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
   }

    $pre_gu = $con->prepare("SELECT *
                             FROM members_cells
                             WHERE id = :guest_id AND role = '1' AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_gu = array(':guest_id' => $guest_id, ':church_id' => $church_id);
    $pre_gu->execute($values_gu);
    $result_gu = $pre_gu->fetch();

    if (!$result_gu) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"guest_doesnt_exist",
                  "message"=>"El invitado no existe.",
                  "status"=>422)));
    }

    // General process
    $pre = $con->prepare("SELECT id, cell_id, CONCAT(first_name, ' ', last_name) AS full_name, first_name, last_name, email, phone, profile_picture, address, postal_code, city, gender, birth_date, role, marital_status, married_since, guest_since, is_complete FROM members_cells WHERE id = :guest_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':guest_id' => $guest_id);
    $pre->execute($values);
    $result = $pre->fetch();

    if ($result) {

      $cell_id = $result['cell_id'];

      // Select cell codes
      $sql_gro = "SELECT cell_code, sector_code, zone_code, district_code, (SELECT CONCAT(first_name, ' ', last_name) FROM user where id = groups_cells.leader) as leader FROM groups_cells WHERE id = :cell_id AND church_id = :church_id";
      $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gro = array(
        ':cell_id' => $cell_id,
        ':church_id' => $church_id
        );
      
      $result_gro = $pre_gro->execute($values_gro);
      $result_gro = $pre_gro->fetch();

      // get steps
      $get_steps = "SELECT members_cells_steps.step_id,steps.step_name,members_cells_steps.step_date
              FROM members_cells_steps, steps
              WHERE members_cells_steps.step_id = steps.step_id AND member_id = $guest_id ORDER BY step_id";

      $steps = null;

      foreach ($con->query($get_steps) as $row) {
        $steps[] = $row;
      }

      // verified if have two steps
      $pre_steps = $con->prepare("SELECT count(member_id) as step_count FROM members_cells_steps WHERE member_id = :member_id AND step_id in (1, 2)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_steps = array(':member_id' => $guest_id);
      $pre_steps->execute($values_steps);
      $result_steps = $pre_steps->fetch();

      if ($result_steps['step_count'] == '2') {
        $promote = '1';
      }else{
        $promote = '0';
      }

      $finalObject = array(
        "guest_id" => $result['id'],
        "full_name" => $result['full_name'],
        "first_name" => $result['first_name'],
        "last_name" => $result['last_name'],
        "email" => $result['email'],
        "phone" => $result['phone'],
        "address" => $result['address'],
        "postal_code" => $result['postal_code'],
        "city" => $result['city'],
        "gender" => $result['gender'],
        "birth_date" => $result['birth_date'],
        "marital_status" => $result['marital_status'],
        "married_since" => $result['married_since'],
        "guest_since" => $result['guest_since'],
        "profile_picture" => $result['profile_picture'],
        "role_id" => $result['role'],
        "is_complete" => $result['is_complete'],
        'cell_code' => $result_gro['cell_code'],
        'sector_code' => $result_gro['sector_code'],
        'zone_code' => $result_gro['zone_code'],
        'district_code' => $result_gro['district_code'],
        'leader' => $result_gro['leader'],
        "steps" => $steps,
        "total_steps" => '2',
        "promote" => $promote
      );

      return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $finalObject));
    }else{   
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                                "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// edit guest
$app->put('/members/guests/edit', function ($request,$response) {

  try{

     $con = $this->db;
     $user_id = $request->getParam('user_id');
     $role_id = $request->getParam('role_id');
     $church_id = $request->getParam('church_id');
     $guest_id = $request->getParam('guest_id');
     $first_name = $request->getParam('first_name');
     $last_name = $request->getParam('last_name');
     $email = $request->getParam('email');
     $phone = $request->getParam('phone');
     $address = $request->getParam('address');
     $city = $request->getParam('city');
     $postal_code = $request->getParam('postal_code');
     $profile_picture = $request->getParam('profile_picture');
     $birth_date = $request->getParam('birth_date');
     $gender = $request->getParam('gender');
     $marital_status = $request->getParam('marital_status');
     $married_since = $request->getParam('married_since');
     $guest_since = $request->getParam('guest_since');

     /*Impersonate*/
     $impersonate = $request->getParam('impersonate');
     $impersonate_id = $request->getParam('impersonate_id');
     $impersonate_role = $request->getParam('impersonate_role');

     $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
     $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);
     $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);

     if(empty($user_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: user_id",
                 "status"=>500)));
     } else if(empty($role_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: role_id",
                 "status"=>500)));
     } else if(empty($church_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: church_id",
                 "status"=>500)));
     } else if(empty($guest_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: guest_id",
                 "status"=>500)));
     } else if(empty($first_name)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: first_name",
                 "status"=>500)));
      } else if(empty($last_name)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: last_name",
                 "status"=>500)));
      } else if(empty($birth_date)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: birth_date",
                 "status"=>500)));
      } else if(!$valid_birthdate){
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"birthdate",
                   "message"=>"Debe ingresar una fecha de nacimiento vÃ¡lida.",
                   "status"=>422)));
      } else if(empty($guest_since)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: guest_since",
                 "status"=>500)));
      } else if(!$valid_guest){
         return $response->withStatus(422)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type" => "valid_guest",
                   "message"=>"Debes ingresar una fecha de invitado vÃ¡lida",
                   "status"=>422)));

     }

     // Validations depending on the parameters sent
     if($gender){

      if($gender != 'm' && $gender != 'f'){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "gender",
                  "message"=>"Debe ingresar un gÃ©nero vÃ¡lido",
                  "status"=>422)));
      }

     }
     if($marital_status){

      if($marital_status != 'M' && $marital_status != 'S'){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "marital_status",
                  "message"=>"Debe ingresar un estado civil vÃ¡lido",
                  "status"=>422)));
      }

     }
     if($married_since){
       if(!$valid_married){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_married",
                  "message"=>"Debes ingresar una fecha de casado vÃ¡lida",
                  "status"=>422)));
       }
    }


     /*Impersonate*/
    if ($impersonate) {
       
      if ($impersonate != '1') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"impersonate_not_valid",
                  "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                  "status"=>422)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_role",
                 "status"=>500)));
     }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

     }


     /*verify if user exist*/
     $pre_i = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
     $pre_i->execute($values_i);
     $result_i = $pre_i->fetch();

     if (!$result_i) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"user_doesnt_exist",
                  "message"=>"El usuario no existe.",
                  "status"=>422)));
     }

      /*verify if role leader*/
      if ($role_id != '5') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"without_permission",
                    "message"=>"No posee permisos para editar invitado.",
                    "status"=>422)));
      }

      $first_name_leader = $result_i['first_name'];
      $last_name_leader = $result_i['last_name'];

       /*verify if guest exist*/
       $pre_gu = $con->prepare("SELECT *
                                FROM members_cells
                                WHERE id = :guest_id AND role = '1' AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_gu = array(':guest_id' => $guest_id, ':church_id' => $church_id);
       $pre_gu->execute($values_gu);
       $result_gu = $pre_gu->fetch();

       if (!$result_gu) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"guest_doesnt_exist",
                    "message"=>"El invitado no existe.",
                    "status"=>422)));
       }

       // validate email
       if ($email) {
         $pre_em = $con->prepare("SELECT *
                                  FROM members_cells
                                  WHERE email = :email AND id != :guest_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_em = array(':email' => $email, ':guest_id' => $guest_id);
         $pre_em->execute($values_em);
         $result_em = $pre_em->fetch();

         if ($result_em) {
           return $response->withStatus(422)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                         "type"=>"email_already_exists",
                         "message"=>"El correo ingresado ya existe.",
                         "status"=>422)));
         }
        }

        /*General process to edit guest*/

        $final_d = date("Y-m-d H:i:s");

        $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                               last_name = :last_name,
                               email = :email,
                               phone = :phone,
                               address = :address,
                               postal_code = :postal_code,
                               city = :city,
                               birth_date = :birth_date,
                               profile_picture= :profile_picture,
                               gender= :gender,
                               marital_status= :marital_status,
                               married_since= :married_since,
                               guest_since= :guest_since,
                               updated_at= :updated_at
                               WHERE id = :guest_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(
          ':guest_id' => $guest_id, 
          ':first_name' => $first_name,
          ':last_name' => $last_name,
          ':email' => $email,
          ':profile_picture' => $profile_picture,
          ':phone' => $phone,
          ':address' => $address,
          ':postal_code' => $postal_code,
          ':city' => $city,
          ':birth_date' => $birth_date,
          ':gender' => $gender,
          ':marital_status' => $marital_status,
          ':guest_since' => $guest_since,
          ':married_since' => $married_since,
          ':updated_at' => $final_d);

        $result = $pre->execute($values);

        if($result){

          // check if have all the complete information
          if ($marital_status == 'M') {
            $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
            if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $married_since && $guest_since && $profile_picture && $gender && $email) {
              // update complete
              $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                     WHERE id = :user_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
            }

          }else{
            $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $guest_since && $profile_picture && $gender && $email) {
              // update complete
              $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                     WHERE id = :user_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
            }

          }

          $values_complete = array(
            ':user_id' => $guest_id);

          $result_complete = $pre_complete->execute($values_complete);

          /*************** ACTIVITIES ***********************/

          /*Activity Profile updates (Guest)*/
          $en_message = " *" . $first_name_leader . " " . $last_name_leader . "* edited a guest: " . $first_name . " " . $last_name;
          $es_message = " *" . $first_name_leader . " " . $last_name_leader . "* editÃ³ un invitado: " . $first_name . " " . $last_name;

          $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act = array(
              ':es_message' => $es_message, 
              ':en_message' => $en_message, 
              ':id_m' => $guest_id,
              ':final_d' => $final_d);

          $result_act = $pre_act->execute($values_act);


          if ($impersonate) {
           
            $roles = getRole($impersonate_role);

            $role_name = $roles['role_name'];
            $role_name_es = $roles['role_name_es'];

            $imperson = "* (Impersonate)";
            $imperson_es = "* (Impersonado)";

            /*Activity impersonate Edited a Cell member/guestâs profile (Leader)*/
            $en_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited a guest: " . $first_name . " " . $last_name;
            $es_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " editÃ³ un invitado: " . $first_name . " " . $last_name;

            $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_actm = array(
                ':es_mess' => $es_mess,
                ':en_mess' => $en_mess,
                ':user_id' => $impersonate_id,
                ':final_d' => $final_d);

            $result_actm = $pre_actm->execute($values_actm);

          }else{
            /*Activity Edited a Cell member/guestâs profile (Leader)*/
            $en_mess = " *" . $first_name_leader . " " . $last_name_leader . "* edited a guest: " . $first_name . " " . $last_name;
            $es_mess = " *" . $first_name_leader . " " . $last_name_leader . "* editÃ³ un invitado: " . $first_name . " " . $last_name;
          }

          /*Activity Edited a Cell member/guestâs profile (Leader)*/
          $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act_lead = array(
              ':es_mess' => $es_mess,
              ':en_mess' => $en_mess,
              ':user_id' => $user_id,
              ':final_d' => $final_d);

          $result_act_lead = $pre_act_lead->execute($values_act_lead);

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Invitado guardado con Ã©xito'));
        }else{   
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                "status"=>422)));
        }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// promote cell members and guests
$app->post('/members/guests/promote', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $guest_id = $request->getParam('guest_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($guest_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: guest_id",
               "status"=>500)));
   }


   /*Impersonate*/
   if ($impersonate) {
     
     if ($impersonate != '1') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"impersonate_not_valid",
                  "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                  "status"=>422)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_role",
                 "status"=>500)));
     }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }

  if ($role_id != '5') {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"without_permission",
                "message"=>"No posee permisos para promover invitado.",
                "status"=>422)));
  }

  $first_name_log = $result_i['first_name'];
  $last_name_log = $result_i['last_name'];

  // Obtain cell_id of user
  $pre_cell = $con->prepare("SELECT *
                           FROM groups_cells
                           WHERE leader = :user_id AND church_id = :church_id", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_cell = array(':user_id' => $user_id,':church_id' => $church_id);
  $pre_cell->execute($values_cell);
  $result_cell = $pre_cell->fetch();

  if (!$result_cell) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"doesnt_have_cell",
                "message"=>"No posee una cÃ©lula asignada.",
                "status"=>422)));
  }

  $cell_id = $result_cell['id'];


  // validate guest
  $pre_fi = $con->prepare("SELECT *
                           FROM members_cells
                           WHERE id = :guest_id AND church_id = :church_id AND cell_id = :cell_id AND role = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_fi = array(':guest_id' => $guest_id,':church_id' => $church_id,':cell_id' => $cell_id);
  $pre_fi->execute($values_fi);
  $result_fi = $pre_fi->fetch();

  if (!$result_fi) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"guest_doesnt_exist",
                "message"=>"El invitado no existe.",
                "status"=>422)));
  }

  // verified if have two steps
  $pre_steps = $con->prepare("SELECT count(member_id) as step_count FROM members_cells_steps WHERE member_id = :member_id AND step_id in (1, 2)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_steps = array(':member_id' => $guest_id);
  $pre_steps->execute($values_steps);
  $result_steps = $pre_steps->fetch();

  if ($result_steps['step_count'] != '2') {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"without_steps",
                "message"=>"El invitado no posee los pasos requeridos.",
                "status"=>422)));
  }

  $first_name_guest = $result_fi['first_name'];
  $last_name_guest = $result_fi['last_name'];
  $final_date = date("Y-m-d H:i:s");

  /*update guest to cell member*/
  $pre3 = $con->prepare("UPDATE members_cells SET role = '2', active = '1', updated_at = :final_date WHERE id = :guest_id AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values3 = array(
    ':guest_id' => $guest_id,
    ':church_id' => $church_id,
    ':final_date' => $final_date
  );

  $result3 = $pre3->execute($values3);

  if($result3){

    // get active report this week to update the record of the new member
    $pre_report = $con->prepare("SELECT * FROM reports WHERE YEARWEEK(creation_date)=YEARWEEK(NOW()) AND cell_id = :cell_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_report = array(':cell_id' => $cell_id);
    $pre_report->execute($values_report);
    $result_report = $pre_report->fetch();

    if ($result_report) {

      $report_id = $result_report['id'];
      $member = $result_report['total_member_assistance'];
      $guest = $result_report['total_guest_assistance'];
      $visits = $result_report['total_schedule_visits'];
      $is_complete = $result_report['is_complete'];

      $pre_detail = $con->prepare("SELECT * FROM reports_details WHERE report_id = :report_id AND member_id = :guest_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_detail = array(':report_id' => $report_id, ':guest_id' => $guest_id);
      $pre_detail->execute($values_detail);
      $result_detail = $pre_detail->fetch();

      if ($result_detail) {
        $cell_group = $result_detail['cell_group'];
        $scheduled_visits = $result_detail['scheduled_visits'];

        // update reports table

        if ($is_complete == '1') {
          $member_assistance = $member + $cell_group;
        }

        if ($guest != '0' && $is_complete == '1') {
          $guest_assistance = $guest - $cell_group;
        }

        if ($visits != '0' && $is_complete == '1') {
          $sche_visits = $visits - $scheduled_visits;
        }
        
        $update_cell = $con->prepare("UPDATE reports SET total_member_assistance = :member_assistance, total_guest_assistance = :guest_assistance, total_schedule_visits = :sche_visits WHERE id = :report_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $cell_group = array(
          ':member_assistance' => $member_assistance,
          ':guest_assistance' => $guest_assistance,
          ':sche_visits' => $sche_visits,
          ':report_id' => $report_id
          );

        $res_cell = $update_cell->execute($cell_group);

      }
    }

    /*************** ACTIVITIES ***********************/

    if ($impersonate) {
     
      $roles = getRole($impersonate_role);

      $role_name = $roles['role_name'];
      $role_name_es = $roles['role_name_es'];

      $imperson = "* (Impersonate)";
      $imperson_es = "* (Impersonado)";

      /*ACTIVITY GROUPS*/

      /*Activity Promoted cell member confirmation (Cell Group)*/
      $en_message = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " promoted " . $first_name_guest . " " . $last_name_guest . " to member";
      $es_message = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " promoviÃ³ a " . $first_name_guest . " " . $last_name_guest . " a miembro";

      $en_message2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " promoted " . $first_name_guest . " " . $last_name_guest . " to member";
      $es_message2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " promoviÃ³ a " . $first_name_guest . " " . $last_name_guest . " a miembro";

      $en_message3 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " promoted " . $first_name_guest . " " . $last_name_guest . " to member";
      $es_message3 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " promoviÃ³ a " . $first_name_guest . " " . $last_name_guest . " a miembro";

    }else{
      /*ACTIVITY GROUPS*/

      /*Activity Promoted cell member confirmation (Cell Group)*/
      $en_message = " *" . $first_name_log . " " . $last_name_log . "* promoted " . $first_name_guest . " " . $last_name_guest . " to member";
      $es_message = " *" . $first_name_log . " " . $last_name_log . "* promoviÃ³ a " . $first_name_guest . " " . $last_name_guest . " a miembro";

      $en_message2 = " *" . $first_name_log . " " . $last_name_log . "* promoted " . $first_name_guest . " " . $last_name_guest . " to member";
      $es_message2 = " *" . $first_name_log . " " . $last_name_log . "* promoviÃ³ a " . $first_name_guest . " " . $last_name_guest . " a miembro";

      $en_message3 = " *" . $first_name_log . " " . $last_name_log . "* promoted " . $first_name_guest . " " . $last_name_guest . " to member";
      $es_message3 = " *" . $first_name_log . " " . $last_name_log . "* promoviÃ³ a " . $first_name_guest . " " . $last_name_guest . " a miembro";
    }

    /*ACTIVITY GROUPS*/

    /*Activity Promoted cell member confirmation (Cell Group)*/
    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_act = array(
        ':es_message' => $es_message, 
        ':en_message' => $en_message, 
        ':cell_id' => $cell_id,
        ':final_date' => $final_date);

    $result_act = $pre_act->execute($values_act);

    /*Activity guest*/
    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL,:guest_id,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_act = array(
        ':es_message' => $es_message2, 
        ':en_message' => $en_message2, 
        ':guest_id' => $guest_id,
        ':final_date' => $final_date);

    $result_act = $pre_act->execute($values_act);

    /*Activity leader*/
    $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_act = array(
        ':es_message' => $es_message3, 
        ':en_message' => $en_message3, 
        ':user_id' => $user_id,
        ':final_date' => $final_date);

    $result_act = $pre_act->execute($values_act);

    return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => $first_name_guest .' '.$last_name_guest.' fue promovido Ã©xitosamente, ahora lo encontrarÃ¡s en la lista de miembros.'));
  }else{   
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                          "status"=>422)));
  }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// assign steps
$app->post('/members/guests/assign-steps', function ($request,$response) {

  try{

    $con = $this->db;
    $user_id = $request->getParam('user_id');
    $role_id = $request->getParam('role_id');
    $church_id = $request->getParam('church_id');
    $guest_id = $request->getParam('guest_id');
    $step_id = $request->getParam('step_id');
    $step_name = $request->getParam('step_name');
    $step_date = $request->getParam('step_date');

    if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church id",
               "status"=>500)));
   } else if(empty($guest_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: guest id",
               "status"=>500)));
   } else if(empty($step_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step id",
               "status"=>500)));
   }else if(empty($step_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step name",
               "status"=>500)));
   }else if(empty($step_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step date",
               "status"=>500)));
   }

   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$step_date);

   // if user exists
   $pre_s = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
   $pre_s->execute($values_s);
   $result_s = $pre_s->fetch();

   if (!$result_s) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
   }

   if ($role_id != '5') {
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "type"=>"without_permission",
                 "message"=>"No posee permisos para asignar pasos a invitado.",
                 "status"=>422)));
   }

   // Obtain cell_id of user
   $pre_cell = $con->prepare("SELECT *
                            FROM groups_cells
                            WHERE leader = :user_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_cell = array(':user_id' => $user_id,':church_id' => $church_id);
   $pre_cell->execute($values_cell);
   $result_cell = $pre_cell->fetch();

   if (!$result_cell) {
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "type"=>"doesnt_have_cell",
                 "message"=>"No posee una cÃ©lula asignada.",
                 "status"=>422)));
   }

   $cell_id = $result_cell['id'];

   // validate guest
   $pre_guest = $con->prepare("SELECT *
                           FROM members_cells
                           WHERE id = :guest_id AND church_id = :church_id AND cell_id = :cell_id AND role = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_guest = array(':guest_id' => $guest_id,':church_id' => $church_id,':cell_id' => $cell_id);
   $pre_guest->execute($values_guest);
   $result_guest = $pre_guest->fetch();

   if (!$result_guest) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"guest_doesnt_exist",
                "message"=>"El invitado no existe.",
                "status"=>422)));
   }

   // if step exists
   $pre_step = $con->prepare("SELECT *
                            FROM steps
                            WHERE step_id = :step_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_step = array(':step_id' => $step_id);
   $pre_step->execute($values_step);
   $result_step = $pre_step->fetch();

   if(empty($result_step)){
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"step_doesnt_exist",
              "message"=>"El paso que intenta ingresar no existe.",
              "status"=>422)));
   }

   if(!$valid_date){
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"invalid_date",
              "message"=>"Ingrese una fecha vÃ¡lida.",
              "status"=>422)));
   }

   if ($step_id != '1') {
    $previous_step = $step_id - 1;

    $user_prev = $con->prepare("SELECT *
                             FROM members_cells_steps
                             WHERE step_id = :step_id AND member_id = :guest_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_prev = array(':step_id' => $previous_step,':guest_id' => $guest_id);
    $user_prev->execute($values_prev);
    $result_prev = $user_prev->fetch();

    if (!$result_prev) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"previous_step",
                  "message"=>"Debe completar su paso previo, para poder ingresar este nuevo paso.",
                  "status"=>422)));
    }

   }

   // verify if guest is already assigned the step
   $user_steps = $con->prepare("SELECT *
                            FROM members_cells_steps
                            WHERE step_id = :step_id AND member_id = :guest_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_user = array(':step_id' => $step_id,':guest_id' => $guest_id);
   $user_steps->execute($values_user);
   $result_user = $user_steps->fetch();

   $final_d = date("Y-m-d H:i:s");

   if ($result_user) {
    // if already have it, it will only be edited
    $assign_step = $con->prepare("UPDATE members_cells_steps SET step_date = :step_date, updated_at = :final_d WHERE step_id = :step_id AND member_id = :guest_id",
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign = array(
      ':guest_id' => $guest_id, 
      ':step_id' => $step_id,
      ':final_d' => $final_d,
      ':step_date' => $step_date);

    $result_assign = $assign_step->execute($val_assign);

   }else{
    // new step will be created
    $assign_step = $con->prepare("INSERT INTO members_cells_steps (`member_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:guest_id, :name,:step_date,:step_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign = array(
      ':guest_id' => $guest_id,
      ':name' => $step_name,
      ':step_date' => $step_date,
      ':step_id' => $step_id
      );

    $result_assign = $assign_step->execute($val_assign);
   }


   if ($result_assign) {

    // check if have all the complete information
    if ($result_guest['marital_status'] == 'M') {
      $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($result_guest['first_name'] && $result_guest['last_name'] && $result_guest['phone'] && $result_guest['address'] && $result_guest['postal_code'] && $result_guest['city'] && $result_guest['birth_date'] && $result_guest['marital_status'] && $result_guest['married_since'] && $result_guest['guest_since'] && $result_guest['profile_picture'] && $result_guest['gender'] && $result_guest['email']) {
        // update complete
        $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }
    }else{
      $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($result_guest['first_name'] && $result_guest['last_name'] && $result_guest['phone'] && $result_guest['address'] && $result_guest['postal_code'] && $result_guest['city'] && $result_guest['birth_date'] && $result_guest['marital_status'] && $result_guest['guest_since'] && $result_guest['profile_picture'] && $result_guest['gender'] && $result_guest['email']) {
        // update complete
        $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                           WHERE id = :user_id",
                                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }
    }

    $values_complete = array(
      ':user_id' => $guest_id);

    $result_complete = $pre_complete->execute($values_complete);

    // obtain next step
    $next_step = $step_id + 1;
    
    return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => array( 'message' =>'Su paso ha sido guardado con Ã©xito.','next_step' => (string)$next_step)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/****** CELL MEMBERS ******/

// cell members list
$app->get('/members/cell-members/list', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $parent_id = $request->getParam('parent_id');
   $active = $request->getParam('active');
   $filter_district = $request->getParam('filter_district');
   $filter_zone = $request->getParam('filter_zone');
   $filter_sector = $request->getParam('filter_sector');
   $filter_cell = $request->getParam('filter_cell');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   }


  $pre_i = $con->prepare("SELECT *
                           FROM user
                           WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                           array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
  $pre_i->execute($values_i);
  $result_i = $pre_i->fetch();

  if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
  }

  $filter_list = '';
  
  if ($role_id == '1' || $role_id == '6' || $role_id == '7') {

    /*if select filter list*/
    if ($filter_district && empty($filter_zone) && empty($filter_sector) && empty($filter_cell)) {

      $filter_list = "AND groups_zones.district_id = $filter_district";


    } else if ($filter_district && $filter_zone && empty($filter_sector) && empty($filter_cell)) {

      $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone";

    } else if ($filter_district && $filter_zone && $filter_sector && empty($filter_cell)) {

      $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

    } else if ($filter_district && $filter_zone && $filter_sector && $filter_cell) {

      $filter_list = "AND groups_zones.district_id = $filter_district AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";
      
    }

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = $church_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";
    

  }else if ($role_id == '2') {

    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }

    /*if select filter list*/
    if ($filter_zone && empty($filter_sector) && empty($filter_cell)) {

      $filter_list = "AND groups_sectors.zone_id = $filter_zone";

    } else if ($filter_zone && $filter_sector && empty($filter_cell)) {

      $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector";

    } else if ($filter_zone && $filter_sector && $filter_cell) {

      $filter_list = "AND groups_sectors.zone_id = $filter_zone AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

    }

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_zones, groups_sectors, groups_cells, members_cells WHERE groups_sectors.zone_id = groups_zones.id AND groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_zones.church_id = 1 AND groups_zones.district_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";
      
      
  } else if ($role_id == '3') {

    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }

    /*if select filter list*/
    if ($filter_sector && empty($filter_cell)) {

      $filter_list = "AND groups_cells.sector_id = $filter_sector";

    } else if ($filter_sector && $filter_cell) {

      $filter_list = "AND groups_cells.sector_id = $filter_sector AND groups_cells.id = $filter_cell";

    } 

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_sectors, groups_cells, members_cells WHERE groups_cells.sector_id = groups_sectors.id AND members_cells.cell_id = groups_cells.id AND groups_sectors.zone_id = $parent_id AND groups_sectors.church_id = $church_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";

      
  } else if ($role_id == '4') {
    
    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }

    /*if select filter list*/
    if ($filter_cell) {

      $filter_list = "AND groups_cells.id = $filter_cell";

    }

    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code,members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance 
    FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.sector_id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1 $filter_list";


  } else if ($role_id == '5') {

    if(empty($parent_id)){
          return $response->withStatus(500)
                 ->withHeader('Content-Type', 'application/json')
                 ->withJson(array('error' => array(
                   "type"=>"required",
                   "message"=>"Missing parameter: parent_id",
                   "status"=>500)));
    }
      
    $sql = "SELECT members_cells.id as member_id, members_cells.first_name, members_cells.last_name, CONCAT(IFNULL(members_cells.first_name,''),' ',IFNULL(members_cells.last_name,'')) AS full_name, members_cells.profile_picture, members_cells.city, groups_cells.district_code, groups_cells.zone_code, groups_cells.sector_code, groups_cells.cell_code, members_cells.is_complete, (SELECT MAX(DATE(reports_details.updated_at)) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as last_assistance, (SELECT count(reports_details.cell_group) FROM reports_details WHERE reports_details.member_id = members_cells.id AND reports_details.cell_group = 1) as assistance FROM groups_cells, members_cells WHERE members_cells.cell_id = groups_cells.id AND groups_cells.id = $parent_id AND groups_cells.church_id = $church_id AND members_cells.church_id = $church_id AND members_cells.active = '1' AND members_cells.role != 1";


  }else{ // else role not exist

      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"role_doesnt_exist",
                  "message"=>"Role does not exist",
                  "status"=>422)));
  }

  $guest = null;
  foreach ($con->query($sql) as $row) {
    $guest[] = $row;
  }

  return $response->withStatus(200)
                    ->withHeader('Content-Type', 'application/json')
                    ->withJson(array('response' => $guest));

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// add cell members
$app->post('/members/cell-members/add', function ($request,$response) {

  try{

   $con = $this->db;

   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $cell_id = $request->getParam('cell_id');
   $church_id = $request->getParam('church_id');

   $first_name = $request->getParam('first_name');
   $last_name = $request->getParam('last_name');
   $email = $request->getParam('email');
   $phone = $request->getParam('phone');
   $address = $request->getParam('address');
   $city = $request->getParam('city');
   $postal_code = $request->getParam('postal_code');
   $profile_picture = $request->getParam('profile_picture');
   $birth_date = $request->getParam('birth_date');
   $gender = $request->getParam('gender');
   $marital_status = $request->getParam('marital_status');
   $married_since = $request->getParam('married_since');
   $guest_since = $request->getParam('guest_since');
   $member_since = $request->getParam('member_since');
   $exelerate_id = $request->getParam('exelerate_id');

   /*Impersonate*/
   $impersonate = $request->getParam('impersonate');
   $impersonate_id = $request->getParam('impersonate_id');
   $impersonate_role = $request->getParam('impersonate_role');

   $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
   $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
   $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);

   $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
   $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: role_id",
               "status"=>500)));
   } else if(empty($cell_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: cell_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: church_id",
               "status"=>500)));
   } else if(empty($email)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: email",
               "status"=>500)));
   } else if(empty($first_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: first_name",
               "status"=>500)));
    } else if(empty($last_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: last_name",
               "status"=>500)));
    } else if(empty($phone)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: phone",
               "status"=>500)));
    } else if(empty($address)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: address",
               "status"=>500)));
    } else if(empty($city)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: city",
               "status"=>500)));
    } else if(empty($postal_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: postal_code",
               "status"=>500)));
    } else if(empty($birth_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: birth_date",
               "status"=>500)));
     } else if(empty($gender)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: gender",
               "status"=>500)));
    } else if(empty($marital_status)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: marital_status",
               "status"=>500)));
    } else if(empty($guest_since)){
      return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                          "message"=>"Missing parameter: guest_since",
                          "status"=>500)));
    }else if(empty($member_since)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: member_since",
               "status"=>500)));
    } else if(empty($exelerate_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: exelerate_id",
               "status"=>500)));
    }

    // Validations depending on the parameters sent
    if($gender != 'm' && $gender != 'f'){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type" => "gender",
                "message"=>"Debe ingresar un gÃ©nero vÃ¡lido",
                "status"=>422)));
    } else if(!$valid_email){
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type" => "email",
               "message"=>"Debes ingresar un email vÃ¡lido.",
               "status"=>422)));
    } else if(!$valid_guest){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_guest",
                  "message"=>"Debes ingresar una fecha de invitado vÃ¡lida.",
                  "status"=>422)));
    } else if(!$valid_member){
        return $response->withStatus(500)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                               "type" => "valid_member",
                               "message"=>"Debes ingresar una fecha de miembro vÃ¡lida.",
                               "status"=>500)));
    } else if(!$valid_birthdate){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_birthdate",
                  "message"=>"Debes ingresar una fecha de nacimiento vÃ¡lida.",
                  "status"=>422)));
    } else if($marital_status != 'M' && $marital_status != 'S'){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type" => "marital_status",
                "message"=>"Debe ingresar un estado civil vÃ¡lido",
                "status"=>422)));
    }

    if($marital_status == 'M'){
      if(!$valid_married){
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type" => "valid_married",
                    "message"=>"Debes ingresar una fecha de casado vÃ¡lida",
                    "status"=>422)));
      }
    }


    /*Impersonate*/
    if ($impersonate) {
      
      if ($impersonate != '1') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"impersonate_not_valid",
                  "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                  "status"=>422)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_role",
                 "status"=>500)));
     }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {

       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

    }

    // validate user
    $pre_s = $con->prepare("SELECT *
                             FROM user
                             WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1' AND status = '1'", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
    $pre_s->execute($values_s);
    $result_s = $pre_s->fetch();

    if (!$result_s) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"user_doesnt_exist",
                  "message"=>"El usuario no existe.",
                  "status"=>422)));
    }

    if ($role_id != '5') {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"without_permission",
                  "message"=>"No posee permisos para agregar invitado.",
                  "status"=>422)));
    }


    $first_name_leader = $result_s['first_name'];
    $last_name_leader = $result_s['last_name'];

    $pre_cell = $con->prepare("SELECT *
                             FROM groups_cells
                             WHERE id = :cell_id AND church_id = :church_id AND leader = :user_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_cell = array(':cell_id' => $cell_id, ':church_id' => $church_id, ':user_id' => $user_id);
    $pre_cell->execute($values_cell);
    $result_cell = $pre_cell->fetch();

    /*verified cell*/
    if (!$result_cell) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"cell_doesnt_exist",
                  "message"=>"La cÃ©lula no existe.",
                  "status"=>422)));
    }

    $final_d = $result_cell['district_code'];
    $final_z = $result_cell['zone_code'];
    $final_s = $result_cell['sector_code'];
    $final_c = $result_cell['cell_code'];
    $sector_idf = $result_cell['sector_id'];

    // validate email
    if ($email) {
      $pre_em = $con->prepare("SELECT *
                               FROM members_cells
                               WHERE email = :email AND church_id = :church_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_em = array(':email' => $email, ':church_id' => $church_id);
      $pre_em->execute($values_em);
      $result_em = $pre_em->fetch();

      if ($result_em) {
        return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                      "type"=>"email_already_exists",
                      "message"=>"El correo ingresado ya existe.",
                      "status"=>422)));
      }
    }

    // validate exelerate_id
    $pre_ex = $con->prepare("SELECT *
                             FROM members_cells
                             WHERE exelerate_id = :exelerate_id AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_ex = array(':exelerate_id' => $exelerate_id, ':church_id' => $church_id);
    $pre_ex->execute($values_ex);
    $result_ex = $pre_ex->fetch();

    if ($result_ex) {
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                          "type"=>"exelerate_id",
                          "message"=>"El exelerate id ya existe.",
                          "status"=>422)));

    }
    
    /*obtain zone id for records*/
    $pre_sec = $con->prepare("SELECT *
                             FROM groups_sectors  
                             WHERE id = :sector_idf AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_sec = array(':sector_idf' => $sector_idf, ':church_id' => $church_id);
    $pre_sec->execute($values_sec);
    $result_sec = $pre_sec->fetch();

    $zone_idf = $result_sec['zone_id'];

    /*obtain district id for records*/
    $pre_zon = $con->prepare("SELECT *
                             FROM groups_zones  
                             WHERE id = :zone_idf AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_zon = array(':zone_idf' => $zone_idf, ':church_id' => $church_id);
    $pre_zon->execute($values_zon);
    $result_zon = $pre_zon->fetch();

    $dis_idf = $result_zon['district_id'];

    /*General process to add guest*/

    $final_date = date("Y-m-d H:i:s");

    /*insert member*/
    $pre = $con->prepare("INSERT INTO members_cells (`cell_id`, `church_id`, `first_name`,`last_name`,`email`,`phone`,`profile_picture`,`address`,`postal_code`,`city`,`gender`,`birth_date`,`marital_status`,`married_since`,`guest_since`,`exelerate_id`,`member_since`,`role`,`active`,`is_complete`,`block`,`created_at`, `updated_at`) VALUES (:cell_id, :church_id,:first_name,:last_name,:email,:phone,:profile_picture,:address,:postal_code,:city,:gender,:birth_date,:marital_status,:married_since,:guest_since,:exelerate_id,:member_since,'2','1','0','0','$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(
        ':cell_id' => $cell_id, 
        ':church_id' => $church_id,
        ':first_name' => $first_name,
        ':last_name' => $last_name,
        ':email' => $email,
        ':phone' => $phone,
        ':profile_picture' => $profile_picture,
        ':address' => $address,
        ':postal_code' => $postal_code,
        ':city' => $city,
        ':gender' => $gender,
        ':birth_date' => $birth_date,
        ':marital_status' => $marital_status,
        ':guest_since' => $guest_since,
        ':exelerate_id' => $exelerate_id,
        ':member_since' => $member_since,
        ':married_since' => $married_since);

    $result = $pre->execute($values);

    $id_m = $con->lastInsertId();


    if($result){

      // get active report this week to save the record of the new member
      $pre_report = $con->prepare("SELECT id, name, creation_date FROM reports WHERE YEARWEEK(creation_date)=YEARWEEK(NOW()) AND cell_id = :cell_id", 
                               array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_report = array(':cell_id' => $cell_id);
      $pre_report->execute($values_report);
      $result_report = $pre_report->fetch();

      if ($result_report) {
        $pre_details = $con->prepare("INSERT INTO reports_details (`cell_group`, `doctrine`, `celebration`,`salvations`,`baptized`,`scheduled_visits`,`report_id`,`member_id`,`user_id`,`assigned`,`created_at`, `updated_at`) VALUES ('0', '0','0','0','0','0',:report_id,:id_m,NULL,'0', '$final_date', '$final_date')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_details = array(
          ':report_id' => $result_report['id'],
          ':id_m' => $id_m
          );

        $result_details = $pre_details->execute($values_details);
      }
      

      /*************** ACTIVITIES ***********************/

      $en_message = " *" . $first_name . " " . $last_name . "* became a cell member";
      $es_message = " *" . $first_name . " " . $last_name . "* se convirtiÃ³ en un miembro de cÃ©lula";

      /*Activity Became a guest (Guest)*/ 
      $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_act = array(
          ':es_message' => $es_message, 
          ':en_message' => $en_message, 
          ':id_m' => $id_m,
          ':final_date' => $final_date);

      $result_act = $pre_act->execute($values_act);


      /*Activity Added to a cell group (Cell Member)*/
      $en_me = " *" . $first_name . " " . $last_name . "* added to a cell group D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;
      $es_me= " *" . $first_name . " " . $last_name . "* agregado a cÃ©lula D" . $final_d . " Z" . $final_z . " S" . $final_s . " C" . $final_c;

      $pre_add = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me, :en_me,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_add = array(
          ':es_me' => $es_me, 
          ':en_me' => $en_me,
          ':id_m' => $id_m,
          ':final_date' => $final_date);

      $result_add = $pre_add->execute($values_add);


      if ($impersonate) {
       
        $roles = getRole($impersonate_role);

        $role_name = $roles['role_name'];
        $role_name_es = $roles['role_name_es'];

        $imperson = "* (Impersonate)";
        $imperson_es = "* (Impersonado)";

        /*Activity Added a new cell member (Leader)*/
        $en_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " added a new cell member: " . $first_name . " " . $last_name;
        $es_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

        $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_actm = array(
            ':es_mess' => $es_mess,
            ':en_mess' => $en_mess,
            ':user_id' => $impersonate_id,
            ':final_date' => $final_date);

        $result_actm = $pre_actm->execute($values_actm);

        /*** ACTIVITY GROUPS ***/

        /*Activity The leader added a new cell member (Cell Group)*/
        $en_me2 = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " added a new cell member: " . $first_name . " " . $last_name;
        $es_me2= $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

      }else{

        /*Activity Added a new cell member (Leader)*/
        $en_mess = " *" . $first_name_leader . " " . $last_name_leader . "* added a new cell member: " . $first_name . " " . $last_name;
        $es_mess = " *" . $first_name_leader . " " . $last_name_leader . "* agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;

        /*** ACTIVITY GROUPS ***/

        /*Activity The leader added a new cell member (Cell Group)*/
        $en_me2 = " *" . $first_name_leader . " " . $last_name_leader . "* added a new cell member: " . $first_name . " " . $last_name;
        $es_me2= " *" . $first_name_leader . " " . $last_name_leader . "* agregÃ³ un nuevo miembro de cÃ©lula: " . $first_name . " " . $last_name;
      }

      /*Activity leader added a new guest*/
      $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_date, :final_date)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_act_lead = array(
          ':es_mess' => $es_mess,
          ':en_mess' => $en_mess,
          ':user_id' => $user_id,
          ':final_date' => $final_date);

      $result_act_lead = $pre_act_lead->execute($values_act_lead);


      /*** ACTIVITY GROUPS ***/

      /*Activity The leader added a new guest (Cell Group)*/
      $pre_add2 = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_me2, :en_me2,NULL,NULL,NULL,:cell_id,NULL,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_add2 = array(
          ':es_me2' => $es_me2, 
          ':en_me2' => $en_me2,
          ':cell_id' => $cell_id,
          ':final_d' => $final_date);

      $result_add2 = $pre_add2->execute($values_add2);

      return $response->withStatus(200)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('response' => 'Miembro guardado con Ã©xito'));
        
    }else{   
        return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                              "status"=>422)));
    }

    
 } catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// member profile
$app->get('/members/cell-members/profile', function ($request,$response) {

  try{
   $con = $this->db;
   $user_id = $request->getParam('user_id');
   $role_id = $request->getParam('role_id');
   $church_id = $request->getParam('church_id');
   $member_id = $request->getParam('member_id');

   if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user_id",
               "status"=>500)));
   } else if(empty($role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role_id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church_id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: member_id",
               "status"=>500)));
   } 

   /*verify if user exist*/
   $pre_i = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
   $pre_i->execute($values_i);
   $result_i = $pre_i->fetch();

   if (!$result_i) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
   }

    $pre_gu = $con->prepare("SELECT *
                             FROM members_cells
                             WHERE id = :member_id AND role = '2' AND church_id = :church_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_gu = array(':member_id' => $member_id, ':church_id' => $church_id);
    $pre_gu->execute($values_gu);
    $result_gu = $pre_gu->fetch();

    if (!$result_gu) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"member_doesnt_exist",
                  "message"=>"El miembro no existe.",
                  "status"=>422)));
    }

    // General process
    $pre = $con->prepare("SELECT id, cell_id, CONCAT(IFNULL(first_name,''),' ',IFNULL(last_name,'')) AS full_name, first_name, last_name, email, phone, profile_picture, address, postal_code, city, gender, birth_date, role, marital_status, married_since, guest_since, member_since, exelerate_id, is_complete FROM members_cells WHERE id = :member_id AND church_id = :church_id",array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values = array(':member_id' => $member_id, ':church_id' => $church_id);
    $pre->execute($values);
    $result = $pre->fetch();

    if ($result) {

      $cell_id = $result['cell_id'];

      // Select cell codes
      $sql_gro = "SELECT cell_code, sector_code, zone_code, district_code, (SELECT CONCAT(IFNULL(first_name,''),' ',IFNULL(last_name,'')) FROM user where id = groups_cells.leader) as leader FROM groups_cells WHERE id = :cell_id AND church_id = :church_id";
      $pre_gro  = $con->prepare($sql_gro, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_gro = array(
        ':cell_id' => $cell_id,
        ':church_id' => $church_id
        );
      
      $result_gro = $pre_gro->execute($values_gro);
      $result_gro = $pre_gro->fetch();

      // get steps
      $get_steps = "SELECT members_cells_steps.step_id,steps.step_name,members_cells_steps.step_date
              FROM members_cells_steps, steps
              WHERE members_cells_steps.step_id = steps.step_id AND member_id = $member_id ORDER BY step_id";

      $steps = null;

      foreach ($con->query($get_steps) as $row) {
        $steps[] = $row;
      }


      $finalObject = array(
        "member_id" => $result['id'],
        "full_name" => $result['full_name'],
        "first_name" => $result['first_name'],
        "last_name" => $result['last_name'],
        "email" => $result['email'],
        "phone" => $result['phone'],
        "address" => $result['address'],
        "postal_code" => $result['postal_code'],
        "city" => $result['city'],
        "gender" => $result['gender'],
        "birth_date" => $result['birth_date'],
        "marital_status" => $result['marital_status'],
        "married_since" => $result['married_since'],
        "guest_since" => $result['guest_since'],
        "member_since" => $result['member_since'],
        "exelerate_id" => $result['exelerate_id'],
        "profile_picture" => $result['profile_picture'],
        "role_id" => $result['role'],
        "is_complete" => $result['is_complete'],
        'cell_code' => $result_gro['cell_code'],
        'sector_code' => $result_gro['sector_code'],
        'zone_code' => $result_gro['zone_code'],
        'district_code' => $result_gro['district_code'],
        'leader' => $result_gro['leader'],
        "steps" => $steps,
        "total_steps" => '4'
      );

      return $response->withStatus(200)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('response' => $finalObject));
    }else{   
      return $response->withStatus(422)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('error' => array(
                                "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                "status"=>422)));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// edit member
$app->put('/members/cell-members/edit', function ($request,$response) {

  try{

     $con = $this->db;
     $user_id = $request->getParam('user_id');
     $role_id = $request->getParam('role_id');
     $church_id = $request->getParam('church_id');
     $member_id = $request->getParam('member_id');
     $first_name = $request->getParam('first_name');
     $last_name = $request->getParam('last_name');
     $email = $request->getParam('email');
     $phone = $request->getParam('phone');
     $address = $request->getParam('address');
     $city = $request->getParam('city');
     $postal_code = $request->getParam('postal_code');
     $profile_picture = $request->getParam('profile_picture');
     $birth_date = $request->getParam('birth_date');
     $gender = $request->getParam('gender');
     $marital_status = $request->getParam('marital_status');
     $married_since = $request->getParam('married_since');
     $guest_since = $request->getParam('guest_since');
     $member_since = $request->getParam('member_since');
     $exelerate_id = $request->getParam('exelerate_id');

     /*Impersonate*/
     $impersonate = $request->getParam('impersonate');
     $impersonate_id = $request->getParam('impersonate_id');
     $impersonate_role = $request->getParam('impersonate_role');

     $valid_email = preg_match("#(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)#", $email);
     $valid_birthdate = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$birth_date);
     $valid_married = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$married_since);
     $valid_guest = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$guest_since);
     $valid_member = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$member_since);

     if(empty($user_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: user_id",
                 "status"=>500)));
     } else if(empty($role_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: role_id",
                 "status"=>500)));
     } else if(empty($church_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: church_id",
                 "status"=>500)));
     } else if(empty($member_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: member_id",
                 "status"=>500)));
     } else if(empty($first_name)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: first_name",
                 "status"=>500)));
      } else if(empty($last_name)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: last_name",
                 "status"=>500)));
      } else if(empty($phone)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: phone",
               "status"=>500)));
    } else if(empty($address)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: address",
               "status"=>500)));
    } else if(empty($city)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: city",
               "status"=>500)));
    } else if(empty($postal_code)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: postal_code",
               "status"=>500)));
    } else if(empty($birth_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: birth_date",
               "status"=>500)));
     } else if(empty($gender)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: gender",
               "status"=>500)));
    } else if(empty($marital_status)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: marital_status",
               "status"=>500)));
    } else if(empty($guest_since)){
      return $response->withStatus(500)
                      ->withHeader('Content-Type', 'application/json')
                       ->withJson(array('error' => array(
                         "type"=>"required",
                          "message"=>"Missing parameter: guest_since",
                          "status"=>500)));
    }else if(empty($member_since)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: member_since",
               "status"=>500)));
    } else if(empty($exelerate_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"Missing parameter: exelerate_id",
               "status"=>500)));
    }

    // Validations depending on the parameters sent
    if($gender != 'm' && $gender != 'f'){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type" => "gender",
                "message"=>"Debe ingresar un gÃ©nero vÃ¡lido",
                "status"=>422)));
    } else if(!$valid_email){
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type" => "email",
               "message"=>"Debes ingresar un email vÃ¡lido.",
               "status"=>422)));
    } else if(!$valid_guest){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_guest",
                  "message"=>"Debes ingresar una fecha de invitado vÃ¡lida.",
                  "status"=>422)));
    } else if(!$valid_member){
        return $response->withStatus(500)
                        ->withHeader('Content-Type', 'application/json')
                        ->withJson(array('error' => array(
                               "type" => "valid_member",
                               "message"=>"Debes ingresar una fecha de miembro vÃ¡lida.",
                               "status"=>500)));
    } else if(!$valid_birthdate){
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type" => "valid_birthdate",
                  "message"=>"Debes ingresar una fecha de nacimiento vÃ¡lida.",
                  "status"=>422)));
    } else if($marital_status != 'M' && $marital_status != 'S'){
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                "type" => "marital_status",
                "message"=>"Debe ingresar un estado civil vÃ¡lido",
                "status"=>422)));
    }

    if($marital_status == 'M'){
      if(!$valid_married){
          return $response->withStatus(422)
                  ->withHeader('Content-Type', 'application/json')
                  ->withJson(array('error' => array(
                    "type" => "valid_married",
                    "message"=>"Debes ingresar una fecha de casado vÃ¡lida",
                    "status"=>422)));
      }
    }


     /*Impersonate*/
    if ($impersonate) {
       
      if ($impersonate != '1') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                  "type"=>"impersonate_not_valid",
                  "message"=>"ParÃ¡metro impersonate no es vÃ¡lido",
                  "status"=>422)));
      }else if(empty($impersonate_id)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_id",
                 "status"=>500)));
     } else if(empty($impersonate_role)){
       return $response->withStatus(500)
               ->withHeader('Content-Type', 'application/json')
               ->withJson(array('error' => array(
                 "type"=>"required",
                 "message"=>"ParÃ¡metro faltante: impersonate_role",
                 "status"=>500)));
     }

      $pre_imper = $con->prepare("SELECT * FROM user WHERE id = :impersonate_id AND rol = :impersonate_role AND church_id = :church_id AND status = '1' AND verified_account = '1'", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      $values_imper = array(':impersonate_id' => $impersonate_id,':impersonate_role' => $impersonate_role, ':church_id' => $church_id);
      $pre_imper->execute($values_imper);
      $result_imper = $pre_imper->fetch();

      if (empty($result_imper)) {
       return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                         "type"=>"impersonate_not_exist",
                         "message"=>"Usuario impersonado con este rol no existe",
                         "status"=>422)));
      }


      $name_imper = $result_imper['first_name'];
      $last_name_imper = $result_imper['last_name'];

     }


     /*verify if user exist*/
     $pre_i = $con->prepare("SELECT *
                              FROM user
                              WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND status = '1'", 
                              array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

     $values_i = array(':user_id' => $user_id,':role_id' => $role_id, ':church_id' => $church_id);
     $pre_i->execute($values_i);
     $result_i = $pre_i->fetch();

     if (!$result_i) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"user_doesnt_exist",
                  "message"=>"El usuario no existe.",
                  "status"=>422)));
     }

      /*verify if role leader*/
      if ($role_id != '5') {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"without_permission",
                    "message"=>"No posee permisos para editar invitado.",
                    "status"=>422)));
      }

      $first_name_leader = $result_i['first_name'];
      $last_name_leader = $result_i['last_name'];

       /*verify if guest exist*/
       $pre_gu = $con->prepare("SELECT *
                                FROM members_cells
                                WHERE id = :member_id AND role = '2' AND church_id = :church_id", 
                                array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

       $values_gu = array(':member_id' => $member_id, ':church_id' => $church_id);
       $pre_gu->execute($values_gu);
       $result_gu = $pre_gu->fetch();

       if (!$result_gu) {
        return $response->withStatus(422)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('error' => array(
                    "type"=>"member_doesnt_exist",
                    "message"=>"El miembro no existe.",
                    "status"=>422)));
       }

       // validate email
       if ($email) {
         $pre_em = $con->prepare("SELECT *
                                  FROM members_cells
                                  WHERE email = :email AND id != :member_id AND church_id = :church_id", 
                                  array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

         $values_em = array(':email' => $email, ':member_id' => $member_id, ':church_id' => $church_id);
         $pre_em->execute($values_em);
         $result_em = $pre_em->fetch();

         if ($result_em) {
           return $response->withStatus(422)
                     ->withHeader('Content-Type', 'application/json')
                     ->withJson(array('error' => array(
                         "type"=>"email_already_exists",
                         "message"=>"El correo ingresado ya existe.",
                         "status"=>422)));
         }
        }

        // validate exelerate_id
        $pre_ex = $con->prepare("SELECT *
                                 FROM members_cells
                                 WHERE exelerate_id = :exelerate_id AND id != :member_id AND church_id = :church_id", 
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values_ex = array(':exelerate_id' => $exelerate_id, ':member_id' => $member_id, ':church_id' => $church_id);
        $pre_ex->execute($values_ex);
        $result_ex = $pre_ex->fetch();

        if ($result_ex) {
          return $response->withStatus(422)
                          ->withHeader('Content-Type', 'application/json')
                          ->withJson(array('error' => array(
                              "type"=>"exelerate_id",
                              "message"=>"El exelerate id ya existe.",
                              "status"=>422)));

        }
        

        /*General process to edit member*/

        $final_d = date("Y-m-d H:i:s");

        $pre = $con->prepare("UPDATE members_cells SET first_name = :first_name,
                               last_name = :last_name,
                               email = :email,
                               phone = :phone,
                               address = :address,
                               postal_code = :postal_code,
                               city = :city,
                               birth_date = :birth_date,
                               profile_picture= :profile_picture,
                               gender= :gender,
                               marital_status= :marital_status,
                               married_since= :married_since,
                               guest_since= :guest_since,
                               member_since= :member_since,
                               exelerate_id= :exelerate_id,
                               updated_at= :updated_at
                               WHERE id = :member_id",
                                 array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

        $values = array(
          ':member_id' => $member_id, 
          ':first_name' => $first_name,
          ':last_name' => $last_name,
          ':email' => $email,
          ':profile_picture' => $profile_picture,
          ':phone' => $phone,
          ':address' => $address,
          ':postal_code' => $postal_code,
          ':city' => $city,
          ':birth_date' => $birth_date,
          ':gender' => $gender,
          ':marital_status' => $marital_status,
          ':guest_since' => $guest_since,
          ':member_since' => $member_since,
          ':exelerate_id' => $exelerate_id,
          ':married_since' => $married_since,
          ':updated_at' => $final_d);

        $result = $pre->execute($values);

        if($result){

          // check if have all steps
          $pre_steps = $con->prepare("SELECT count(step_id) as steps FROM members_cells_steps WHERE member_id = :member_id AND step_id in (1, 2)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_steps = array(':member_id' => $member_id);
          $pre_steps->execute($values_steps);
          $result_ex = $pre_steps->fetch();

          $total_steps = null;

          if ($result_ex['steps'] == '2') {
            $total_steps = '2';
          }

          // check if have all the complete information
          if ($marital_status == 'M') {
            $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
            if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $married_since && $guest_since && $member_since && $exelerate_id && $profile_picture && $gender && $email && $total_steps) {
              // update complete
              $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                     WHERE id = :user_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
            }

          }else{
            $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            if ($first_name && $last_name && $phone && $address && $postal_code && $city && $birth_date && $marital_status && $guest_since && $member_since && $exelerate_id && $profile_picture && $gender && $email && $total_steps) {
              // update complete
              $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                     WHERE id = :user_id",
                                       array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
            }

          }

          $values_complete = array(
            ':user_id' => $member_id);

          $result_complete = $pre_complete->execute($values_complete);


          /*************** ACTIVITIES ***********************/

          /*Activity Profile updates (Guest)*/
          $en_message = " *" . $first_name_leader . " " . $last_name_leader . "* edited a cell member: " . $first_name . " " . $last_name;
          $es_message = " *" . $first_name_leader . " " . $last_name_leader . "* editÃ³ un miembro de cÃ©lula: " . $first_name . " " . $last_name;

          $pre_act = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_message, :en_message,NULL,NULL,NULL,NULL,NULL, :id_m,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act = array(
              ':es_message' => $es_message, 
              ':en_message' => $en_message, 
              ':id_m' => $member_id,
              ':final_d' => $final_d);

          $result_act = $pre_act->execute($values_act);


          if ($impersonate) {
           
            $roles = getRole($impersonate_role);

            $role_name = $roles['role_name'];
            $role_name_es = $roles['role_name_es'];

            $imperson = "* (Impersonate)";
            $imperson_es = "* (Impersonado)";

            /*Activity impersonate Edited a Cell member/guestâs profile (Leader)*/
            $en_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson . " edited a cell member: " . $first_name . " " . $last_name;
            $es_mess = $role_name . " *" . $name_imper . " " . $last_name_imper . $imperson_es . " editÃ³ un miembro de cÃ©lula: " . $first_name . " " . $last_name;

            $pre_actm = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

            $values_actm = array(
                ':es_mess' => $es_mess,
                ':en_mess' => $en_mess,
                ':user_id' => $impersonate_id,
                ':final_d' => $final_d);

            $result_actm = $pre_actm->execute($values_actm);

          }else{
            /*Activity Edited a Cell member/guestâs profile (Leader)*/
            $en_mess = " *" . $first_name_leader . " " . $last_name_leader . "* edited a cell member: " . $first_name . " " . $last_name;
            $es_mess = " *" . $first_name_leader . " " . $last_name_leader . "* editÃ³ un miembro de cÃ©lula: " . $first_name . " " . $last_name;
          }

          /*Activity Edited a Cell member/guestâs profile (Leader)*/
          $pre_act_lead = $con->prepare("INSERT INTO activity (`es_message`, `en_message`, `district_id`,`zone_id`,`sector_id`,`cell_id`,`user_id`,`member_id`,`is_comment`,`id_comment_user_timeline`,`id_comment_group_timeline`,`created_at`,`updated_at`) VALUES (:es_mess, :en_mess,NULL,NULL,NULL,NULL,:user_id,NULL,'0',NULL,NULL,:final_d, :final_d)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

          $values_act_lead = array(
              ':es_mess' => $es_mess,
              ':en_mess' => $en_mess,
              ':user_id' => $user_id,
              ':final_d' => $final_d);

          $result_act_lead = $pre_act_lead->execute($values_act_lead);

          return $response->withStatus(200)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('response' => 'Miembro guardado con Ã©xito'));
        }else{   
            return $response->withStatus(422)
                            ->withHeader('Content-Type', 'application/json')
                            ->withJson(array('error' => array(
                                "message"=>"Ha ocurrido un problema, vuelve a intentarlo nuevamente.",
                                "status"=>422)));
        }


 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});

// assign steps
$app->post('/members/cell-members/assign-steps', function ($request,$response) {

  try{

    $con = $this->db;
    $user_id = $request->getParam('user_id');
    $role_id = $request->getParam('role_id');
    $church_id = $request->getParam('church_id');
    $member_id = $request->getParam('member_id');
    $step_id = $request->getParam('step_id');
    $step_name = $request->getParam('step_name');
    $step_date = $request->getParam('step_date');

    if(empty($user_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: user id",
               "status"=>500)));
   } else if(!preg_match("/^[0-9]+$/i", $role_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: role id",
               "status"=>500)));
   } else if(empty($church_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: church id",
               "status"=>500)));
   } else if(empty($member_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: guest id",
               "status"=>500)));
   } else if(empty($step_id)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step id",
               "status"=>500)));
   }else if(empty($step_name)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step name",
               "status"=>500)));
   }else if(empty($step_date)){
     return $response->withStatus(500)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
               "type"=>"required",
               "message"=>"ParÃ¡metro faltante: step date",
               "status"=>500)));
   }

   $valid_date = preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$step_date);

   // if user exists
   $pre_s = $con->prepare("SELECT *
                            FROM user
                            WHERE id = :user_id AND rol = :role_id AND church_id = :church_id AND verified_account = '1'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_s = array(':user_id' => $user_id, ':role_id' => $role_id, ':church_id' => $church_id);
   $pre_s->execute($values_s);
   $result_s = $pre_s->fetch();

   if (!$result_s) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"user_doesnt_exist",
                "message"=>"El usuario no existe.",
                "status"=>422)));
   }

   if ($role_id != '5') {
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "type"=>"without_permission",
                 "message"=>"No posee permisos para asignar pasos a invitado.",
                 "status"=>422)));
   }

   // Obtain cell_id of user
   $pre_cell = $con->prepare("SELECT *
                            FROM groups_cells
                            WHERE leader = :user_id AND church_id = :church_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_cell = array(':user_id' => $user_id,':church_id' => $church_id);
   $pre_cell->execute($values_cell);
   $result_cell = $pre_cell->fetch();

   if (!$result_cell) {
     return $response->withStatus(422)
             ->withHeader('Content-Type', 'application/json')
             ->withJson(array('error' => array(
                 "type"=>"doesnt_have_cell",
                 "message"=>"No posee una cÃ©lula asignada.",
                 "status"=>422)));
   }

   $cell_id = $result_cell['id'];

   // validate member
   $pre_member = $con->prepare("SELECT *
                           FROM members_cells
                           WHERE id = :member_id AND church_id = :church_id AND cell_id = :cell_id AND role = '2'", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_member = array(':member_id' => $member_id,':church_id' => $church_id,':cell_id' => $cell_id);
   $pre_member->execute($values_member);
   $result_member = $pre_member->fetch();

   if (!$result_member) {
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
                "type"=>"member_doesnt_exist",
                "message"=>"El miembro no existe.",
                "status"=>422)));
   }

   // if step exists
   $pre_step = $con->prepare("SELECT *
                            FROM steps
                            WHERE step_id = :step_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_step = array(':step_id' => $step_id);
   $pre_step->execute($values_step);
   $result_step = $pre_step->fetch();

   if(empty($result_step)){
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"step_doesnt_exist",
              "message"=>"El paso que intenta ingresar no existe.",
              "status"=>422)));
   }

   if(!$valid_date){
    return $response->withStatus(422)
            ->withHeader('Content-Type', 'application/json')
            ->withJson(array('error' => array(
              "type"=>"invalid_date",
              "message"=>"Ingrese una fecha vÃ¡lida.",
              "status"=>422)));
   }

   if ($step_id != '1') {
    $previous_step = $step_id - 1;

    $user_prev = $con->prepare("SELECT *
                             FROM members_cells_steps
                             WHERE step_id = :step_id AND member_id = :member_id", 
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_prev = array(':step_id' => $previous_step,':member_id' => $member_id);
    $user_prev->execute($values_prev);
    $result_prev = $user_prev->fetch();

    if (!$result_prev) {
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => array(
                  "type"=>"previous_step",
                  "message"=>"Debe completar su paso previo, para poder ingresar este nuevo paso.",
                  "status"=>422)));
    }

   }

   // verify if member is already assigned the step
   $user_steps = $con->prepare("SELECT *
                            FROM members_cells_steps
                            WHERE step_id = :step_id AND member_id = :member_id", 
                            array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

   $values_user = array(':step_id' => $step_id,':member_id' => $member_id);
   $user_steps->execute($values_user);
   $result_user = $user_steps->fetch();

   $final_d = date("Y-m-d H:i:s");

   if ($result_user) {
    // if already have it, it will only be edited
    $assign_step = $con->prepare("UPDATE members_cells_steps SET step_date = :step_date, updated_at = :final_d WHERE step_id = :step_id AND member_id = :member_id",
                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign = array(
      ':member_id' => $member_id, 
      ':step_id' => $step_id,
      ':final_d' => $final_d,
      ':step_date' => $step_date);

    $result_assign = $assign_step->execute($val_assign);

   }else{
    // new step will be created
    $assign_step = $con->prepare("INSERT INTO members_cells_steps (`member_id`, `name`, `step_date`,`step_id`,`created_at`, `updated_at`) VALUES (:member_id, :name,:step_date,:step_id, '$final_d', '$final_d')", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $val_assign = array(
      ':member_id' => $member_id,
      ':name' => $step_name,
      ':step_date' => $step_date,
      ':step_id' => $step_id
      );

    $result_assign = $assign_step->execute($val_assign);
   }


   if ($result_assign) {

    // check if have all steps
    $pre_steps = $con->prepare("SELECT count(step_id) as steps FROM members_cells_steps WHERE member_id = :member_id AND step_id in (1, 2)", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

    $values_steps = array(':member_id' => $member_id);
    $pre_steps->execute($values_steps);
    $result_ex = $pre_steps->fetch();

    $total_steps = null;

    if ($result_ex['steps'] == '2') {
      $total_steps = '2';
    }

    // check if have all the complete information
    if ($result_member['marital_status'] == 'M') {
      $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($result_member['first_name'] && $result_member['last_name'] && $result_member['phone'] && $result_member['address'] && $result_member['postal_code'] && $result_member['city'] && $result_member['birth_date'] && $result_member['marital_status'] && $result_member['married_since'] && $result_member['guest_since'] && $result_member['member_since'] && $result_member['exelerate_id'] && $result_member['profile_picture'] && $result_member['gender'] && $result_member['email'] && $total_steps) {
        // update complete
        $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }
    }else{
      $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '0'
                                   WHERE id = :user_id",
                                     array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

      if ($result_member['first_name'] && $result_member['last_name'] && $result_member['phone'] && $result_member['address'] && $result_member['postal_code'] && $result_member['city'] && $result_member['birth_date'] && $result_member['marital_status'] && $result_member['guest_since'] && $result_member['member_since'] && $result_member['exelerate_id'] && $result_member['profile_picture'] && $result_member['gender'] && $result_member['email'] && $total_steps) {
        // update complete
        $pre_complete = $con->prepare("UPDATE members_cells SET is_complete = '1'
                                           WHERE id = :user_id",
                                             array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
      }
    }

    $values_complete = array(
      ':user_id' => $member_id);

    $result_complete = $pre_complete->execute($values_complete);

    // obtain next step
    $next_step = $step_id + 1;
    
    return $response->withStatus(200)
                      ->withHeader('Content-Type', 'application/json')
                      ->withJson(array('response' => array( 'message' =>'Su paso ha sido guardado con Ã©xito.','next_step' => (string)$next_step)));
   }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/******* TESTS ********/
$app->post('/send-mail', function ($request,$response) {

  try{

    $con = $this->db;
    $bodyMail = $request->getParam('bodyMail');
    $email = $request->getParam('email');
    $subject = $request->getParam('subject');

    if(sendEmail($bodyMail,$email,$subject)){
        return $response->withStatus(200)
                ->withHeader('Content-Type', 'application/json')
                ->withJson(array('response' => 'invitation_sent'));
    }else{
      return $response->withStatus(422)
              ->withHeader('Content-Type', 'application/json')
              ->withJson(array('error' => "invitation_not_sent"));
    }

 }
 catch(\Exception $ex){
   return $response->withJson(array('error' => array(
                "message"=> $ex->getMessage(),
                "status"=>422)),422);
 }

});


/*********** General functions ***********/

function sendEmail($bodyMail,$email,$subject){

  $url = "http://newcelulasapi.toolboxsv.com/general/send-mail";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "bodyMail=$bodyMail&email=$email&subject=$subject");
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');

  $result = curl_exec($ch);
  curl_close($ch);

  if ($result) {

    $obj = json_decode($result);

    if ($obj->type == 'sent') {
      return true;
    }else{
      return false;
    }

  }else{
    return false;
  }
  

  // $mail_c = new PHPMailer;                           
  // //Set PHPMailer to use SMTP.
  // $mail_c->isSMTP();          
  // //Set SMTP host name                          
  // $mail_c->Host = "smtp.gmail.com";
  // //Set this to true if SMTP host requires authentication to send email
  // $mail_c->SMTPAuth = true;                          
  // //Provide username and password     
  // // $mail_c->Username = "developerelaniin@gmail.com";                 
  // // $mail_c->Password = "prU@@bs10";
  // $mail_c->Username = "hola@cplusapp.com";                 
  // $mail_c->Password = "7L7RorYPxYAV2Cj";                           
  // //If SMTP requires TLS encryption then set it
  // $mail_c->SMTPSecure = "tls";                           
  // //Set TCP port to connect to 
  // $mail_c->Port = 587;                                   

  // $mail_c->CharSet = "UTF-8";
  // $mail_c->From = "hola@cplusapp.com";
  // $mail_c->FromName = "C+";

  // $mail_c->addAddress($email);

  // $mail_c->isHTML(true);

  // $mail_c->Subject = $subject;
  // $mail_c->Body = $bodyMail;
  // $mail_c->AltBody = $subject;

  // if($mail_c->send()){
  //     return true;
  // }else{
  //     return false;
  // }

}

function contactMail($email,$name,$subject,$message){

  $url = "http://newcelulasapi.toolboxsv.com/general/contact-mail";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "name=$name&email=$email&subject=$subject&message=$message");
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');

  $result = curl_exec($ch);
  curl_close($ch);

  if ($result) {

    $obj = json_decode($result);

    if ($obj->type == 'sent') {
      return true;
    }else{
      return false;
    }

  }else{
    return false;
  }


}


function moveUploadedChurch($directory, UploadedFile $uploadedFile)
{
    $extension = pathinfo($uploadedFile->getClientFilename(), PATHINFO_EXTENSION);
    $basename = bin2hex(random_bytes(8)); // see http://php.net/manual/en/function.random-bytes.php
    $filename = sprintf('%s.%0.8s', $basename, $extension);

    // $uploadedFile->moveTo($directory . DIRECTORY_SEPARATOR . $filename);
    $uploadedFile->moveTo($directory . DIRECTORY_SEPARATOR . $filename);

    return $filename;
}

/*function get role (activities)*/

function getRole($imper_role){

  if ($imper_role == '1') {
    $role_name = 'Senior Pastor';
    $role_name_es = 'Pastor Principal';
  } else if ($imper_role == '2') {
    $role_name = 'District Pastor';
    $role_name_es = 'Pastor de Distrito';
  } else if ($imper_role == '3') {
    $role_name = 'Zone Pastor';
    $role_name_es = 'Pastor de Zona';
  } else if ($imper_role == '4') {
    $role_name = 'Supervisor';
    $role_name_es = 'Supervisor';
  } else if ($imper_role == '5') {
    $role_name = 'Leader';
    $role_name_es = 'LÃ­der';
  } else if ($imper_role == '6') {
    $role_name = 'Administrator';
    $role_name_es = 'Administrador';
  } else if ($imper_role == '7') {
    $role_name = 'Owner';
    $role_name_es = 'Propietario';
  }

  return array('role_name' => $role_name, 'role_name_es' => $role_name_es);

}


/*RANKING FUNCTIONS*/

function generalDates($c_month, $c_year, $c_prev){

  if($c_month < 4){
    
    $first_m = $c_year . "-01";
    $second_m = $c_year . "-02";
    $third_m = $c_year . "-03";

    $start_date = new DateTime('first day of January');
    $end_date = new DateTime('last day of March');

    /*formating dates*/
    $initial_quarter = $start_date->format("Y-m-d H:i:s");
    $end_format = $end_date->format("Y-m-d");

    $final_quarter = $end_format . " 23:59:59";


    /*last period*/
    $first_p = (string)$c_prev . "-10";
    $second_p = (string)$c_prev . "-11";
    $third_p = (string)$c_prev . "-12";

    $start_date2 = new DateTime("first day of October " . (string)$c_prev);
    $end_date2 = new DateTime("last day of December " . (string)$c_prev);

    /*formating dates*/
    $initial_quarter2 = $start_date2->format("Y-m-d H:i:s");
    $end_format2 = $end_date2->format("Y-m-d");

    $final_quarter2 = $end_format2 . " 23:59:59";

    /*last period to compare growth*/
    $start_date_lg = (string)$c_prev . "-07-01 00:00:00";
    $end_date_lg = (string)$c_prev . "-09-30 23:59:59";

  } else if($c_month > 3 && $c_month <7){

    $first_m = $c_year . "-04";
    $second_m = $c_year . "-05";
    $third_m = $c_year . "-06";

    $start_date = new DateTime('first day of April');
    $end_date = new DateTime('last day of June');

    /*formating dates*/
    $initial_quarter = $start_date->format("Y-m-d H:i:s");
    $end_format = $end_date->format("Y-m-d");

    $final_quarter = $end_format . " 23:59:59";

    /*last period*/
    $first_p = $c_year . "-01";
    $second_p = $c_year . "-02";
    $third_p = $c_year . "-03";

    $start_date2 = new DateTime("first day of January");
    $end_date2 = new DateTime("last day of March");

    /*formating dates*/
    $initial_quarter2 = $start_date2->format("Y-m-d H:i:s");
    $end_format2 = $end_date2->format("Y-m-d");

    $final_quarter2 = $end_format2 . " 23:59:59";

    /*last period to compare growth*/
    $start_date_lg = (string)$c_prev . "-10-01 00:00:00";
    $end_date_lg = (string)$c_prev . "-12-31 23:59:59";

  } else if($c_month >6 && $c_month < 10){

    $first_m = $c_year . "-07";
    $second_m = $c_year . "-08";
    $third_m = $c_year . "-09";

    $start_date = new DateTime('first day of July');
    $end_date = new DateTime('last day of September');

    /*formating dates*/
    $initial_quarter = $start_date->format("Y-m-d H:i:s");
    $end_format = $end_date->format("Y-m-d");

    $final_quarter = $end_format . " 23:59:59";


    /*last period*/
    $first_p = $c_year . "-04";
    $second_p = $c_year . "-05";
    $third_p = $c_year . "-06";

    $start_date2 = new DateTime("first day of April");
    $end_date2 = new DateTime("last day of June");

    /*formating dates*/
    $initial_quarter2 = $start_date2->format("Y-m-d H:i:s");
    $end_format2 = $end_date2->format("Y-m-d");

    $final_quarter2 = $end_format2 . " 23:59:59";

    /*last period to compare growth*/
    $start_date_lg = $c_year . "-01-01 00:00:00";
    $end_date_lg = $c_year . "-03-31 23:59:59";

  } else if($c_month >9){

    $first_m = $c_year . "-10";
    $second_m = $c_year . "-11";
    $third_m = $c_year . "-12";

    $start_date = new DateTime('first day of October');
    $end_date = new DateTime('last day of December');

    /*formating dates*/
    $initial_quarter = $start_date->format("Y-m-d H:i:s");
    $end_format = $end_date->format("Y-m-d");

    $final_quarter = $end_format . " 23:59:59";

    /*last period*/
    $first_p = $c_year . "-07";
    $second_p = $c_year . "-08";
    $third_p = $c_year . "-09";

    $start_date2 = new DateTime("first day of July");
    $end_date2 = new DateTime("last day of September");

    /*formating dates*/
    $initial_quarter2 = $start_date2->format("Y-m-d H:i:s");
    $end_format2 = $end_date2->format("Y-m-d");

    $final_quarter2 = $end_format2 . " 23:59:59";

    /*last period to compare growth*/
    $start_date_lg = $c_year . "-04-01 00:00:00";
    $end_date_lg = $c_year . "-06-30 23:59:59";
  }


  return array('initial_quarter' => $initial_quarter, 'final_quarter' => $final_quarter, 'initial_quarter2' => $initial_quarter2, 'final_quarter2' => $final_quarter2, 'start_date_lg' => $start_date_lg, 'end_date_lg' => $end_date_lg, 'start_date' => $start_date, 'end_date' => $end_date, 'start_date2' => $start_date2, 'end_date2' => $end_date2);

}

/*function for general filters*/

// if member = leader 
function filterLeader($role_i, $filter_d, $filter_z, $filter_s, $parent_i, $child_i, $church_i){
  $filter_val = '';

  /*senior pastor*/
  if ($role_i == '1' || $role_i == '6' || $role_i == '7'){

    /*verify empty filter members*/
    if ($filter_d && empty($filter_z) && empty($filter_s)) {
          
      $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$filter_d' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    }else if($filter_d && $filter_z && empty($filter_s)){

      $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_z' AND district_id = '$filter_d' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    } else if($filter_d && $filter_z && $filter_s){

      $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_s' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_z' AND district_id = '$filter_d' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    }

  /*district pastor*/
  } else if ($role_i == '2') {

    /*verify empty filter members*/
    if (empty($filter_z) && empty($filter_s)) {
      $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where district_id = '$parent_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";
    }else{

      if ($filter_z && empty($filter_s)) {
          
        $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id FROM groups_zones where id = '$filter_z' AND district_id = '$parent_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

      }else if($filter_z && $filter_s){

        $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_s' AND zone_id IN (SELECT id FROM groups_zones where id = '$filter_z' AND district_id = '$parent_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

      }

    }
    
    /*zone pastor*/
  } else if ($role_i == '3') {
    
    /*verify empty filter members*/
    if (empty($filter_s)) {
      $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones WHERE id = '$parent_i' AND district_id = '$child_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";
    }else{

      $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$filter_s' AND zone_id IN (SELECT id from groups_zones WHERE id = '$parent_i' AND district_id = '$child_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    }

  /*supervisor*/
  } else if ($role_i == '4') {
    
    $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE sector_id IN (SELECT id from groups_sectors WHERE id = '$parent_i' AND zone_id = '$child_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

  /*leader*/
  } else if ($role_i == '5') {
    
    $filter_val = "AND groups_cells.id IN (SELECT id from groups_cells WHERE id = '$parent_i' AND sector_id = '$child_i' AND active = 1 AND church_id = '$church_i')";
  }

  return $filter_val;

}

// if member = supervisor 
function filterSupervisor($role_i, $filter_d, $filter_z, $parent_i, $child_i, $church_i){

  $filter_val = '';

  /*senior pastor*/
  if ($role_i == '1' || $role_i == '6' || $role_i == '7'){

    /*verify empty filter members*/
    if ($filter_d && empty($filter_z)) {
          
      $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones WHERE district_id = '$filter_d' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    }else if($filter_d && $filter_z){

      $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones WHERE id = '$filter_z' AND district_id = '$filter_d' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    }

  /*district pastor*/
  } else if ($role_i == '2') {

    /*verify empty filter members*/
    if (empty($filter_z)) {
      $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones WHERE district_id = '$parent_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";
    }else{
  
      $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones WHERE id = '$filter_z' AND district_id = '$parent_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

    }

  /*zone pastor*/
  } else if ($role_i == '3') {
    
      $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id IN (SELECT id from groups_zones WHERE id = '$parent_i' AND district_id = '$child_i' AND active = 1 AND church_id = '$church_i') AND active = 1 AND church_id = '$church_i')";

  /*supervisor*/
  } else if ($role_i == '4') {
    
      $filter_val = "AND groups_sectors.id IN (SELECT id from groups_sectors WHERE zone_id = '$child_i' AND active = 1 AND church_id = '$church_i')";

  }

  return $filter_val;

}


// if member = zone pastor 
function filterZonepastor($role_i, $filter_d, $parent_i, $child_i, $church_i){

  $filter_val = '';

  /*senior pastor*/
  if ($role_i == '1' || $role_i == '6' || $role_i == '7'){

    /*verify empty filter members*/
    if ($filter_d) {
          
      $filter_val = "AND groups_zones.id IN (SELECT id from groups_zones WHERE district_id = '$filter_d' AND active = 1 AND church_id = '$church_i')";

    }

  /*district pastor*/
  } else if ($role_i == '2') {

    $filter_val = "AND groups_zones.id IN (SELECT id from groups_zones WHERE district_id = '$parent_i' AND active = 1 AND church_id = '$church_i')";

    /*zone pastor*/
  } else if ($role_i == '3') {

    $filter_val = "AND groups_zones.id IN (SELECT id from groups_zones WHERE district_id = '$child_i' AND active = 1 AND church_id = '$church_i')";

  }

  return $filter_val;

}


// FUNCTIONS GROWTH GENERAL STATISTICS 

function multiplyGeneral($con,$church_i,$filter_graph,$period_fil3){

  // obtain overall multiply global

  // total cells
  $pre_gen_cell = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id $filter_graph", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_gen_cell = array(':church_id' => $church_i);
  $pre_gen_cell->execute($values_gen_cell);
  $result_gen_cell = $pre_gen_cell->fetch();

  $total_gen = $result_gen_cell['total_cells'];

  // actual quarter
  $pre_acc = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id AND parent_id IS NOT NULL $filter_graph", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_acc = array(':church_id' => $church_i);
  $pre_acc->execute($values_acc);
  $result_acc = $pre_acc->fetch();

  $total_acc = $result_acc['total_cells'];


  // last quarter

  // verifiy: AND parent_id IS NOT NULL
  $pre_last_cell = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 $period_fil3 AND church_id = :church_id AND parent_id IS NOT NULL $filter_graph", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_cell->execute($values_gen_cell);
  $result_last_cell = $pre_last_cell->fetch();

  $total_last_cell = $result_last_cell['total_cells'];

  // obtain advance
  $overall_advance = $total_acc - $total_last_cell;

  // obtain percentage and goal in church_goals
  $pre_percen = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 1 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen->execute($values_gen_cell);
  $result_percen = $pre_percen->fetch();

  $percentage_gen = $result_percen['percentage'];
  $goal_gen = $result_percen['value'];
  $freq = $result_percen['frequency'];

  if ($total_gen == '0') {
    $goal_f = $goal_gen;
  }else{
    $goal_f = $goal_gen * $total_gen;
  }
  

  // whole percentage
  $w_percentage = $percentage_gen * 100;

  // obtain overall of multiply
  $overall_multiply = $overall_advance * $w_percentage / $goal_f;

  return array('overall_multiply' => $overall_multiply, 'total_gen' => $total_gen, 'w_percentage' => $w_percentage, 'goal_f' => $goal_f, 'value_cell' => $goal_gen, 'frequency_cell' => $freq, 'percentage_cell' => $w_percentage, 'value_multi' => $goal_f);

}


function cellGeneral($con,$church_i,$filter_crowd,$initial_q,$final_q,$initial_q2,$final_q2,$initial_date,$final_date,$is_mobile,$period_in,$period_fn,$total_gen){

  // obtain adult points

  // actual quarter
  $pre_ac_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_q' AND '$final_q') AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_adults = array(':church_id' => $church_i);
  $pre_ac_adults->execute($values_ac_adults);
  $result_ac_adults = $pre_ac_adults->fetch();

  $total_adults = $result_ac_adults['total_adults'];

  // last quarter
  $period_filter5 = "AND (reports.created_at BETWEEN '$initial_q2' AND '$final_q2')";

   // if date filter is sent
  if ($initial_date && $final_date && empty($is_mobile)) {
    $period_filter5 = "AND (reports.created_at BETWEEN '$period_in' AND '$period_fn')";
    
  }else if ($initial_date && $is_mobile) {
    $period_filter5 = "AND (reports.created_at BETWEEN '$period_in' AND '$period_fn')";
  }

  $pre_last_adults = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter5 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_adults->execute($values_ac_adults);
  $result_last_adults = $pre_last_adults->fetch();

  $total_last_adults = $result_last_adults['total_adults'];

  if ($total_adults == null) {
    $total_adults = '0';
  } 
  if ($total_last_adults == null) {
    $total_last_adults = '0';
  }

  // obtain advance
  $adults_advance = $total_adults - $total_last_adults;

  // obtain percentage and goal in church_goals
  $pre_percen_ad = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 2 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen_ad->execute($values_ac_adults);
  $result_percen_ad = $pre_percen_ad->fetch();

  $percentage_ad = $result_percen_ad['percentage'];
  $goal_ad = $result_percen_ad['value'];
  $freq = $result_percen_ad['frequency'];

  if ($total_gen == '0') {
    $goal_f2 = $goal_ad;
  }else{
    $goal_f2 = $goal_ad * $total_gen;
  }

  // whole percentage
  $w_percentagead = $percentage_ad * 100;

  // obtain points of adults
  $points_ad = $adults_advance * $w_percentagead / $goal_f2;


  // now obtain kids points

  // actual quarter
  $pre_ac_kids = $con->prepare("SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_q' AND '$final_q') AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_kids = array(':church_id' => $church_i);
  $pre_ac_kids->execute($values_ac_kids);
  $result_ac_kids = $pre_ac_kids->fetch();

  $total_kids2 = $result_ac_kids['total_kids'];

  // last quarter
  $pre_last_kids = $con->prepare("SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter5 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_kids->execute($values_ac_kids);
  $result_last_kids = $pre_last_kids->fetch();

  $total_last_kids = $result_last_kids['total_kids'];

  if ($total_kids2 == null) {
    $total_kids2 = '0';
  } 
  if ($total_last_kids == null) {
    $total_last_kids = '0';
  }

  // obtain advance
  $kids_advance = $total_kids2 - $total_last_kids;

  // obtain percentage and goal in church_goals
  $pre_percen_kd = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 3 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen_kd->execute($values_ac_kids);
  $result_percen_kd = $pre_percen_kd->fetch();

  $percentage_kd = $result_percen_kd['percentage'];
  $goal_kd = $result_percen_kd['value'];
  $freq2 = $result_percen_kd['frequency'];

  if ($total_gen == '0') {
    $goal_f3 = $goal_kd;
  }else{
    $goal_f3 = $goal_kd * $total_gen;
  }

  // whole percentage
  $w_percentagekd = $percentage_kd * 100;

  // obtain points of kids
  $points_kd = $kids_advance * $w_percentagekd / $goal_f3;

  // FINAL OVERALL CELL ATTENDANCE
  $overall_attend = $points_ad + $points_kd;

  return array('overall_attend' => $overall_attend, 'w_percentagekd' => $w_percentagekd, 'w_percentagead' => $w_percentagead, 'goal_f2' => $goal_f2, 'goal_f3' => $goal_f3, 'period_filter5' => $period_filter5,'value_adults' => $goal_ad, 'frequency_adults' => $freq, 'percentage_adults' => $w_percentagead, 'value_multi1' => $goal_f2,'value_kid' => $goal_kd, 'frequency_kid' => $freq2, 'percentage_kid' => $w_percentagekd, 'value_multi2' => $goal_f3);

}

// ($con,$church_i,$filter_graph,$initial_date,$final_date,$mobile,$period_fil3,$initial_q,$final_q,$initial_q2,$final_q2,$period_in,$period_fn,$start_date_lg,$end_date_lg,$sub_i,$sub_p)

function churchGeneral($con,$church_i,$filter_crowd,$initial_q,$final_q,$period_fil5,$total_gen){

  // obtain church_attendance global

  // actual quarter
  $pre_ac_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_q' AND '$final_q') AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_church = array(':church_id' => $church_i);
  $pre_ac_church->execute($values_ac_church);
  $result_ac_church = $pre_ac_church->fetch();

  $total_doctrine = $result_ac_church['total_doctrine'];

  // last quarter
  $pre_last_church = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_fil5 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_church->execute($values_ac_church);
  $result_last_church = $pre_last_church->fetch();

  $total_last_church = $result_last_church['total_doctrine'];

  if ($total_doctrine == null) {
    $total_doctrine = '0';
  }
  if ($total_last_church == null) {
    $total_last_church = '0';
  }

  // obtain advance
  $church_advance = $total_doctrine - $total_last_church;

  // obtain percentage and goal in church_goals
  $pre_percen_ch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 4 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen_ch->execute($values_ac_church);
  $result_percen_ch = $pre_percen_ch->fetch();

  $percentage_ch = $result_percen_ch['percentage'];
  $goal_ch = $result_percen_ch['value'];
  $freq = $result_percen_ch['frequency'];

  if ($total_gen == '0') {
    $goal_f4 = $goal_ch;
  }else{
    $goal_f4 = $goal_ch * $total_gen;
  }

  // whole percentage
  $w_percentagech = $percentage_ch * 100;

  // obtain overall of church
  $overall_church = $church_advance * $w_percentagech / $goal_f4;

  return array('overall_church' => $overall_church, 'w_percentagech' => $w_percentagech, 'goal_f4' => $goal_f4,'value_church' => $goal_ch, 'frequency_church' => $freq, 'percentage_church' => $w_percentagech, 'value_multi' => $goal_f4);

}


function perfomanceGeneral($con,$church_i,$filter_crowd,$initial_q,$final_q,$total_gen){

  // obtain salvation global

  // actual quarter
  $pre_ac_salv = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_q' AND '$final_q') AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_salv = array(':church_id' => $church_i);
  $pre_ac_salv->execute($values_ac_salv);
  $result_ac_salv = $pre_ac_salv->fetch();

  $total_salvation = $result_ac_salv['total_salvation'];

  // obtain percentage and goal in church_goals
  $pre_percen_sv = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 5 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen_sv->execute($values_ac_salv);
  $result_percen_sv = $pre_percen_sv->fetch();

  $percentage_sv = $result_percen_sv['percentage'];
  $goal_sv = $result_percen_sv['value'];
  $freq = $result_percen_sv['frequency'];

  if ($total_gen == '0') {
    $goal_f5 = $goal_sv;
  }else{
    $goal_f5 = $goal_sv * $total_gen;
  }

  // whole percentage
  $w_percentagesv = $percentage_sv * 100;

  // obtain points of salvation
  $points_salvation = $total_salvation * $w_percentagesv / $goal_f5;


  // obtain baptized global

  // actual quarter
  $pre_ac_bap = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_q' AND '$final_q') AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_bap = array(':church_id' => $church_i);
  $pre_ac_bap->execute($values_ac_bap);
  $result_ac_bap = $pre_ac_bap->fetch();

  $total_baptized = $result_ac_bap['total_baptized'];

  // obtain percentage and goal in church_goals
  $pre_percen_bp = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 6 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen_bp->execute($values_ac_bap);
  $result_percen_bp = $pre_percen_bp->fetch();

  $percentage_bp = $result_percen_bp['percentage'];
  $goal_bp = $result_percen_bp['value'];
  $freq2 = $result_percen_sv['frequency'];

  if ($total_gen == '0') {
    $goal_f6 = $goal_bp;
  }else{
    $goal_f6 = $goal_bp * $total_gen;
  }

  // whole percentage
  $w_percentagebp = $percentage_bp * 100;

  // obtain points of salvation
  $points_baptized = $total_baptized * $w_percentagebp / $goal_f6;


  // obtain scheduled global

  // actual quarter
  $pre_ac_sched = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id AND (reports.created_at BETWEEN '$initial_q' AND '$final_q') AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_sched = array(':church_id' => $church_i);
  $pre_ac_sched->execute($values_ac_sched);
  $result_ac_sched = $pre_ac_sched->fetch();

  $total_schedule = $result_ac_sched['total_schedule_visits'];

  // obtain percentage and goal in church_goals
  $pre_percen_sch = $con->prepare("SELECT * FROM `church_goals` WHERE goal = 7 AND church_id = :church_id", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_percen_sch->execute($values_ac_bap);
  $result_percen_sch = $pre_percen_sch->fetch();

  $percentage_sch = $result_percen_sch['percentage'];
  $goal_sch = $result_percen_sch['value'];
  $freq3 = $result_percen_sv['frequency'];

  if ($total_gen == '0') {
    $goal_f7 = $goal_sch;
  }else{
    $goal_f7 = $goal_sch * $total_gen;
  }

  // whole percentage
  $w_per_sch = $percentage_sch * 100;

  // obtain points of schedule
  $points_sche = $total_schedule * $w_per_sch / $goal_f7;

  // FINAL OVERALL PERFOMANCE
  $overall_perfomance = $points_salvation + $points_baptized + $points_sche;

  return array('overall_perfomance' => $overall_perfomance, 'w_percentagesv' => $w_percentagesv, 'w_percentagebp' => $w_percentagebp, 'w_per_sch' => $w_per_sch, 'goal_f5' => $goal_f5, 'goal_f6' => $goal_f6, 'goal_f7' => $goal_f7,'value_salvation' => $goal_sv, 'frequency_salvation' => $freq, 'percentage_salvation' => $w_percentagesv, 'value_multi' => $goal_f5, 'value_baptized' => $goal_bp, 'frequency_baptized' => $freq2, 'percentage_baptized' => $w_percentagebp, 'value_multi2' => $goal_f6, 'value_visit' => $goal_sch, 'frequency_visit' => $freq3, 'percentage_visit' => $w_per_sch, 'value_multi3' => $goal_f7);

}

/*last period*/

function MultiplyGeneral2($con,$church_i,$filter_graph,$initial_q,$final_q,$initial_q2,$final_q2,$period_in,$period_fn,$start_date_lg,$end_date_lg,$initial_date,$final_date,$is_mobile,$sub_i,$sub_p,$w_percentage,$goal_f){

  // obtain overall multiply global

  // actual quarter
  $period_filter6 = "AND (created_at BETWEEN '$initial_q2' AND '$final_q2')";

   // if date filter is sent
  if ($initial_date && $final_date && empty($is_mobile)) {
    $period_filter6 = "AND (created_at BETWEEN '$period_in' AND '$period_fn')";
    
  }else if ($initial_date && $is_mobile) {
    $period_filter6 = "AND (created_at BETWEEN '$period_in' AND '$period_fn')";
  }

  $pre_ac_cell2 = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 AND church_id = :church_id $filter_graph", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_cell2 = array(':church_id' => $church_i);
  $pre_ac_cell2->execute($values_ac_cell2);
  $result_ac_cell2 = $pre_ac_cell2->fetch();

  $total_cells2 = $result_ac_cell2['total_cells'];

  // last quarter
  $period_filter_n = "AND (created_at BETWEEN '$initial_q2' AND '$final_q2')";

  $past_i = '';
  $past_f = '';

   // if date filter is sent
  if ($initial_date && $final_date && empty($is_mobile)) {
      /*count the days between two dates*/
      $date_a = date_create($sub_i);
      $date_b = date_create($sub_p);

      //difference between two dates
      $diff_a = date_diff($date_a,$date_b)->format("%a");

      $past_i = date('Y-m-d H:i:s', strtotime($sub_i. " - " . $diff_a . " days"));
      $subtract = date('Y-m-d', strtotime($sub_i. " - 1 days"));
      $past_f = $subtract . " 23:59:59";

      $period_filter_n = "AND (created_at BETWEEN '$past_i' AND '$past_f')";
          
  }else if ($initial_date && $is_mobile) {
      /*count the days between two dates*/
      $date_a = date_create($sub_i);
      $date_b = date_create($sub_p);

      //difference between two dates
      $diff_a = date_diff($date_a,$date_b)->format("%a");

      $past_i = date('Y-m-d H:i:s', strtotime($sub_i. " - " . $diff_a . " days"));
      $subtract = date('Y-m-d', strtotime($sub_i. " - 1 days"));
      $past_f = $subtract . " 23:59:59";

      $period_filter_n = "AND (created_at BETWEEN '$past_i' AND '$past_f')";
  }

  $pre_last_cell2 = $con->prepare("SELECT count(id) as total_cells FROM groups_cells WHERE active = 1 $period_filter_n AND church_id = :church_id $filter_graph", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_cell2->execute($values_ac_cell2);
  $result_last_cell2 = $pre_last_cell2->fetch();

  $total_last_cell2 = $result_last_cell2['total_cells'];

  // obtain advance
  $overall_advance2 = $total_cells2 - $total_last_cell2;

  // obtain percentage and goal in church_goals
  // obtain overall of multiply
  $overall_multiply2 = $overall_advance2 * $w_percentage / $goal_f;

  return array('overall_multiply2' => $overall_multiply2, 'period_filter6' => $period_filter6, 'period_filter_n' => $period_filter_n, 'past_i' => $past_i, 'past_f' => $past_f);

}


function CellGeneral2($con,$church_i,$filter_crowd,$initial_q2,$final_q2,$period_in,$period_fn,$initial_date,$final_date,$is_mobile,$start_date_lg,$end_date_lg,$past_i,$past_f,$w_percentagead,$goal_f2,$w_percentagekd,$goal_f3){

  // obtain cell_attendance global

  // obtain adult points

  // actual quarter
  $period_filter7 = "AND (reports.created_at BETWEEN '$initial_q2' AND '$final_q2')";

   // if date filter is sent
  if ($initial_date && $final_date && empty($is_mobile)) {
    $period_filter7 = "AND (reports.created_at BETWEEN '$period_in' AND '$period_fn')";
    
  }else if ($initial_date && $is_mobile) {
    $period_filter7 = "AND (reports.created_at BETWEEN '$period_in' AND '$period_fn')";
  }

  $pre_ac_adults2 = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter7 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_adults2 = array(':church_id' => $church_i);
  $pre_ac_adults2->execute($values_ac_adults2);
  $result_ac_adults2 = $pre_ac_adults2->fetch();

  $total_adults2 = $result_ac_adults2['total_adults'];

  // last quarter
  $period_filter_n2 = "AND (reports.created_at BETWEEN '$start_date_lg' AND '$end_date_lg')";

   // if date filter is sent
  if ($initial_date && $final_date && empty($is_mobile)) {
    $period_filter_n2 = "AND (reports.created_at BETWEEN '$past_i' AND '$past_f')";
    
  }else if ($initial_date && $is_mobile) {
    $period_filter_n2 = "AND (reports.created_at BETWEEN '$past_i' AND '$past_f')";
  }

  $pre_last_adults2 = $con->prepare("SELECT SUM(total_member_assistance + total_guest_assistance) as total_adults FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter_n2 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_adults2->execute($values_ac_adults2);
  $result_last_adults2 = $pre_last_adults2->fetch();

  $total_last_adults2 = $result_last_adults2['total_adults'];

  if ($total_adults2 == null) {
    $total_adults2 = '0';
  } 
  if ($total_last_adults2 == null) {
    $total_last_adults2 = '0';
  }

  // obtain advance
  $adults_advance2 = $total_adults2 - $total_last_adults2;

  // obtain percentage and goal in church_goals
  // obtain points of adults
  $points_ad2 = $adults_advance2 * $w_percentagead / $goal_f2;


  // now obtain kids points
  // actual quarter
  $pre_ac_kids2 = $con->prepare("SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter7 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_kids2 = array(':church_id' => $church_i);
  $pre_ac_kids2->execute($values_ac_kids2);
  $result_ac_kids2 = $pre_ac_kids2->fetch();

  $total_kidsf = $result_ac_kids2['total_kids'];

  // last quarter
  $pre_last_kids2 = $con->prepare("SELECT SUM(total_kids_assistance) as total_kids FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter_n2 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_kids2->execute($values_ac_kids2);
  $result_last_kids2 = $pre_last_kids2->fetch();

  $total_last_kids2 = $result_last_kids2['total_kids'];

  if ($total_kidsf == null) {
    $total_kidsf = '0';
  } 
  if ($total_last_kids2 == null) {
    $total_last_kids2 = '0';
  }

  // obtain advance
  $kids_advance2 = $total_kidsf - $total_last_kids2;

  // obtain percentage and goal in church_goals
  // obtain points of kids
  $points_kd2 = $kids_advance2 * $w_percentagekd / $goal_f3;

  // FINAL OVERALL CELL ATTENDANCE
  $overall_attend2 = $points_ad2 + $points_kd2;

  return array('overall_attend2' => $overall_attend2, 'period_filter7' => $period_filter7, 'period_filter_n2' => $period_filter_n2);

}

function churchGeneral2($con,$church_i,$filter_crowd,$period_filter7,$period_filter_n2,$w_percentagech,$goal_f4){

  $pre_ac_church2 = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter7 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_church2 = array(':church_id' => $church_i);
  $pre_ac_church2->execute($values_ac_church2);
  $result_ac_church2 = $pre_ac_church2->fetch();

  $total_doctrine2 = $result_ac_church2['total_doctrine'];

  // last quarter
  $pre_last_church2 = $con->prepare("SELECT SUM(total_doctrine + total_celebration) as total_doctrine FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter_n2 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $pre_last_church2->execute($values_ac_church2);
  $result_last_church2 = $pre_last_church2->fetch();

  $total_last_church2 = $result_last_church2['total_doctrine'];

  if ($total_doctrine2 == null) {
    $total_doctrine2 = '0';
  }
  if ($total_last_church2 == null) {
    $total_last_church2 = '0';
  }

  // obtain advance
  $church_advance2 = $total_doctrine2 - $total_last_church2;

  // obtain percentage and goal in church_goals
  // obtain overall of church
  $overall_church2 = $church_advance2 * $w_percentagech / $goal_f4;

  return $overall_church2;

}

function perfomanceGeneral2($con,$church_i,$filter_crowd,$period_filter7,$w_percentagesv,$w_percentagebp,$w_per_sch,$goal_f5,$goal_f6,$goal_f7){

  // obtain salvation global
  // actual quarter
  $pre_ac_salv2 = $con->prepare("SELECT SUM(total_salvation) as total_salvation FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter7 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_salv2 = array(':church_id' => $church_i);
  $pre_ac_salv2->execute($values_ac_salv2);
  $result_ac_salv2 = $pre_ac_salv2->fetch();

  $total_salvation2 = $result_ac_salv2['total_salvation'];

  // obtain percentage and goal in church_goals
  // obtain points of salvation
  $points_salvation2 = $total_salvation2 * $w_percentagesv / $goal_f5;


  // obtain baptized global

  // actual quarter
  $pre_ac_bap2 = $con->prepare("SELECT SUM(total_baptized) as total_baptized FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter7 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_bap2 = array(':church_id' => $church_i);
  $pre_ac_bap2->execute($values_ac_bap2);
  $result_ac_bap2 = $pre_ac_bap2->fetch();

  $total_baptized2 = $result_ac_bap2['total_baptized'];

  // obtain percentage and goal in church_goals
  // obtain points of salvation
  $points_baptized2 = $total_baptized2 * $w_percentagebp / $goal_f6;


  // obtain scheduled global
  // actual quarter
  $pre_ac_sched2 = $con->prepare("SELECT SUM(total_schedule_visits) as total_schedule_visits FROM reports, groups_cells WHERE groups_cells.id = reports.cell_id $period_filter7 AND groups_cells.church_id = :church_id $filter_crowd", array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

  $values_ac_sched2 = array(':church_id' => $church_i);
  $pre_ac_sched2->execute($values_ac_sched2);
  $result_ac_sched2 = $pre_ac_sched2->fetch();

  $total_schedule2 = $result_ac_sched2['total_schedule_visits'];

  // obtain percentage and goal in church_goals
  // obtain points of schedule
  $points_sche2 = $total_schedule2 * $w_per_sch / $goal_f7;

  // FINAL OVERALL PERFOMANCE
  $overall_perfomance2 = $points_salvation2 + $points_baptized2 + $points_sche2;

  return $overall_perfomance2;

}

$app->map(['GET', 'POST', 'PUT', 'DELETE', 'PATCH'], '/{routes:.+}', function($req, $res) {
    $handler = $this->notFoundHandler; // handle using the default Slim page not found handler
    return $handler($req, $res);
});


$app->run();